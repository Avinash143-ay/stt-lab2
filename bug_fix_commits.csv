Hash,Message,Hashes of parents,Is a merge commit?,List of modified files
6cef36d23a0e225c36e727815553c60225b066f9,Add a test for cartesian join; cosmetic changes to conform to project style.,['f1e267029736af9d108f9f13b2849e939e13ca18'],False,"['AbstractEnumerable2.java', 'DefaultEnumerable.java', 'DefaultQueryable.java', 'ExtendedEnumerable.java', 'ExtendedQueryable.java', 'Extensions.java', 'QueryProvider.java', 'BinaryExpression.java', 'BlockExpression.java', 'CallSiteBinder.java', 'CatchBlock.java', 'ConditionalExpression.java', 'ConstantExpression.java', 'DefaultExpression.java', 'DynamicExpression.java', 'ElementInit.java', 'Expression.java', 'ExpressionType.java', 'ExpressionVisitor.java', 'Expressions.java', 'GotoExpression.java', 'IndexExpression.java', 'InvocationExpression.java', 'LabelExpression.java', 'LabelTarget.java', 'ListInitExpression.java', 'LoopExpression.java', 'MemberAssignment.java', 'MemberBinding.java', 'MemberExpression.java', 'MemberInitExpression.java', 'MemberListBinding.java', 'MemberMemberBinding.java', 'MethodCallExpression.java', 'NewArrayExpression.java', 'NewExpression.java', 'ParameterExpression.java', 'SwitchCase.java', 'SwitchExpression.java', 'TryExpression.java', 'TypeBinaryExpression.java', 'UnaryExpression.java', 'package-info.java', 'BigDecimalFunction1.java', 'DoubleFunction1.java', 'EqualityComparer.java', 'FloatFunction1.java', 'Function0.java', 'IntegerFunction1.java', 'LongFunction1.java', 'NullableBigDecimalFunction1.java', 'NullableDoubleFunction1.java', 'NullableFloatFunction1.java', 'NullableIntegerFunction1.java', 'NullableLongFunction1.java', 'package-info.java', 'package-info.java', 'Linq4jTest.java']"
fdfce20aeb06eb6201bbf138abe4504898215d30,More work on expressions; still broken.,['eecfcbb3bba4fd034ee9090cafa683d61154dc3c'],False,"['DefaultEnumerable.java', 'ExtendedEnumerable.java', 'Extensions.java', 'BinaryExpression.java', 'BlockExpression.java', 'ConditionalExpression.java', 'ConstantExpression.java', 'DefaultExpression.java', 'DynamicExpression.java', 'Expression.java', 'ExpressionCompiler.java', 'Expressions.java', 'FunctionExpression.java', 'GotoExpression.java', 'IndexExpression.java', 'InvocationExpression.java', 'LabelExpression.java', 'LambdaExpression.java', 'ListInitExpression.java', 'LoopExpression.java', 'MemberExpression.java', 'MemberInitExpression.java', 'MethodCallExpression.java', 'NewArrayExpression.java', 'NewExpression.java', 'ParameterExpression.java', 'SwitchExpression.java', 'TryExpression.java', 'TypeBinaryExpression.java', 'UnaryExpression.java', 'Linq4jTest.java']"
9c1088980c4cc27cd65b9c7bcd0fa7a0213098d2,Fix formatting; fix logic (takeWhile should stop after predicate returns false); implement skip & skipWhile.,['46bbb71867428b6ce2906a89e0a2492c6e879805'],False,"['README.md', 'DefaultEnumerable.java', 'DefaultQueryable.java', 'EnumerableQueryable.java', 'ExtendedEnumerable.java', 'ExtendedQueryable.java', 'Extensions.java', 'Expressions.java', 'Functions.java', 'Linq4jTest.java']"
a7bfd2544326319d9bd0973a25c7c067a131cc21,Cosmetic changes.,['99785f20ca32248578829c10445faa4dc7d21a2e'],False,"['Demo.java', 'JdbcExample.java', 'IterCalcRel.java', 'OJRexImplementorTableImpl.java', 'PushProjector.java', 'RelOptNode.java', 'CompoundParallelTupleIter.java', 'ExtraSqlTypes.java', 'SqlValidatorImpl.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'SamplePlugin.java', 'BitString.java', 'NlsString.java', 'RhBase64.java', 'AbstractResultSet.java']"
19ec58439f0a078baee77f06da78f678dac19453,Fix for API changes in janino-2.6.1.,['2c4f68cd802f1def47115cc235666a6afd115737'],False,['JaninoCompiler.java']
8d5dd1ce359fd8d8b7f4b622d28c0a24ce79427e,"Support for GROUP BY. Add rule and rel for aggregation implemented by generating code that implements Enumerable. (Not fully working.)

Match changes to linq4j for array-access.",['19ec58439f0a078baee77f06da78f678dac19453'],False,"['OptiqPrepareImpl.java', 'JavaRules.java', 'RexToLixTranslator.java', 'Executable.java', 'JdbcTest.java']"
2ef1b05445c115f5a96b34344a3ef76ded5faa3e,Implement UNION. (Queries can plan but currently run into a bug while implementing them.),['4e36baf82656844e0648f6bf04bbb219188cf23e'],False,"['OptiqPrepareImpl.java', 'JavaRules.java', 'IterConcatenateRel.java', 'IntersectRel.java', 'MinusRel.java', 'SetOpRel.java', 'UnionRel.java', 'JdbcTest.java']"
f2adf52adfd1cc88dbca650361641874f9c5de12,Introduce Visitor for expressions (not complete; still compile errors).,['8faca567e880995c007371e73bb25290ee7e486c'],False,"['BinaryExpression.java', 'BlockBuilder.java', 'BlockExpression.java', 'ConditionalStatement.java', 'ConstantExpression.java', 'DeclarationExpression.java', 'DefaultExpression.java', 'DynamicExpression.java', 'Expression.java', 'Expressions.java', 'FunctionExpression.java', 'GotoExpression.java', 'IndexExpression.java', 'LabelExpression.java', 'LambdaExpression.java', 'LoopExpression.java', 'MemberExpression.java', 'MethodCallExpression.java', 'Node.java', 'ParameterExpression.java', 'Statement.java', 'UnaryExpression.java', 'Visitor.java', 'WhileExpression.java']"
5bd484360599be816823914b462d412be8f11fb5,Fix CheapestPlanReplacer to not mutate RelNodes.,['2ef1b05445c115f5a96b34344a3ef76ded5faa3e'],False,"['RexToLixTranslator.java', 'RelSubset.java']"
5e69b0651572000233535215d084fcb7843d6eb7,"Union & concat almost work, except for a bug in the cursor.",['5bd484360599be816823914b462d412be8f11fb5'],False,"['JavaRules.java', 'ArrayEnumeratorCursor.java']"
1f8f4a94b76c31f92bb1ce5a62a2c3a0cb05874d,Fix package-infos.,['d818d2a2d97d2845a9da67c0f732f31140295e31'],False,"['package-info.java', 'package-info.java', 'package-info.java']"
1f28389d31a2ef50c8af1bbc68f8c14fe6ffefa1,"Break Extensions into QueryableDefaults and EnumerableDefaults. Add OpType and OpQueryable.

Move QueryProviderImpl.executeQuery(QueryableImpl) up to become QueryProvider.executeQuery(Queryable).",['32e6e8a60729dcf6b7509b8d5a74b44a51ae2af1'],False,"['misc.xml', 'BaseQueryable.java', 'DefaultEnumerable.java', 'DefaultQueryable.java', 'Enumerable.java', 'EnumerableDefaults.java', 'EnumerableOrderedQueryable.java', 'EnumerableQueryable.java', 'ExtendedEnumerable.java', 'Extensions.java', 'Linq4j.java', 'LookupImpl.java', 'OpType.java', 'QueryProvider.java', 'QueryProviderImpl.java', 'QueryableDefaults.java', 'Types.java', 'Linq4jTest.java']"
4099d2b7dda180fc1195a51d5ae907b0fab9aa57,"Driver passes on other databases' URLs, per JDBC spec. (Fix from Chris Wensel.)",['863300f8a8f625ae8032f6aeeaffeef74a00625b'],False,['UnregisteredDriver.java']
e4fc049a786da95cf0c52741e77df296d9217003,Code generation fixes: empty anonymous class; type variable return type when generating a lambda.,['f001ce219f9952c9788f50232d548c9d53fc6906'],False,"['Expressions.java', 'FunctionExpression.java']"
c4e99f5d64e6b2cec917b92c6fa441c13a11d167,Changes for the Splunk adapter (optiq-splunk).,['836e041f035bc8d9c8a3c394338378601492abab'],False,"['Maven__net_sf_opencsv_opencsv_2_3.xml', 'NOTICE', 'optiq.iml', 'pom.xml']"
4d009ecbbb73946f63f33fc4b242c27b019edb14,"Remove addUnadvertisedFields method: this is now done by RelFieldTrimmer.
Disable field-trimming until we fix tests.",['448b179fcc9404f700717121a339aff37d3ef215'],False,['OptiqPrepareImpl.java']
f7acf9ef63083f84ddfdb4dac0eecdf6b68632c8,Break out JavaRecordType and JavaTypeFactoryImpl as top-level classes. They are subject to change -- that's why they were private. Fixes https://github.com/julianhyde/optiq/pull/1.,['4076aa4247dba71ea88e92198a0a28876735f136'],False,"['JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'OptiqConnectionImpl.java']"
6e958ed6fbf8a6bf4552ec0e7d0babafa891c1f8,Fix a couple of type parameters.,['e9f785c1426fa298d1eb85c2ec45e062535cd615'],False,['QueryableRelBuilder.java']
f3f5c360dc087607a8c03b688dcc4756afea6d10,Fix type parameters for EqualityComparer parameters.,['01dc61bcddd95f328fd5ceac4aead4663417c75b'],False,"['QueryableFactory.java', 'QueryableRecorder.java']"
06a67b799ee1584b8876731e931ff621ced3d6e9,"Add groupBy method to Enumerable that populates an accumulator, rather than building an expensive list of all records in the group. It is similar to Enumerable.aggregate, except that it supports keys. Also a similar groupBy method that has an additional EqualityComparer parameter.

Add an enum Primitive to make it easier to manage primitive classes (e.g. int) and their boxing classes (e.g. Integer). Fix how constants are generated, and how say Long is converted to Integer.",['c0f3b4a7443737373430ec0a9b0b98d8baa2211d'],False,"['DefaultEnumerable.java', 'EnumerableDefaults.java', 'ExtendedEnumerable.java', 'Linq4j.java', 'BinaryExpression.java', 'ConstantExpression.java', 'Expressions.java', 'FunctionExpression.java', 'Primitive.java', 'Types.java', 'ExpressionTest.java', 'Linq4jTest.java']"
a18bd7d61d3d8fed6da419125be5036d51ed4bb6,Fix for JDK 1.6.,['56c6c0b4c48e31768dd5adc81f922173464b6727'],False,['OptiqConnection.java']
39284afe64c4f7cfe0275e0342f6c00c352596d4,"Convert some RelDataType[] to List<RelDataType> for easier functional programming.

Fix some tests in SqlToRelConverterTest. All now pass.

Add Pair.zip(Iterator,Iterator).",['aa2499ecf1ce6592ba62e67d0cccf07978484dba'],False,"['SetOpRel.java', 'RelOptUtil.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'ExplicitOperatorBinding.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlBetweenOperator.java', 'SqlCaseOperator.java', 'SqlInOperator.java', 'SqlLiteralChainOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetValueConstructor.java', 'SqlRowOperator.java', 'MultisetOperandTypeChecker.java', 'SetopOperandTypeChecker.java', 'SqlTypeFactoryImpl.java', 'SqlTypeStrategies.java', 'SqlTypeUtil.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'CompositeList.java', 'Pair.java', 'OptiqAssert.java', 'DiffRepository.java', 'SqlToRelConverterTest.ref.xml']"
b2ed7dbae285f26939e7817f23c5458777f8248e,"Implement DatabaseMetaData methods needed by Mondrian, including getTables and getColumns. Meta is a helper class that can be extended to implement other metadata methods such as getSchemas.

This is a breaking change, because it adds two methods to the Schema API: getTableNames and getSubSchemaNames.",['39284afe64c4f7cfe0275e0342f6c00c352596d4'],False,"['Schema.java', 'DelegatingSchema.java', 'MapSchema.java', 'JdbcSchema.java', 'Meta.java', 'OptiqConnectionImpl.java', 'OptiqDatabaseMetaData.java', 'JdbcFrontJdbcBackTest.java', 'JdbcTest.java']"
9eb960426e1965463d1e1da2be38bd64b87326d8,Implement IS NULL. Improve conversions. Fix off-by-one in OptiqResultSet.getDouble.,['7923b25205ed910b8ac12518fb3db22286249646'],False,"['OptiqResultSet.java', 'JavaRules.java', 'RexToLixTranslator.java', 'JdbcFrontLinqBackTest.java']"
814b67967ac25ce4dc230585fc621cf5a525ef21,Fix for JDK 1.6 (Connection.setSchema only exists in JDK 1.7).,['7c3251efc6a97cc7005d27353efcbe3ce6a339b2'],False,"['JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'OptiqAssert.java']"
c678d862d177eec21b0ecc1ff8acf92512185315,Delete intellij workspace from git. It changes too often.,['814b67967ac25ce4dc230585fc621cf5a525ef21'],False,['workspace.xml']
af4bd9fc368318a930e4e6e1a0bb88555af71efe,Bit bugs.,['3840bddb9f313b74eaad43b32f5fd41359804ad4'],False,"['ArrayTable.java', 'ColumnLoader.java', 'ArrayTableTest.java']"
eb2f9fae8d73809ba79a53ab03f0d5a0eb862d0f,"ColumnLoader: fix issues with nulls, and add tests.

ResultSetMetaData: don't ask for precision of a String column.

Add class Ord, like Util.zip but each record has an index.

Implement VALUES operator. Add EnumerableValuesRel. Implements Values in Enumerable calling convention.

Fix translation to Java of BigDecimal literal.",['af4bd9fc368318a930e4e6e1a0bb88555af71efe'],False,"['ColumnLoader.java', 'Meta.java', 'OptiqPrepareImpl.java', 'JavaRules.java', 'RexToLixTranslator.java', 'ValuesRelBase.java', 'NestedLoopsJoinRule.java', 'RelDataTypeFactoryImpl.java', 'RexProgramBuilder.java', 'Ord.java', 'Pair.java', 'ArrayTableTest.java', 'JdbcTest.java']"
04816fe7a9a8ff367e2bdb6007f89158b6c2554e,Fix result for testCase.,['97c9eadd774cfa4e322ce253f4e9d317f9332d85'],False,"['jhyde.xml', 'JdbcFrontJdbcBackTest.java']"
e8d550847d82be4df3a8c65d458453a1dcf6c503,"Add PhysType, which allows Java relational expressions to have multiple ways of representing a row in Java. Currently a row can be an empty list (if there are 0 fields) a scalar (if there is 1 field), a synthetic class or an array of Objects (if there are more than 1 field). Of the last 2, the synthetic class is preferred, because it uses primitive values and therefore avoids boxing if the value is not nullable.

Also add ModifiableTable, which permits implementation of INSERT.

Remove mergeTraitsAndConvert method. (It was more verbose than the code inside it.)",['0704d8c31e98595ec0d43eb860a38fd3a09792c3'],False,"['BuiltinMethod.java', 'ModifiableTable.java', 'Table.java', 'TranslatableTable.java', 'ArrayTable.java', 'CloneSchema.java', 'ListTable.java', 'JavaTypeFactory.java', 'ReflectiveSchema.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcUtils.java', 'JavaTypeFactoryImpl.java', 'Meta.java', 'OptiqPrepare.java', 'OptiqResultSet.java', 'OptiqPrepareImpl.java', 'QueryableRelBuilder.java', 'EnumerableConvention.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'JavaRowFormat.java', 'JavaRules.java', 'PhysType.java', 'PhysTypeImpl.java', 'RexToLixTranslator.java', 'RecordEnumeratorCursor.java', 'SqlFunctions.java', 'Typed.java', 'Utilities.java', 'IterRules.java', 'JavaRel.java', 'PreparedExecution.java', 'Convention.java', 'RelOptRule.java', 'RelOptTable.java', 'RelDataType.java', 'RelDataTypeField.java', 'RelRecordType.java', 'SqlToRelConverter.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'MockCatalogReader.java', 'SqlToRelTestBase.java']"
bbc77386139dbd184e2f7f92495f2add9bb53322,"RexToLixTranslator now takes a callback that determines how input records & fields are converted to expressions. It also takes a BlockBuilder, rather than a list of Statement, and the BlockBuilder takes more of the responsibility for assigning common expressions to variables. Move functionality from PhysType into JavaRowFormat.

Make UnregisteredDriver.JdbcVersion a bit more public.

Fix Utilities for JDK 1.6.",['e0929487321e566aa8ce879d2fc0754dccf1670c'],False,"['UnregisteredDriver.java', 'JavaRowFormat.java', 'JavaRules.java', 'PhysTypeImpl.java', 'RexToLixTranslator.java', 'Utilities.java']"
ad9d3e6485f27e1462a20a0df2fabdabb6870cff,"BlockBuilder now optimizes, eliminating common sub-expressions and avoiding declaring variables for expressions that are only used once.

Some changes to Visitor.

Optional modifier for ParameterExpression (used to make parameters of methods and constructors final, but currently ignored for variables and data members).

Add Ord class, to provide a iteration with ordinal.",['45bfa651c87478a9e5e323643774f6336869792f'],False,"['Ord.java', 'BlockBuilder.java', 'ConstantExpression.java', 'ConstructorDeclaration.java', 'DeclarationExpression.java', 'Expressions.java', 'FieldDeclaration.java', 'FunctionExpression.java', 'MethodDeclaration.java', 'ParameterExpression.java', 'Visitor.java', 'ExpressionTest.java']"
081a8f8e1d4a6e39b4ec639e8411c579d6cb928e,Fix SqlToRelConverterTest reference log.,['7731dea9f5ca638fb101edff3985b5e2e2651e6c'],False,['SqlToRelConverterTest.ref.xml']
92f7da95fb33743feb90261b99e4b79e2f63c6a9,"Add OptiqSqlOperatorTest (disabled, because 96 failures at present). Rename SqlOperatorTests to SqlOperatorBaseTest.",['081a8f8e1d4a6e39b4ec639e8411c579d6cb928e'],False,"['OptiqPrepareImpl.java', 'JavaRules.java', 'Bug.java', 'JdbcTest.java', 'OptiqAssert.java', 'OptiqSqlOperatorTest.java', 'SqlOperatorBaseTest.java', 'SqlOperatorTest.java', 'SqlValidatorTestCase.java']"
a48c9a6b45f60973e9c8373fbe393d5ec78d02f6,"Fix various type-conversion issues, in particular finding the GCD of types.",['b3f65c980254fbd0816778f7281e198b254baa19'],False,"['BlockBuilder.java', 'Expressions.java', 'Primitive.java', 'Types.java', 'Functions.java', 'TypeTest.java', 'ExpressionTest.java', 'PrimitiveTest.java']"
dedbfce3a74d94ebc1cd5797d3fd9d5f42cdbdc3,A few more SQL operators and fixes.,['ad7b5b963303b9fd13395660f35917d19d942f11'],False,"['RexImpTable.java', 'RexToLixTranslator.java', 'SqlFunctions.java']"
e272f43e2336770f0ed678beec993b94813dadbc,Trace generated Java code; fix typo.,['78349e96b9861e187a306d88b7b227a7762c3dfd'],False,"['OptiqPrepareImpl.java', 'RexBuilder.java']"
cffef7946a02b91684aefc2ac778210bd6bc1bd0,Fix bug counting number of records inserted; linq4j was incorrectly inlining a variable.,['e272f43e2336770f0ed678beec993b94813dadbc'],False,"['JavaRules.java', 'JdbcFrontLinqBackTest.java']"
5d5ef60e1930cf14e2930bd8b1639e61a26ed564,Make tests deterministic (fixes for JDK 1.8).,['97e9bc0d6d18b61aeb7e1ceb8fdd3c7a88009cb4'],False,['Linq4jTest.java']
8d20f716ce9443cb9c91c675428af9c75b7ee034,"When using VALUES inside INSERT, types of values are determined by the target column types. This prevents spurious trailing spaces when inserting character literals into VARCHAR columns.

Match API changes to Linq4j.getComponentType, and fix bug when generating arrays of synthetic objects.

Add SqlFunctionsTest.",['9ac312242313d166072496f05ddcea0e1e23a356'],False,"['LixToRelTranslator.java', 'EnumerableRelImplementor.java', 'JavaRules.java', 'RexToLixTranslator.java', 'SqlFunctions.java', 'SqlToRelConverter.java', 'OptiqAssert.java', 'SqlFunctionsTest.java']"
1e461cea40582c8d3287247daa68852218be9de7,"Re-format code. Indent is now 2, and arguments and parameters wrap. Only whitespace changes.",['2f4a6d81377ee2e96d6a54ee72be714550c523be'],False,"['BiBlock.java', 'BiMapper.java', 'BiPredicate.java', 'BiPredicates.java', 'BiValue.java', 'BinaryOperator.java', 'Block.java', 'Blocks.java', 'Combiner.java', 'Factory.java', 'FlatMapper.java', 'Mapper.java', 'Mappers.java', 'Predicate.java', 'Predicates.java', 'Sink.java', 'Iterables.java', 'MapStream.java', 'SequentialStreamOps.java', 'StatefulSink.java', 'Stream.java', 'AbstractEnumerable.java', 'AbstractEnumerable2.java', 'AbstractQueryable.java', 'BaseQueryable.java', 'CartesianProductEnumerator.java', 'DefaultEnumerable.java', 'DefaultQueryable.java', 'Enumerable.java', 'EnumerableDefaults.java', 'EnumerableOrderedQueryable.java', 'EnumerableQueryable.java', 'Enumerator.java', 'ExtendedEnumerable.java', 'ExtendedOrderedEnumerable.java', 'ExtendedOrderedQueryable.java', 'ExtendedQueryable.java', 'Extensions.java', 'Grouping.java', 'GroupingImpl.java', 'Linq4j.java', 'Lookup.java', 'LookupImpl.java', 'Notes.java', 'OpType.java', 'Ord.java', 'OrderedEnumerable.java', 'OrderedQueryable.java', 'QueryProvider.java', 'QueryProviderImpl.java', 'QueryableDefaults.java', 'QueryableFactory.java', 'QueryableRecorder.java', 'RawEnumerable.java', 'RawQueryable.java', 'AbstractNode.java', 'BinaryExpression.java', 'BlockBuilder.java', 'BlockExpression.java', 'Blocks.java', 'ClassDeclaration.java', 'ConditionalExpression.java', 'ConditionalStatement.java', 'ConstantExpression.java', 'ConstructorDeclaration.java', 'DeclarationExpression.java', 'DefaultExpression.java', 'DynamicExpression.java', 'Evaluator.java', 'Expression.java', 'ExpressionType.java', 'ExpressionVisitor.java', 'ExpressionWriter.java', 'Expressions.java', 'FieldDeclaration.java', 'FunctionExpression.java', 'GotoExpression.java', 'GotoExpressionKind.java', 'IndexExpression.java', 'InvocationExpression.java', 'LabelExpression.java', 'LabelTarget.java', 'LambdaExpression.java', 'ListInitExpression.java', 'LoopExpression.java', 'MemberDeclaration.java', 'MemberExpression.java', 'MemberInitExpression.java', 'MethodCallExpression.java', 'MethodDeclaration.java', 'NewArrayExpression.java', 'NewExpression.java', 'Node.java', 'ParameterExpression.java', 'Primitive.java', 'PseudoField.java', 'Statement.java', 'SwitchExpression.java', 'TernaryExpression.java', 'TryExpression.java', 'TypeBinaryExpression.java', 'Types.java', 'UnaryExpression.java', 'Visitor.java', 'WhileExpression.java', 'BigDecimalFunction1.java', 'DoubleFunction1.java', 'EqualityComparer.java', 'FloatFunction1.java', 'Function0.java', 'Function1.java', 'Function2.java', 'Functions.java', 'IntegerFunction1.java', 'LongFunction1.java', 'NullableBigDecimalFunction1.java', 'NullableDoubleFunction1.java', 'NullableFloatFunction1.java', 'NullableIntegerFunction1.java', 'NullableLongFunction1.java', 'Predicate1.java', 'Predicate2.java']"
567764fedc7305f3d9911d7f4f8c2729ed726947,"Re-format test code. Indent is now 2, and arguments and parameters wrap. Only whitespace changes.",['a699d7f18bc2d0dbc1367f20d8d81b356ff7f785'],False,"['TypeTest.java', 'ExpressionTest.java', 'Linq4jTest.java', 'PrimitiveTest.java']"
dc7d1b12aab6f530d8d2c5199f76677649ef86b1,Oops. Nasty equality bug.,['f75d9d267dacdb0b3b5d2ee3c1692d064a8a2a82'],False,['MethodCallExpression.java']
32cbc5b1f47bdd17e6433dd70d4cb5f49eed0ef3,Fix up formatting.,['dc7d1b12aab6f530d8d2c5199f76677649ef86b1'],False,"['BiPredicates.java', 'Mappers.java', 'Predicates.java', 'MapStream.java', 'Stream.java', 'EnumerableDefaults.java', 'Extensions.java', 'Linq4j.java', 'LookupImpl.java', 'BlockBuilder.java', 'ClassDeclaration.java', 'ConstructorDeclaration.java', 'DeclarationExpression.java', 'Evaluator.java', 'Expressions.java', 'MemberExpression.java', 'NewExpression.java', 'Primitive.java', 'Types.java', 'Visitor.java', 'Functions.java']"
ce782d607b958ffa5d904277977f813eb5552cb5,"Lots of fixes to expressions, especially CAST.",['be2105562e5c4bdb51a638dd5823fc80154d8e70'],False,"['OptiqResultSet.java', 'JavaRules.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'AbstractCursor.java', 'Cursor.java', 'Spacer.java', 'SqlFunctions.java', 'RexBuilder.java', 'RexLiteral.java', 'JdbcTest.java', 'SqlOperatorBaseTest.java']"
67555f55bec3512caaaefa121d99931f6eae97ad,Infer type of NULL literals in INSERT ... VALUES (fixes [optiq-15]).,['ce782d607b958ffa5d904277977f813eb5552cb5'],False,"['RexToLixTranslator.java', 'TableConstructorNamespace.java', 'JdbcFrontLinqBackTest.java']"
7ac10a3c6c4812ba36d74015e2c613a4ca8b1152,Workaround JavaCC bug translating character literal '\\' (meaning backslash).,['204d70347c9af7d285084ec0e373125301d43474'],False,['CombinedParser.jj']
3aeef1852561eb2550b0dc59ee924f38ca60f626,Fix string precision issue.,['916a0ebf828ebab30f7f1830a8e6f71d3c20cd62'],False,['RexBuilder.java']
3f48c0a95e8768236a85442caaafd7b673875123,Fix formatting.,['cf477fd8ef9ee8374a972fb0cd93128cd903d950'],False,['BlockBuilder.java']
1d7305e4d5a61fd25f147a7bc09b95050e595943,"Fix issues relating to shorts: literals, and the fact that ""short + short"" has type int (yes, really!). Also fix cast from primitive to different boxed (e.g. int to Short).",['3f48c0a95e8768236a85442caaafd7b673875123'],False,"['ConstantExpression.java', 'Expressions.java', 'Primitive.java', 'Types.java', 'PrimitiveTest.java']"
f9d3983f4a205997eaae2bb2ed63fbc3616f5978,Fix SUM with short and BigDecimal.,['d547e1b38d4428855b02b84ebd762d1407062a03'],False,"['RexImpTable.java', 'JdbcTest.java']"
0f69892a76e0703470b1d26be92d4ca3134cfba8,"Fix IndexOutOfBoundsException when sub-query uses ""SELECT *"".",['89db7f91f489586fa8ed48926cd5328e00887f6c'],False,"['SelectNamespace.java', 'JdbcTest.java']"
d83bb95795e87e55b85787cf4f8deee645769e57,Fix for JDK 1.6.,['93171190af2dfb432aaa57182ac2faa60dda232b'],False,['SqlFunctionsTest.java']
470d6ee9a39c3aeac01c22534d76b327291d2b66,"Add method to copy an AggregateCall, changing only its name.",['bb8d3952941e85f69eeea700b2c84e93b248abc6'],False,['AggregateCall.java']
7cac28b15c558ddbbd7c98b5099584e1deb57682,"More null-semantics fixes.

The 'item' operator can now operate on an 'any' object. (Simulates dynamic typing, needed by Drill.)

Add ""enabled"" flag to SqlOperatorBaseTest (set to false by OptiqSqlOperatorTest) to mark out which tests (or parts of tests) currently pass.",['b5f04ee43025b6dd4091aabcb3cad51e41de5584'],False,"['jhyde.xml', 'BuiltinMethod.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'SqlFunctions.java', 'RexLiteral.java', 'SqlItemOperator.java', 'OptiqAssert.java', 'OptiqSqlOperatorTest.java', 'SqlOperatorBaseTest.java', 'SqlOperatorTest.java']"
28fba54f6af9760e1e107641622d206b55f67ddb,Fix for JDK 1.6. (AutoCloseable does not exist until JDK 1.7.),['7cac28b15c558ddbbd7c98b5099584e1deb57682'],False,['Hook.java']
e9689a01d73f22bae32ab783b55a63127f5d5e1e,"Fix +, -, *, /, and prefix + and -.",['28fba54f6af9760e1e107641622d206b55f67ddb'],False,"['RexImpTable.java', 'AbstractCursor.java', 'RexLiteral.java', 'SqlOperatorBaseTest.java']"
8ae2c6000ccf2efcfedf305a82702862141df0f3,More null fixes. Add a check that all rows in a VALUES clause have the same number of columns.,['2d93602df311956504aaf80db94e5eddeb6fc175'],False,"['JavaTypeFactoryImpl.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'SqlValidatorImpl.java', 'TableConstructorNamespace.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java']"
c9f622dc00e583daf964e6cd3364e35302786a58,Fix two-argument lambdas that return a primitive.,['2a8075e18ca602427bece9a88be204e1269f0954'],False,"['FunctionExpression.java', 'Functions.java', 'ExpressionTest.java']"
b084f417ae5458181774dbe9184618d60b0e474c,Fix a couple of code-generation bugs.,['9965a29fff4ab17017efba97ab07011501de225d'],False,"['BuiltinMethod.java', 'PhysTypeImpl.java', 'SqlFunctions.java', 'RelSubset.java', 'JdbcFrontJdbcBackLinqMiddleTest.java']"
fd27aea64aafd2cc02d500bb47e6c3ef316a04ff,Fix sublist implementations of take and skip.,['c9f622dc00e583daf964e6cd3364e35302786a58'],False,"['Linq4j.java', 'Linq4jTest.java']"
132438ecf924aee064651b18cec71890a8b112bf,Remove a couple of null checks in SqlFunctions. Add tests for null semantics. Fix formatting.,['307e7c6d1608da92ad4744449f14291fe43ed5ed'],False,"['BuiltinMethod.java', 'RexImpTable.java', 'SqlFunctions.java', 'SqlFunctionsTest.java', 'SqlOperatorBaseTest.java']"
77ed0f2a0dc8e07bcdfc3bfc009e7ad620914e16,Oops. Fix some tests.,['924e982ea34e92d778e78d85b7b71d4aa95ac4ce'],False,"['JdbcFrontJdbcBackTest.java', 'JdbcTest.java', 'SqlFunctionsTest.java']"
a966968413e9a99df484e5fe8c2ca68acf67e5f4,Fix for JDK 1.6.,['0759b345cd7971cb279451d97691a4976ca8cb7a'],False,['SqlFunctionsTest.java']
40d31f05f4c456c42524da6add39802d5bf41951,"Table statistics. Add method Table.getStatistic(), so a table and provide row-count and number of distinct values per column, if it knows them. Add Statistics class, with some helper methods. Restructure ArrayTable to store number of distinct values per column.

Add ImmutableIntList. Like ArrayList<Integer>, but immutable and memory-efficient.

Add RelNode.isKey(BitSet); also slightly change the interpretation of RelNode.isDistinct(). It now returns whether rows are distinct FOR ANY REASON. If you want to find out whether your UNION, EXCEPT or INTERSECT had an ALL flag, use the 'all' field, don't use !isDistinct().",['b6afde9e17f4259d1b49a1eb60366b914753f51d'],False,"['Statistic.java', 'Statistics.java', 'Table.java', 'AbstractTable.java', 'ArrayTable.java', 'ColumnLoader.java', 'ListTable.java', 'ReflectiveSchema.java', 'JdbcTable.java', 'Meta.java', 'OptiqPrepareImpl.java', 'JavaRules.java', 'FlatLists.java', 'IterRules.java', 'AbstractRelNode.java', 'AggregateRelBase.java', 'IntersectRelBase.java', 'MinusRelBase.java', 'RelNode.java', 'SetOpRel.java', 'TableAccessRelBase.java', 'UnionRelBase.java', 'CombineUnionsRule.java', 'PullUpAggregateAboveUnionRule.java', 'PushAggregateThroughUnionRule.java', 'PushJoinThroughUnionRule.java', 'PushProjectPastSetOpRule.java', 'RemoveDistinctRule.java', 'RemoveEmptyRule.java', 'UnionEliminatorRule.java', 'UnionToDistinctRule.java', 'RelOptTable.java', 'RelOptUtil.java', 'HepRelVertex.java', 'RelSubset.java', 'ImmutableIntList.java', 'Util.java', 'ArrayTableTest.java', 'MockCatalogReader.java', 'SqlToRelTestBase.java', 'UtilTest.java']"
86f5c4e2ff3ba239589cac9d9a961994eef3279b,Fix NPE when executing a DatabaseMetaData method that returns the empty set (e.g. getPrimaryKeys).,['160433c8eee622ce7e495b3d44537af60d9bc472'],False,"['Meta.java', 'OptiqDatabaseMetaData.java', 'OptiqResultSet.java', 'JdbcFrontJdbcBackTest.java']"
87a85309df5e772a7c80c0c62eef234f5f0aa575,Test case for issue #35. (Join sub-clause.),['f018e462a4dee190b5b116aed06c6b6a1a4277d7'],False,['JdbcTest.java']
fd6e4f35b8e3ff787b5db58f64b9d82ab5634cf1,Add PushJoinThroughJoinRule. Fix RexPermuteInputsShuttle.visitCall. Add various convenience methods to RelOptUtil and Mappings.,['87a85309df5e772a7c80c0c62eef234f5f0aa575'],False,"['RelMdUtil.java', 'PushFilterPastJoinRule.java', 'PushJoinThroughJoinRule.java', 'PushProjector.java', 'RelOptUtil.java', 'RexPermuteInputsShuttle.java', 'Mappings.java']"
a7825fd1a3a1e09951bc79c8fab2bace84368df4,"Allow more than one planner to be applied to a given query. This mechanism would allow, for instance, you to try a quick-and-dirty planner with a limited rule set first, and fall back to a more complex planner for more complex queries.

When planner can't find a plan, throws a RelOptPlanner.CannotPlanException (a sub-type of RuntimeException) that contains a dump of the planner state.",['2298cfcbe53029c07144702027bc754af279f2e2'],False,"['OptiqPrepareImpl.java', 'RelOptPlanner.java', 'RelSubset.java', 'VolcanoPlanner.java', 'SqlCaseOperator.java', 'Util.java']"
b4cbc033d36bf48ceb44698634931f3b3123defd,Fix JDK 1.6 compilation error.,['a7825fd1a3a1e09951bc79c8fab2bace84368df4'],False,['OptiqAssert.java']
a57003ab5453ad35e77405c36722d9159ef827da,Formatting & newlines in strings. Cosmetic changes only.,['4c15af1e12fe8dc4c1a6eade93131d0996e5fff8'],False,['SqlParserTest.java']
12016b884f634d9aa711ce67dd63d3a8e34164be,"Enable negative tests in SqlParserTest. To get these to work, I had to back out changes for <parenthesized join table> and also downgrade JavaCC from 5.0 to 4.0 (downgrade maven plugin from 2.6 to 2.4).",['a57003ab5453ad35e77405c36722d9159ef827da'],False,"['pom.xml', 'SqlAbstractParserImpl.java', 'CombinedParser.jj', 'SqlParserTest.java']"
8d7e9a853958335ef46410fa9e02087baeefa541,Fix AssertionError caused by representing date/time values as Integer and Long internally.,['12016b884f634d9aa711ce67dd63d3a8e34164be'],False,"['AbstractCursor.java', 'JdbcTest.java']"
64cd144f23155245f1ee742dbabc041425ae1491,"Fix issue where tables are based on records of different classes but classes have same name/type of fields. Also, when doing INSERT into a collection, convert the objects so they are correct type for the collection.",['c6f1d97e6945de4139dbb16d362ede1a6a2d9163'],False,"['JavaRecordType.java', 'JavaRules.java', 'JdbcTest.java']"
b5f4ca084cd76220c35b8639338fe0685f958b9f,Fix MIN/MAX aggregate functions with nullable arguments.,['64cd144f23155245f1ee742dbabc041425ae1491'],False,"['pom.xml', 'BuiltinMethod.java', 'RexImpTable.java', 'SqlFunctions.java', 'ReflectiveSchemaTest.java']"
159fb078d2e30b10f32c689dff799125f0f4d296,Various fixes related to literals and type inference. Move some utility methods over from optiq.,['d68942781e9bf76d38610052545fc43ffb605440'],False,"['ConstantExpression.java', 'Expressions.java', 'Primitive.java', 'Types.java', 'Functions.java', 'ExpressionTest.java', 'Linq4jTest.java', 'PrimitiveTest.java']"
2398555ac842faa6ce8e36575a2d1f0566a2fde6,Implement AVG aggregate function. Fix some issues with null values and arithmetic operators (division in particular). Move some utility methods to linq4j.,['b5f4ca084cd76220c35b8639338fe0685f958b9f'],False,"['OptiqPrepareImpl.java', 'EnumerableRelImplementor.java', 'JavaRules.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'SqlFunctions.java', 'ReduceAggregatesRule.java', 'ReflectiveSchemaTest.java', 'SqlFunctionsTest.java', 'SqlOperatorBaseTest.java']"
9182355013f430b9a9b6afb7c0afef8b84d53736,"Fix bug in view expansion when two views have the same field types but different field names. Also, generate names of join fields that will be valid java identifiers.",['952424553c79cdc27711eaa386af382dbd8abb9c'],False,"['ViewTable.java', 'RelOptUtil.java', 'Pair.java']"
2aac16c2ca1104cd0e6f1e201f88b5cb2cdeafed,Data type changes to JavaType(String.class) to allow LIKE to pass validation.,['57d9a888c89dafb38433b49cb610f90abe7f0260'],False,"['RelDataTypeFactoryImpl.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlLiteral.java', 'SqlUtil.java', 'SqlTypeUtil.java', 'JdbcTest.java']"
57644956034da991eb69bcd363ede494bc62f952,Fix type of '&&' and '||'.,['99555c40b323f1debb029b6313bd79fabf8c1fce'],False,['Expressions.java']
f85044ab8925e21471e305bb7e3b31ff0e8627d9,Fix for JDK 1.6.,['357b0a532d9c766031058574702780999b969862'],False,['OptiqConnection.java']
0da4316fe24d69768665f89f553708c9c0692138,"Re-format all code in net.hydromatic.optiq packages in new style (indent 2, continuation indent 4, open brace always at end of line) and remove @author tags. Only cosmetic changes.",['e8a52fec446f61ed9cb94b508da43505bfc010ff'],False,"['BuiltinMethod.java', 'DataContext.java', 'Demo.java', 'Member.java', 'ModifiableTable.java', 'MutableSchema.java', 'Parameter.java', 'Schema.java', 'SchemaFactory.java', 'Schemas.java', 'Statistic.java', 'Statistics.java', 'Table.java', 'TableFactory.java', 'TableFunction.java', 'TranslatableTable.java', 'AbstractTable.java', 'DelegatingSchema.java', 'TableInSchemaImpl.java', 'ViewTable.java', 'ArrayTable.java', 'CloneSchema.java', 'ColumnLoader.java', 'ListTable.java', 'JavaTypeFactory.java', 'MapSchema.java', 'ReflectiveSchema.java', 'JdbcConvention.java', 'JdbcImplementor.java', 'JdbcQueryProvider.java', 'JdbcRel.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverter.java', 'JdbcToEnumerableConverterRule.java', 'JdbcUtils.java', 'MongoSchema.java', 'MongoTable.java', 'ConnectionProperty.java', 'Driver.java', 'DriverVersion.java', 'Factory.java', 'FactoryJdbc41.java', 'FactoryJdbc4Impl.java', 'Handler.java', 'HandlerImpl.java', 'Helper.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'Meta.java', 'OptiqConnection.java', 'OptiqConnectionImpl.java', 'OptiqDatabaseMetaData.java', 'OptiqPrepare.java', 'OptiqPreparedStatement.java', 'OptiqResultSet.java', 'OptiqResultSetMetaData.java', 'OptiqStatement.java', 'SqlTimeoutException.java', 'UnregisteredDriver.java', 'JsonColumn.java', 'JsonCustomSchema.java', 'JsonCustomTable.java', 'JsonJdbcSchema.java', 'JsonMapSchema.java', 'JsonRoot.java', 'JsonSchema.java', 'JsonTable.java', 'JsonView.java', 'ModelHandler.java', 'LixToRelTranslator.java', 'OptiqPrepareImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'EnumerableConvention.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'JavaRowFormat.java', 'JavaRules.java', 'PhysType.java', 'PhysTypeImpl.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'AbstractCursor.java', 'ArrayComparator.java', 'ArrayEnumeratorCursor.java', 'ByteString.java', 'ColumnMetaData.java', 'ComparableComparator.java', 'Cursor.java', 'Executable.java', 'FlatLists.java', 'Hook.java', 'Like.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java', 'Spacer.java', 'SqlFunctions.java', 'Typed.java', 'Utilities.java', 'OptiqServer.java', 'JdbcExample.java', 'ArrayTableTest.java', 'RangeTable.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LinqFrontJdbcBackTest.java', 'ModelTest.java', 'OptiqAssert.java', 'OptiqSqlOperatorTest.java', 'ReflectiveSchemaTest.java', 'SqlFunctionsTest.java']"
08f1138412c8ec680fd3110e9f530eddf9e4b491,Fix code formatting.,['bd54d92c6c3829e753f56492af02fc376634842d'],False,"['CsvEnumerator.java', 'CsvSchema.java', 'CsvSmartTable.java', 'CsvTable.java', 'CsvTest.java']"
9965f86aa05b84e430432ef80c46cb389b0d91da,"Fix bug that comparing a string to a varchar would truncate the string to the length of the varchar, and therefore match any prefix.",['a70678b6287a93c7892b724dfb3d6bbe38bf5d76'],False,"['JdbcRules.java', 'RexToLixTranslator.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'MongoAdapterTest.java', 'ReflectiveSchemaTest.java']"
d7f6301248089f7ab58f669fce28137a2ff9fbf2,Fix issues with null semantics in NOT IN.,['3ec6fd00857d4ab83406c57cad3aa5a05e94d21b'],False,"['JavaTypeFactoryImpl.java', 'RexImpTable.java', 'AggregateRelBase.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java']"
6c27b192d25dd77e32117f91dff7f9b198f1408b,"Introduce constructor methods for RelOptRuleOperand: RelOptRule.leaf(), .some(), .any(). This avoids mistakes like only matching a leaf node, where the rule was intended to match a node regardless of its children. The old constructors are deprecated and will be removed soon.",['d7f6301248089f7ab58f669fce28137a2ff9fbf2'],False,"['JavaRules.java', 'PushJoinThroughJoinRule.java', 'RemoveEmptyRule.java', 'RelOptRule.java', 'RelOptRuleOperand.java']"
ec57b77d80ac01723df642845543f6bb0a52c2cb,"Change signature of createEmptyResultSet; OptiqConnectionImpl isn't public, so method couldn't be called from outside package.",['6c27b192d25dd77e32117f91dff7f9b198f1408b'],False,['Helper.java']
0fb2c6a1336b89ccd6a02c342969b00fa74a61c0,"MongoDB adapter: Push down projects.
Add some methods to Pair, and rename some.
Add ""enabled(boolean)"" method to OptiqAssert.",['89bcf8faaa37abec5a0f212719be7cecc4cc225d'],False,"['BuiltinMethod.java', 'MongoEnumerator.java', 'MongoRules.java', 'MongoTable.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'OptiqPrepareImpl.java', 'RelOptRuleCall.java', 'ListScope.java', 'SqlValidatorImpl.java', 'Pair.java', 'Util.java', 'MongoAdapterTest.java', 'OptiqAssert.java']"
a33222fc88de818a4289fcc1b0c57c6e356ae5b0,"Upgrade to junit 4.8, and adopt junit 4 idiom throughout the code. Add a lot of tests to OptiqSuite that weren't in OptiqAssert. Fix a few tests.",['d1786aff15db2a9bdc6837ef5d2f36b976af7a99'],False,"['pom.xml', 'JoinRel.java', 'MainApp.java', 'OptionsList.java', 'ArrayTableTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LinqFrontJdbcBackTest.java', 'ModelTest.java', 'MongoAdapterTest.java', 'OptiqAssert.java', 'OptiqSqlOperatorTest.java', 'OptiqSuite.java', 'ReflectiveSchemaTest.java', 'SqlFunctionsTest.java', 'RelOptUtilTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'SqlParserTest.java', 'SqlUnParserTest.java', 'AbstractSqlTester.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlOperatorTest.java', 'SqlPrettyWriterTest.java', 'SqlTester.java', 'SqlTypeNameTest.java', 'ConnectStringParserTest.java', 'DiffRepository.java', 'DiffTestCase.java', 'EigenbaseResourceTest.java', 'EigenbaseTestCase.java', 'FilteratorTest.java', 'HepPlannerTest.java', 'HepPlannerTest.ref.xml', 'MockCatalogReader.java', 'MockRelOptCost.java', 'MockRelOptPlanner.java', 'MockSqlOperatorTable.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.ref.xml', 'RelOptTestBase.java', 'RexProgramTest.java', 'RexTransformerTest.java', 'SargTest.java', 'SqlLimitsTest.java', 'SqlTestGen.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'ConcurrentTestCommand.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestPlugin.java', 'ConcurrentTestPluginCommand.java', 'ConcurrentTestTimedCommandGenerator.java', 'SamplePlugin.java', 'ArrayQueueTest.java', 'GraphTest.java', 'MethodCallTestCase.java', 'OptionsListTest.java', 'PermutationTestCase.java', 'ReflectVisitorTest.java', 'TestUtil.java', 'UtilTest.java']"
7e4c6c75fa1d7c5a5a4279254ea483e3c7d443e7,Add test for JDBC adapter based on the SQL queries that Mondrian's test suite issues against FoodMart. Fix a bunch of issues in SQL generation.,['bd0e83161401e5bdef869ee12bba6b9faa3e06a4'],False,"['pom.xml', 'JdbcImplementor.java', 'JdbcRules.java', 'JdbcToEnumerableConverter.java', 'SqlDataTypeSpec.java', 'SqlSelectOperator.java', 'JdbcTest.java']"
1a05680e6c1bd89a8fc8128966423e295df593e7,"Test Mondrian FoodMart query set (6,700 queries!) against MySQL database using JDBC adapter. 3 failures in first 200 queries; haven't run full suite.",['7e4c6c75fa1d7c5a5a4279254ea483e3c7d443e7'],False,"['pom.xml', 'FoodmartTest.java']"
ec1bea58997eba92864bd4c78d4b6842d10c233f,Fix typo.,['08f1138412c8ec680fd3110e9f530eddf9e4b491'],False,['TUTORIAL.md']
290665ed019a26f2e7a27ee21852d2919db63f34,"Add ""close()"" methods to various enumerators. Stops a few resource leaks.",['4b83c5ffd8e607d2c9a7db8d43fed4b42381e7b3'],False,"['Helper.java', 'Meta.java', 'OptiqResultSet.java', 'ArrayEnumeratorCursor.java', 'Cursor.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java']"
ab94d6de615347f90d3d5e1d1a6acb0d41a8ac40,"Change how Optiq calculates whether aggregates and windowed aggregates are null. The call is NOT NULL if its args are NOT NULL; the context (e.g. in a query with GROUP BY (), or in a window that may be empty) may convert it to nullable.",['ccbb0460dea4fee4955e00051027d27ae68a300e'],False,"['RexBuilder.java', 'RexUtil.java', 'SqlOverOperator.java', 'SqlAvgAggFunction.java', 'SqlMinMaxAggFunction.java', 'SqlSingleValueAggFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'FoodmartTest.java', 'SqlOperatorBaseTest.java', 'RelOptRulesTest.ref.xml', 'SqlToRelConverterTest.ref.xml']"
45070f788ab1d1bcfd5261b4161a497cfd923b1b,Fix some FoodMart tests.,['ab94d6de615347f90d3d5e1d1a6acb0d41a8ac40'],False,"['pom.xml', 'JdbcImplementor.java', 'FoodmartTest.java']"
4b180046634c13ff7ee777be109a9f85970d5229,Fix bug in BlockBuilder regarding renaming of variables whose initializing expression matches a previous variable's expression.,['0ab545b2f61e88b668c135b90f28b150daedcaff'],False,"['BlockBuilder.java', 'ExpressionTest.java']"
bdf815c581497e614563976320aae56be0deb4eb,Upgrade linq4j for fix to code-generation issue that happens with common sub-queries.,['cca9ba2bf583ab8c24c271e65f6fd9cb85769ee4'],False,"['pom.xml', 'JdbcTest.java']"
a72e41a2af122b53fe302e195c190ab1adc952a2,"Make RelCollation a trait. This will allow us to ask for relational expressions that are equivalent (i.e. in the same set) but have different sort order. And will allow us to apply a converter (i.e. an OrderRel) to create a rel with the desired sort order.

RelCollation is the first trait where it is reasonable for a given RelNode to have 2 instances of the trait. For example, the TableAccessRel(table='TIME_BY_DAY') might be sorted by {the_year, the_month, the_date} and also by {time_id}. That particular TableAccessRel would belong to two subsets in the same set. That confuses the current RelSubset data structure, which assumes that a RelNode is in precisely one RelSubset. We've fixed it by moving the lists to RelSet. The lists of rels and parents in RelSubset are now computed on the fly.",['bdf815c581497e614563976320aae56be0deb4eb'],False,"['RelCollation.java', 'RelCollationImpl.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoPlanner.java']"
07e1cb0a6c30677502e63cb8e337f25c0a76e983,Fix a few issues with collation as a trait.,['7a6160520377a92d39a7a0fa90d6d36ab78b0ca3'],False,"['OptiqPrepareImpl.java', 'FilterRel.java', 'ProjectRel.java', 'RelCollationImpl.java', 'SortRel.java', 'ConventionTraitDef.java', 'RelTraitDef.java', 'VolcanoPlanner.java', 'SqlToRelConverter.java', 'VolcanoPlannerTraitTest.java']"
48f5727bc3c4e095dc55ab8e6d21b48c3cdba865,"Progress on collation trait. Only a couple of test failures left.

Add RelOptPlanner.getRelTraitDefs(); deprecate RelOptRuleCall.getRels().",['ee40c0c22da9a42f8988c378c948680ac97046a8'],False,"['OptiqPrepareImpl.java', 'JavaRules.java', 'RelCollationTraitDef.java', 'SortRel.java', 'RemoveSortRule.java', 'AbstractRelOptPlanner.java', 'RelOptCluster.java', 'RelOptPlanner.java', 'RelOptRuleCall.java', 'HepRuleCall.java', 'RuleQueue.java', 'VolcanoPlanner.java']"
2e74f122054336527959e68ecb93c4111ea79405,"Fixes for collation as a trait.

Convert a few methods (e.g. ProjectRel.<init>) to take lists rather than arrays.",['48f5727bc3c4e095dc55ab8e6d21b48c3cdba865'],False,"['JdbcRules.java', 'JdbcToEnumerableConverterRule.java', 'MongoRules.java', 'MongoToEnumerableConverterRule.java', 'LixToRelTranslator.java', 'OptiqPrepareImpl.java', 'QueryableRelBuilder.java', 'JavaRules.java', 'CalcRel.java', 'ProjectRel.java', 'ProjectRelBase.java', 'RelCollationImpl.java', 'RelCollationTraitDef.java', 'TableAccessRelBase.java', 'MergeCalcRule.java', 'RemoveTrivialProjectRule.java', 'RelOptCluster.java', 'RelOptQuery.java', 'RelOptUtil.java', 'RelTraitSet.java', 'RexUtil.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'VolcanoPlannerTest.java']"
522f079a19eecce95b9c60a2e7c0858f44aca216,Fix some assert failures.,['88e8de34e9a249f0a7ce207172779595a16a37a7'],False,"['JavaRowFormat.java', 'AggregateRel.java', 'FilterRel.java', 'IntersectRel.java', 'JoinRel.java', 'MinusRel.java', 'ProjectRel.java', 'SortRel.java', 'TableModificationRel.java', 'UnionRel.java', 'ReduceAggregatesRule.java', 'RelOptRuleOperand.java', 'RelTraitSet.java', 'SqlToRelConverter.java']"
e60ee3e9d7838bc8725a05b5428a8c9410b5ad31,"For relational expressions of Enumerable convention, defer computing physical type (i.e. whether the rows are going to be arrays or of a synthetic class) until implement time. This will allow us to combine the ARRAY and CUSTOM calling conventions, and reduce the planner search space. (Initial spike; still a few test failures.)",['522f079a19eecce95b9c60a2e7c0858f44aca216'],False,"['JdbcToEnumerableConverter.java', 'MongoToEnumerableConverter.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'JavaRules.java', 'PhysTypeImpl.java', 'RelImplementorImpl.java', 'RelImplementor.java']"
4bc376d7f4af16b9da243f3487fe124d23d04c70,Fix bugs introduced by the change that deferred computing physical type until implement-time.,['f4b6480e032df969b2ab35841960e9d2cd2246dd'],False,"['BuiltinMethod.java', 'OptiqPrepareImpl.java', 'EnumerableRelImplementor.java', 'JavaRowFormat.java', 'JavaRules.java', 'PhysType.java', 'PhysTypeImpl.java', 'FlatLists.java', 'Utilities.java', 'RelFieldCollation.java', 'LinqFrontJdbcBackTest.java']"
5acfb32263891456739f7541202633cb0752fcc9,"Combine the two instances of EnumerableConvention, ARRAY and CUSTOM, into one, INSTANCE.

Each EnumerableRel is now able to implement itself in any row format that is specified when implement() is called. This change reduces the planner's search space; we lose the ability to cost ARRAY and CUSTOM versions of the same relational expression differently, but I don't believe this will cause the planner to miss any significant insights.",['19369a657111ad91dc49e7f841011e99d2e5a294'],False,"['JdbcToEnumerableConverterRule.java', 'MongoToEnumerableConverterRule.java', 'OptiqPrepareImpl.java', 'EnumerableConvention.java', 'JavaRules.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java']"
84ad5c5a659f47e326dc05e95fd61154afe3be9a,Fix generation of Java literals.,['c6eeef9f45c957b477b5c8a003e63044a49601af'],False,"['ConstantExpression.java', 'ExpressionTest.java']"
289a006c2a2eaff5983edc6deed5f286e6cac755,"Progress on code generation for windowed aggregation. Fix 2 bugs in type derivation of windowed aggregates.

Cleanups: call ""BigDecimal.valueOf"" rather then ""new BigDecimal()"" whenever possible; migrate an array to an immutable list in SqlTypeStrategies.",['6bfc7f0082befcb76eacf06d8d90c916440ee26b'],False,"['BuiltinMethod.java', 'JavaRules.java', 'PhysType.java', 'PhysTypeImpl.java', 'RexToLixTranslator.java', 'SortedMultiMap.java', 'SqlFunctions.java', 'RelFieldCollation.java', 'WindowRelBase.java', 'RelDataTypeFactoryImpl.java', 'RexBuilder.java', 'SqlIntervalQualifier.java', 'SqlTypeStrategies.java', 'SqlTypeTransformCascade.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'JdbcTest.java', 'OptiqAssert.java', 'SargTest.java']"
da2c640d2f5ab4597ed7e5531d81cc5e6625321c,"Upgrade to linq4j-0.1.8. (Enables some short-cuts, and fixes a bug in ""COUNT ... OVER"".)",['21e889cdd9565a8038249349adc26a65ab05b71f'],False,"['pom.xml', 'BuiltinMethod.java', 'MongoTable.java', 'Meta.java', 'OptiqPrepareImpl.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'JavaRowFormat.java', 'JavaRules.java', 'RexToLixTranslator.java', 'SortedMultiMap.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java']"
1efc638595696a7ed16910b174b20bfc964e7c94,"Now generation of float literals is fixed, remove workaround in unit test.",['6ea494bfed3c0fb0e3abfee75f486c3260cc5445'],False,['JdbcTest.java']
99c0c5cfa6a433251e1f0a7fc10e7e47569a1d4e,Fix ORDER BY ... DESC NULLS FIRST.,['1efc638595696a7ed16910b174b20bfc964e7c94'],False,"['PhysTypeImpl.java', 'RexFieldCollation.java', 'SqlToRelConverter.java', 'JdbcTest.java']"
6f8d34ebbb0d7225e57437d48b48d0ff1a93de6a,Back out previous 3 commits (git merge errors); fix build for JDK 1.8.,['95ec6ce6d2e93140dfdb91f2cfc2c94c82d0cbfa'],False,"['pom.xml', 'ReflectiveSchema.java', 'JavaRules.java', 'JdbcTest.java']"
7dad083aaaa84f4087915494dd636d746920865d,Update tutorial for optiq API changes.,['0258d799244cb0b45f1905c1c4fa9c80bb023948'],False,['TUTORIAL.md']
af454b2759ac94bfb2b67527d04bacf85ef4b13d,"Fix VolcanoCost so that a < b iff b > a. Without this fix, the first rel in a subset has an advantage over ""cheaper"" rels that arrive later.",['97c7b4b6e7ca0d175eeb09c138b594e1904c7045'],False,['VolcanoCost.java']
af5f761e637f13ac9e4981c9a9b78b7c00573696,"Fix test for JDK 1.6, where methods Statement.closeOnCompletion() and .isCloseOnCompletion() do not exist.",['f7c2c52752510c152f5c0b09a42af8a30dad9b6c'],False,"['JdbcTest.java', 'OptiqAssert.java']"
aeb9bfdd7587657b855ae23aee250836fa46fa3c,Fix bug in how ArrayTable automatically sorts records.,['026ff5186edb1c1735b7caa8e2b569e22a1b998c'],False,"['ArrayTable.java', 'ColumnLoader.java', 'Bug.java', 'ArrayTableTest.java']"
fcdb825e892d39c7f2157e05a68add24bddc82db,"Fix a type-cast issue in DatabaseMetaData.getColumns(), and an NPE handling a switched CASE expression.",['6bf299263c39c353e600c4285f3291f4462d5236'],False,"['Meta.java', 'SqlToRelConverter.java', 'JdbcTest.java']"
d090911d351ea509955f332032fbda26f5f48a14,Changed clearWarnings() to not do UnsupportedOperationException since some connection pools call this when returning conn to pool.,['fcdb825e892d39c7f2157e05a68add24bddc82db'],False,['OptiqConnectionImpl.java']
f62f1d6c149eafcf9e262e7ad2bf3b78fccd39de,"Merge pull request #51 from joeposner/silentclearerrors

Changed clearWarnings() to not do UnsupportedOperationException since so...","['fcdb825e892d39c7f2157e05a68add24bddc82db', 'd090911d351ea509955f332032fbda26f5f48a14']",True,[]
bd8d871abf48510119e6f44c861062b686b12b7c,Some satisfiability fixes.,['68a78847f6348c75d00edd0da2bbe60f5f7dc2f6'],False,"['RelOptUtil.java', 'SubstitutionVisitor.java', 'RexCall.java', 'RexLiteral.java', 'RexNode.java', 'SqlBinaryOperator.java', 'SqlOperator.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'MaterializationTest.java']"
4f3ef941d927c1219c4170ee09e715eee8372315,More fixes & tests for FlatList hashCode.,['dee62b666881c66bd239610c0ae40d832a442f23'],False,"['FlatLists.java', 'UtilTest.java']"
bc8642a45a28c8bd1d43c0cd902dd625934b2479,Utility method to convert project expressions into RexProgram. Minor changes to materialized views.,['31fec4239c76558a2aa9f130a82fbe1e0bcd98b1'],False,"['CalcRel.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'RexProgram.java', 'OptiqAssert.java']"
0d8c9eed68e8dd7a9c92a10c49c4a0a1a9344780,"Fix maven web site, http://www.hydromatic.net/optiq.",['33013ac160c9aa5e5a2b4373976fc5109f622197'],False,"['pom.xml', 'pom.xml', 'pom.xml']"
35768a76e71eb2b8c1150494b7cd53af77c40574,"Fix lots of functions and operators. (TRIM is still broken, for a while.)
Add DataContext.get() to get context such as statement start time and spark-context.
Improve infrastructure for generating Java to call Spark operators.",['baa94316a5062ff222354cfe20fc1375e667d8c1'],False,"['REFERENCE.md', 'BuiltinMethod.java', 'DataContext.java', 'DelegatingSchema.java', 'MapSchema.java', 'JdbcSchema.java', 'OptiqConnectionImpl.java', 'EnumerableRelImplementor.java', 'JavaRelImplementor.java', 'JavaRules.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'AbstractCursor.java', 'ByteString.java', 'SqlFunctions.java', 'RexBuilder.java', 'RexLiteral.java', 'RexSqlStandardConvertletTable.java', 'SargEndpoint.java', 'SqlFunction.java', 'SqlJdbcFunctionCall.java', 'SqlStdOperatorTable.java', 'SqlTrimFunction.java', 'SameOperandTypeChecker.java', 'SqlTypeStrategies.java', 'SqlNodeToRexConverterImpl.java', 'Bug.java', 'Util.java', 'CombinedParser.jj', 'SqlFunctionsTest.java', 'SqlOperatorBaseTest.java', 'EnumerableToSparkConverter.java', 'SparkMethod.java', 'SparkRel.java', 'SparkRuntime.java', 'SparkToEnumerableConverter.java', 'SparkAdapterTest.java', 'SplunkSchema.java']"
c9062f8699b740d0c4ad9bb436def89ff9ed93fa,Fix TRIM.,['35768a76e71eb2b8c1150494b7cd53af77c40574'],False,"['RexImpTable.java', 'RexToLixTranslator.java', 'SqlTrimFunction.java', 'SameOperandTypeChecker.java', 'Util.java', 'CombinedParser.jj', 'SqlOperatorBaseTest.java', 'SqlValidatorTest.java']"
37472ac3fc36941039cf2acf18ec40fc11f1ad3d,More INTERVAL fixes.,['1c5fef99ad82b00150063c3b5b1eb46cdcd37a5b'],False,"['RexToLixTranslator.java', 'AbstractCursor.java', 'SqlFunctions.java', 'RexBuilder.java', 'RexLiteral.java', 'SqlNodeToRexConverterImpl.java', 'StandardConvertletTable.java', 'SqlOperatorBaseTest.java']"
09a751e4e41f9e6186f7ef20e744fc63c82c0152,Oops. Fix for JDK 1.6.,['ef88000c58040bf3ab56531ceaf0e530b8d527e8'],False,['SqlValidatorTestCase.java']
aef59fd5292312f7dcbb76e23e4b7ea56e5210ef,"Fix PushJoinThroughJoinRule where lower join's condition depends on columns in the input that is being pulled up.

Add RelOptRuleCall.id, for better tracing & plan provenance.",['0073e29d8ec3153c735e0f010595cde85abd8009'],False,"['OptiqPrepareImpl.java', 'PushJoinThroughJoinRule.java', 'AbstractRelOptPlanner.java', 'RelOptRuleCall.java', 'RelOptUtil.java', 'RelSubset.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'RexShuttle.java', 'Mappings.java', 'JdbcTest.java', 'UtilTest.java']"
9c6b374f6f14cc9739d2ef55ced257333fa32643,Fix issues with timezone offsets.,['d9da38459e40030167a771782a02e1dc8963ad60'],False,"['ColumnLoader.java', 'JdbcTable.java', 'JdbcUtils.java', 'Meta.java', 'OptiqResultSet.java', 'OptiqPrepareImpl.java', 'AbstractCursor.java', 'ColumnMetaData.java', 'Cursor.java', 'SqlFunctions.java', 'RexLiteral.java', 'SqlIntervalQualifier.java', 'DateTimeUtil.java', 'OptiqAssert.java', 'ReflectiveSchemaTest.java']"
5935272099f1e753ba1230a058b0a82f6ea53f36,Fix for JDK 1.6.,['08d4d37c2db46286083c894866ca9a53e3de5b37'],False,['SqlFunctions.java']
387bee8b616623d91103751e8afe6d7c21842446,Fix bug where non-existent directory would give NPE. Instead print warning.,['5b0e70c7457d23f7cf5ddb74c78395f5ad45476c'],False,"['CsvSchema.java', 'CsvTest.java']"
362faaf32308a2cfa4516b928ab7a406d36a7fef,Fix for JDK 1.8. (HashSet order has changed.),['9e9aeee18855536c8e3a92ed3b057740ac2ae2a6'],False,"['RelOptUtil.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java']"
f9171508367efed57c497063cd363e38e8facdf7,"Lots of fixes to the JDBC driver, and in particular to DatabaseMetaData methods, to make Squirrel-SQL run better.",['362faaf32308a2cfa4516b928ab7a406d36a7fef'],False,"['Helper.java', 'Meta.java', 'OptiqConnectionImpl.java', 'OptiqDatabaseMetaData.java', 'OptiqPrepare.java', 'OptiqResultSet.java', 'OptiqStatement.java', 'Util.java', 'JdbcTest.java', 'UtilTest.java']"
8ad8e23b47650a669e80209eb1f93716a4b19857,"Support pushing sorts down to MongoDB. Required new rule PushSortPastProjectRule, and some bug fixes in how Optiq deals with subsets. If a rel requires a rel sorted by [x] it should also allow one sorted by [x, y]. A few rules were incorrectly assigning the collation of their result.

Make JoinRel.stoppedVariables an immutable set, and final.

Add Util.isDistinct(), and use it in various places.

Add instructions for loading FoodMart data set into MongoDB.",['b26bf6e9eed64499fe925a9fb15e0cad0b40f1b9'],False,"['JavaTypeFactoryImpl.java', 'OptiqPrepareImpl.java', 'EnumerableConvention.java', 'JavaRules.java', 'PartiallyOrderedSet.java', 'CorrelatorRel.java', 'JoinRel.java', 'JoinRelBase.java', 'ProjectRel.java', 'RelCollationImpl.java', 'RelCollationTraitDef.java', 'SortRel.java', 'MergeCalcRule.java', 'MergeProjectOntoCalcRule.java', 'PushJoinThroughJoinRule.java', 'PushJoinThroughUnionRule.java', 'PushProjectPastSortRule.java', 'PushSortPastProjectRule.java', 'RemoveDistinctAggregateRule.java', 'SemiJoinRel.java', 'SwapJoinRule.java', 'Convention.java', 'RelOptRuleCall.java', 'RelOptUtil.java', 'RelTrait.java', 'RelTraitSet.java', 'HepRuleCall.java', 'RelSubset.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'RexProgram.java', 'SqlValidatorImpl.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'EigenbaseTrace.java', 'Util.java', 'Mappings.java', 'JdbcTest.java', 'OptiqAssert.java', 'OptiqSuite.java', 'PartiallyOrderedSetTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'MockRelOptPlanner.java', 'MongoRel.java', 'MongoRules.java', 'MongoToEnumerableConverter.java', 'MongoAdapterTest.java']"
5d9803017f31060ccdccd1877ce4222a24bd11c9,"Re-order test suite, so that fast tests are run first, and tests that are slow and don't break very often are last.",['073c9e03c69a0e9d6efd6c8acba97142d118989d'],False,['OptiqSuite.java']
eb451d6069894d3c773cc4e4eb043856a35fee20,Test & bug-fix for JsonBuilder.,['c36616744e5875e03d77cc239d429473623d8464'],False,"['JsonBuilder.java', 'UtilTest.java']"
b47063433e7e987db14ba11f0e24ac1295f9557d,Fix tests on JDK 1.6.,['d92b04e41244a2b97c1bc6b72f31ef3567ab2da0'],False,"['JdbcTest.java', 'OptiqAssert.java']"
cb464e37f4083aea04c5d1da981b0ae554f54a20,"Fix for running against hsqldb's JDBC driver, which doesn't allow getInt on DATE columns. Upgrade to linq4j-0.1.11.",['b47063433e7e987db14ba11f0e24ac1295f9557d'],False,"['BuiltinMethod.java', 'JdbcToEnumerableConverter.java', 'EnumerableRelImplementor.java', 'SqlFunctions.java', 'RexUtil.java', 'EigenbaseTrace.java', 'pom.xml']"
0a5d69a0f11807bf3b12b994ca9776c18dab7de2,Fix issues with data-type and time-zone when accessing Timestamp from JDBC adapter. Upgrade to hsqldb-2.3.1.,['cb464e37f4083aea04c5d1da981b0ae554f54a20'],False,"['BuiltinMethod.java', 'ColumnLoader.java', 'JdbcToEnumerableConverter.java', 'OptiqConnectionImpl.java', 'Prepare.java', 'JdbcTest.java', 'OptiqAssert.java', 'pom.xml']"
0f5d8ff5742bfb442057a06f60d2d7dbc0f7f815,"Make it easy to switch the test suite between hsqldb and MySQL (and potentially other databases). Fix some issues regarding getting timestamps from MySQL via JDBC.

Stop hsqldb from turning on tracing. It causes a major performance impact in the planner.",['0a5d69a0f11807bf3b12b994ca9776c18dab7de2'],False,"['BuiltinMethod.java', 'JdbcToEnumerableConverter.java', 'JdbcUtils.java', 'ModelHandler.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'ModelTest.java', 'OptiqAssert.java']"
23d2cd016aa8672d23619a92dce11200ba2a0d9f,"Fix precedence of the item operator, 'map[index]'; remove the space before '[' when converting parse tree to string.",['168aa31722ac6dd63cd7633e1761d06da5ff51d9'],False,"['SqlItemOperator.java', 'SqlPrettyWriter.java', 'SqlParserTest.java']"
5df4f0fe7c976f276064e0eaa4f4519729437970,"Fix a planner issue where left and right children of join are the same relational expression, caused by a self-join query.",['23d2cd016aa8672d23619a92dce11200ba2a0d9f'],False,"['RelSet.java', 'RelSubset.java', 'VolcanoRuleCall.java', 'JdbcTest.java']"
05cfa435f99e1ecfe697a757a58c5fa8e48580b8,"Fix excessive logging by creating a single point to create BasicDataSource, and if it is for hsqldb, setting a property to prevent hsqldb from reconfiguring java.util.logging.",['5df4f0fe7c976f276064e0eaa4f4519729437970'],False,"['JdbcSchema.java', 'ModelHandler.java', 'OptiqAssert.java', 'SplunkDriver.java']"
d6e9467cdbd25b20a9173e596a4d90091a742a84,Avoid dodgy junit-4.1.12 in pentaho's maven repo.,['05cfa435f99e1ecfe697a757a58c5fa8e48580b8'],False,['pom.xml']
407c012dc40a0506e01edd732e1295e1bf2f25f5,"Add RelShuttle, a visitor that visits the common logical relational expressions, and RelShuttleImpl that helps you to change selected nodes in a tree.",['d6e9467cdbd25b20a9173e596a4d90091a742a84'],False,"['AbstractRelNode.java', 'AggregateRel.java', 'FilterRel.java', 'IntersectRel.java', 'JoinRel.java', 'MinusRel.java', 'ProjectRel.java', 'ProjectRelBase.java', 'RelNode.java', 'RelShuttle.java', 'RelShuttleImpl.java', 'SortRel.java', 'TableAccessRel.java', 'TableAccessRelBase.java', 'UnionRel.java', 'ValuesRel.java']"
2145b9bd56b03a8bb10840219abd5e606fc932f1,"Fix data type conversion when creating a clone table in memory. Column loader now accepts an argument describing what data type is used to express each field.

Better handling of JdbcSchema when the list of tables in schema has been pre-populated but the columns of a particular table have not.

Make timeZone available for queries that populate in-memory tables.

Refactor and add tests for code relating to Mapping.

Fix how strings are escaped in JsonBuilder.

By default, test suite runs against hsqldb but you can pass '-Doptiq.test.db=mysql' to override.",['407c012dc40a0506e01edd732e1295e1bf2f25f5'],False,"['Schema.java', 'Schemas.java', 'TableFunction.java', 'TableInSchemaImpl.java', 'CloneSchema.java', 'ColumnLoader.java', 'JdbcSchema.java', 'Meta.java', 'MaterializationService.java', 'PullUpProjectsAboveJoinRule.java', 'PushJoinThroughJoinRule.java', 'JsonBuilder.java', 'Mappings.java', 'ArrayTableTest.java', 'OptiqAssert.java', 'FrameworksTest.java', 'UtilTest.java']"
feadc06e589890ce984fed6901d48de876bc9d96,"Fix how AvaticaResultSet finds columns by ordinal and by label.

Remove the map of columns by name. In common cases, such as if there are fewer than 30 columns, it is more efficient to scan a list.

Convert some public members of avatica classes to protected or package-protected, adding the Trojan class to allow access by providers.",['b7214a413e18de0fef38468af7786c7af185f931'],False,"['AvaticaConnection.java', 'AvaticaPreparedStatement.java', 'AvaticaResultSet.java', 'AvaticaStatement.java', 'MetaImpl.java', 'OptiqConnectionImpl.java', 'OptiqResultSet.java', 'OptiqStatement.java', 'JdbcTest.java']"
57456bb77feee1b1b994e209e72c17b62c440ad8,"Fix https://github.com/julianhyde/optiq/issues/85 ""Adding a table to the root schema causes breakage in OptiqPrepareImpl"".",['feadc06e589890ce984fed6901d48de876bc9d96'],False,"['OptiqPrepareImpl.java', 'OptiqSuite.java', 'TableInRootSchemaTest.java']"
e7fb415bc7a9502c444631ded8eabf5a1b1ad0fc,"Fix JDBC column, table, schema names for when the table is not in a schema of depth 1.",['57456bb77feee1b1b994e209e72c17b62c440ad8'],False,"['OptiqPrepareImpl.java', 'TableInRootSchemaTest.java']"
28c28b2805b651960adc1c2d09dc1d1c5735c9b8,"Fix https://github.com/julianhyde/optiq/issues/74 ""JOIN ... USING fails in 3-way join with UnsupportedOperationException"".",['e7fb415bc7a9502c444631ded8eabf5a1b1ad0fc'],False,"['RelCrossType.java', 'RelDataTypeFactoryImpl.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.ref.xml', 'SqlValidatorTest.java']"
913269f36b853bcf7f33b96ed0bbd8b989a3cac1,"Fix https://github.com/julianhyde/optiq/issues/69, ""Can't join on string columns"".

 We now push join expressions down to the inputs of the join, to keep the join condition as simple as possible. In issue 69, the string columns had implicit casts, and those were sufficient to gum up the works.",['5b1e6b3e98f6a904e33bd328fb58800d1fddea58'],False,"['RelOptUtil.java', 'RexUtil.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.ref.xml']"
973ec3c83da54dbd55753b74dad955421f240bc7,Fix issue URLs in release notes.,['537eda3595cff62b2f2c8506508d00d333151973'],False,['RELEASE.md']
cfc51d511b9abf455f8e2c8443f20881984d2a09,Upgrade to optiq-0.4.16. Add a test case for Optiq issue https://github.com/julianhyde/optiq/issues/69.,['387bee8b616623d91103751e8afe6d7c21842446'],False,"['pom.xml', 'CsvTest.java']"
4caca8c2e30fe447e87c3714a0fb0a989d53dffb,Wrap internal error in SQLException.,['447df5597d4ceb9f1551639de4226bbc841f5814'],False,['AvaticaStatement.java']
69dac21e57f00a07b5c2fa6037d777231e58d302,Fix a code-generation issue; re-enable most tests against FoodMart.,['cb6732f4d6486f5593df041134db18497d8f4ed1'],False,"['PhysTypeImpl.java', 'JdbcTest.java']"
e36be7eb9910d91dee93b6f16cf212d8e6cc99a9,"Disable the troublesome FoodMart queries.

(I think they're causing test failures in Travis because they put a strain on memory. But it's difficult to be sure.)",['aa5ed9bc146d523f151502bd73700a1b2ababbff'],False,['JdbcTest.java']
42ae6877a7832483e2bb058a839682cc691f5cc4,"Fix https://github.com/julianhyde/optiq/issues/96, ""LIMIT against a table in a clone schema causes UnsupportedOperationException"".",['b62c8379ad96c21c7abd66a171c0663ae9dc9fc1'],False,"['BuiltinMethod.java', 'ArrayTable.java', 'JavaRules.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcTest.java']"
8b9f63dea5f9e84326f3fa0f2ae84c686cdd6592,"Asymmetric join and distinct.

1. Make join asymmetric; now builds only RHS into hash table, not both sides as at present. This should improve performance, especially when we change Optiq to put large relations on the left.
2. Implement Enumerable.distinct() and .distinct(EqualityComparer).
3. Add implementation of EqualityComparer that uses a selector function.",['7b1469fa06543c73b820d686ffe147018c1aabda'],False,"['EnumerableDefaults.java', 'EnumerableQueryable.java', 'Functions.java', 'Linq4jTest.java']"
5a58db888619e1690be4cd92c26dba5813331b08,Fix factory class names in UnregisteredDriver,['42ae6877a7832483e2bb058a839682cc691f5cc4'],False,['UnregisteredDriver.java']
fbc0a8b7388164567835ce7064fbaff653ce7542,"Merge pull request #100 from mehant/master

Fix factory class names in UnregisteredDriver","['42ae6877a7832483e2bb058a839682cc691f5cc4', '5a58db888619e1690be4cd92c26dba5813331b08']",True,[]
543117d0f8db2a11077e299d9dee7bf1abefa04a,"Trim fields by default.

We do not currently trim fields if there are more than 3 joins, because the additional projects seem to prevent PushJoinThroughJoinRule from firing correctly.

Fixes https://github.com/julianhyde/optiq/issues/70, ""Joins seem to be very expensive in memory"".",['fbc0a8b7388164567835ce7064fbaff653ce7542'],False,"['Prepare.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcTest.java', 'pom.xml']"
0786c7d649d80429fc05083eefd20eaf81b28306,"To take advantage of asymmetric hash join added recently in linq4j, tweak cost of EnumerableJoinRel so that join is cheaper if the larger input is on the left, and more expensive if it is a cartesian product.

Fix a bug in VolcanoCost.

Add class FoodMartQuerySet, that contains the 6,700 foodmart queries.",['543117d0f8db2a11077e299d9dee7bf1abefa04a'],False,"['MetaImpl.java', 'JavaRules.java', 'VolcanoCost.java', 'FoodmartTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcTest.java', 'OptiqAssert.java']"
e553b8d33cfb4195007e0c27c1edbfa42675e91e,"Fix https://github.com/julianhyde/optiq/issues/97, correlated EXISTS. Add test cases for join-ordering optimization.",['465b7746235a3d4e08a604e1fac07b2c69915557'],False,"['JdbcImplementor.java', 'OptiqPrepareImpl.java', 'Prepare.java', 'DefaultDirectedGraph.java', 'CalcRel.java', 'CorrelatorRel.java', 'HepPlanner.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java']"
04eee854abdda73f0d7e62dc3726b1737c25f45f,Fix typo.,['3a8727f478cdc8e827de3108f30d36a27089e377'],False,['RELEASE.md']
a7b5ee32b688a6e62df6e3dc7d4841297853294e,"Fix bugs in RemoveTrivialProjectRule.strip, JdbcProjectRel.implement and SortRel.computeSelfCost. Remove prints.",['7f9cde51184c8bf5da702af1b5e0191c372e572a'],False,"['JdbcRules.java', 'SortRel.java', 'RemoveTrivialProjectRule.java', 'OptiqAssert.java']"
c92765900e1ba32b4a75e31d26f9fe34269804e8,"Change existing rules to use the new methods to construct operands: operand(), leaf(), any(), none(), unordered().",['a7b5ee32b688a6e62df6e3dc7d4841297853294e'],False,"['JavaRules.java', 'TraitMatchingRule.java', 'AddRedundantSemiJoinRule.java', 'CoerceInputsRule.java', 'CombineUnionsRule.java', 'ConvertMultiJoinRule.java', 'ExtractJoinFilterRule.java', 'FilterToCalcRule.java', 'MergeCalcRule.java', 'MergeFilterOntoCalcRule.java', 'MergeFilterRule.java', 'MergeProjectOntoCalcRule.java', 'MergeProjectRule.java', 'NestedLoopsJoinRule.java', 'ProjectToCalcRule.java', 'PullConstantsThroughAggregatesRule.java', 'PullUpAggregateAboveUnionRule.java', 'PullUpProjectsAboveJoinRule.java', 'PullUpProjectsOnTopOfMultiJoinRule.java', 'PushAggregateThroughUnionRule.java', 'PushFilterIntoMultiJoinRule.java', 'PushFilterPastJoinRule.java', 'PushFilterPastProjectRule.java', 'PushFilterPastSetOpRule.java', 'PushFilterPastTableFunctionRule.java', 'PushJoinThroughJoinRule.java', 'PushJoinThroughUnionRule.java', 'PushProjectIntoMultiJoinRule.java', 'PushProjectPastFilterRule.java', 'PushProjectPastJoinRule.java', 'PushProjectPastSetOpRule.java', 'PushProjectPastSortRule.java', 'PushSemiJoinPastFilterRule.java', 'PushSemiJoinPastJoinRule.java', 'PushSemiJoinPastProjectRule.java', 'PushSortPastProjectRule.java', 'ReduceAggregatesRule.java', 'ReduceDecimalsRule.java', 'RemoveDistinctAggregateRule.java', 'RemoveDistinctRule.java', 'RemoveEmptyRule.java', 'RemoveIsNotDistinctFromRule.java', 'RemoveSemiJoinRule.java', 'RemoveSortRule.java', 'RemoveTrivialCalcRule.java', 'SwapJoinRule.java', 'TableAccessRule.java', 'UnionEliminatorRule.java', 'UnionToDistinctRule.java', 'RelOptRule.java', 'RelOptRuleOperand.java', 'RelOptRuleOperandChildren.java', 'AbstractConverter.java', 'RelDecorrelator.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'MongoRules.java']"
a72dd5af78ea88459a6c07f5b200d4165fe1f228,"Rename OptiqAssert.assertThat() to .that(), to avoid clash with junit's Assert.assertThat().",['fd92963153cc116461fc3dd69bb6866e5dfd31b1'],False,"['FoodmartTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'MaterializationTest.java', 'ModelTest.java', 'OptiqAssert.java', 'ReflectiveSchemaTest.java', 'MongoAdapterTest.java']"
dd44259294363045985cf2bf4e017a410c8c143f,"Fix https://github.com/julianhyde/optiq/issues/101, ""Enable phased access to the Optiq engine"".",['d89a7fb66afb78d7a6928d7d851f002380588a48'],False,"['ViewTable.java', 'OptiqPrepare.java', 'LixToRelTranslator.java', 'OptiqCatalogReader.java', 'OptiqMaterializer.java', 'OptiqPrepareImpl.java', 'OptiqSqlValidator.java', 'PlannerImpl.java', 'Prepare.java', 'Frameworks.java', 'Planner.java', 'RelConversionException.java', 'RuleSet.java', 'RuleSets.java', 'ValidationException.java', 'TableAccessRule.java', 'RelOptPlanner.java', 'RelOptTable.java', 'HepPlanner.java', 'VolcanoPlanner.java', 'SqlToRelConverter.java', 'OptiqSuite.java', 'FrameworksTest.java', 'PlannerTest.java', 'MockCatalogReader.java', 'MockRelOptPlanner.java']"
66edfe073134daf18823e092981b72aeb7eb9994,"Fix https://github.com/julianhyde/optiq/issues/106, ""Make Schema and Table SPIs simpler to implement, and make them re-usable across connections"".",['dd44259294363045985cf2bf4e017a410c8c143f'],False,"['UnregisteredDriver.java', 'BuiltinMethod.java', 'DataContext.java', 'ModifiableTable.java', 'MutableSchema.java', 'Parameter.java', 'QueryableTable.java', 'Schema.java', 'SchemaFactory.java', 'SchemaPlus.java', 'Schemas.java', 'Table.java', 'TableFactory.java', 'TableFunction.java', 'TranslatableTable.java', 'AbstractSchema.java', 'AbstractTable.java', 'AbstractTableQueryable.java', 'DelegatingSchema.java', 'MapSchema.java', 'MaterializedViewTable.java', 'StarTable.java', 'ViewTable.java', 'ArrayTable.java', 'CloneSchema.java', 'ColumnLoader.java', 'ListTable.java', 'AbstractQueryableTable.java', 'MapSchema.java', 'ReflectiveSchema.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcToEnumerableConverter.java', 'Driver.java', 'MetaImpl.java', 'MetadataSchema.java', 'OptiqConnection.java', 'OptiqConnectionImpl.java', 'OptiqFactory.java', 'OptiqJdbc40Factory.java', 'OptiqJdbc41Factory.java', 'OptiqPrepare.java', 'OptiqRootSchema.java', 'OptiqSchema.java', 'MaterializationActor.java', 'MaterializationService.java', 'ModelHandler.java', 'LixToRelTranslator.java', 'OptiqCatalogReader.java', 'OptiqMaterializer.java', 'OptiqPrepareImpl.java', 'PlannerImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'EnumerableRelImplementor.java', 'JavaRelImplementor.java', 'JavaRules.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'Frameworks.java', 'CompositeMap.java', 'RelOptAbstractTable.java', 'RelOptMaterialization.java', 'RelOptTable.java', 'RelDataTypeImpl.java', 'RelProtoDataType.java', 'JdbcExample.java', 'ArrayTableTest.java', 'RangeTable.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LinqFrontJdbcBackTest.java', 'OptiqAssert.java', 'ReflectiveSchemaTest.java', 'SqlToRelConverterExtendedTest.java', 'TableInRootSchemaTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'RelWriterTest.java', 'MockCatalogReader.java', 'SqlToRelTestBase.java', 'UtilTest.java', 'MongoMethod.java', 'MongoRel.java', 'MongoSchema.java', 'MongoSchemaFactory.java', 'MongoTable.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'MongoAdapterTest.java', 'EnumerableToSparkConverter.java', 'JdbcToSparkConverterRule.java', 'SparkRules.java', 'SparkAdapterTest.java', 'SplunkDriver.java', 'SplunkSchema.java', 'SplunkTable.java']"
9f0f3fc46d2216363f90c559487e3193bbee0f2e,Fix JDK 1.6.,['66edfe073134daf18823e092981b72aeb7eb9994'],False,['CompositeMap.java']
fc5b454596c72cf8ab4cf56f6c7476570d93bb09,Fix link to optiq-csv tutorial.,['9f0f3fc46d2216363f90c559487e3193bbee0f2e'],False,['HOWTO.md']
b97f74c3171317ce747c121c3b3d6b999b756b94,Fixes for optiq SPI changes in https://github.com/julianhyde/optiq/issues/106.,['42ea67c4f9b4b0ca5169b9033a4a3523b17f8f8e'],False,"['pom.xml', 'CsvSchema.java', 'CsvSchemaFactory.java', 'CsvSmartTable.java', 'CsvTable.java', 'CsvTableFactory.java', 'CsvTableScan.java']"
e5b0d9d68b802f12aeaaef32ce7ef6a274a2ebda,"Fix bug in planner which occurred when two RelNodes have identical digest but different row-type.

More specifics: Running OptiqSqlOperatorTest.testCharacterLengthFunc with constant-reduction rules enabled, one ProjectRel had an INTEGER null literal and another had a VARCHAR null literal.",['71aee6d34789bd30d1ae37a5ae089f2c4ee66ee7'],False,['VolcanoPlanner.java']
221739354b56e34e9f1d41b42a0e6881a8f5ddee,Fix several bugs in constant-reduction. Also some bugs in code-generation.,['a1f3e55b3d06d283bbd802e107a0e22d7963979f'],False,"['BuiltinMethod.java', 'Schemas.java', 'OptiqConnectionImpl.java', 'OptiqPrepare.java', 'OptiqPrepareImpl.java', 'Prepare.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'ValuesRelBase.java', 'ReduceExpressionsRule.java', 'AbstractRelOptPlanner.java', 'RelOptPlanner.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'RexBuilder.java', 'RexExecutorImpl.java', 'SqlItemOperator.java', 'SqlTypeUtil.java', 'SqlOperatorBaseTest.java']"
09e19d672fafb865be57a537d8e0ed26d5893ea5,"Remove deprecated methods and constructors ahead of optiq-0.4.18.

Fix broken links in javadoc.

Mark RexNode.clone() as deprecated, and remove calls to it.",['39595df932a66a47fcc21558d1ffe5139297b3ea'],False,"['ProjectRel.java', 'ProjectRelBase.java', 'MultiJoinRel.java', 'ReduceDecimalsRule.java', 'SwapJoinRule.java', 'RelOptRule.java', 'package.html', 'RexBuilder.java', 'RexCorrelVariable.java', 'RexDynamicParam.java', 'RexFieldAccess.java', 'RexLiteral.java', 'RexNode.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexRangeRef.java', 'RexUtil.java', 'package.html', 'package.html', 'SqlTypeUtil.java', 'RelStructuredTypeFlattener.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'SargTest.java', 'MongoAdapterTest.java']"
664ac3080d73c2543f0afed3ae898d3d92933fa6,Fix escaped unicode characters above 0x8000. Add tests for unicode strings.,['f6fe9d11e66ee5d4e3956339a10a82117feb4304'],False,"['SqlLiteral.java', 'JdbcTest.java']"
b575e35b994c7a696956984d05d6d6edb0b881b2,"Fix https://github.com/julianhyde/optiq/issues/112, ""Java boolean column should be treated as SQL boolean"".",['dde97da70abfbbd7ea3e08b28b147f43d5fbd615'],False,"['RelDataTypeFactoryImpl.java', 'ReflectiveSchemaTest.java']"
3d256ca1ee44f61f1a32b5bb670d1a6d075319c7,"Fix https://github.com/julianhyde/optiq/issues/114, ""Short-cut query if LIMIT 0 is present"".

Add rules to short-cut a query if LIMIT 0 is present. Also remove sort, aggregation, join if their inputs are known to be empty, and propagate the fact that the relational expressions are known to be empty up the tree. (We already do this for union, filter, project.)

Rename RemoveEmptyRule to RemoveEmptyRules, since it is no longer a rule, just a namespace for other rules.",['6bd6e8e648880856fd23543529228cfcede4825f'],False,"['OptiqPrepareImpl.java', 'JavaRules.java', 'EmptyRel.java', 'SortRel.java', 'RemoveEmptyRule.java', 'RemoveEmptyRules.java', 'RelOptUtil.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.ref.xml']"
7971fbf3aef6023115f5984826d78c296a44cae6,"Fix https://github.com/julianhyde/optiq/issues/113, ""User-defined scalar functions"".

A scalar UDF is defined by a class that has a single method called ""eval"". If the method is non-static, the class must be instantiable using a public 0-parameter constructor.",['3629ffbffb9f5b969798d6a4693992cab97b967c'],False,"['ScalarFunction.java', 'ScalarFunctionImpl.java', 'JdbcRules.java', 'JsonMapSchema.java', 'JsonRoot.java', 'ModelHandler.java', 'OptiqCatalogReader.java', 'OptiqPrepareImpl.java', 'JavaRules.java', 'RexImpTable.java', 'RelOptRule.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeImpl.java', 'SqlFunction.java', 'ExplicitReturnTypeInference.java', 'SqlTypeStrategies.java', 'TableFunctionReturnTypeInference.java', 'ChainedSqlOperatorTable.java', 'AliasNamespace.java', 'SqlUserDefinedFunction.java', 'SqlValidatorImpl.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java']"
2cdbcac089523ca9af3f08549f7f10137ac6a412,"Fix https://github.com/julianhyde/optiq/issues/33, ""SQL parser should allow different identifier quoting"".

Each of the identifier quoting styles (""double quoted"", `back tick` and [bracketed]) is implemented as a lexical state, which the lexer enters as soon as it starts parsing. All tokens except identifiers are in common between those lexical states. This makes the lexer's table about 3x its previous size.",['d9c0a899bc7d1517f2ab8a842a2b9adcdba03c65'],False,"['ConnectionProperty.java', 'ConnectionConfig.java', 'OptiqConnectionImpl.java', 'OptiqPrepareImpl.java', 'SqlAdvisor.java', 'SqlParser.java', 'SqlParserUtil.java', 'CombinedParser.jj', 'SqlParserTest.java']"
c5bbb7b61dd4abc7a7fbf5617195e7dd8df52b07,"Fix https://github.com/julianhyde/optiq/issues/61, ""Upgrade to janino-2.7"".",['0fbd4e13be3d7441e5db3db683939d667c89314d'],False,['pom.xml']
271bca11f4b53732d00d946e8774f5cacdc80c7d,Fix close-bracket.,['4b479c91df2b763de6ab2fb6527bf0f04cd2ca8a'],False,"['CombinedParser.jj', 'SqlParserTest.java']"
d8a4eeb8d5eb8a138e1e3a3e6748a6d8a3aa2e8f,"Fix https://github.com/julianhyde/optiq/issues/34, ""Policy for case-sensitivity of identifiers should be configurable"".

New connect-string parameter ""lex"", with allowable values ""ORACLE"", ""MYSQL"", ""SQL_SERVER"" sets policy to be like those databases, in terms of quote string, whether quoted and unquoted identifiers are converted to upper/lower case, and whether identifiers are matched case-sensitively. It should be possible for each connection to have its own settings for these. Objects shared between sessions (views, materialized views) might require more work.

I've added various internals to make it easy for developers to do the right thing. When you need to look up a schema, table or column/field name, you should use a catalog reader, and it will apply the right case-sensitivity policy. I've removed a few methods that looked up a field without asking for case-sensitivity policy.

Added a mechanism for defining configuration parameters and have them appear in the responses to AvaticaDatabaseMetaData methods.",['2338308ea25864cf40b08a99df1dc9ab4fda7567'],False,"['AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'Casing.java', 'ConnectionProperty.java', 'InternalProperty.java', 'Quoting.java', 'ConnectionConfig.java', 'OptiqConnectionImpl.java', 'OptiqCatalogReader.java', 'OptiqPrepareImpl.java', 'PlannerImpl.java', 'RelJson.java', 'TableModificationRelBase.java', 'PushSemiJoinPastProjectRule.java', 'RelOptUtil.java', 'RelCrossType.java', 'RelDataType.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeImpl.java', 'RexBuilder.java', 'RexFieldAccess.java', 'SqlParser.java', 'SqlParserUtil.java', 'AbstractNamespace.java', 'DelegatingScope.java', 'JoinNamespace.java', 'ListScope.java', 'OrderByScope.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'Util.java', 'CombinedParser.jj', 'JdbcTest.java', 'OptiqAssert.java', 'FrameworksTest.java', 'RelWriterTest.java', 'SqlParserTest.java', 'DefaultSqlTestFactory.java', 'SqlAdvisorTest.java', 'SqlTester.java', 'SqlTesterImpl.java', 'MockCatalogReader.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.ref.xml', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'MongoAdapterTest.java', 'SplunkTableAccessRel.java']"
837033f1a3f1fa68f5e6fbd9b5f334759b206243,"Fix 3 race conditions.

Two of the race conditions involved involving trait caches. The other was indeterminacy in type system when precision was not specified but had a default; now we canonize TIME to TIME(0), for instance.",['b9309512a4817675955cd96daef978ec8b11f917'],False,"['ConventionTraitDef.java', 'RelTraitDef.java', 'SqlTypeFactoryImpl.java', 'SqlValidatorTest.java']"
3709d7501fbd27c93d66c6f7c606624386b409fc,"Fix https://github.com/julianhyde/optiq/issues/119, ""Comparing Java type long with SQL type INTEGER gives wrong answer"".",['4f99ac48c6a371bd6ec85bb57b71cfe941b01e78'],False,"['RexImpTable.java', 'ReflectiveSchemaTest.java']"
3511f3a830dcf41d86c14a19149c36537d488594,Fix SqlValidator to rely on RelDataType to do field name matching.  Fix RelDataTypeImpl to correctly use the case sensitive flag rather than ignoring it.,['8e5751d097bb20f6860a9194098e878329870b8d'],False,"['RelDataTypeImpl.java', 'SqlValidatorUtil.java']"
fa95ca4484fdaf785e0a87b557ca54a0993b4eb0,Fix checkstyle exceptions.,['d1295c40a9a54b1f411e4a50576aa0a567742f16'],False,"['AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'ConnectStringParser.java', 'HandlerImpl.java', 'ConnectStringParserTest.java', 'package-info.java', 'Schemas.java', 'Statistics.java', 'MaterializedViewTable.java', 'ViewTable.java', 'ArrayTable.java', 'ColumnLoader.java', 'package-info.java', 'ReflectiveSchema.java', 'JdbcImplementor.java', 'JdbcQueryProvider.java', 'JdbcRel.java', 'JdbcRules.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverter.java', 'JdbcUtils.java', 'ConnectionConfig.java', 'Driver.java', 'JavaTypeFactoryImpl.java', 'MetaImpl.java', 'MetadataSchema.java', 'OptiqConnectionImpl.java', 'OptiqJdbc41Factory.java', 'OptiqPrepare.java', 'OptiqPreparedStatement.java', 'OptiqStatement.java', 'SqlTimeoutException.java', 'JsonRoot.java', 'JsonSchema.java', 'JsonTable.java', 'JsonView.java', 'ModelHandler.java', 'LixToRelTranslator.java', 'OptiqPrepareImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'EnumerableConvention.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'JavaRowFormat.java', 'JavaRules.java', 'PhysTypeImpl.java', 'RexToLixTranslator.java', 'AbstractCursor.java', 'ArrayEnumeratorCursor.java', 'Bindable.java', 'ComparableComparator.java', 'FlatLists.java', 'Like.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java', 'Spacer.java', 'SqlFunctions.java', 'Utilities.java', 'Frameworks.java', 'Planner.java', 'package-info.java', 'PartiallyOrderedSet.java', 'Graphs.java', 'package-info.java', 'JaninoCompiler.java', 'package-info.java', 'package-info.java', 'AbstractRelNode.java', 'AggregateRel.java', 'AggregateRelBase.java', 'CalcRel.java', 'CollectRel.java', 'CorrelatorRel.java', 'JoinRelBase.java', 'ProjectRelBase.java', 'RelImplementorImpl.java', 'RelJson.java', 'SingleRel.java', 'TableAccessRel.java', 'TableAccessRelBase.java', 'TableFunctionRel.java', 'TableModificationRelBase.java', 'UncollectRel.java', 'ValuesRelBase.java', 'WindowRelBase.java', 'ConverterRule.java', 'NoneConverterRel.java', 'package-info.java', 'package-info.java', 'RelMdColumnUniqueness.java', 'RelMdPercentageOriginalRows.java', 'RelMdUtil.java', 'RelMetadataQuery.java', 'package-info.java', 'package-info.java', 'AddRedundantSemiJoinRule.java', 'CalcRelSplitter.java', 'CombineUnionsRule.java', 'ConvertMultiJoinRule.java', 'ExtractJoinFilterRule.java', 'FilterToCalcRule.java', 'MergeCalcRule.java', 'MergeFilterOntoCalcRule.java', 'MergeFilterRule.java', 'MergeProjectOntoCalcRule.java', 'MergeProjectRule.java', 'NestedLoopsJoinRule.java', 'ProjectToCalcRule.java', 'PullConstantsThroughAggregatesRule.java', 'PullUpAggregateAboveUnionRule.java', 'PullUpProjectsAboveJoinRule.java', 'PullUpProjectsOnTopOfMultiJoinRule.java', 'PushAggregateThroughUnionRule.java', 'PushFilterIntoMultiJoinRule.java', 'PushFilterPastJoinRule.java', 'PushFilterPastProjectRule.java', 'PushFilterPastSetOpRule.java', 'PushFilterPastTableFunctionRule.java', 'PushJoinThroughUnionRule.java', 'PushProjectIntoMultiJoinRule.java', 'PushProjectPastFilterRule.java', 'PushProjectPastJoinRule.java', 'PushProjectPastSetOpRule.java', 'PushProjector.java', 'PushSemiJoinPastFilterRule.java', 'PushSemiJoinPastJoinRule.java', 'PushSemiJoinPastProjectRule.java', 'ReduceAggregatesRule.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'ReduceValuesRule.java', 'RemoveDistinctAggregateRule.java', 'RemoveDistinctRule.java', 'RemoveIsNotDistinctFromRule.java', 'RemoveSemiJoinRule.java', 'RemoveTrivialCalcRule.java', 'RemoveTrivialProjectRule.java', 'SwapJoinRule.java', 'TableAccessRule.java', 'UnionEliminatorRule.java', 'UnionToDistinctRule.java', 'WindowedAggSplitterRule.java', 'package-info.java', 'AbstractRelOptPlanner.java', 'Convention.java', 'ConventionTraitDef.java', 'RelOptCost.java', 'RelOptCostImpl.java', 'RelOptMaterialization.java', 'RelOptPlanner.java', 'RelOptQuery.java', 'RelOptRuleCall.java', 'RelOptRuleOperandChildren.java', 'RelOptSchema.java', 'RelOptUtil.java', 'RelTraitSet.java', 'SubstitutionVisitor.java', 'HepPlanner.java', 'HepProgramBuilder.java', 'package-info.java', 'package-info.java', 'AbstractConverter.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoCost.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'VolcanoRuleMatch.java', 'package-info.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeField.java', 'RelDataTypeFieldImpl.java', 'RelDataTypeImpl.java', 'package-info.java', 'EigenbaseResource_en_US.java', 'package-info.java', 'RexBuilder.java', 'RexChecker.java', 'RexExecutorImpl.java', 'RexInputRef.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexMultisetUtil.java', 'RexOver.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexSqlStandardConvertletTable.java', 'RexTransformer.java', 'RexUtil.java', 'package-info.java', 'package-info.java', 'SargEndpoint.java', 'SargInterval.java', 'SargIntervalBase.java', 'SargIntervalExpr.java', 'SargIntervalSequence.java', 'SargRexAnalyzer.java', 'SargSetExpr.java', 'package-info.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlDialect.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlJoinOperator.java', 'SqlLiteral.java', 'SqlNumericLiteral.java', 'SqlOperator.java', 'SqlSelect.java', 'SqlSyntax.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlUpdate.java', 'SqlUtil.java', 'SqlWindowOperator.java', 'SqlAdvisor.java', 'SqlAdvisorValidator.java', 'SqlSimpleParser.java', 'package-info.java', 'SqlAbstractTimeFunction.java', 'SqlArrayQueryConstructor.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlConvertFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlInOperator.java', 'SqlLiteralChainOperator.java', 'SqlNullifFunction.java', 'SqlOverlapsOperator.java', 'SqlOverlayFunction.java', 'SqlStdOperatorTable.java', 'SqlSubstringFunction.java', 'SqlTrimFunction.java', 'package-info.java', 'package-info.java', 'SqlAbstractParserImpl.java', 'SqlParser.java', 'SqlParserUtil.java', 'package-info.java', 'package-info.java', 'SqlPrettyWriter.java', 'package-info.java', 'ArraySqlType.java', 'BasicSqlType.java', 'CompositeOperandTypeChecker.java', 'JavaToSqlTypeConversionRules.java', 'SqlTypeAssignmentRules.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeFactoryImpl.java', 'SqlTypeStrategies.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'package-info.java', 'SqlBasicVisitor.java', 'package-info.java', 'AggChecker.java', 'SelectScope.java', 'SqlMonikerComparator.java', 'SqlValidatorException.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'package-info.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'package-info.java', 'package-info.java', 'EigenbaseLogger.java', 'EigenbaseTrace.java', 'package-info.java', 'ArrayQueue.java', 'BarfingInvocationHandler.java', 'BitString.java', 'ChunkList.java', 'DelegatingInvocationHandler.java', 'EigenbaseContextException.java', 'EigenbaseException.java', 'MainApp.java', 'NlsString.java', 'ReflectUtil.java', 'RhBase64.java', 'SerializableCharset.java', 'StackWriter.java', 'StringChunker.java', 'Util.java', 'package-info.java', 'package-info.java', 'DateTimeUtil.java', 'NumberUtil.java', 'package-info.java', 'CombinedParser.jj', 'JdbcExample.java', 'package-info.java', 'ArrayTableTest.java', 'package-info.java', 'package-info.java', 'FoodmartTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcTest.java', 'ModelTest.java', 'OptiqAssert.java', 'ReflectiveSchemaTest.java', 'PlannerTest.java', 'package-info.java', 'PartiallyOrderedSetTest.java', 'package-info.java', 'package-info.java', 'RelOptUtilTest.java', 'package-info.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'package-info.java', 'SqlParserTest.java', 'package-info.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlPrettyWriterTest.java', 'SqlTests.java', 'package-info.java', 'DiffRepository.java', 'DiffTestCase.java', 'FilteratorTest.java', 'HepPlannerTest.java', 'MockCatalogReader.java', 'RelOptRulesTest.java', 'SqlToRelTestBase.java', 'SqlValidatorTestCase.java', 'ConcurrentTestCommand.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestPluginCommand.java', 'SamplePlugin.java', 'package-info.java', 'package-info.java', 'ChunkListTest.java', 'OptionsListTest.java', 'UtilTest.java', 'package-info.java', 'package-info.java', 'MongoRules.java', 'MongoToEnumerableConverter.java', 'MongoAdapterTest.java', 'package-info.java', 'pom.xml', 'SplunkConnection.java', 'package-info.java', 'HttpUtils.java', 'SocketFactoryImpl.java', 'StringUtils.java', 'TrustAllSslSocketFactory.java', 'package-info.java', 'SplunkAdapterTest.java', 'package-info.java', 'checkstyle-suppressions.xml', 'checkstyle.xml', 'license-header.txt']"
3b768469f00c2a2cd84aa29402d4d8c3d8e64e90,Oops! (Fix JDK 1.6 and JDK 1.7.),['fa95ca4484fdaf785e0a87b557ca54a0993b4eb0'],False,"['RelOptCostImpl.java', 'VolcanoCost.java']"
973e0d07234556db4a7969c4bc36dc307810d194,"Break SqlTypeStrategies into OperandTypes, ReturnTypes and InferTypes, and rename its static members to upper-case, per checkstyle.

Upgrade ""spark"" module and fix checkstyle exceptions.",['d9846bd791ead9bbb0ccbdec4eeeac52517a9bf6'],False,"['JdbcRules.java', 'OptiqPrepare.java', 'RelMdUtil.java', 'SqlAsOperator.java', 'SqlCall.java', 'SqlJdbcFunctionCall.java', 'SqlOverOperator.java', 'SqlRankFunction.java', 'SqlSelectOperator.java', 'SqlSetOperator.java', 'SqlUnnestOperator.java', 'SqlAbstractTimeFunction.java', 'SqlAvgAggFunction.java', 'SqlBetweenOperator.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlCeilFunction.java', 'SqlCoalesceFunction.java', 'SqlCollectionTableOperator.java', 'SqlColumnListConstructor.java', 'SqlCountAggFunction.java', 'SqlCurrentDateFunction.java', 'SqlCursorConstructor.java', 'SqlDatetimeSubtractionOperator.java', 'SqlExtractFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlFloorFunction.java', 'SqlHistogramAggFunction.java', 'SqlInOperator.java', 'SqlItemOperator.java', 'SqlLikeOperator.java', 'SqlLiteralChainOperator.java', 'SqlMinMaxAggFunction.java', 'SqlMultisetMemberOfOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetSetOperator.java', 'SqlMultisetValueConstructor.java', 'SqlNullifFunction.java', 'SqlOverlapsOperator.java', 'SqlOverlayFunction.java', 'SqlPositionFunction.java', 'SqlRowOperator.java', 'SqlSingleValueAggFunction.java', 'SqlStdOperatorTable.java', 'SqlStringContextVariable.java', 'SqlSubstringFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'SqlThrowOperator.java', 'SqlTrimFunction.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'ExplicitReturnTypeInference.java', 'FamilyOperandTypeChecker.java', 'InferTypes.java', 'MultisetOperandTypeChecker.java', 'OperandTypes.java', 'ReturnTypes.java', 'SameOperandTypeChecker.java', 'SqlReturnTypeInferenceChain.java', 'SqlTypeStrategies.java', 'SqlUserDefinedFunction.java', 'SqlValidatorImpl.java', 'StandardConvertletTable.java', 'MockSqlOperatorTable.java', 'pom.xml', 'EnumerableToSparkConverter.java', 'JdbcToSparkConverter.java', 'SparkHandlerImpl.java', 'SparkRel.java', 'SparkRules.java', 'SparkRuntime.java', 'SparkToEnumerableConverter.java', 'package-info.java', 'checkstyle-suppressions.xml']"
9f752e860bf783919da0ace93174be79c2180fee,Enable maven-checkstyle-plugin; fix checkstyle exceptions.,['d1df126187096d3bee80a4071f70827cd6b2b2eb'],False,"['pom.xml', 'checkstyle-suppressions.xml', 'checkstyle.xml', 'license-header.txt', 'CsvFieldType.java', 'CsvTable.java', 'CsvTableScan.java', 'CsvTest.java', 'package-info.java']"
186732d6912a5348ff2fc1cc048c6a34decdb961,"Return a single object for single-col enumerator

Optiq expects that an enumerator of a single column returns the
single value of that column, and not an array with length 1.
The CsvEnumerator is changed to be generically typed as Object
instead of Object[], and return a single object when only a single
column is being read.",['9f752e860bf783919da0ace93174be79c2180fee'],False,"['CsvEnumerator.java', 'CsvTable.java', 'CsvTest.java']"
97c934d298dbd130557e105fc09b265874aac0ff,"Fix push-down of datetime literals to JDBC data sources.

Add test case for https://github.com/julianhyde/optiq/issues/127 (disabled).",['e5a9a893313f2b18a987c98618f92bf142812695'],False,"['JdbcImplementor.java', 'JdbcTest.java']"
dea0f4482e5b84ed3de77f23a8bda4def49dcb86,"Fix https://github.com/julianhyde/optiq/issues/131, ""Add interfaces for metadata (statistics)"".",['97c934d298dbd130557e105fc09b265874aac0ff'],False,"['BuiltinMethod.java', 'AbstractRelNode.java', 'RelNode.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'DefaultRelMetadataProvider.java', 'Metadata.java', 'MetadataFactory.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdExplainVisibility.java', 'RelMdPercentageOriginalRows.java', 'RelMdPopulationSize.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'AbstractRelOptPlanner.java', 'RelOptCluster.java', 'RelOptPlanner.java', 'HepPlanner.java', 'HepRelMetadataProvider.java', 'VolcanoPlanner.java', 'VolcanoRelMetadataProvider.java', 'RelStatSource.java', 'MockRelOptPlanner.java', 'RelMetadataTest.java', 'RelOptTestBase.java']"
ed1405085a2c760c8ab74fb7aa47a42fe6464ab1,Fix for JDK 1.6.,['dea0f4482e5b84ed3de77f23a8bda4def49dcb86'],False,['ReflectiveRelMetadataProvider.java']
9408bf578ae7735f6d402296bc5a7fc5782a1606,Fix https://github.com/julianhyde/optiq/issues/127 EnumerableCalcRel can't support 3+ AND conditions,['ed1405085a2c760c8ab74fb7aa47a42fe6464ab1'],False,"['RexImpTable.java', 'JdbcTest.java']"
23bc0760841efd0b294b49d1538bccfab399ec65,Change planner rules to use ProjectFactory for creating projects.,['9408bf578ae7735f6d402296bc5a7fc5782a1606'],False,"['CalcRel.java', 'RelFactories.java', 'MergeProjectRule.java', 'PullUpProjectsAboveJoinRule.java', 'PushJoinThroughJoinRule.java', 'SwapJoinRule.java', 'RelOptUtil.java']"
5a6b465b5b67cad20d309abe5d570e5311a03cbb,Fix NPE in CachingRelMetadataProvider if arg is null.,['8b0a22ee178b5f96cd2982ba75e8b36a2eb2ed5f'],False,"['CachingRelMetadataProvider.java', 'RelMetadataTest.java']"
40c7222fd74a2a8765b4a2bd1ba1a4d39dd0ef80,"Improve best rel in a Volcano subset doesn't have metadata, carry on looking. Disable assert on metadata.rel().",['5a6b465b5b67cad20d309abe5d570e5311a03cbb'],False,"['AbstractRelNode.java', 'VolcanoRelMetadataProvider.java']"
4794533d6be910cefc14be8132a5f79848535ef2,"Fix https://github.com/julianhyde/optiq/issues/137, ""If a subset is created that is subsumed by an existing subset, its ""best"" is not assigned"".",['40c7222fd74a2a8765b4a2bd1ba1a4d39dd0ef80'],False,['RelSubset.java']
7c1f91cf8f743c1851f944babd0352fe3c92606f,"Fix some checkstyle exceptions, and remove entries from the checkstyle suppressions file.

Obsolete one class where we can use Guava instead.",['4794533d6be910cefc14be8132a5f79848535ef2'],False,"['Schema.java', 'TableFactory.java', 'AbstractTableQueryable.java', 'ColumnLoader.java', 'OptiqJdbc41Factory.java', 'OptiqPrepare.java', 'OptiqSchema.java', 'MaterializationActor.java', 'PlannerImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'RexImpTable.java', 'AbstractCursor.java', 'ArrayComparator.java', 'ArrayEnumeratorCursor.java', 'Bindable.java', 'ComparableComparator.java', 'FlatLists.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java', 'SortedMultiMap.java', 'SqlFunctions.java', 'CompositeMap.java', 'PartiallyOrderedSet.java', 'BreadthFirstIterator.java', 'CycleDetector.java', 'DefaultDirectedGraph.java', 'DepthFirstIterator.java', 'DirectedGraph.java', 'Graphs.java', 'TopologicalOrderIterator.java', 'JaninoCompiler.java', 'ProjectRelBase.java', 'RelImplementorImpl.java', 'WindowRel.java', 'ConverterRule.java', 'CachingRelMetadataProvider.java', 'RelMdUtil.java', 'CalcRelSplitter.java', 'ReduceExpressionsRule.java', 'ReduceValuesRule.java', 'RemoveEmptyRules.java', 'RemoveIsNotDistinctFromRule.java', 'ConventionTraitDef.java', 'RelOptCostImpl.java', 'RelOptListener.java', 'RelOptPlanner.java', 'RelOptTable.java', 'RelOptUtil.java', 'RelTraitDef.java', 'RelTraitSet.java', 'MongoFilterRel.java', 'MongoRel.java', 'MongoRules.java', 'MongoTable.java', 'SparkRel.java', 'SparkRules.java', 'SplunkQuery.java', 'SplunkConnection.java', 'StringUtils.java', 'TrustAllSslSocketFactory.java', 'suppressions.xml']"
7eec867d4cd8aeec91a341b36e1669b00d12e75f,"Fix https://github.com/julianhyde/optiq/issues/138, ""SqlDataTypeSpec.clone handles collection types wrong"".",['7c1f91cf8f743c1851f944babd0352fe3c92606f'],False,['SqlDataTypeSpec.java']
3e72282ddaee02943c78a5491c16df9496c2706e,"Fix https://github.com/julianhyde/optiq/issues/135, ""Add a PARSE_TREE hook point with SqlNode parameter"".",['7eec867d4cd8aeec91a341b36e1669b00d12e75f'],False,"['OptiqPrepareImpl.java', 'Hook.java', 'JdbcTest.java']"
49773fa17dd74401cbd7b32c386b66a298cfc22f,"Fix https://github.com/julianhyde/optiq/issues/136, ""Support Hive dialect"".",['fcd35523ef620bf81f704af61c26b81b8dbdab6a'],False,"['RELEASE.md', 'SqlAsOperator.java', 'SqlDialect.java', 'JdbcTest.java', 'OptiqAssert.java', 'PlannerTest.java']"
09cebaedf1d5603d7df4b89a7c49a9ee4ff134a4,"Fix PullUpProjectAboveJoin, RelMDUtil",['49773fa17dd74401cbd7b32c386b66a298cfc22f'],False,"['RelMdDistinctRowCount.java', 'RelMdUtil.java', 'MergeProjectRule.java', 'PullUpProjectsAboveJoinRule.java']"
38bfede89bfb50e05abc78589079091bd1b86f7b,"Merge pull request #1 from gabrielreid/single-column-bug

Return a single object for single-col enumerator.","['9f752e860bf783919da0ace93174be79c2180fee', '186732d6912a5348ff2fc1cc048c6a34decdb961']",True,[]
109b12908b11b4c28ec3850d0b1be427eadeb109,"Add sqlline.bat, Windows SQL shell. (Based on fix for https://issues.apache.org/jira/browse/DRILL-338 .)",['2a1aa9beb6a8c0beab371929e00f0e648de18938'],False,"['README.md', 'pom.xml', 'sqlline', 'sqlline.bat']"
8fe380d71ba0bea53ce1c1239571aabdb49927a5,Add test case for https://github.com/julianhyde/optiq/issues/112.,['109b12908b11b4c28ec3850d0b1be427eadeb109'],False,['CsvTest.java']
4530bc2af9250acbd862c0d8f517b783e0a37bb8,"Fix https://github.com/julianhyde/optiq/issues/53, ""Allow WHEN clause in simple CASE expression to have multiple values"".",['986f940a283de77e74ec1d4805ec063a6c743756'],False,"['REFERENCE.md', 'SqlCaseOperator.java', 'CombinedParser.jj', 'SqlParserTest.java', 'SqlOperatorBaseTest.java']"
24cd792bcf88bbe98faa0da1fdd79300f28c0424,"Fix https://github.com/julianhyde/optiq/issues/141, ""Downgrade to guava-11.0.2"".

This is necessary for Hadoop compatibility. Later versions of Guava can also be used.",['4530bc2af9250acbd862c0d8f517b783e0a37bb8'],False,"['NOTICE', 'OptiqSchema.java', 'Compatible.java', 'CompatibleGuava11.java', 'pom.xml']"
0449cc25502744bf8fa90fc8f5c17417d6fd27db,"Fix https://github.com/julianhyde/optiq/issues/145, ""Unexpected upper-casing of keywords when using java lexer"".",['9ca540413062d9ae36f169b66b63149477b5658d'],False,"['CombinedParser.jj', 'SqlValidatorTest.java']"
025a5f9eeab0866dc35e82423dabe82883eb31a7,"Fix https://github.com/julianhyde/optiq/issues/128, ""Support WITH queries (common table expressions)"".

Add generics to SQL parser.",['0449cc25502744bf8fa90fc8f5c17417d6fd27db'],False,"['SqlIdentifier.java', 'SqlKind.java', 'SqlNodeList.java', 'SqlWithItemOperator.java', 'SqlWithOperator.java', 'SqlWriter.java', 'SqlStdOperatorTable.java', 'SqlParserPos.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'SqlShuttle.java', 'AbstractNamespace.java', 'DelegatingScope.java', 'EmptyScope.java', 'IdentifierNamespace.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'WithNamespace.java', 'WithScope.java', 'SqlToRelConverter.java', 'CombinedParser.jj', 'JdbcTest.java', 'SqlParserTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.ref.xml', 'SqlValidatorTest.java']"
50aeac1529932dcc2bd851f63a2cc01126e25412,"Fix https://github.com/julianhyde/optiq/issues/148, ""Less verbose description of collation"". Also, optimize RelTraitSet creation and amortize RelTraitSet.toString().",['3f33b38d4f36364fc0a4f74404e651e37ef6d488'],False,"['RelCollationImpl.java', 'RelFieldCollation.java', 'RelTraitSet.java', 'JdbcTest.java', 'RelOptRulesTest.ref.xml', 'SqlToRelConverterTest.ref.xml']"
94a63060b29c58d7d54a52be7ca4b44338c70416,"Fix https://github.com/julianhyde/optiq-csv/issues/2, ""Update tutorial to reflect changes to Optiq's JDBC adapter"".",['11bdbc82f60bc8cd07fea790cf4fe4765c16f140'],False,['TUTORIAL.md']
ba8ab7907249b69165f84a331ea59afcb97f548d,"Fix https://github.com/julianhyde/optiq/issues/147, ""Create a new kind of SqlCall that keeps operands in fields, not an operands array"".",['50aeac1529932dcc2bd851f63a2cc01126e25412'],False,"['JdbcImplementor.java', 'JdbcRules.java', 'JdbcTable.java', 'JavaRules.java', 'WindowedAggSplitterRule.java', 'RexSqlStandardConvertletTable.java', 'SqlAbstractStringLiteral.java', 'SqlAsOperator.java', 'SqlBasicCall.java', 'SqlBinaryOperator.java', 'SqlBinaryStringLiteral.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlCharStringLiteral.java', 'SqlDelete.java', 'SqlExplain.java', 'SqlFunction.java', 'SqlFunctionalOperator.java', 'SqlInfixOperator.java', 'SqlInsert.java', 'SqlInternalOperator.java', 'SqlJdbcFunctionCall.java', 'SqlJoin.java', 'SqlJoinOperator.java', 'SqlLiteral.java', 'SqlMerge.java', 'SqlNode.java', 'SqlOperator.java', 'SqlOrderByOperator.java', 'SqlOverOperator.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'SqlProcedureCallOperator.java', 'SqlSelect.java', 'SqlSelectOperator.java', 'SqlSpecialOperator.java', 'SqlSyntax.java', 'SqlUpdate.java', 'SqlUtil.java', 'SqlValuesOperator.java', 'SqlWindow.java', 'SqlWindowOperator.java', 'SqlWith.java', 'SqlWithItem.java', 'SqlWithItemOperator.java', 'SqlWithOperator.java', 'SqlAdvisorValidator.java', 'SqlBetweenOperator.java', 'SqlCase.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlCeilFunction.java', 'SqlCoalesceFunction.java', 'SqlColumnListConstructor.java', 'SqlConvertFunction.java', 'SqlCursorConstructor.java', 'SqlDatetimeSubtractionOperator.java', 'SqlExtractFunction.java', 'SqlFloorFunction.java', 'SqlInOperator.java', 'SqlItemOperator.java', 'SqlLikeOperator.java', 'SqlLiteralChainOperator.java', 'SqlMapValueConstructor.java', 'SqlMonotonicBinaryOperator.java', 'SqlMonotonicUnaryFunction.java', 'SqlMultisetMemberOfOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetValueConstructor.java', 'SqlNewOperator.java', 'SqlNullifFunction.java', 'SqlOverlapsOperator.java', 'SqlOverlayFunction.java', 'SqlPositionFunction.java', 'SqlRowOperator.java', 'SqlStdOperatorTable.java', 'SqlSubstringFunction.java', 'SqlThrowOperator.java', 'SqlTrimFunction.java', 'CompositeOperandTypeChecker.java', 'FamilyOperandTypeChecker.java', 'InferTypes.java', 'LiteralOperandTypeChecker.java', 'MultisetOperandTypeChecker.java', 'OperandTypes.java', 'SameOperandTypeChecker.java', 'SetopOperandTypeChecker.java', 'SqlTypeUtil.java', 'SqlBasicVisitor.java', 'SqlShuttle.java', 'AggChecker.java', 'AggregatingSelectScope.java', 'AliasNamespace.java', 'SelectScope.java', 'SetopNamespace.java', 'SqlScopedShuttle.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'UnnestNamespace.java', 'WithNamespace.java', 'WithScope.java', 'ReflectiveConvertletTable.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'BitString.java', 'NlsString.java', 'CombinedParser.jj', 'SqlOperatorBaseTest.java', 'SqlPrettyWriterTest.java', 'SqlTesterImpl.java', 'MongoToEnumerableConverter.java']"
8157f92e389ad33096a83754ad3a70e704ab4c61,"Fix https://github.com/julianhyde/optiq/issues/158, ""Optiq fails when call Planner.transform() multiple times, each with different ruleset"".",['1061785544559bb7e52dddb8065b44049da34bf5'],False,"['RuleQueue.java', 'PlannerTest.java']"
bb3d36c74bde4c8a14dc7ac8d59d1928b99953b8,Fix ONE_MINUS_EPSILON.,['8157f92e389ad33096a83754ad3a70e704ab4c61'],False,['RuleQueue.java']
288602ca73cbce9747dd4918680beb3a6c9b87fd,"Fix https://github.com/julianhyde/optiq/issues/160, ""Allow comments in schema definitions"".",['bb3d36c74bde4c8a14dc7ac8d59d1928b99953b8'],False,"['ModelHandler.java', 'JdbcTest.java']"
c434a52fdfb9289e0ef85c1f496763a4679f0e69,Fix bug in OptiqAssert.returnsUnordered.,['5c2334b49f8b2f55fff13c6cb90a8fb466b82b1d'],False,"['JdbcTest.java', 'OptiqAssert.java']"
43d40df8c9ac9b79bc355a6534b174306c67782d,"Fix https://github.com/julianhyde/optiq/issues/156, ""Optiq should recognize 'SYSTEM TABLE', 'JOIN', 'INDEX' as table types"".",['c434a52fdfb9289e0ef85c1f496763a4679f0e69'],False,"['Schema.java', 'JdbcSchema.java']"
76665ad0c51be740be3c2f67324544de43e724cc,Fix bug deriving the type of a join-key.,['43d40df8c9ac9b79bc355a6534b174306c67782d'],False,['PhysTypeImpl.java']
d330c56e9936e2485434c9e9968836a904e22493,"Fix https://github.com/julianhyde/optiq/issues/153, ""Error using MongoDB adapter: Failed to set setXIncludeAware(true)"".

Added flag to use the correct XML parser; also disabled spark engine unless Spark libraries are on the class path and spark=true is specified in the connect string.

Fixed path to mongo-zips-mogel.json in HOWTO.",['76665ad0c51be740be3c2f67324544de43e724cc'],False,"['HOWTO.md', 'Schemas.java', 'OptiqConnectionImpl.java', 'OptiqPrepare.java', 'OptiqPrepareImpl.java', 'sqlline']"
0e312990549a106b4a437a8072ef6368a17809ea,Fix checkstyle and sqlline for cygwin/Windows.,['a2b84500d72ed3d479ff7ac28861e6d6bafea461'],False,"['sqlline', 'checkstyle.xml']"
b28130f5d535326f88522b4a2aa5d1ffa5cb5f7c,Cleanup cache exception-handling and an assert.,['d330c56e9936e2485434c9e9968836a904e22493'],False,"['RelTraitDef.java', 'RelSubset.java', 'RelDataTypeFactoryImpl.java', 'Util.java']"
f5986fbc281f6773e5f3f0677c83f1cb76bee427,"Various refactorings.

1. Change RexBuilder.makeRangeReference parameter type.
2. RexBuilder.makeInputRef replaces RelOptUtil.createInputRef.
3. Add class SpaceString.",['b28130f5d535326f88522b4a2aa5d1ffa5cb5f7c'],False,"['LixToRelTranslator.java', 'CalcRel.java', 'RelFactories.java', 'SortRel.java', 'TableAccessRelBase.java', 'NestedLoopsJoinRule.java', 'PullConstantsThroughAggregatesRule.java', 'RelOptUtil.java', 'RexBuilder.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'NlsString.java', 'SpaceString.java', 'FrameworksTest.java', 'RelWriterTest.java', 'UtilTest.java']"
99d5a0a775c6f77989e22f2407b0fc259d6780b0,Fix compile error on JDK 1.6.,['7b8d778ddffadf9e322508dc455747e85069f2a7'],False,['Util.java']
374266aa352949ce1327f2b86f462ca47aa3141a,Fix windows line endings.,['99d5a0a775c6f77989e22f2407b0fc259d6780b0'],False,"['.gitattributes', 'checker.xml']"
2b72a8e55137ba75db2e3cf3dddfc4c06f326b9f,"Enable MongoDB tests when -Doptiq.test.mongodb=true.

Also fix some test failures.",['374266aa352949ce1327f2b86f462ca47aa3141a'],False,"['OptiqAssert.java', 'pom.xml', 'MongoAdapterTest.java']"
2d02f0bfeaecb81968f79a1834d41bf3145f2692,Fix several tests on Windows.,['2b72a8e55137ba75db2e3cf3dddfc4c06f326b9f'],False,"['Util.java', 'OptiqAssert.java', 'FrameworksTest.java', 'PlannerTest.java', 'RelWriterTest.java', 'SqlParserTest.java', 'SqlAdvisorTest.java', 'SqlValidatorTestCase.java', 'OptionsListTest.java']"
40da9b8193c4f1167281e464dcb6d2ccf1cfb03d,Fix remaining Windows test exceptions.,['2d02f0bfeaecb81968f79a1834d41bf3145f2692'],False,"['SqlParserUtil.java', 'Util.java', 'JdbcTest.java', 'PlannerTest.java']"
ca3c15dac4ef3e5132c5ff8e0af55442ce41b861,"Fix https://github.com/julianhyde/optiq/issues/157, ""Handle SQLFeatureNotSupported when calling setQueryTimeout"".",['599fa9821ba0d716563dec0abd5d73c9a4280666'],False,['ResultSetEnumerable.java']
f1df07f6f132c4dea7177642dd24f6eb71a7ea11,"Fix https://github.com/julianhyde/optiq/issues/163, ""Equi-join warning"".",['ca3c15dac4ef3e5132c5ff8e0af55442ce41b861'],False,"['JdbcRules.java', 'JavaRules.java', 'InvalidRelException.java']"
171e88665e049709c431a86bb45dac4457e21fc8,Fix json in comments.,['5465907a403aa585726043a9379e6776d5732163'],False,"['CloneSchema.java', 'ReflectiveSchema.java', 'JdbcSchema.java']"
17cfe16d11b88928062534411e1f29dac95acf44,"Fix https://github.com/julianhyde/optiq/issues/174, ""Move hsqldb to test scope"".",['17b13339eb436e2b7178fb123933d992e7771284'],False,['pom.xml']
67a640c52567798737b92f0a5f154c94b555a1c0,Use 1 test thread per CPU to avoid thread starvation on dual core CPUs,['17cfe16d11b88928062534411e1f29dac95acf44'],False,['pom.xml']
66fc064eb36a2aa9b162c4c573b0b02eb8effff9,"Test that match against error numbers, dates should set en_US locale, otherwise error messages and date literals do not match",['67a640c52567798737b92f0a5f154c94b555a1c0'],False,"['SqlLimitsTest.java', 'SqlValidatorTest.java', 'UtilTest.java']"
ebb072c89874f1298536fcf787d2352db8d75fa8,"Allow quoting, quotedCasing, unquotedCasing, and caseSensitive properties be specified explicitly

Fix casing errors, add JDBC test for JAVA lexer",['96cf7854a6509769718a07edeb97c3ef9eb80a37'],False,"['AvaticaDatabaseMetaData.java', 'ConnectionProperty.java', 'OptiqConnectionImpl.java', 'JdbcTest.java', 'SqlValidatorTest.java']"
167000e5dd5ca6e54bdd3978f2ed6f72613b116d,"Fix up formatting, and document lexical policies.",['ebb072c89874f1298536fcf787d2352db8d75fa8'],False,"['ConnectionProperty.java', 'ConnectionConfig.java']"
513cbe12f9945bf9a414187f0475f277f6524f9b,"Fix https://github.com/julianhyde/optiq/issues/173, ""Case-insensitive table names are not supported for Casing.UNCHANGED"".",['167000e5dd5ca6e54bdd3978f2ed6f72613b116d'],False,"['OptiqSchema.java', 'MaterializationService.java', 'OptiqCatalogReader.java', 'OptiqMaterializer.java', 'ListScope.java', 'JdbcTest.java', 'SqlValidatorTest.java']"
383552ed0d41de3495cadbda0b2ab7be216d6609,"Fix https://github.com/julianhyde/optiq/issues/143, ""Remove dependency on eigenbase-resgen"".",['513cbe12f9945bf9a414187f0475f277f6524f9b'],False,"['EigenbaseResource.java', 'EigenbaseResource_en_US.java', 'ResourceDefinition.java', 'ResourceInstance.java', 'ShadowResourceBundle.java', 'SqlValidatorImpl.java', 'SqlValidatorFeatureTest.java', 'pom.xml']"
7affa47b620f2c08868f8a1190616cbcfd0e5ee9,"Fixed the mongo-zips-model.json link

The link from the HowTo to the Optiq model for the Mongo Zips COllection was broken, pointing it to the new location in the master branch.",['f5365325d310e39b2ffbd61db794f9503544cc03'],False,['HOWTO.md']
52be0e7154210415d9a505b1f131b37f2291fecb,"Fix https://github.com/julianhyde/optiq/issues/176, ""ORDER BY expression doesn't work with SELECT *"".",['450562d268d37e8b24421117d1834e5b8dffdda4'],False,"['SqlToRelConverter.java', 'JdbcTest.java']"
226e2d5e1d2e4f0733e3b61216879a0bc4db998d,Prepare to change minor version number. (Hasn't happened in a while!),['4744bd16ac4f4975a3f6de8c42df3edf8dcce525'],False,"['net-hydromatic-optiq-jdbc.properties', 'JdbcTest.java']"
06eeca8da5a7b373a3e7dc38c0affc2c4ae5ef67,"Fix https://github.com/julianhyde/optiq/issues/177, ""New resource framework based on annotations"".

Obsoletes EigenbaseResource.java (which was previously generated) and replaces it with EigenbaseNewResource.java (hand-written, but containing the same information, in annotations, as EigenbaseResource.xml). Includes a validation facility and tests (including tests of the validation facility).",['f88996ee843962a2c5721c1a4c0e212b0b093f97'],False,"['BuiltinMethod.java', 'AggregateRelBase.java', 'ReduceDecimalsRule.java', 'AbstractRelOptPlanner.java', 'EigenbaseNewResource.java', 'EigenbaseResource.java', 'EigenbaseResource_en_US.java', 'ResourceMigrate.java', 'Resources.java', 'RexCallBinding.java', 'ExplicitOperatorBinding.java', 'SqlAsOperator.java', 'SqlBinaryOperator.java', 'SqlCallBinding.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlFunction.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlLiteral.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlOverOperator.java', 'SqlRankFunction.java', 'SqlUtil.java', 'SqlWindow.java', 'SqlAbstractTimeFunction.java', 'SqlBetweenOperator.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlInOperator.java', 'SqlLiteralChainOperator.java', 'SqlMapValueConstructor.java', 'SqlMultisetMemberOfOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetValueConstructor.java', 'SqlParserPos.java', 'SqlParserUtil.java', 'FamilyOperandTypeChecker.java', 'LiteralOperandTypeChecker.java', 'MultisetOperandTypeChecker.java', 'OperandTypes.java', 'ReturnTypes.java', 'SameOperandTypeChecker.java', 'SetopOperandTypeChecker.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'AggChecker.java', 'AliasNamespace.java', 'DelegatingScope.java', 'EmptyScope.java', 'IdentifierNamespace.java', 'ListScope.java', 'SetopNamespace.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'TableConstructorNamespace.java', 'SqlToRelConverter.java', 'NlsString.java', 'Static.java', 'ConversionUtil.java', 'CombinedParser.jj', 'EigenbaseResource.properties', 'OptiqSuite.java', 'EigenbaseResourceTest.java', 'ResourceTest.java', 'SqlValidatorFeatureTest.java', 'UtilTest.java', 'ResourceTest.properties', 'pom.xml', 'checker.xml', 'suppressions.xml']"
633e49e712a378bdfa17e34dcac5d911ed01b97b,"Fix https://github.com/julianhyde/optiq/issues/167, ""Move OptiqConnection.config up to AvaticaConnection"".

Move Lex into a new package net.hydromatic.optiq.config.",['0035f35c4a43a21baba8982c0a9edfcc1c11f0be'],False,"['AvaticaConnection.java', 'BuiltInConnectionProperty.java', 'ConnectionConfig.java', 'ConnectionConfigImpl.java', 'ConnectionProperty.java', 'UnregisteredDriver.java', 'Schemas.java', 'Lex.java', 'OptiqConnectionConfig.java', 'OptiqConnectionProperty.java', 'package-info.java', 'ConnectionConfig.java', 'Driver.java', 'OptiqConnection.java', 'OptiqConnectionImpl.java', 'OptiqPrepare.java', 'OptiqPrepareImpl.java', 'PlannerImpl.java', 'Frameworks.java', 'JdbcTest.java', 'PlannerTest.java', 'SqlTester.java', 'SqlTesterImpl.java', 'SqlValidatorTest.java']"
adf1c74c30cf71ca6bc70f9fc341281e3b55aa03,Use subsumes to replace equal check in an assert check in VolcanoPlanner.,['ad134728e4c8cdff624bffb898ac692c6f2d2e13'],False,['VolcanoPlanner.java']
e628e2caf33530d5f190a17bd85e4c0029663241,"Add clear() to RelOptPlanner. PlannerImpl.transform() call clear().

PlannerClear : add uint test case wip.

add method to add traitDef to planner.

clear rulequeue status in planner.

Change the order of traits importance.

Revert ""Change the order of traits importance.""

This reverts commit 4b6ae327c9f142133aec45489042b78d2f68d039.

Replace contains with subsumes check.

Add unit test for cases where transform() is called twice with different rulesets and target convention. The test case will fail if not call planner.clear().

Planner clear: fix a code style issue in unit test case.

Planner clear: remove some code change for RelTrait

Planner clear: code clean up.

Planner clear: code style check change.",['adf1c74c30cf71ca6bc70f9fc341281e3b55aa03'],False,"['PlannerImpl.java', 'AbstractRelOptPlanner.java', 'RelOptPlanner.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'PlannerTest.java']"
9af9b7f1056e51f37ffce9b9edf0ccbbccd9d2cc,"Avoid dependence on iteration order of test methods in testValidateMessageMatch: test specific resource instead

Also, update cosmetics.",['d35efc5e454059c90d1192b969df0ae4f741e987'],False,"['Resources.java', 'ResourceTest.java']"
4121916628c5990f93450d5b2e2dbada246c2f7c,"Fix https://github.com/julianhyde/optiq/issues/164, ""Improve query performance of optiq over mongo"".",['9af9b7f1056e51f37ffce9b9edf0ccbbccd9d2cc'],False,"['Bug.java', 'MongoFilterRel.java', 'MongoProjectRel.java', 'MongoRules.java', 'MongoSortRel.java', 'MongoTable.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'MongoAdapterTest.java']"
23f99d7fc179076ac1e83f4e5decdc9d10384a19,"Fix https://github.com/julianhyde/optiq/issues/193, ""Implement OFFSET and LIMIT in MongoDB adapter"".",['e3933d4f6ab607d87521d66b7b30064a4f676f2b'],False,"['MongoRules.java', 'MongoSortRel.java', 'MongoAdapterTest.java']"
817a6997ddc31e9d09513f9216fbd1b9430d03c4,"Fix https://github.com/julianhyde/optiq/issues/195, ""Push aggregation into MongoDB adapter"".",['23f99d7fc179076ac1e83f4e5decdc9d10384a19'],False,"['MongoAggregateRel.java', 'MongoProjectRel.java', 'MongoRules.java', 'MongoAdapterTest.java']"
ddc6aca8bc76080b5c396a605a0be148aa0a2d79,"Add a way to specify list of TraitDefs that will be used by planner when create planner.

Allow PlannerImpl to use a user-specified RelTraitDefs, in stead of default RelTraitDefs.

Add a new getPlanner to FrameWorks to specify the list of RelTraitDef.

Add a unit test case to test planner with explicitly specified list of RelTraitDefs.

Minor change to unit testcase for TraitDef.

Add comment to Framework's new method.",['ce0eb9c424d6aa1b802bf1a774d8af196f66e4b6'],False,"['PlannerImpl.java', 'Frameworks.java', 'AbstractRelOptPlanner.java', 'RelOptPlanner.java', 'VolcanoPlanner.java', 'PlannerTest.java']"
657c54a1b1198c9ade176ab6c9ed36b19b806ed5,"Make sqlline.sh work better under cygwin.

We detect cygwin and set jline terminal explicitly; this is a workaround for
https://github.com/jline/jline2/issues/62.",['838bfcc606e71159c617880bc22aaa9061263bf6'],False,['sqlline']
5a4126fe5336e8cb64ea9e0410e7a486de48a29c,"Add sqlline.bat.

On cygwin, fix sqlline to work around https://github.com/jline/jline2/issues/62.

sqlline now uses build-classpath on both linux and cygwin, in contrast to sqlline.bat, which uses copy-dependencies.",['10aeb5d384c176265d1ccda2beba83478d236c0f'],False,"['pom.xml', 'sqlline', 'sqlline.bat']"
92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c,"Fix NPE using TRIM function with JDBC.

Symbols have a null family.",['4c47a15cd156ef6b6aadbda63a896b065b44498c'],False,"['JdbcImplementor.java', 'JdbcTest.java']"
690ae5cc61e4de8c31f4205d58f30295bc7eb2e7,"Avoid creation of stacktrace for internally-used-for-control-flow exception.
This improves exception construction speed.",['4941886533fd1436851e77ae281804a73256e4a1'],False,['Util.java']
ce6c4985a1f1937130c6159e04b65ae556fd074b,"Fix https://github.com/julianhyde/optiq/issues/209, ""Consistent strategy for line-endings in tests"".

""Expected"" strings in tests should now use Linux line-endings (""\n""). The code that generates ""actual"" strings should call Util.toLinux if necessary.

Also, deprecate RelDataTypeFactory.createStructType(RelDataType[], String[]).",['11e4897a4ffc93e51a56b0c4552e86b0d45408ca'],False,"['CollectRel.java', 'OneRowRelBase.java', 'RelOptUtil.java', 'HepPlanner.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'ReturnTypes.java', 'SqlTypeUtil.java', 'CollectNamespace.java', 'UnnestNamespace.java', 'Util.java', 'RelOptUtilTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'SqlTesterImpl.java', 'DiffRepository.java', 'DiffTestCase.java', 'MockCatalogReader.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'TestUtil.java', 'UtilTest.java']"
4fece4ab2c99a156c5f9080c298ca117a2423918,"Fix https://github.com/julianhyde/optiq/issues/200, ""Javadoc generation fails under JDK 1.8"".

This change fixes a lot of HTML validation issues, and ""mvn site"" now succeeds under all JDK versions.

""mvn javadoc:javadoc"" still has a few errors, because it doesn't use the configuration under ""reports"" in the POM (it looks for configuration under ""build"" instead); that is OK.",['ce6c4985a1f1937130c6159e04b65ae556fd074b'],False,"['ConnectStringParser.java', 'JdbcQueryProvider.java', 'SqlFunctions.java', 'BitSets.java', 'AggregateRel.java', 'AggregateRelBase.java', 'CalcRel.java', 'CollectRel.java', 'JoinRelBase.java', 'RelNode.java', 'TableAccessRel.java', 'ConverterRule.java', 'RelMdUtil.java', 'AddRedundantSemiJoinRule.java', 'ConvertMultiJoinRule.java', 'NestedLoopsJoinRule.java', 'PullConstantsThroughAggregatesRule.java', 'PushSemiJoinPastFilterRule.java', 'PushSemiJoinPastJoinRule.java', 'PushSemiJoinPastProjectRule.java', 'ReduceValuesRule.java', 'AbstractRelOptPlanner.java', 'CommonRelSubExprRule.java', 'RelOptConnection.java', 'RelOptPlanner.java', 'RelOptQuery.java', 'RelOptRule.java', 'RelOptTable.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'RelDataType.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeFieldImpl.java', 'RelDataTypePrecedenceList.java', 'RexBuilder.java', 'RexChecker.java', 'RexInputRef.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexUtil.java', 'SargSetOperator.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlKind.java', 'SqlLiteral.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlOverOperator.java', 'SqlSampleSpec.java', 'SqlSelectOperator.java', 'SqlUtil.java', 'SqlWindow.java', 'SqlWriter.java', 'SqlAdvisorValidator.java', 'SqlCase.java', 'SqlCaseOperator.java', 'SqlDatetimeSubtractionOperator.java', 'SqlStdOperatorTable.java', 'SqlParseException.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'BasicSqlType.java', 'MultisetSqlType.java', 'SqlTypeName.java', 'SqlTypeUtil.java', 'OrderByScope.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'DelegatingInvocationHandler.java', 'Glossary.java', 'MainApp.java', 'NlsString.java', 'OptionsList.java', 'Permutation.java', 'ReflectUtil.java', 'StackWriter.java', 'Template.java', 'Util.java', 'Mapping.java', 'Mappings.java', 'DateTimeUtil.java', 'ReflectiveSchemaTest.java', 'SqlOperatorBaseTest.java', 'SqlTests.java', 'DiffRepository.java', 'package-info.java', 'TestUtil.java', 'MongoTableScan.java', 'pom.xml', 'SplunkTableAccessRel.java']"
d446b5e6cb196258ec6d58bc219724e499a0d333,Oops! Remove bad assert.,['1b3068ffe5c74ddeef41125e43f44d06edbd1755'],False,['SqlParserUtil.java']
1934ae78b70cb5cc6f9a2495e1ba804e40ec2e2a,"Fix https://github.com/julianhyde/optiq/issues/180, ""Common base class for TableFunction, ScalarFunction"".

Add interface Function, which becomes base class of TableMacro (previously TableFunction) and ScalarFunction; rename Parameter to FunctionParameter; rename Schema methods getTableFunctions to getFunctions, and getTableFunctionNames to getFunctionNames; rename TableFunctionEntry to FunctionEntry.",['d446b5e6cb196258ec6d58bc219724e499a0d333'],False,"['Function.java', 'FunctionParameter.java', 'Member.java', 'ScalarFunction.java', 'Schema.java', 'SchemaPlus.java', 'Schemas.java', 'Table.java', 'TableMacro.java', 'AbstractSchema.java', 'DelegatingSchema.java', 'MapSchema.java', 'MaterializedViewTable.java', 'ScalarFunctionImpl.java', 'ViewTable.java', 'ReflectiveSchema.java', 'JdbcSchema.java', 'OptiqSchema.java', 'ModelHandler.java', 'OptiqCatalogReader.java', 'RexImpTable.java', 'SqlUserDefinedFunction.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java']"
ead862cb0c22b3db6e58d2328a9d8d111620419d,"Fix https://github.com/julianhyde/optiq/issues/215, ""A Schema should not have to remember its name and parent"".

Remove getName() and getParentSchema() methods from Schema; keep them in SchemaPlus; add name field to OptiqSchema.

Obsolete MapSchema.",['1934ae78b70cb5cc6f9a2495e1ba804e40ec2e2a'],False,"['Schema.java', 'SchemaPlus.java', 'Schemas.java', 'AbstractSchema.java', 'DelegatingSchema.java', 'MapSchema.java', 'MaterializedViewTable.java', 'ViewTable.java', 'CloneSchema.java', 'ReflectiveSchema.java', 'JdbcConvention.java', 'JdbcSchema.java', 'JdbcToEnumerableConverter.java', 'MetadataSchema.java', 'OptiqConnectionImpl.java', 'OptiqRootSchema.java', 'OptiqSchema.java', 'ModelHandler.java', 'PlannerImpl.java', 'JdbcExample.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'OptiqAssert.java', 'ReflectiveSchemaTest.java', 'PlannerTest.java', 'RelWriterTest.java', 'MongoSchema.java', 'MongoSchemaFactory.java', 'JdbcToSparkConverter.java', 'SplunkDriver.java', 'SplunkSchema.java', 'SplunkTable.java', 'SplunkTableAccessRel.java']"
c4ac08969338c0a5870b9e7c000705a17cacefe7,"Fix https://github.com/julianhyde/optiq/issues/216, ""Inconsistent use of provided operator table causes inability to add aggregate functions"".

Now you can specify via the Frameworks.getPlanner interface a SqlOperatorTable that contains a user-defined aggregate function, and the query will validate appropriately.

Added a test case for https://github.com/julianhyde/optiq/issues/217, ""Validator should reject non-aggregate expressions in SELECT clause with aggregates"".",['ead862cb0c22b3db6e58d2328a9d8d111620419d'],False,"['OptiqSchema.java', 'Frameworks.java', 'ListSqlOperatorTable.java', 'SqlValidatorImpl.java', 'PlannerTest.java', 'SqlValidatorTest.java']"
f77029d56e7bac2fb96a80d9e8665209f4a644d8,"Add tests that a query with aggregate expressions in the SELECT clause is considered an aggregate query, even if there is no GROUP BY.

Turns out that validator already did the right thing per https://github.com/julianhyde/optiq/issues/217.",['c4ac08969338c0a5870b9e7c000705a17cacefe7'],False,"['PlannerTest.java', 'SqlValidatorTest.java']"
0c9941a68d788fcdefe0069bb39bef03e57cbc32,"Fix https://github.com/julianhyde/optiq/issues/218, ""Functions case sensitive when using Lex.MYSQL"".

Names of built-in functions are now matched case-insensitively even if unquotedCasing=UNCHANGED and caseSensitive=true, and even if they are built-ins with no parameters, such as CURRENT_TIME.",['f77029d56e7bac2fb96a80d9e8665209f4a644d8'],False,"['ReflectiveSqlOperatorTable.java', 'SqlValidatorTest.java']"
861fa9e44dd17eacc88fc4406f942c1415a0dd03,"Fix https://github.com/julianhyde/optiq/issues/219, ""Parse 'ALTER scope SET option = value' statement"".",['0c9941a68d788fcdefe0069bb39bef03e57cbc32'],False,"['SqlOptionSetter.java', 'CombinedParser.jj', 'SqlParserTest.java']"
7cbd3025956fc5efb32659c785126fe93e8674df,"Fix https://github.com/julianhyde/optiq/pull/198, ""Use RexExecutor to evaluate projections and filters"".",['24224cfc4953a3cb1479972a55f4d52855fa06bd'],False,"['ReduceExpressionsRule.java', 'RelOptPlanner.java', 'RexExecutable.java', 'RexExecutorImpl.java', 'RexExecutorTest.java']"
220c610d79c83afa5ad77dc773e5a4c9c6a6ee0f,"Fix https://github.com/julianhyde/optiq/issues/222, ""User-defined table macros"".",['634a4537134fffa313f077f3449d9f4d7cab4e5d'],False,"['Schemas.java', 'ScalarFunctionImpl.java', 'LixToRelTranslator.java', 'OptiqCatalogReader.java', 'OptiqMaterializer.java', 'OptiqPrepareImpl.java', 'QueryableRelBuilder.java', 'RelOptTableImpl.java', 'TableAccessRule.java', 'RelOptUtil.java', 'ProcedureNamespace.java', 'SqlUserDefinedFunction.java', 'SqlToRelConverter.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java']"
d33871bf9b1f3ccbd6b1f8ccff17dbcac375a976,"Fix https://github.com/julianhyde/optiq/issues/223, ""Add NOTICE and LICENSE files in all generated JAR files"".

Also fix filtering in net-hydromatic-optiq-jdbc.properties, and remove a spurious copy of that file.",['bdf5ac5cada9ac5fc71ce5f0d22951bff40ae483'],False,"['pom.xml', 'net-hydromatic-optiq-jdbc.properties', 'pom.xml', 'pom.xml', 'pom.xml']"
d897d8d88a68a2d39f0c38a3dd8ba7f61c93f9b1,"Fix https://github.com/julianhyde/optiq/pull/227, ""Extend extract function to support DateTime data types"".",['99014073d19bc535f215e64031159486d19471c2'],False,"['SqlExtractFunction.java', 'OperandTypes.java', 'SqlValidatorTest.java']"
dc8df89337c9bc6d3bef72c3ac2c35d677d4bff0,Fix julian date formula for dates before 1900-03-01.,['b56a79f5ece992a509d392c34e18ee3775a58ae8'],False,"['SqlFunctions.java', 'SqlFunctionsTest.java']"
c6dfcc4e2c0ce04a40c71332d7e6b527631c1adf,"Fix https://github.com/julianhyde/optiq/pull/230, ""RemoveSortRule derives trait set from sort, should derive it from sort's child"".

There was also a bug in the test case; it was asking for un-sorted output, and it got it!",['2f4c024815a80854d3f2171a84c6113485c07415'],False,"['RemoveSortRule.java', 'PlannerTest.java']"
3e19a1bbced1671c0bd463502d24f9f7b0fb49e4,"Fix https://github.com/julianhyde/optiq/issues/229, ""Join between different JDBC schemas not implementable"".

A JdbcConvention was registered when the first JdbcTableScan was registered, but the other instance of JdbcConvention (for the other data source) was not, because it was not the first instance of class JdbcTableScan. The solution was to add a RelTrait.register(RelOptPlanner) method. It is called for each trait present in the initial RelNode tree.

Test case contributed by Bruno Dumon.

This is a breaking change. Classes that implement RelTrait will need to add a 'register(RelOptPlanner)' method.",['c6dfcc4e2c0ce04a40c71332d7e6b527631c1adf'],False,"['JdbcConvention.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverterRule.java', 'EnumerableConvention.java', 'RelCollationImpl.java', 'AbstractRelOptPlanner.java', 'Convention.java', 'RelTrait.java', 'MultiJdbcSchemaJoinTest.java', 'OptiqSuite.java', 'VolcanoPlannerTraitTest.java']"
02b0a460911cb20a46e8691e484b9c3117281ad7,"Fix https://github.com/julianhyde/optiq/issues/226, ""User-defined functions should work without explicit schema prefix"".

Each schema now has a path, which is a list of schemas to look in when resolving functions. The default path of each schema is itself, but you can override by setting the ""path"" attribute of a JSON schema. It is a list, and its elements are either strings or lists of strings: the empty list means the root schema, a singleton list or a string means a level 1 schema, and so forth.",['3e19a1bbced1671c0bd463502d24f9f7b0fb49e4'],False,"['Schema.java', 'SchemaPlus.java', 'OptiqSchema.java', 'JsonSchema.java', 'ModelHandler.java', 'OptiqCatalogReader.java', 'OptiqPrepareImpl.java', 'SqlOperatorTable.java', 'SqlUtil.java', 'SqlAbstractParserImpl.java', 'ChainedSqlOperatorTable.java', 'ListSqlOperatorTable.java', 'ReflectiveSqlOperatorTable.java', 'SqlValidatorImpl.java', 'JdbcTest.java']"
0fd268ea8157d89bf2bb21f52dd0a37d8272be1b,"Fix https://github.com/julianhyde/optiq/issues/237, ""Allow user-defined aggregate functions (UDAs) to be defined in a model"".",['9e83e0803bca95fe3169acf8720ce907c7b44654'],False,"['AggregateFunction.java', 'Schemas.java', 'AggregateFunctionImpl.java', 'ScalarFunctionImpl.java', 'TableMacroImpl.java', 'ModelHandler.java', 'OptiqCatalogReader.java', 'OptiqPrepareImpl.java', 'AggImplementor.java', 'JavaRules.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'WinAggImplementor.java', 'EigenbaseNewResource.java', 'SqlAggFunction.java', 'SqlOperator.java', 'SqlRankFunction.java', 'ExplicitOperandTypeInference.java', 'InferTypes.java', 'AggFinder.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlValidatorImpl.java', 'EigenbaseResource.properties', 'JdbcTest.java', 'ReflectiveSchemaTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
a151714f97f7dac158cb2976310116d4f8e87c48,"Fix https://github.com/julianhyde/optiq/issues/228, ""Error while compiling generated Java code when using UDF in expression""",['0fd268ea8157d89bf2bb21f52dd0a37d8272be1b'],False,"['OptiqCatalogReader.java', 'RexImpTable.java', 'JdbcTest.java']"
32738eb23fadee5091351813b261c4fe48dd3407,"Add SqlUnresolvedFunction, to improve how return type of user-defined functions is resolved.

Even though SqlValidator had overload detection and type resolution logic it did not fire since function.getFunctionType() == null was always false.",['a151714f97f7dac158cb2976310116d4f8e87c48'],False,"['OptiqCatalogReader.java', 'SqlUnresolvedFunction.java', 'SqlAbstractParserImpl.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlValidatorImpl.java', 'JdbcTest.java']"
0f2fcc81a8927553a4c2fc0e701d351abe255cdc,Use AtomicInteger for naming of ParameterExpressions to avoid conflicts in multithreaded usage,['3c7da7483d227a14b9df85966f86dee044374366'],False,['ParameterExpression.java']
0926e35adc087d4d282957a207ab79d4baa35da5,Fix optimizing away parameter declarations in assignment target,['6d0c5a9ff5539bb5aecdf662bbacb4cd875a671c'],False,"['BlockBuilder.java', 'ExpressionTest.java']"
247da40c448deb3ea84e0df2b94bfce2d77ebfec,"Fix https://github.com/julianhyde/optiq/issues/232, ""Sum and avg of empty set should be null as per SQL specification"".

We achieve this by replacing 'SUM(x)' by 'CASE COUNT(*) = 0 THEN NULL ELSE SUM0(x) END' if it is possible for the group to be empty (either x is nullable or the aggregate query applies to the whole table), where SUM0 is an aggregate operator similar to SUM but returns 0 if applied to the empty set.",['fd925f67f8dacf1867f3616f5ab91e6195ce89a0'],False,"['RexImpTable.java', 'AggregateRelBase.java', 'ReduceAggregatesRule.java', 'SqlCallBinding.java', 'SqlOperatorBinding.java', 'SqlAvgAggFunction.java', 'SqlSumAggFunction.java', 'ReturnTypes.java', 'JdbcTest.java', 'SqlOperatorBaseTest.java', 'SqlTesterImpl.java', 'SqlValidatorTest.java', 'RelOptRulesTest.xml']"
1d158487e7bfeef0ab1e4e8f75bb09339ffe780f,Fix translation of SUM and SUM0 in MongoDB.,['247da40c448deb3ea84e0df2b94bfce2d77ebfec'],False,"['MongoAggregateRel.java', 'MongoRules.java']"
5562fc3952f61d943f109796c3d62b7390a8ac48,Fix various ANY conditions that aren't correctly being considered.,['78d8d40dcf098e776f6200bd201ef27689621098'],False,"['RelOptUtil.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java']"
b15c021c75a9a4f2b6442ea77180f2f7be6b4597,Oops. Fix build on JDK 1.6 and 1.7.,['21b3baeef5a5bf831e77a1c91277f21b96188825'],False,['Pair.java']
3f127ce51ff424409e0e54afa62ac34d49734ebb,"Fix decorrelation of sub-queries.

- Update planner to do decorrelation.
- Fixes to decorrelation logic.
- Update PushFilterPastJoinRule to call planner's copy hook, and use JoinRelBase instead of JoinRel.
- Add filter push down on decorrelation.
- Fix RelStructuredTypeFlattener to correctly populate toRelContext.
- Code formatting. (Julian Hyde)
- Add test based upon TpchSchema.",['00582dbaee832b93927b5cd9140468bb4d8f2d49'],False,"['TableMacroImpl.java', 'OptiqPrepareImpl.java', 'PlannerImpl.java', 'Planner.java', 'CalcRelSplitter.java', 'PushFilterPastJoinRule.java', 'RemoveTrivialProjectRule.java', 'AbstractRelOptPlanner.java', 'RelOptPlanner.java', 'HepPlanner.java', 'RelDataTypeFactoryImpl.java', 'SqlValidatorImpl.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'JdbcFrontJdbcBackTest.java', 'JdbcTest.java', 'OptiqAssert.java', 'PlannerTest.java', 'TpchSchema.java']"
d5e961e609a9e0c8d161dd54d19fa8ec243c8865,"Fix https://github.com/julianhyde/linq4j/issues/15, ""Expressions.ifThenElse does not work"".",['a9f47857764254acc08d24786e0278c57b3bf9f1'],False,"['ConditionalStatement.java', 'Expressions.java', 'ExpressionTest.java']"
efd7ca5ed212fd3d714aa34dda27a14b3f217f6e,"Fix https://github.com/julianhyde/optiq/issues/214, ""Modify Frameworks to allow Schema to be re-used"".

Includes some cleanup by Julian Hyde.",['3f127ce51ff424409e0e54afa62ac34d49734ebb'],False,"['OptiqConnectionImpl.java', 'OptiqSchema.java', 'PlannerImpl.java', 'Frameworks.java', 'PlannerTest.java']"
28cee453774ca7c52cf624274d3c248fe5d9be3d,"Fix https://github.com/julianhyde/optiq/pull/244, ""RelOptTableImpl.create always expects QueryableTable type in OptiqSchema.TableEntry"".",['efd7ca5ed212fd3d714aa34dda27a14b3f217f6e'],False,['RelOptTableImpl.java']
20dabe525ee0516c168f8ade4e231110c93de30e,"Fix https://github.com/julianhyde/optiq/pull/191, ""Rotate time/date/timestamp vals to local timezone"".

Following the JDBC specifications, rotate
java.sql.(Time,Date,Timestamp) to be zeroed-out in the local
timezone. Interpret incoming java.sql.(Time,Date,Timestamp) from
external JDBC drivers as being in the local timezone.

ResultSet#getString(int) still returns timestamps formatted
for GMT.",['28cee453774ca7c52cf624274d3c248fe5d9be3d'],False,"['JdbcToEnumerableConverter.java', 'SqlFunctions.java', 'JdbcTest.java']"
c53be95c507af375eaa213f75e3982e9e545fff3,"Remove ReflectiveSchema.name field, now that https://github.com/julianhyde/optiq/issues/214 is fixed.",['20dabe525ee0516c168f8ade4e231110c93de30e'],False,"['ReflectiveSchema.java', 'JdbcExample.java', 'JdbcTest.java', 'OptiqAssert.java', 'ReflectiveSchemaTest.java', 'PlannerTest.java', 'RelWriterTest.java']"
401039b53d863db8d0d2ec0211e6da4aa3b68588,"Fix https://github.com/julianhyde/optiq/issues/245, ""Off-by-one translation of ON clause of JOIN"".",['beeeff3f207feb5097f1d30cb2602ebcdcb9ec01'],False,"['Prepare.java', 'RexUtil.java', 'SqlToRelConverter.java', 'MultiJdbcSchemaJoinTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
1d7e4971dec1139c97b2056f1d5245ff00458079,"Fetch and Limit RexNodes are ignored when creating a new SqlRel object from existing SqlRel.

Cleanup by Julian Hyde:
* Make SqlToRelConverterTest flatten & decorrelate by default.
* Fix resulting asserts in the copy methods of various RelNode sub-types.
* Add tests that combine decorrelation with ORDER BY, LIMIT, OFFSET.",['401039b53d863db8d0d2ec0211e6da4aa3b68588'],False,"['CollectRel.java', 'OneRowRel.java', 'SamplingRel.java', 'TableAccessRel.java', 'TableFunctionRel.java', 'UncollectRel.java', 'ValuesRel.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'PlannerTest.java', 'RelOptTestBase.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlToRelConverterTest.xml']"
393cb46283a152f978c7f14063cf21f82fdbc263,"Fix https://github.com/julianhyde/linq4j/issues/8, ""Javadoc generation fails under JDK 1.8"".",['948ef23202581b5cf9128d381908f67607b75d36'],False,"['HISTORY.md', 'Enumerable.java', 'EnumerableDefaults.java', 'ExtendedEnumerable.java', 'ExtendedQueryable.java', 'Extensions.java', 'QueryableDefaults.java', 'QueryableFactory.java', 'ExpressionType.java', 'Expressions.java']"
2eb92e1a8da11d77fc21edfc64de765003f32527,"Upgrade to linq4j-0.2.

Adapt newest linq4j by avoiding sharing of ""unboxed values"".

Use better names for local variables: use field index to simplify debugging.",['3913ccfd1ab0a661f76be37d00606cd3f57c1f0e'],False,"['RELEASE.md', 'RexToLixTranslator.java', 'ReflectiveSchemaTest.java', 'pom.xml']"
20f87d6e212d6bbf93f79e6f900c94bb7d0bcd8a,"Fix https://github.com/julianhyde/optiq/issues/205, ""Suspicious map.get in VolcanoPlanner.reregister"".",['78c5d6481630038968965d1132418a7629a3d199'],False,['VolcanoPlanner.java']
4ecfd67e239a46de3c6fe7f842601ade1007aa2f,"Move optimizer visitor to linq4j, add ExpressionType.modifiesLvalue to avoid inlining in such cases",['05398b2759631b03a43d879bd43a2b3ef1092929'],False,"['BlockBuilder.java', 'ConditionalStatement.java', 'ConstantExpression.java', 'ConstantUntypedNull.java', 'ExpressionType.java', 'Expressions.java', 'OptimizeVisitor.java', 'ThrowStatement.java', 'Visitor.java', 'BlockBuilderBase.java', 'BlockBuilderTest.java', 'ExpressionTest.java', 'InlinerTest.java', 'Linq4jSuite.java', 'OptimizerTest.java']"
6d181a16f4e02ebfcf6c2ca0937dfb2c51bd4a2b,"Fix https://github.com/julianhyde/optiq/issues/238, ""Add adapter that generates TPC-H data"".

Added TpchSchemaFactory. TPC-H tests are run if -Doptiq.test.slow=true is specified.",['20f87d6e212d6bbf93f79e6f900c94bb7d0bcd8a'],False,"['OptiqAssert.java', 'pom.xml', 'TpchSchema.java', 'TpchSchemaFactory.java', 'package-info.java', 'TpchTest.java', 'PlusSuite.java', 'pom.xml']"
c30d6f132c7a8bbdafd03c52feb175fbe5b2db3a,"Fix https://github.com/julianhyde/optiq/issues/242, ""SplunkAdapterTest fails"".

The Splunk adapter had been broken by various changes, including the factoring out of Avatica JDBC and removing the schema parent from a table. SplunkAdapterTest now succeeds, and can be run as part of the regular suite if you specify -Doptiq.test.splunk=true.",['4838455817d16753ceb1b41d06c422b985bb9a35'],False,"['HOWTO.md', 'OptiqPrepareImpl.java', 'SqlValidatorUtil.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'pom.xml', 'SplunkDriver.java', 'SplunkPushDownRule.java', 'SplunkTable.java', 'SplunkTableAccessRel.java', 'SplunkAdapterTest.java']"
5424ccc0aba7186cd55fd0d3c37008aa2d5d7e89,Fix checkstyle for cygwin/Windows.,['8708a09f8963376fe1139ec5399b0ad7f5498fef'],False,['checkstyle.xml']
7bfbdb0bac7cce2d1d3b911bb46b1e07be013bf3,"Fix https://github.com/julianhyde/optiq/issues/175, ""Modify Schema SPI to allow caching"".

Added ""cache"" attribute of Schema JSON element; add method contentsHaveChangedSince to Schema SPI (breaking change, if you've written a schema that does not extend AbstractSchema); big rework of how OptiqSchema builds maps of tables, functions and sub-schemas and how it handles case-insensitive matches.",['4d47d0280b43d9d5887b7ddd2c7bea9365b932fe'],False,"['Schema.java', 'SchemaPlus.java', 'AbstractSchema.java', 'DelegatingSchema.java', 'JdbcSchema.java', 'MetaImpl.java', 'OptiqSchema.java', 'MaterializationService.java', 'JsonSchema.java', 'ModelHandler.java', 'OptiqCatalogReader.java', 'Util.java', 'JdbcTest.java', 'MultiJdbcSchemaJoinTest.java', 'UtilTest.java']"
6865c275b8579a722269003c8e2fcaeaae8056d6,Implement multi-pass optimization: some of the variables might be avoided and inlined after the first pass,['cdc593ca75afe397b753f5dec4a6648a267f6038'],False,"['BlockBuilder.java', 'InlinerTest.java']"
b2aae4af52943c14fe895b6218d68b5ec65f705d,"Fix https://github.com/julianhyde/optiq/issues/37, ""Document JSON model file format""",['8186223564fbc9e216742b9c1e4fd2562f78cfe0'],False,"['MODEL.md', 'README.md', 'RELEASE.md']"
194f6488859f7c3460fc201cab8b4a20d4cbe79a,"Fix https://github.com/julianhyde/linq4j/issues/17, ""Assign constant expressions to 'static final' members"".",['6865c275b8579a722269003c8e2fcaeaae8056d6'],False,"['Predicates.java', 'BinaryExpression.java', 'BlockBuilder.java', 'BlockStatement.java', 'ClassDeclaration.java', 'ConditionalStatement.java', 'ConstructorDeclaration.java', 'DeclarationStatement.java', 'DeterministicCodeOptimizer.java', 'FieldDeclaration.java', 'ForStatement.java', 'FunctionExpression.java', 'GotoStatement.java', 'IndexExpression.java', 'MemberExpression.java', 'MethodCallExpression.java', 'MethodDeclaration.java', 'NewArrayExpression.java', 'NewExpression.java', 'TernaryExpression.java', 'ThrowStatement.java', 'TypeBinaryExpression.java', 'UnaryExpression.java', 'Visitor.java', 'WhileStatement.java', 'BlockBuilderTest.java', 'DeterministicTest.java', 'Linq4jSuite.java']"
c0b2c0cf15bf3b1bd9e266c3de4e770ff601d638,"Fix deterministic code optimizer, implement @Deterministic annotation",['c425d2cf88a5bbc67345a9a473db133f1af3a2fc'],False,"['BlockBuilder.java', 'ClassDeclarationFinder.java', 'DeterministicCodeOptimizer.java', 'ParameterExpression.java', 'Deterministic.java', 'NonDeterministic.java', 'DeterministicTest.java']"
161c12fc633007715e8b2c951f20d752e1dd1594,"Fix cyclic reuse of final static constants: avoid to ""optimize"" static field expressions",['c0b2c0cf15bf3b1bd9e266c3de4e770ff601d638'],False,"['DeterministicCodeOptimizer.java', 'BlockBuilderBase.java', 'DeterministicTest.java']"
c3acd9ac608a78c2ba87d250362eca4dee6c8edb,Fix javadoc.,['89170683fb3f48f6d6e2da24972406e76e33e401'],False,['ExtendedEnumerable.java']
66abdb9fc6af144d40259a29046d9bc4661cba95,"Upgrade maven-release-plugin.

Also upgrades git scm provider to fix missing commit during release:prepare.",['c3acd9ac608a78c2ba87d250362eca4dee6c8edb'],False,['pom.xml']
5b16d809279c2d31bd34f5fa283c2840bc6c24e7,"Fix https://github.com/julianhyde/optiq/issues/252, ""Scalar sub-query that returns 0 rows should become NULL value"".",['adedbc08de5f54fc5e638049a91412831981023b'],False,"['JavaRules.java', 'PhysType.java', 'PhysTypeImpl.java', 'JoinRelType.java', 'JdbcTest.java']"
8a2a5e05c8f03b83ef2ae7a87970d0be87491ab5,Avoid excessive box and unbox of primitives when using Object[] storage.,['a04b89466d04cd07f8e3f24f138e90eaf1a33e45'],False,"['JavaRowFormat.java', 'JavaRules.java', 'PhysType.java', 'PhysTypeImpl.java', 'RexToLixTranslator.java', 'RexExecutorImpl.java', 'JdbcTest.java', 'SparkRules.java']"
88224ccafda7d88dd6aae64d71ea2cf2be89a86b,Add support for JSON files (recognized by '.json' suffix).,['97e1cc87a377d4cc75608e765bd7ac055536c73d'],False,"['pom.xml', 'CsvSchema.java', 'CsvTableScan.java', 'JsonEnumerator.java', 'JsonTable.java', 'CsvTest.java', 'archers.json']"
61f2fdfcfb36f8052c9a3d645197cb649fbdf4e2,"Fix return type inference for aggregate calls: it should consider number of items in GROUP BY clause.

Alter min/max return type inference to ARG0_NULLABLE_IF_EMPTY (nullable when no keys in GROUP BY).

Fix PushAggregateThroughUnionRule.

Rework PullConstantsThroughAggregatesRule in terms of ProjectRel instead of CalcRel.

Log final plan in Prepare.

Make emp.mgr nullable (just to increase test coverage).",['47284b0e82ac46b4ffc41ecd8071ee1fcfd4b30a'],False,"['Prepare.java', 'AggregateCall.java', 'AggregateRelBase.java', 'PullConstantsThroughAggregatesRule.java', 'PushAggregateThroughUnionRule.java', 'PushProjector.java', 'RelOptUtil.java', 'SqlMinMaxAggFunction.java', 'SqlTypeUtil.java', 'RelDecorrelator.java', 'JdbcTest.java', 'SqlOperatorBaseTest.java', 'DiffRepository.java', 'MockCatalogReader.java', 'RelOptRulesTest.java', 'SqlValidatorTest.java', 'RelOptRulesTest.xml']"
ed39771642781aef14cfcd223433f1b6c602de69,"Disable MongoDB a test, pending https://github.com/julianhyde/optiq/issues/270.",['66388b8833a2746eefda567704892fbda8a992a9'],False,['MongoAdapterTest.java']
b2bf8afb596aca82b80a30682553f60fd197c5b2,"Fix https://github.com/julianhyde/optiq/issues/267, ""Improve support for ARRAY data type"".

Implement Array.getResultSet().

Richer type model underlying ResultSetMetaData, including array and struct types, array of array of struct, etc.",['99b91a63f668b70c2c789bd04302517990927400'],False,"['ArrayImpl.java', 'AvaticaResultSet.java', 'AvaticaResultSetMetaData.java', 'ColumnMetaData.java', 'Cursor.java', 'MetaImpl.java', 'OptiqPrepare.java', 'OptiqResultSet.java', 'MaterializationService.java', 'OptiqPrepareImpl.java', 'AbstractCursor.java', 'JdbcTest.java']"
f2b97f232bc9d00cc738980ee6e971ff116099e5,Fix build errors on JDK 1.6.,['b2bf8afb596aca82b80a30682553f60fd197c5b2'],False,"['MetaImpl.java', 'OptiqSchema.java']"
1f4f433e9a27b9dd6908f1b9014ca67ce63036d1,"Fix https://github.com/julianhyde/optiq/issues/273, ""Support column alias in WITH queries (common table expressions)"".",['aa1f0983c126c23466deb990c96d6ff2dffd908c'],False,"['SqlWithItem.java', 'IdentifierNamespace.java', 'SqlValidatorImpl.java', 'WithItemNamespace.java', 'WithNamespace.java', 'WithScope.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
996e8f1a65e2729987e2ea530e9289f8f17bfc3d,"In JDBC result set, avoid row computation on each accessor call.",['85220050615a9b0ed4a3188f67455391d69886c4'],False,"['MetaImpl.java', 'ArrayEnumeratorCursor.java', 'EnumeratorCursor.java', 'RecordEnumeratorCursor.java']"
ae4f2210502c4b30940baef096a91d422dffbeee,"Fix build on JDK 1.6, and code formatting.",['d1ff7b8c021cf1664597421d084768a9a190a3ba'],False,"['SqlAdvisorGetHintsFunction.java', 'JdbcTest.java']"
242b21bc9981dd35bdd7e9db6c1ee874fccdfc30,"Fix https://github.com/julianhyde/optiq/issues/281, ""EXTRACT function's SQL return type is BIGINT but implemented as Java int"".

Extend testing framework to make sure that all expressions' actual type matches their validated type.",['afa8e1441bdf78d37683af890b4022e122cd3259'],False,"['SqlFunctions.java', 'JdbcTest.java', 'SqlFunctionsTest.java', 'SqlOperatorBaseTest.java', 'SqlTests.java']"
5c33b737d96a305dcbefb1c6fee47ca3ad60ed34,"Test case for ""https://github.com/julianhyde/optiq/issues/285"".",['242b21bc9981dd35bdd7e9db6c1ee874fccdfc30'],False,['JdbcTest.java']
5e0ba873f03b5c42e045ada0d4478652ddd64be8,"Fix https://github.com/julianhyde/optiq/issues/263, ""Add operand type that will cause a rule to fire when a new subset is created"".

Tune planner internals:
* Store rule operands in a map by RelNode class, so we don't have to scan all operands.
* Disable unused planning phases.",['5c33b737d96a305dcbefb1c6fee47ca3ad60ed34'],False,"['Prepare.java', 'AbstractRelOptPlanner.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'VolcanoPlannerTest.java']"
8ec7ef88c04231f8546c9734a2b35091ad471660,"Fix https://github.com/julianhyde/optiq/issues/284, ""Window functions Range defaults to CURRENT ROW"" and https://github.com/julianhyde/optiq/issues/285, ""Window functions throw exception without ORDER BY"".",['5e0ba873f03b5c42e045ada0d4478652ddd64be8'],False,"['JavaRules.java', 'RexWindow.java', 'SqlCall.java', 'SqlFunction.java', 'SqlFunctionalOperator.java', 'SqlJdbcFunctionCall.java', 'SqlOperator.java', 'SqlRankFunction.java', 'SqlSyntax.java', 'SqlUtil.java', 'SqlWindow.java', 'SqlCountAggFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlRowOperator.java', 'SqlStdOperatorTable.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableMacro.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'Bug.java', 'JdbcTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
b3bdcd78ae1834fe07634ad47ded2d7b5ebdbdae,"Fix https://github.com/julianhyde/optiq/issues/286, ""Error casting MongoDB date"".",['cafe4c65785b065e57b1790456e137aa758c0f40'],False,"['MongoEnumerator.java', 'MongoTable.java', 'MongoToEnumerableConverter.java', 'MongoAdapterTest.java']"
e14f3f1fd33e7da878966f3a47b4f6c87ec892ca,"Fix https://github.com/julianhyde/optiq/issues/290, ""Add SqlRun, an idempotent utility for running SQL test scripts"".",['b3bdcd78ae1834fe07634ad47ded2d7b5ebdbdae'],False,"['SqlRun.java', 'JdbcTest.java', 'OptiqAssert.java', 'outer.oq']"
48aae24cb7ddb8f5df33d3f76b9c4b468cb818de,"Fix https://github.com/julianhyde/optiq/issues/288, ""Add tests for windowed aggregation based on Postgres reference queries""",['e14f3f1fd33e7da878966f3a47b4f6c87ec892ca'],False,"['SqlRun.java', 'JdbcTest.java', 'outer.oq', 'winagg.oq']"
4932249fb35bb249550370c789152d4f76ba39a3,"Fix https://github.com/julianhyde/linq4j/issues/27, ""Incorrectly inlines non-final variable"".",['5f3ea8db67dc3c6ed3c4821db85c66918fbe6dfc'],False,"['Linq4j.java', 'BlockBuilder.java', 'InlinerTest.java', 'OptimizerTest.java']"
8157acaf1c9e3a7fa72b8bb353572261aa333d5a,"Fix https://github.com/julianhyde/optiq/issues/294, ""Implement DENSE_RANK windowed aggregate function"".

Changes to the `AggImplementor` and `WinAggImplementor` interfaces to provide richer context to user code implementing a (windowed) aggregate function.

RelDataType instances created via built-in type strategies are now NOW NULL. Add 'boolean nullable' parameter to RelDataTypeImpl.proto methods.

Upgrade to linq4j-0.4, and add 'final' to code-generator variables, per https://github.com/julianhyde/linq4j/issues/27.",['e2bff30892d5464a9d645e21a658ef734c63215a'],False,"['BuiltinMethod.java', 'JdbcToEnumerableConverter.java', 'AggImplementor.java', 'EnumerableRelImplementor.java', 'JavaRules.java', 'PhysTypeImpl.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'WinAggImplementor.java', 'RelCollationImpl.java', 'RelDataTypeImpl.java', 'ReturnTypes.java', 'JdbcTest.java', 'DiffTestCase.java', 'SqlValidatorTest.java', 'winagg.oq', 'pom.xml']"
4d8fb0901782ee9cf59af51b989e879ce586beee,Fix a NPE.,['ef2a54c8620751c56059dfb89e9b080ece516ef6'],False,['SqlTypeExplicitPrecedenceList.java']
f256dbfb31c1a4dbbfcfb6302460cdee1dd90389,Switch from github to Apache JIRA for issues tracking.,['08533094986a6dd81be61def722be53d64cdf8c0'],False,"['README.md', 'pom.xml']"
e90183d9958a9d2930f958eaa30258c7de67276a,Add DynamoBI join-optimizer rules. (Headers and packages have not been changed.),['ddad58826121d29362539f240ea32660811dc09b'],False,"['LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java']"
8a8339f0f6127a89951c86dbcda1af42f5b9036c,"Change headers, fix formatting and other minor cleanup. Add method IntPair.zip.",['e90183d9958a9d2930f958eaa30258c7de67276a'],False,"['RelMetadataQuery.java', 'CalcRelSplitter.java', 'LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'PullConstantsThroughAggregatesRule.java', 'PushSemiJoinPastJoinRule.java', 'RelOptUtil.java', 'RexProgram.java', 'SqlAdvisor.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'RhBase64.java', 'IntPair.java', 'ConcurrentTestCommandGenerator.java', 'UtilTest.java']"
a1557c2927b446feebc1895208fc7a84451e2e95,[OPTIQ-309] WITH ... ORDER BY query gives AssertionError,['90d0d79ec253af65c0c06323f43a90a672e0e73f'],False,"['SqlValidatorImpl.java', 'SqlToRelConverter.java', 'JdbcTest.java']"
d940fa3090f3014fc91d1015648133207d6ee123,Add test case for query decorrelation bug [OPTIQ-313].,['e0b2f8348ac97a666004c10ab93e6143358aa5cc'],False,"['Prepare.java', 'Hook.java', 'JdbcTest.java', 'OptiqAssert.java', 'TpchTest.java']"
96a949f2ea24fa287bdb0b3fd4283ecff8812851,Oops! (Expected result changed following merge.),['d940fa3090f3014fc91d1015648133207d6ee123'],False,['JdbcTest.java']
349bd74d61cdf216264fa5101f4299d202f2c2af,Update history: release 0.8 changes and issue URLs,['96a949f2ea24fa287bdb0b3fd4283ecff8812851'],False,['HISTORY.md']
1de5cf80a50fbf21b0bfb3cf43ed98f3edd51b72,Fix nested lists in history.,['349bd74d61cdf216264fa5101f4299d202f2c2af'],False,['HISTORY.md']
86a6f8c53f3e978574dbbae7c40a5efd5a736e2b,"Change Prepare.trim to a thread-local, to fix non-determinism in tests.",['1de5cf80a50fbf21b0bfb3cf43ed98f3edd51b72'],False,"['Prepare.java', 'JdbcTest.java', 'MaterializationTest.java']"
2db452ecbe0837d9f8207b5862558c031ac4aa7b,Fix a bug where composite SELECT DISTINCT would return duplicate rows.,['71ebeaa81ad92845a145191cd31f2d6448d14a50'],False,"['JavaRules.java', 'agg.oq']"
89475fe8f6302550accf68bf3f975cdcd999e825,Change misleading variable name.,['8a91027c157e8c34ee1944faabb1353ec866d72a'],False,['RexBuilder.java']
0bf85206bbac8078d9298c7e68737d32405fa596,"[OPTIQ-318] Add unit test for SqlRun

SqlRun prints errors inline, as opposed to crapping out.",['1299a39340df5b9f347eb839071aa39bb0653598'],False,"['SqlRun.java', 'OptiqSuite.java', 'SqlRunTest.java']"
dd1b946c03a9b872284236c2c02d840008f07ff1,"Added support for date types (date, time, timestamp).

With this change, .getMetadata() reports the correct java.sql.Date
type for columns marked as date. The .getDate() on a row also returns a
java.sql.Date object. Since jdbc expects dates to be in the GMT
timezone, the dates are converted first.",['0b7a008964595fa5da95f17546af26df1473efea'],False,"['pom.xml', 'CsvEnumerator.java', 'CsvFieldType.java', 'CsvTest.java', 'DATE.csv']"
3018d18cc92815a9218eda1c77e30f43a4bf6630,"Cleanup, and fix minor timezone issue in a test.",['dd1b946c03a9b872284236c2c02d840008f07ff1'],False,"['CsvEnumerator.java', 'CsvFieldType.java', 'CsvTest.java']"
899a62936d5f4fbde6d877e503d03929fdfc7ae0,"[OPTIQ-303] Migrate issue URLs

Also fix a few javadoc errors.",['c34c144874cb9acbbafa8ff51f35a4f31cadee98'],False,"['ImplementableAggFunction.java', 'WinAggFrameContext.java', 'SqlOperator.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'MongoAdapterTest.java']"
b62097ede731504684fbb6c478206cdf4b1c7c46,[OPTIQ-326] Fix RelOptUtil ANY type check.,['ff40b4e095420add9b44c228958f51b4b00eb756'],False,['RelOptUtil.java']
a178a7052820afd28ce54508629c9ec6fe390463,[OPTIQ-325] Use Java list instead of Guava list to avoid null checks in case of SqlTypeExplicitPrecedenceList.,['b62097ede731504684fbb6c478206cdf4b1c7c46'],False,['SqlTypeExplicitPrecedenceList.java']
f82c9f57e6e2c0a0be31aee646d307f325feee63,[OPTIQ-323] Override SqlUnresolvedFunction.inferReturnType() to return 'ANY' type so framework implementors can support late bound function implementations.,['a178a7052820afd28ce54508629c9ec6fe390463'],False,['SqlUnresolvedFunction.java']
69b3a5347a59339d5fad0448976985d0a09b5f85,[OPTIQ-305] Unit Test Failure on release candidates,['f12be81412495e325c3b214a70482d86d4766d8d'],False,"['DriverVersion.java', 'JdbcTest.java', 'pom.xml']"
f247bc610f8b8ddfd657e7a4dc00ea2e32fe9bed,[OPTIQ-340] Fix bug in SqlToRelConverter when push expressions in join condtions into Project.,['0db3489f5101efd0caa86c7f728a77cac6330c70'],False,"['SqlToRelConverter.java', 'misc.oq']"
33e80e21ff1fcf546883c3b0589d6a07ef7b0b4b,Restore PushFilterPastJoinRule to RelDecorrelator; interim pending [OPTIQ-443] fix.,['f247bc610f8b8ddfd657e7a4dc00ea2e32fe9bed'],False,"['PushFilterPastJoinRule.java', 'RelDecorrelator.java']"
aacbeb5246eb4ee52a1ea89094a4564153be66f3,[OPTIQ-345] AssertionError in RexToLixTranslator comparing to date literal,['33e80e21ff1fcf546883c3b0589d6a07ef7b0b4b'],False,"['RexToLixTranslator.java', 'SqlFunctions.java', 'JdbcTest.java', 'misc.oq']"
b059c093d99ef18e74b0d4f873ef3c74b1e18517,"[OPTIQ-346] Add commutative join rule

CommutativeJoinRule is currently disabled.  Specifying ""-Doptiq.enable.join.commute=true"" enables CommutativeJoinRule and disables MergeProjectRule; the two together caused a planning-time explosion.

Tweak cost of joins, so that the left input contributes more to the cost than the right input (L log L vs. R). This reflects the cost of populating a hash table with the LHS. All else being equal, a join is more efficient if the smaller input is placed on the left.

Remove EnumerableJoinRel.getRows(), which was computing join row count assuming a many-to-one join. Fair enough, but it did not recognize that joining to a filtered dimension table reduces the row count of the fact-dimension join.

Fix display of a plan's provenance when one of the rule operands was a RelSubset.

Enable writing tests that provide arguments to EXPLAIN PLAN.",['4b9fba42e40a1c745de27e089dea1ca7749af160'],False,"['OptiqPrepareImpl.java', 'JavaRules.java', 'Programs.java', 'CommutativeJoinRule.java', 'LoptOptimizeJoinRule.java', 'VolcanoPlanner.java', 'RexUtil.java', 'JdbcTest.java', 'MaterializationTest.java', 'OptiqAssert.java', 'PlannerTest.java', 'misc.oq', 'TpcdsTest.java']"
2d6d78c39f211f54d11275cb3c4ab1db4adbed09,"[OPTIQ-354] Change maven groupId to ""org.apache.optiq""",['a10a8d778bcf6d042fa8637a5d3f34e1466324f3'],False,"['pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml']"
929f5310ad53b69a8917105501ad651656e09187,"Refactor test infrastructure to allow testing against heuristic bushy-join optimizer.

Add enum OptiqAssert.SchemaSpec, to allow more uniform use of various schemas in the test suite.",['a46153985300404213343e31486444695253f702'],False,"['Programs.java', 'LoptJoinTree.java', 'LoptOptimizeJoinRule.java', 'OptimizeBushyJoinRule.java', 'OptiqAssert.java', 'PlannerTest.java']"
249b00cb7c50f91f1f3878f0b95296f77b24eb45,"Add fluent method withHook, to more easily add hooks in tests.

Previously you had to call Hook.addThread outside the test, and remember to close it in a 'finally' block. Now the AssertQuery instance has a list of hooks, and remembers to close them all. You can use hooks to, for example, enable non-standard combinations of planner rules.

Fix TPC-DS row-count estimates.",['d861a0887f92caf70b045c4a29cc9960589838e5'],False,"['JdbcTest.java', 'OptiqAssert.java', 'TpcdsSchema.java', 'TpcdsTest.java']"
50914222eb1c4dd210f0f96eb4876dee085bf832,Fix cartesian products in OptimizeBushyJoinRule.,['249b00cb7c50f91f1f3878f0b95296f77b24eb45'],False,"['OptimizeBushyJoinRule.java', 'PlannerTest.java']"
e4b5fe77abdbe637f7cd87f5c46fc571db87bdb2,Fix build breakage on JDK 1.6 due to missing method BitSet.previousClearBit.,['50914222eb1c4dd210f0f96eb4876dee085bf832'],False,"['BitSets.java', 'OptimizeBushyJoinRule.java', 'BitSetsTest.java']"
bfa3daeeadd4926c6bf5af2b507ba5065359d47f,"Change license headers from ""Julian Hyde"" to ""ASF""; add headers where missing.",['e4b5fe77abdbe637f7cd87f5c46fc571db87bdb2'],False,"['.travis.yml', 'pom.xml', 'ArrayImpl.java', 'AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'AvaticaFactory.java', 'AvaticaJdbc40Factory.java', 'AvaticaJdbc41Factory.java', 'AvaticaParameter.java', 'AvaticaPrepareResult.java', 'AvaticaPreparedStatement.java', 'AvaticaResultSet.java', 'AvaticaResultSetMetaData.java', 'AvaticaStatement.java', 'BuiltInConnectionProperty.java', 'ByteString.java', 'Casing.java', 'ColumnMetaData.java', 'ConnectStringParser.java', 'ConnectionConfig.java', 'ConnectionConfigImpl.java', 'ConnectionProperty.java', 'Cursor.java', 'DriverVersion.java', 'Handler.java', 'HandlerImpl.java', 'Helper.java', 'InternalProperty.java', 'Meta.java', 'Quoting.java', 'UnregisteredDriver.java', 'package-info.java', 'AvaticaSuite.java', 'ConnectStringParserTest.java', 'package-info.java', 'pom.xml', 'config.fmpp', 'compoundIdentifier.ftl', 'parserImpls.ftl', 'CombinedParser.jj', 'AggregateFunction.java', 'BuiltinMethod.java', 'DataContext.java', 'Demo.java', 'Function.java', 'FunctionParameter.java', 'ImplementableAggFunction.java', 'ImplementableFunction.java', 'Member.java', 'ModifiableTable.java', 'QueryableTable.java', 'ScalarFunction.java', 'Schema.java', 'SchemaFactory.java', 'SchemaPlus.java', 'Schemas.java', 'SemiMutableSchema.java', 'Statistic.java', 'Statistics.java', 'Table.java', 'TableFactory.java', 'TableFunction.java', 'TableMacro.java', 'TranslatableTable.java', 'Lex.java', 'OptiqConnectionConfig.java', 'OptiqConnectionProperty.java', 'package-info.java', 'AbstractSchema.java', 'AbstractTable.java', 'AbstractTableQueryable.java', 'AggregateFunctionImpl.java', 'DelegatingSchema.java', 'MaterializedViewTable.java', 'ReflectiveFunctionBase.java', 'ScalarFunctionImpl.java', 'StarTable.java', 'TableFunctionImpl.java', 'TableMacroImpl.java', 'ViewTable.java', 'ArrayTable.java', 'CloneSchema.java', 'ColumnLoader.java', 'ListTable.java', 'package-info.java', 'AbstractQueryableTable.java', 'JavaTypeFactory.java', 'ReflectiveSchema.java', 'package-info.java', 'JdbcConvention.java', 'JdbcImplementor.java', 'JdbcQueryProvider.java', 'JdbcRel.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverter.java', 'JdbcToEnumerableConverterRule.java', 'JdbcUtils.java', 'package-info.java', 'package-info.java', 'Driver.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'MetaImpl.java', 'MetadataSchema.java', 'OptiqConnection.java', 'OptiqConnectionImpl.java', 'OptiqFactory.java', 'OptiqJdbc40Factory.java', 'OptiqJdbc41Factory.java', 'OptiqPrepare.java', 'OptiqPreparedStatement.java', 'OptiqResultSet.java', 'OptiqRootSchema.java', 'OptiqSchema.java', 'OptiqStatement.java', 'SqlTimeoutException.java', 'package-info.java', 'MaterializationActor.java', 'MaterializationKey.java', 'MaterializationService.java', 'package-info.java', 'JsonColumn.java', 'JsonCustomSchema.java', 'JsonCustomTable.java', 'JsonFunction.java', 'JsonJdbcSchema.java', 'JsonMapSchema.java', 'JsonMaterialization.java', 'JsonRoot.java', 'JsonSchema.java', 'JsonTable.java', 'JsonView.java', 'ModelHandler.java', 'package-info.java', 'package-info.java', 'LixToRelTranslator.java', 'OptiqCatalogReader.java', 'OptiqMaterializer.java', 'OptiqPrepareImpl.java', 'OptiqSqlValidator.java', 'PlannerImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'RelOptTableImpl.java', 'package-info.java', 'AggAddContext.java', 'AggContext.java', 'AggImpState.java', 'AggImplementor.java', 'AggResetContext.java', 'AggResultContext.java', 'CallImplementor.java', 'EnumerableConvention.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'JavaRelImplementor.java', 'JavaRowFormat.java', 'JavaRules.java', 'NestedBlockBuilder.java', 'NestedBlockBuilderImpl.java', 'NotNullImplementor.java', 'NullPolicy.java', 'PhysType.java', 'PhysTypeImpl.java', 'ReflectiveCallNotNullImplementor.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'StrictAggImplementor.java', 'StrictWinAggImplementor.java', 'WinAggAddContext.java', 'WinAggContext.java', 'WinAggFrameContext.java', 'WinAggFrameResultContext.java', 'WinAggImplementor.java', 'WinAggResetContext.java', 'WinAggResultContext.java', 'AggAddContextImpl.java', 'AggResetContextImpl.java', 'AggResultContextImpl.java', 'WinAggAddContextImpl.java', 'WinAggResetContextImpl.java', 'WinAggResultContextImpl.java', 'package-info.java', 'package-info.java', 'package-info.java', 'AbstractCursor.java', 'ArrayComparator.java', 'ArrayEnumeratorCursor.java', 'BinarySearch.java', 'Bindable.java', 'EnumeratorCursor.java', 'FlatLists.java', 'Hook.java', 'Like.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java', 'SortedMultiMap.java', 'Spacer.java', 'Spaces.java', 'SqlFunctions.java', 'Typed.java', 'Unit.java', 'Utilities.java', 'package-info.java', 'OptiqServer.java', 'OptiqServerStatement.java', 'package-info.java', 'FrameworkConfig.java', 'Frameworks.java', 'Planner.java', 'Program.java', 'Programs.java', 'RelConversionException.java', 'RuleSet.java', 'RuleSets.java', 'SqlRun.java', 'ValidationException.java', 'package-info.java', 'BitSets.java', 'Compatible.java', 'CompatibleGuava11.java', 'CompositeMap.java', 'PartiallyOrderedSet.java', 'BreadthFirstIterator.java', 'CycleDetector.java', 'DefaultDirectedGraph.java', 'DefaultEdge.java', 'DepthFirstIterator.java', 'DirectedGraph.java', 'Graphs.java', 'TopologicalOrderIterator.java', 'package-info.java', 'package-info.java', 'JaninoCompiler.java', 'JavaCompiler.java', 'JavaCompilerArgs.java', 'SynchronizedJaninoCompiler.java', 'package-info.java', 'package-info.java', 'AbstractRelNode.java', 'AggregateCall.java', 'AggregateRel.java', 'AggregateRelBase.java', 'Aggregation.java', 'CalcRel.java', 'CalcRelBase.java', 'CollectRel.java', 'CorrelatorRel.java', 'EmptyRel.java', 'FilterRel.java', 'FilterRelBase.java', 'IntersectRel.java', 'IntersectRelBase.java', 'InvalidRelException.java', 'JoinRel.java', 'JoinRelBase.java', 'JoinRelType.java', 'MinusRel.java', 'MinusRelBase.java', 'OneRowRel.java', 'OneRowRelBase.java', 'ProjectRel.java', 'ProjectRelBase.java', 'RelCollation.java', 'RelCollationImpl.java', 'RelCollationTraitDef.java', 'RelFactories.java', 'RelFieldCollation.java', 'RelImplementorImpl.java', 'RelInput.java', 'RelJson.java', 'RelJsonReader.java', 'RelJsonWriter.java', 'RelNode.java', 'RelShuttle.java', 'RelShuttleImpl.java', 'RelVisitor.java', 'RelWriter.java', 'RelWriterImpl.java', 'RelXmlWriter.java', 'SamplingRel.java', 'SetOpRel.java', 'SingleRel.java', 'SortRel.java', 'TableAccessRel.java', 'TableAccessRelBase.java', 'TableFunctionRel.java', 'TableFunctionRelBase.java', 'TableModificationRel.java', 'TableModificationRelBase.java', 'UncollectRel.java', 'UnionRel.java', 'UnionRelBase.java', 'ValuesRel.java', 'ValuesRelBase.java', 'WindowRel.java', 'WindowRelBase.java', 'ConverterRel.java', 'ConverterRelImpl.java', 'ConverterRule.java', 'NoneConverterRel.java', 'TraitMatchingRule.java', 'package-info.java', 'package-info.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'DefaultRelMetadataProvider.java', 'Metadata.java', 'MetadataFactory.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelColumnMapping.java', 'RelColumnOrigin.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdExplainVisibility.java', 'RelMdPercentageOriginalRows.java', 'RelMdPopulationSize.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'package-info.java', 'package-info.java', 'AddRedundantSemiJoinRule.java', 'CalcRelSplitter.java', 'CoerceInputsRule.java', 'CombineUnionsRule.java', 'CommutativeJoinRule.java', 'ConvertMultiJoinRule.java', 'ExtractJoinFilterRule.java', 'FilterToCalcRule.java', 'LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MergeCalcRule.java', 'MergeFilterOntoCalcRule.java', 'MergeFilterRule.java', 'MergeProjectOntoCalcRule.java', 'MergeProjectRule.java', 'MultiJoinRel.java', 'NestedLoopsJoinRule.java', 'OptimizeBushyJoinRule.java', 'ProjectToCalcRule.java', 'PullConstantsThroughAggregatesRule.java', 'PullUpAggregateAboveUnionRule.java', 'PullUpProjectsAboveJoinRule.java', 'PullUpProjectsOnTopOfMultiJoinRule.java', 'PushAggregateThroughUnionRule.java', 'PushFilterIntoMultiJoinRule.java', 'PushFilterPastJoinRule.java', 'PushFilterPastProjectRule.java', 'PushFilterPastSetOpRule.java', 'PushFilterPastTableFunctionRule.java', 'PushJoinThroughJoinRule.java', 'PushJoinThroughUnionRule.java', 'PushProjectIntoMultiJoinRule.java', 'PushProjectPastFilterRule.java', 'PushProjectPastJoinRule.java', 'PushProjectPastSetOpRule.java', 'PushProjectPastSortRule.java', 'PushProjector.java', 'PushSemiJoinPastFilterRule.java', 'PushSemiJoinPastJoinRule.java', 'PushSemiJoinPastProjectRule.java', 'PushSortPastProjectRule.java', 'ReduceAggregatesRule.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'ReduceValuesRule.java', 'RemoveDistinctAggregateRule.java', 'RemoveDistinctRule.java', 'RemoveEmptyRules.java', 'RemoveIsNotDistinctFromRule.java', 'RemoveSemiJoinRule.java', 'RemoveSortRule.java', 'RemoveTrivialCalcRule.java', 'RemoveTrivialProjectRule.java', 'SemiJoinRel.java', 'SwapJoinRule.java', 'TableAccessRule.java', 'UnionEliminatorRule.java', 'UnionToDistinctRule.java', 'WindowedAggSplitterRule.java', 'package-info.java', 'AbstractRelOptPlanner.java', 'CommonRelSubExprRule.java', 'Context.java', 'Convention.java', 'ConventionTraitDef.java', 'MulticastRelOptListener.java', 'RelImplementor.java', 'RelOptAbstractTable.java', 'RelOptCluster.java', 'RelOptConnection.java', 'RelOptCost.java', 'RelOptCostFactory.java', 'RelOptCostImpl.java', 'RelOptListener.java', 'RelOptMaterialization.java', 'RelOptNode.java', 'RelOptPlanner.java', 'RelOptQuery.java', 'RelOptRule.java', 'RelOptRuleCall.java', 'RelOptRuleOperand.java', 'RelOptRuleOperandChildPolicy.java', 'RelOptRuleOperandChildren.java', 'RelOptSamplingParameters.java', 'RelOptSchema.java', 'RelOptSchemaWithSampling.java', 'RelOptTable.java', 'RelOptUtil.java', 'RelTrait.java', 'RelTraitDef.java', 'RelTraitPropagationVisitor.java', 'RelTraitSet.java', 'SubstitutionVisitor.java', 'TableAccessMap.java', 'VisitorRelVisitor.java', 'HepInstruction.java', 'HepMatchOrder.java', 'HepPlanner.java', 'HepProgram.java', 'HepProgramBuilder.java', 'HepRelMetadataProvider.java', 'HepRelVertex.java', 'HepRuleCall.java', 'package-info.java', 'package-info.java', 'AbstractConverter.java', 'ChainedPhaseRuleMappingInitializer.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoCost.java', 'VolcanoPlanner.java', 'VolcanoPlannerPhase.java', 'VolcanoPlannerPhaseRuleMappingInitializer.java', 'VolcanoRelMetadataProvider.java', 'VolcanoRuleCall.java', 'VolcanoRuleMatch.java', 'package-info.java', 'RelCrossType.java', 'RelDataType.java', 'RelDataTypeComparability.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeFamily.java', 'RelDataTypeField.java', 'RelDataTypeFieldImpl.java', 'RelDataTypeImpl.java', 'RelDataTypePrecedenceList.java', 'RelProtoDataType.java', 'RelRecordType.java', 'package-info.java', 'EigenbaseNewResource.java', 'Feature.java', 'package-info.java', 'RexAction.java', 'RexBuilder.java', 'RexCall.java', 'RexCallBinding.java', 'RexChecker.java', 'RexCopier.java', 'RexCorrelVariable.java', 'RexDynamicParam.java', 'RexExecutable.java', 'RexExecutorImpl.java', 'RexFieldAccess.java', 'RexFieldCollation.java', 'RexInputRef.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexMultisetUtil.java', 'RexNode.java', 'RexOver.java', 'RexPattern.java', 'RexPermutationShuttle.java', 'RexPermuteInputsShuttle.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexRangeRef.java', 'RexShuttle.java', 'RexSlot.java', 'RexSqlConvertlet.java', 'RexSqlConvertletTable.java', 'RexSqlReflectiveConvertletTable.java', 'RexSqlStandardConvertletTable.java', 'RexToSqlNodeConverter.java', 'RexToSqlNodeConverterImpl.java', 'RexTransformer.java', 'RexUtil.java', 'RexVariable.java', 'RexVisitor.java', 'RexVisitorImpl.java', 'RexWindow.java', 'RexWindowBound.java', 'package-info.java', 'package-info.java', 'SargBinding.java', 'SargBoundType.java', 'SargEndpoint.java', 'SargExpr.java', 'SargFactory.java', 'SargInterval.java', 'SargIntervalBase.java', 'SargIntervalExpr.java', 'SargIntervalSequence.java', 'SargMutableEndpoint.java', 'SargRexAnalyzer.java', 'SargSetExpr.java', 'SargSetOperator.java', 'SargStrictness.java', 'package-info.java', 'ExplicitOperatorBinding.java', 'JoinConditionType.java', 'JoinType.java', 'SqlAbstractDateTimeLiteral.java', 'SqlAbstractStringLiteral.java', 'SqlAccessEnum.java', 'SqlAccessType.java', 'SqlAggFunction.java', 'SqlAsOperator.java', 'SqlBasicCall.java', 'SqlBinaryOperator.java', 'SqlBinaryStringLiteral.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlCharStringLiteral.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlDateLiteral.java', 'SqlDelete.java', 'SqlDialect.java', 'SqlDynamicParam.java', 'SqlExplain.java', 'SqlExplainLevel.java', 'SqlFunction.java', 'SqlFunctionCategory.java', 'SqlFunctionalOperator.java', 'SqlIdentifier.java', 'SqlInfixOperator.java', 'SqlInsert.java', 'SqlInsertKeyword.java', 'SqlInternalOperator.java', 'SqlIntervalLiteral.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlJoin.java', 'SqlKind.java', 'SqlLiteral.java', 'SqlMerge.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlNullSemantics.java', 'SqlNumericLiteral.java', 'SqlOperandCountRange.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlOperatorTable.java', 'SqlOrderBy.java', 'SqlOverOperator.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'SqlProcedureCallOperator.java', 'SqlRankFunction.java', 'SqlSampleSpec.java', 'SqlSelect.java', 'SqlSelectKeyword.java', 'SqlSelectOperator.java', 'SqlSetOperator.java', 'SqlSetOption.java', 'SqlSpecialOperator.java', 'SqlStateCodes.java', 'SqlSyntax.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlUnnestOperator.java', 'SqlUnresolvedFunction.java', 'SqlUpdate.java', 'SqlUtil.java', 'SqlValuesOperator.java', 'SqlWindow.java', 'SqlWith.java', 'SqlWithItem.java', 'SqlWriter.java', 'SqlAdvisor.java', 'SqlAdvisorGetHintsFunction.java', 'SqlAdvisorHint.java', 'SqlAdvisorValidator.java', 'SqlSimpleParser.java', 'package-info.java', 'SqlAbstractTimeFunction.java', 'SqlArrayQueryConstructor.java', 'SqlArrayValueConstructor.java', 'SqlAvgAggFunction.java', 'SqlBetweenOperator.java', 'SqlCase.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlCeilFunction.java', 'SqlCoalesceFunction.java', 'SqlCollectionTableOperator.java', 'SqlColumnListConstructor.java', 'SqlConvertFunction.java', 'SqlCountAggFunction.java', 'SqlCurrentDateFunction.java', 'SqlCursorConstructor.java', 'SqlDatetimeSubtractionOperator.java', 'SqlExtractFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlFloorFunction.java', 'SqlHistogramAggFunction.java', 'SqlInOperator.java', 'SqlItemOperator.java', 'SqlLeadLagAggFunction.java', 'SqlLikeOperator.java', 'SqlLiteralChainOperator.java', 'SqlMapQueryConstructor.java', 'SqlMapValueConstructor.java', 'SqlMinMaxAggFunction.java', 'SqlMonotonicBinaryOperator.java', 'SqlMonotonicUnaryFunction.java', 'SqlMultisetMemberOfOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetSetOperator.java', 'SqlMultisetValueConstructor.java', 'SqlNewOperator.java', 'SqlNtileAggFunction.java', 'SqlNullifFunction.java', 'SqlOverlapsOperator.java', 'SqlOverlayFunction.java', 'SqlPositionFunction.java', 'SqlRowOperator.java', 'SqlSingleValueAggFunction.java', 'SqlStdOperatorTable.java', 'SqlStringContextVariable.java', 'SqlSubstringFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'SqlThrowOperator.java', 'SqlTrimFunction.java', 'package-info.java', 'package-info.java', 'CommonParser.jj', 'Parser.jj', 'SqlAbstractParserImpl.java', 'SqlParseException.java', 'SqlParser.java', 'SqlParserImplFactory.java', 'SqlParserPos.java', 'SqlParserUtil.java', 'package-info.java', 'package-info.java', 'SqlFormatOptions.java', 'SqlPrettyWriter.java', 'package-info.java', 'AbstractSqlType.java', 'ArraySqlType.java', 'AssignableOperandTypeChecker.java', 'BasicSqlType.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'CursorReturnTypeInference.java', 'ExplicitOperandTypeInference.java', 'ExplicitReturnTypeInference.java', 'ExtraSqlTypes.java', 'FamilyOperandTypeChecker.java', 'InferTypes.java', 'IntervalSqlType.java', 'JavaToSqlTypeConversionRules.java', 'LiteralOperandTypeChecker.java', 'MapSqlType.java', 'MatchReturnTypeInference.java', 'MultisetOperandTypeChecker.java', 'MultisetSqlType.java', 'ObjectSqlType.java', 'OperandTypes.java', 'OperandsTypeChecking.java', 'OrdinalReturnTypeInference.java', 'ReturnTypes.java', 'SameOperandTypeChecker.java', 'SetopOperandTypeChecker.java', 'SqlOperandCountRanges.java', 'SqlOperandTypeChecker.java', 'SqlOperandTypeInference.java', 'SqlReturnTypeInference.java', 'SqlReturnTypeInferenceChain.java', 'SqlSingleOperandTypeChecker.java', 'SqlTypeAssignmentRules.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeFactoryImpl.java', 'SqlTypeFamily.java', 'SqlTypeName.java', 'SqlTypeTransform.java', 'SqlTypeTransformCascade.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'package-info.java', 'ChainedSqlOperatorTable.java', 'ListSqlOperatorTable.java', 'ReflectiveSqlOperatorTable.java', 'SqlBasicVisitor.java', 'SqlBuilder.java', 'SqlShuttle.java', 'SqlString.java', 'SqlVisitor.java', 'package-info.java', 'AbstractNamespace.java', 'AggChecker.java', 'AggFinder.java', 'AggregatingScope.java', 'AggregatingSelectScope.java', 'AliasNamespace.java', 'CollectNamespace.java', 'CollectScope.java', 'DelegatingNamespace.java', 'DelegatingScope.java', 'DelegatingSqlValidatorCatalogReader.java', 'DelegatingSqlValidatorTable.java', 'EmptyScope.java', 'FieldNamespace.java', 'IdentifierNamespace.java', 'JoinNamespace.java', 'JoinScope.java', 'ListScope.java', 'OrderByScope.java', 'OverScope.java', 'ParameterNamespace.java', 'ParameterScope.java', 'ProcedureNamespace.java', 'SelectNamespace.java', 'SelectScope.java', 'SetopNamespace.java', 'SqlConformance.java', 'SqlIdentifierMoniker.java', 'SqlMoniker.java', 'SqlMonikerComparator.java', 'SqlMonikerImpl.java', 'SqlMonikerType.java', 'SqlMonotonicity.java', 'SqlScopedShuttle.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableFunction.java', 'SqlUserDefinedTableMacro.java', 'SqlValidator.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorException.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorScope.java', 'SqlValidatorTable.java', 'SqlValidatorUtil.java', 'SqlValidatorWithHints.java', 'TableConstructorNamespace.java', 'TableNamespace.java', 'UnnestNamespace.java', 'WithItemNamespace.java', 'WithNamespace.java', 'WithScope.java', 'package-info.java', 'DefaultValueFactory.java', 'ReflectiveConvertletTable.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlNodeToRexConverter.java', 'SqlNodeToRexConverterImpl.java', 'SqlRexContext.java', 'SqlRexConvertlet.java', 'SqlRexConvertletTable.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'SubqueryConverter.java', 'package-info.java', 'RelStatColumnStatistics.java', 'RelStatSource.java', 'package-info.java', 'EigenbaseLogger.java', 'EigenbaseTimingTracer.java', 'EigenbaseTrace.java', 'package-info.java', 'BarfingInvocationHandler.java', 'Benchmark.java', 'BitString.java', 'Bug.java', 'CancelFlag.java', 'CastingList.java', 'ChunkList.java', 'ClosableAllocation.java', 'ClosableAllocationOwner.java', 'CompositeList.java', 'CompoundClosableAllocation.java', 'ControlFlowException.java', 'DelegatingInvocationHandler.java', 'EigenbaseContextException.java', 'EigenbaseException.java', 'Filterator.java', 'Glossary.java', 'IdentityHashSet.java', 'ImmutableIntList.java', 'ImmutableNullableList.java', 'IntList.java', 'IntegerIntervalSet.java', 'JsonBuilder.java', 'NlsString.java', 'Pair.java', 'Permutation.java', 'ReflectUtil.java', 'ReflectiveVisitDispatcher.java', 'ReflectiveVisitor.java', 'RhBase64.java', 'SaffronProperties.java', 'SerializableCharset.java', 'StackWriter.java', 'Stacks.java', 'Static.java', 'Template.java', 'UnmodifiableArrayList.java', 'Util.java', 'XmlOutput.java', 'IntPair.java', 'Mapping.java', 'MappingType.java', 'Mappings.java', 'package-info.java', 'package-info.java', 'BasicDatetime.java', 'ConversionUtil.java', 'DateTimeUtil.java', 'EigenbaseParserException.java', 'EigenbaseValidatorException.java', 'NumberUtil.java', 'ZonelessDate.java', 'ZonelessDatetime.java', 'ZonelessTime.java', 'ZonelessTimestamp.java', 'package-info.java', 'EigenbaseResource.properties', 'net-hydromatic-optiq-jdbc.properties', 'JdbcExample.java', 'ArrayTableTest.java', 'RangeTable.java', 'BinarySearchTest.java', 'ExceptionMessageTest.java', 'FoodmartTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LinqFrontJdbcBackTest.java', 'MaterializationTest.java', 'ModelTest.java', 'MultiJdbcSchemaJoinTest.java', 'OptiqAssert.java', 'OptiqSqlOperatorTest.java', 'OptiqSuite.java', 'ReflectiveSchemaTest.java', 'SqlFunctionsTest.java', 'SqlToRelConverterExtendedTest.java', 'TableInRootSchemaTest.java', 'package-info.java', 'FrameworksTest.java', 'PlannerTest.java', 'SqlRunTest.java', 'TpchSchema.java', 'BitSetsTest.java', 'PartiallyOrderedSetTest.java', 'DirectedGraphTest.java', 'RelOptPlanReaderTest.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'RexExecutorTest.java', 'SqlParserTest.java', 'SqlUnParserTest.java', 'DefaultSqlTestFactory.java', 'DelegatingSqlTestFactory.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlOperatorTest.java', 'SqlPrettyWriterTest.java', 'SqlTestFactory.java', 'SqlTester.java', 'SqlTesterImpl.java', 'SqlTests.java', 'SqlTypeNameTest.java', 'package-info.java', 'DiffRepository.java', 'DiffTestCase.java', 'EigenbaseResourceTest.java', 'EigenbaseTestCase.java', 'FilteratorTest.java', 'HepPlannerTest.java', 'MockCatalogReader.java', 'MockRelOptCost.java', 'MockRelOptPlanner.java', 'MockSqlOperatorTable.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexProgramTest.java', 'RexTransformerTest.java', 'SargTest.java', 'SqlLimitsTest.java', 'SqlTestGen.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'ConcurrentTestCommand.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestPlugin.java', 'ConcurrentTestPluginCommand.java', 'ConcurrentTestTimedCommandGenerator.java', 'SamplePlugin.java', 'mtsql', 'mtsql.loggers', 'package-info.java', 'test.mtsql', 'test.ref', 'package-info.java', 'ChunkListTest.java', 'PermutationTestCase.java', 'ReflectVisitorTest.java', 'TestUtil.java', 'UtilTest.java', 'MappingTest.java', 'SqlPrettyWriterTest.xml', 'HepPlannerTest.xml', 'RelOptRulesTest.xml', 'SqlLimitsTest.xml', 'SqlToRelConverterTest.xml', 'agg.oq', 'misc.oq', 'outer.oq', 'winagg.oq', 'pom.xml', 'MongoAggregateRel.java', 'MongoEnumerator.java', 'MongoFilterRel.java', 'MongoMethod.java', 'MongoProjectRel.java', 'MongoRel.java', 'MongoRules.java', 'MongoSchema.java', 'MongoSchemaFactory.java', 'MongoSortRel.java', 'MongoTable.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'MongoToEnumerableConverterRule.java', 'package-info.java', 'MongoAdapterTest.java', 'package-info.java', 'mongo-foodmart-model.json', 'mongo-zips-model.json', 'pom.xml', 'TpcdsSchema.java', 'TpcdsSchemaFactory.java', 'package-info.java', 'TpchSchema.java', 'TpchSchemaFactory.java', 'package-info.java', 'TpcdsTest.java', 'TpchTest.java', 'PlusSuite.java', 'pom.xml', 'pom.xml', 'EnumerableToSparkConverter.java', 'EnumerableToSparkConverterRule.java', 'HttpServer.java', 'JdbcToSparkConverter.java', 'JdbcToSparkConverterRule.java', 'SparkHandlerImpl.java', 'SparkMethod.java', 'SparkRel.java', 'SparkRules.java', 'SparkRuntime.java', 'SparkToEnumerableConverter.java', 'package-info.java', 'SparkAdapterTest.java', 'package-info.java', 'pom.xml', 'SplunkDriver.java', 'SplunkDriverVersion.java', 'SplunkPushDownRule.java', 'SplunkQuery.java', 'SplunkSchema.java', 'SplunkTable.java', 'SplunkTableAccessRel.java', 'package-info.java', 'SearchResultListener.java', 'SplunkConnection.java', 'SplunkConnectionImpl.java', 'package-info.java', 'HttpUtils.java', 'SocketFactoryImpl.java', 'StringUtils.java', 'TrustAllSslSocketFactory.java', 'package-info.java', 'SplunkAdapterTest.java', 'package-info.java', 'sqlline', 'sqlline.bat', 'checker.xml', 'header.txt', 'suppressions.xml', 'pom.xml', 'StatementTest.java', 'package-info.java']"
201d5917931bb5e2a455ad786a671764bc8b3833,"[OPTIQ-367] PushFilterPastJoinRule should strengthen join type

Make RexNode.isAlwaysTrue smart enough to deal with ""c IS NOT NULL"" on a column declared NOT NULL.

Change how EXISTS is translated (was ""c IS TRUE"", now ""c IS NOT NULL"", where c is a marker column from the null-generating side).

Keep a dumber version of PushFilterPastJoinRule around, to keep some tests working.",['5a42f3f30cb1103ac9750fa40f9ca43e97837aa8'],False,"['JoinRelType.java', 'RelMdUtil.java', 'PushFilterPastJoinRule.java', 'RelOptUtil.java', 'RexCall.java', 'SqlToRelConverter.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'SqlToRelTestBase.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml']"
111947cd0a7502307507f9e2389e4df13e678844,[OPTIQ-372] Change LoptOptimizeJoinRule & PushFilterPast* rules to use factory,['cb2ad3acec33c4e17c54b9acbae54fbfe500a84d'],False,"['JdbcRules.java', 'JavaRules.java', 'FilterRel.java', 'FilterRelBase.java', 'LoptOptimizeJoinRule.java', 'PushFilterPastJoinRule.java', 'PushFilterPastProjectRule.java', 'PushFilterPastSetOpRule.java', 'MongoFilterRel.java']"
f25e0d837e8305e460f62bcefd37561526d4cea2,"[OPTIQ-371] Implement JOIN whose ON clause contains mixed equi and theta

Add class EnumerableSemiJoin and EnumerableSemiJoinRule.

Add test cases for EXISTS and NOT EXISTS.

Add Enumerables.semiJoin, which will eventually go into linq4j.

Change the constructor of SemiJoinRel to allow it to be sub-classed.",['111947cd0a7502307507f9e2389e4df13e678844'],False,"['BuiltinMethod.java', 'JdbcRules.java', 'OptiqPrepareImpl.java', 'JavaRules.java', 'Enumerables.java', 'Programs.java', 'JoinInfo.java', 'RelMdUtil.java', 'AddRedundantSemiJoinRule.java', 'EquiJoinRel.java', 'LoptSemiJoinOptimizer.java', 'NestedLoopsJoinRule.java', 'PushFilterPastJoinRule.java', 'PushSemiJoinPastFilterRule.java', 'PushSemiJoinPastJoinRule.java', 'PushSemiJoinPastProjectRule.java', 'SemiJoinRel.java', 'SemiJoinRule.java', 'RelOptUtil.java', 'VolcanoPlanner.java', 'EnumerablesTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcTest.java', 'OptiqSuite.java', 'PlannerTest.java', 'misc.oq', 'TpcdsTest.java']"
b2aeee4644a787bf19732dc203a708c5b1a533f9,"[OPTIQ-377] UnregisteredDriver should catch, log and re-throw NoClassDefFoundError",['3055cc32fe752069e0ed45fff0d46081514a2d69'],False,['UnregisteredDriver.java']
ed95c7b3cccbe453139c1ad754dcaf866c88fd61,Fix disclaimer,['880180b445172a3f0a781e1d1065078ac15effe4'],False,['DISCLAIMER']
b94de1c99f14120d06816764b97d2e07d2de5603,Fix release:prepare to that it commits to git,['b86786ef916a9f1f135d5db79091e8c2202d9073'],False,['pom.xml']
55fbf047681affa637825c3108df1d1a80855063,"Fix 'mvn site' on JDK 1.8 and enable in Travis-CI.

Fix several javadoc errors and warnings.

Remove some duplicate package-info.java files.

Remove versions of maven plugins where apache pom already specifies a version.",['0d84e622facf80cc3d2d0bb01b16fac3bec3bd6e'],False,"['.travis.yml', 'AvaticaConnection.java', 'AvaticaFactory.java', 'AvaticaPreparedStatement.java', 'Cursor.java', 'ConnectStringParserTest.java', 'RelMdPredicates.java', 'DiffRepository.java', 'SqlToRelTestBase.java', 'package-info.java', 'package-info.java', 'pom.xml', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'suppressions.xml', 'StatementTest.java', 'package-info.java']"
bb3e55c5a910a6d447a9b60bab0de975b6017f2b,Fix git-commit-id-plugin error when running in Travis-CI.,['48bcaddc9a3bf4b5a34a430e927a90efba62b8f6'],False,['.travis.yml']
aa8a98ffd7b877d141a0f4929982a6a2f97c20e1,[OPTIQ-385] Change comment style for Java headers,['c87a7b83c03f86691f2d591e89940c35748e431a'],False,"['ArrayImpl.java', 'AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'AvaticaFactory.java', 'AvaticaJdbc40Factory.java', 'AvaticaJdbc41Factory.java', 'AvaticaParameter.java', 'AvaticaPrepareResult.java', 'AvaticaPreparedStatement.java', 'AvaticaResultSet.java', 'AvaticaResultSetMetaData.java', 'AvaticaStatement.java', 'BuiltInConnectionProperty.java', 'ByteString.java', 'Casing.java', 'ColumnMetaData.java', 'ConnectStringParser.java', 'ConnectionConfig.java', 'ConnectionConfigImpl.java', 'ConnectionProperty.java', 'Cursor.java', 'DriverVersion.java', 'Handler.java', 'HandlerImpl.java', 'Helper.java', 'InternalProperty.java', 'Meta.java', 'Quoting.java', 'UnregisteredDriver.java', 'package-info.java', 'AvaticaSuite.java', 'ConnectStringParserTest.java', 'package-info.java', 'CombinedParser.jj', 'AggregateFunction.java', 'BuiltinMethod.java', 'DataContext.java', 'Demo.java', 'Function.java', 'FunctionParameter.java', 'ImplementableAggFunction.java', 'ImplementableFunction.java', 'Member.java', 'ModifiableTable.java', 'QueryableTable.java', 'ScalarFunction.java', 'Schema.java', 'SchemaFactory.java', 'SchemaPlus.java', 'Schemas.java', 'SemiMutableSchema.java', 'Statistic.java', 'Statistics.java', 'Table.java', 'TableFactory.java', 'TableFunction.java', 'TableMacro.java', 'TranslatableTable.java', 'Lex.java', 'OptiqConnectionConfig.java', 'OptiqConnectionProperty.java', 'package-info.java', 'AbstractSchema.java', 'AbstractTable.java', 'AbstractTableQueryable.java', 'AggregateFunctionImpl.java', 'DelegatingSchema.java', 'MaterializedViewTable.java', 'ReflectiveFunctionBase.java', 'ScalarFunctionImpl.java', 'StarTable.java', 'TableFunctionImpl.java', 'TableMacroImpl.java', 'ViewTable.java', 'ArrayTable.java', 'CloneSchema.java', 'ColumnLoader.java', 'ListTable.java', 'package-info.java', 'AbstractQueryableTable.java', 'JavaTypeFactory.java', 'ReflectiveSchema.java', 'package-info.java', 'JdbcConvention.java', 'JdbcImplementor.java', 'JdbcQueryProvider.java', 'JdbcRel.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverter.java', 'JdbcToEnumerableConverterRule.java', 'JdbcUtils.java', 'package-info.java', 'package-info.java', 'Driver.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'MetaImpl.java', 'MetadataSchema.java', 'OptiqConnection.java', 'OptiqConnectionImpl.java', 'OptiqFactory.java', 'OptiqJdbc40Factory.java', 'OptiqJdbc41Factory.java', 'OptiqPrepare.java', 'OptiqPreparedStatement.java', 'OptiqResultSet.java', 'OptiqRootSchema.java', 'OptiqSchema.java', 'OptiqStatement.java', 'SqlTimeoutException.java', 'package-info.java', 'MaterializationActor.java', 'MaterializationKey.java', 'MaterializationService.java', 'package-info.java', 'JsonColumn.java', 'JsonCustomSchema.java', 'JsonCustomTable.java', 'JsonFunction.java', 'JsonJdbcSchema.java', 'JsonMapSchema.java', 'JsonMaterialization.java', 'JsonRoot.java', 'JsonSchema.java', 'JsonTable.java', 'JsonView.java', 'ModelHandler.java', 'package-info.java', 'package-info.java', 'LixToRelTranslator.java', 'OptiqCatalogReader.java', 'OptiqMaterializer.java', 'OptiqPrepareImpl.java', 'OptiqSqlValidator.java', 'PlannerImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'RelOptTableImpl.java', 'package-info.java', 'AggAddContext.java', 'AggContext.java', 'AggImpState.java', 'AggImplementor.java', 'AggResetContext.java', 'AggResultContext.java', 'CallImplementor.java', 'EnumerableConvention.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'JavaRelImplementor.java', 'JavaRowFormat.java', 'JavaRules.java', 'NestedBlockBuilder.java', 'NestedBlockBuilderImpl.java', 'NotNullImplementor.java', 'NullPolicy.java', 'PhysType.java', 'PhysTypeImpl.java', 'ReflectiveCallNotNullImplementor.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'StrictAggImplementor.java', 'StrictWinAggImplementor.java', 'WinAggAddContext.java', 'WinAggContext.java', 'WinAggFrameContext.java', 'WinAggFrameResultContext.java', 'WinAggImplementor.java', 'WinAggResetContext.java', 'WinAggResultContext.java', 'AggAddContextImpl.java', 'AggResetContextImpl.java', 'AggResultContextImpl.java', 'WinAggAddContextImpl.java', 'WinAggResetContextImpl.java', 'WinAggResultContextImpl.java', 'package-info.java', 'package-info.java', 'package-info.java', 'AbstractCursor.java', 'ArrayComparator.java', 'ArrayEnumeratorCursor.java', 'BinarySearch.java', 'Bindable.java', 'Enumerables.java', 'EnumeratorCursor.java', 'FlatLists.java', 'Hook.java', 'Like.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java', 'SortedMultiMap.java', 'Spacer.java', 'Spaces.java', 'SqlFunctions.java', 'Typed.java', 'Unit.java', 'Utilities.java', 'package-info.java', 'OptiqServer.java', 'OptiqServerStatement.java', 'package-info.java', 'FrameworkConfig.java', 'Frameworks.java', 'Planner.java', 'Program.java', 'Programs.java', 'RelConversionException.java', 'RuleSet.java', 'RuleSets.java', 'SqlRun.java', 'ValidationException.java', 'package-info.java', 'BitSets.java', 'Compatible.java', 'CompatibleGuava11.java', 'CompositeMap.java', 'PartiallyOrderedSet.java', 'BreadthFirstIterator.java', 'CycleDetector.java', 'DefaultDirectedGraph.java', 'DefaultEdge.java', 'DepthFirstIterator.java', 'DirectedGraph.java', 'Graphs.java', 'TopologicalOrderIterator.java', 'package-info.java', 'package-info.java', 'JaninoCompiler.java', 'JavaCompiler.java', 'JavaCompilerArgs.java', 'SynchronizedJaninoCompiler.java', 'package-info.java', 'package-info.java', 'AbstractRelNode.java', 'AggregateCall.java', 'AggregateRel.java', 'AggregateRelBase.java', 'Aggregation.java', 'CalcRel.java', 'CalcRelBase.java', 'CollectRel.java', 'Correlation.java', 'CorrelatorRel.java', 'EmptyRel.java', 'FilterRel.java', 'FilterRelBase.java', 'IntersectRel.java', 'IntersectRelBase.java', 'InvalidRelException.java', 'JoinInfo.java', 'JoinRel.java', 'JoinRelBase.java', 'JoinRelType.java', 'MinusRel.java', 'MinusRelBase.java', 'OneRowRel.java', 'OneRowRelBase.java', 'ProjectRel.java', 'ProjectRelBase.java', 'RelCollation.java', 'RelCollationImpl.java', 'RelCollationTraitDef.java', 'RelFactories.java', 'RelFieldCollation.java', 'RelImplementorImpl.java', 'RelInput.java', 'RelJson.java', 'RelJsonReader.java', 'RelJsonWriter.java', 'RelNode.java', 'RelShuttle.java', 'RelShuttleImpl.java', 'RelVisitor.java', 'RelWriter.java', 'RelWriterImpl.java', 'RelXmlWriter.java', 'SamplingRel.java', 'SetOpRel.java', 'SingleRel.java', 'SortRel.java', 'TableAccessRel.java', 'TableAccessRelBase.java', 'TableFunctionRel.java', 'TableFunctionRelBase.java', 'TableModificationRel.java', 'TableModificationRelBase.java', 'UncollectRel.java', 'UnionRel.java', 'UnionRelBase.java', 'ValuesRel.java', 'ValuesRelBase.java', 'WindowRel.java', 'WindowRelBase.java', 'ConverterRel.java', 'ConverterRelImpl.java', 'ConverterRule.java', 'NoneConverterRel.java', 'TraitMatchingRule.java', 'package-info.java', 'package-info.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'DefaultRelMetadataProvider.java', 'Metadata.java', 'MetadataFactory.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelColumnMapping.java', 'RelColumnOrigin.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdExplainVisibility.java', 'RelMdPercentageOriginalRows.java', 'RelMdPopulationSize.java', 'RelMdPredicates.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'package-info.java', 'package-info.java', 'AddRedundantSemiJoinRule.java', 'CalcRelSplitter.java', 'CoerceInputsRule.java', 'CombineUnionsRule.java', 'CommutativeJoinRule.java', 'ConvertMultiJoinRule.java', 'EquiJoinRel.java', 'ExtractJoinFilterRule.java', 'FilterToCalcRule.java', 'LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MergeCalcRule.java', 'MergeFilterOntoCalcRule.java', 'MergeFilterRule.java', 'MergeProjectOntoCalcRule.java', 'MergeProjectRule.java', 'MultiJoinRel.java', 'NestedLoopsJoinRule.java', 'OptimizeBushyJoinRule.java', 'ProjectToCalcRule.java', 'PullConstantsThroughAggregatesRule.java', 'PullUpAggregateAboveUnionRule.java', 'PullUpProjectsAboveJoinRule.java', 'PullUpProjectsOnTopOfMultiJoinRule.java', 'PushAggregateThroughUnionRule.java', 'PushFilterIntoMultiJoinRule.java', 'PushFilterPastJoinRule.java', 'PushFilterPastProjectRule.java', 'PushFilterPastSetOpRule.java', 'PushFilterPastTableFunctionRule.java', 'PushJoinThroughJoinRule.java', 'PushJoinThroughUnionRule.java', 'PushProjectIntoMultiJoinRule.java', 'PushProjectPastFilterRule.java', 'PushProjectPastJoinRule.java', 'PushProjectPastSetOpRule.java', 'PushProjectPastSortRule.java', 'PushProjector.java', 'PushSemiJoinPastFilterRule.java', 'PushSemiJoinPastJoinRule.java', 'PushSemiJoinPastProjectRule.java', 'PushSortPastProjectRule.java', 'ReduceAggregatesRule.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'ReduceValuesRule.java', 'RemoveDistinctAggregateRule.java', 'RemoveDistinctRule.java', 'RemoveEmptyRules.java', 'RemoveIsNotDistinctFromRule.java', 'RemoveSemiJoinRule.java', 'RemoveSortRule.java', 'RemoveTrivialCalcRule.java', 'RemoveTrivialProjectRule.java', 'SemiJoinRel.java', 'SemiJoinRule.java', 'SwapJoinRule.java', 'TableAccessRule.java', 'TransitivePredicatesOnJoinRule.java', 'UnionEliminatorRule.java', 'UnionToDistinctRule.java', 'WindowedAggSplitterRule.java', 'package-info.java', 'AbstractRelOptPlanner.java', 'CommonRelSubExprRule.java', 'Context.java', 'Convention.java', 'ConventionTraitDef.java', 'MulticastRelOptListener.java', 'RelImplementor.java', 'RelOptAbstractTable.java', 'RelOptCluster.java', 'RelOptConnection.java', 'RelOptCost.java', 'RelOptCostFactory.java', 'RelOptCostImpl.java', 'RelOptListener.java', 'RelOptMaterialization.java', 'RelOptNode.java', 'RelOptPlanner.java', 'RelOptPredicateList.java', 'RelOptQuery.java', 'RelOptRule.java', 'RelOptRuleCall.java', 'RelOptRuleOperand.java', 'RelOptRuleOperandChildPolicy.java', 'RelOptRuleOperandChildren.java', 'RelOptSamplingParameters.java', 'RelOptSchema.java', 'RelOptSchemaWithSampling.java', 'RelOptTable.java', 'RelOptUtil.java', 'RelTrait.java', 'RelTraitDef.java', 'RelTraitPropagationVisitor.java', 'RelTraitSet.java', 'Strong.java', 'SubstitutionVisitor.java', 'TableAccessMap.java', 'VisitorRelVisitor.java', 'HepInstruction.java', 'HepMatchOrder.java', 'HepPlanner.java', 'HepProgram.java', 'HepProgramBuilder.java', 'HepRelMetadataProvider.java', 'HepRelVertex.java', 'HepRuleCall.java', 'package-info.java', 'package-info.java', 'AbstractConverter.java', 'ChainedPhaseRuleMappingInitializer.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoCost.java', 'VolcanoPlanner.java', 'VolcanoPlannerPhase.java', 'VolcanoPlannerPhaseRuleMappingInitializer.java', 'VolcanoRelMetadataProvider.java', 'VolcanoRuleCall.java', 'VolcanoRuleMatch.java', 'package-info.java', 'RelCrossType.java', 'RelDataType.java', 'RelDataTypeComparability.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeFamily.java', 'RelDataTypeField.java', 'RelDataTypeFieldImpl.java', 'RelDataTypeImpl.java', 'RelDataTypePrecedenceList.java', 'RelProtoDataType.java', 'RelRecordType.java', 'package-info.java', 'EigenbaseNewResource.java', 'Feature.java', 'package-info.java', 'RexAction.java', 'RexBuilder.java', 'RexCall.java', 'RexCallBinding.java', 'RexChecker.java', 'RexCopier.java', 'RexCorrelVariable.java', 'RexDynamicParam.java', 'RexExecutable.java', 'RexExecutorImpl.java', 'RexFieldAccess.java', 'RexFieldCollation.java', 'RexInputRef.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexMultisetUtil.java', 'RexNode.java', 'RexOver.java', 'RexPattern.java', 'RexPermutationShuttle.java', 'RexPermuteInputsShuttle.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexRangeRef.java', 'RexShuttle.java', 'RexSlot.java', 'RexSqlConvertlet.java', 'RexSqlConvertletTable.java', 'RexSqlReflectiveConvertletTable.java', 'RexSqlStandardConvertletTable.java', 'RexToSqlNodeConverter.java', 'RexToSqlNodeConverterImpl.java', 'RexTransformer.java', 'RexUtil.java', 'RexVariable.java', 'RexVisitor.java', 'RexVisitorImpl.java', 'RexWindow.java', 'RexWindowBound.java', 'package-info.java', 'package-info.java', 'SargBinding.java', 'SargBoundType.java', 'SargEndpoint.java', 'SargExpr.java', 'SargFactory.java', 'SargInterval.java', 'SargIntervalBase.java', 'SargIntervalExpr.java', 'SargIntervalSequence.java', 'SargMutableEndpoint.java', 'SargRexAnalyzer.java', 'SargSetExpr.java', 'SargSetOperator.java', 'SargStrictness.java', 'package-info.java', 'ExplicitOperatorBinding.java', 'JoinConditionType.java', 'JoinType.java', 'SqlAbstractDateTimeLiteral.java', 'SqlAbstractStringLiteral.java', 'SqlAccessEnum.java', 'SqlAccessType.java', 'SqlAggFunction.java', 'SqlAsOperator.java', 'SqlBasicCall.java', 'SqlBinaryOperator.java', 'SqlBinaryStringLiteral.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlCharStringLiteral.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlDateLiteral.java', 'SqlDelete.java', 'SqlDialect.java', 'SqlDynamicParam.java', 'SqlExplain.java', 'SqlExplainLevel.java', 'SqlFunction.java', 'SqlFunctionCategory.java', 'SqlFunctionalOperator.java', 'SqlIdentifier.java', 'SqlInfixOperator.java', 'SqlInsert.java', 'SqlInsertKeyword.java', 'SqlInternalOperator.java', 'SqlIntervalLiteral.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlJoin.java', 'SqlKind.java', 'SqlLiteral.java', 'SqlMerge.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlNullSemantics.java', 'SqlNumericLiteral.java', 'SqlOperandCountRange.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlOperatorTable.java', 'SqlOrderBy.java', 'SqlOverOperator.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'SqlProcedureCallOperator.java', 'SqlRankFunction.java', 'SqlSampleSpec.java', 'SqlSelect.java', 'SqlSelectKeyword.java', 'SqlSelectOperator.java', 'SqlSetOperator.java', 'SqlSetOption.java', 'SqlSpecialOperator.java', 'SqlStateCodes.java', 'SqlSyntax.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlUnnestOperator.java', 'SqlUnresolvedFunction.java', 'SqlUpdate.java', 'SqlUtil.java', 'SqlValuesOperator.java', 'SqlWindow.java', 'SqlWith.java', 'SqlWithItem.java', 'SqlWriter.java', 'SqlAdvisor.java', 'SqlAdvisorGetHintsFunction.java', 'SqlAdvisorHint.java', 'SqlAdvisorValidator.java', 'SqlSimpleParser.java', 'package-info.java', 'SqlAbstractTimeFunction.java', 'SqlArrayQueryConstructor.java', 'SqlArrayValueConstructor.java', 'SqlAvgAggFunction.java', 'SqlBetweenOperator.java', 'SqlCase.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlCeilFunction.java', 'SqlCoalesceFunction.java', 'SqlCollectionTableOperator.java', 'SqlColumnListConstructor.java', 'SqlConvertFunction.java', 'SqlCountAggFunction.java', 'SqlCurrentDateFunction.java', 'SqlCursorConstructor.java', 'SqlDatetimeSubtractionOperator.java', 'SqlExtractFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlFloorFunction.java', 'SqlHistogramAggFunction.java', 'SqlInOperator.java', 'SqlItemOperator.java', 'SqlLeadLagAggFunction.java', 'SqlLikeOperator.java', 'SqlLiteralChainOperator.java', 'SqlMapQueryConstructor.java', 'SqlMapValueConstructor.java', 'SqlMinMaxAggFunction.java', 'SqlMonotonicBinaryOperator.java', 'SqlMonotonicUnaryFunction.java', 'SqlMultisetMemberOfOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetSetOperator.java', 'SqlMultisetValueConstructor.java', 'SqlNewOperator.java', 'SqlNtileAggFunction.java', 'SqlNullifFunction.java', 'SqlOverlapsOperator.java', 'SqlOverlayFunction.java', 'SqlPositionFunction.java', 'SqlRowOperator.java', 'SqlSingleValueAggFunction.java', 'SqlStdOperatorTable.java', 'SqlStringContextVariable.java', 'SqlSubstringFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'SqlThrowOperator.java', 'SqlTrimFunction.java', 'package-info.java', 'package-info.java', 'CommonParser.jj', 'Parser.jj', 'SqlAbstractParserImpl.java', 'SqlParseException.java', 'SqlParser.java', 'SqlParserImplFactory.java', 'SqlParserPos.java', 'SqlParserUtil.java', 'package-info.java', 'package-info.java', 'SqlFormatOptions.java', 'SqlPrettyWriter.java', 'package-info.java', 'AbstractSqlType.java', 'ArraySqlType.java', 'AssignableOperandTypeChecker.java', 'BasicSqlType.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'CursorReturnTypeInference.java', 'ExplicitOperandTypeInference.java', 'ExplicitReturnTypeInference.java', 'ExtraSqlTypes.java', 'FamilyOperandTypeChecker.java', 'InferTypes.java', 'IntervalSqlType.java', 'JavaToSqlTypeConversionRules.java', 'LiteralOperandTypeChecker.java', 'MapSqlType.java', 'MatchReturnTypeInference.java', 'MultisetOperandTypeChecker.java', 'MultisetSqlType.java', 'ObjectSqlType.java', 'OperandTypes.java', 'OperandsTypeChecking.java', 'OrdinalReturnTypeInference.java', 'ReturnTypes.java', 'SameOperandTypeChecker.java', 'SetopOperandTypeChecker.java', 'SqlOperandCountRanges.java', 'SqlOperandTypeChecker.java', 'SqlOperandTypeInference.java', 'SqlReturnTypeInference.java', 'SqlReturnTypeInferenceChain.java', 'SqlSingleOperandTypeChecker.java', 'SqlTypeAssignmentRules.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeFactoryImpl.java', 'SqlTypeFamily.java', 'SqlTypeName.java', 'SqlTypeTransform.java', 'SqlTypeTransformCascade.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'package-info.java', 'ChainedSqlOperatorTable.java', 'ListSqlOperatorTable.java', 'ReflectiveSqlOperatorTable.java', 'SqlBasicVisitor.java', 'SqlBuilder.java', 'SqlShuttle.java', 'SqlString.java', 'SqlVisitor.java', 'package-info.java', 'AbstractNamespace.java', 'AggChecker.java', 'AggFinder.java', 'AggregatingScope.java', 'AggregatingSelectScope.java', 'AliasNamespace.java', 'CollectNamespace.java', 'CollectScope.java', 'DelegatingNamespace.java', 'DelegatingScope.java', 'DelegatingSqlValidatorCatalogReader.java', 'DelegatingSqlValidatorTable.java', 'EmptyScope.java', 'FieldNamespace.java', 'IdentifierNamespace.java', 'JoinNamespace.java', 'JoinScope.java', 'ListScope.java', 'OrderByScope.java', 'OverScope.java', 'ParameterNamespace.java', 'ParameterScope.java', 'ProcedureNamespace.java', 'SelectNamespace.java', 'SelectScope.java', 'SetopNamespace.java', 'SqlConformance.java', 'SqlIdentifierMoniker.java', 'SqlMoniker.java', 'SqlMonikerComparator.java', 'SqlMonikerImpl.java', 'SqlMonikerType.java', 'SqlMonotonicity.java', 'SqlScopedShuttle.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableFunction.java', 'SqlUserDefinedTableMacro.java', 'SqlValidator.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorException.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorScope.java', 'SqlValidatorTable.java', 'SqlValidatorUtil.java', 'SqlValidatorWithHints.java', 'TableConstructorNamespace.java', 'TableNamespace.java', 'UnnestNamespace.java', 'WithItemNamespace.java', 'WithNamespace.java', 'WithScope.java', 'package-info.java', 'DefaultValueFactory.java', 'ReflectiveConvertletTable.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlNodeToRexConverter.java', 'SqlNodeToRexConverterImpl.java', 'SqlRexContext.java', 'SqlRexConvertlet.java', 'SqlRexConvertletTable.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'SubqueryConverter.java', 'package-info.java', 'RelStatColumnStatistics.java', 'RelStatSource.java', 'package-info.java', 'EigenbaseLogger.java', 'EigenbaseTimingTracer.java', 'EigenbaseTrace.java', 'package-info.java', 'BarfingInvocationHandler.java', 'Benchmark.java', 'BitString.java', 'Bug.java', 'CancelFlag.java', 'CastingList.java', 'ChunkList.java', 'ClosableAllocation.java', 'ClosableAllocationOwner.java', 'CompositeList.java', 'CompoundClosableAllocation.java', 'ControlFlowException.java', 'DelegatingInvocationHandler.java', 'EigenbaseContextException.java', 'EigenbaseException.java', 'Filterator.java', 'Glossary.java', 'Holder.java', 'IdentityHashSet.java', 'ImmutableIntList.java', 'ImmutableNullableList.java', 'IntList.java', 'IntegerIntervalSet.java', 'JsonBuilder.java', 'NlsString.java', 'Pair.java', 'Permutation.java', 'ReflectUtil.java', 'ReflectiveVisitDispatcher.java', 'ReflectiveVisitor.java', 'RhBase64.java', 'SaffronProperties.java', 'SerializableCharset.java', 'StackWriter.java', 'Stacks.java', 'Static.java', 'Template.java', 'UnmodifiableArrayList.java', 'Util.java', 'XmlOutput.java', 'IntPair.java', 'Mapping.java', 'MappingType.java', 'Mappings.java', 'package-info.java', 'package-info.java', 'BasicDatetime.java', 'ConversionUtil.java', 'DateTimeUtil.java', 'EigenbaseParserException.java', 'EigenbaseValidatorException.java', 'NumberUtil.java', 'ZonelessDate.java', 'ZonelessDatetime.java', 'ZonelessTime.java', 'ZonelessTimestamp.java', 'package-info.java', 'JdbcExample.java', 'ArrayTableTest.java', 'RangeTable.java', 'BinarySearchTest.java', 'EnumerablesTest.java', 'ExceptionMessageTest.java', 'FoodmartTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LinqFrontJdbcBackTest.java', 'MaterializationTest.java', 'ModelTest.java', 'MultiJdbcSchemaJoinTest.java', 'OptiqAssert.java', 'OptiqSqlOperatorTest.java', 'OptiqSuite.java', 'ReflectiveSchemaTest.java', 'SqlFunctionsTest.java', 'SqlToRelConverterExtendedTest.java', 'TableInRootSchemaTest.java', 'package-info.java', 'FrameworksTest.java', 'PlannerTest.java', 'SqlRunTest.java', 'TpchSchema.java', 'BitSetsTest.java', 'PartiallyOrderedSetTest.java', 'DirectedGraphTest.java', 'RelOptPlanReaderTest.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'RexExecutorTest.java', 'SqlParserTest.java', 'SqlUnParserTest.java', 'DefaultSqlTestFactory.java', 'DelegatingSqlTestFactory.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlOperatorTest.java', 'SqlPrettyWriterTest.java', 'SqlTestFactory.java', 'SqlTester.java', 'SqlTesterImpl.java', 'SqlTests.java', 'SqlTypeNameTest.java', 'package-info.java', 'DiffRepository.java', 'DiffTestCase.java', 'EigenbaseResourceTest.java', 'EigenbaseTestCase.java', 'FilteratorTest.java', 'HepPlannerTest.java', 'MockCatalogReader.java', 'MockRelOptCost.java', 'MockRelOptPlanner.java', 'MockSqlOperatorTable.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexProgramTest.java', 'RexTransformerTest.java', 'SargTest.java', 'SqlLimitsTest.java', 'SqlTestGen.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'ConcurrentTestCommand.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestPlugin.java', 'ConcurrentTestPluginCommand.java', 'ConcurrentTestTimedCommandGenerator.java', 'SamplePlugin.java', 'package-info.java', 'package-info.java', 'ChunkListTest.java', 'PermutationTestCase.java', 'ReflectVisitorTest.java', 'TestUtil.java', 'UtilTest.java', 'MappingTest.java', 'mysql-foodmart-model.json', 'MongoAggregateRel.java', 'MongoEnumerator.java', 'MongoFilterRel.java', 'MongoMethod.java', 'MongoProjectRel.java', 'MongoRel.java', 'MongoRules.java', 'MongoSchema.java', 'MongoSchemaFactory.java', 'MongoSortRel.java', 'MongoTable.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'MongoToEnumerableConverterRule.java', 'package-info.java', 'MongoAdapterTest.java', 'mongo-foodmart-model.json', 'mongo-zips-model.json', 'TpcdsSchema.java', 'TpcdsSchemaFactory.java', 'package-info.java', 'TpchSchema.java', 'TpchSchemaFactory.java', 'package-info.java', 'TpcdsTest.java', 'TpchTest.java', 'PlusSuite.java', 'EnumerableToSparkConverter.java', 'EnumerableToSparkConverterRule.java', 'HttpServer.java', 'JdbcToSparkConverter.java', 'JdbcToSparkConverterRule.java', 'SparkHandlerImpl.java', 'SparkMethod.java', 'SparkRel.java', 'SparkRules.java', 'SparkRuntime.java', 'SparkToEnumerableConverter.java', 'package-info.java', 'SparkAdapterTest.java', 'SplunkDriver.java', 'SplunkDriverVersion.java', 'SplunkPushDownRule.java', 'SplunkQuery.java', 'SplunkSchema.java', 'SplunkTable.java', 'SplunkTableAccessRel.java', 'package-info.java', 'SearchResultListener.java', 'SplunkConnection.java', 'SplunkConnectionImpl.java', 'package-info.java', 'HttpUtils.java', 'SocketFactoryImpl.java', 'StringUtils.java', 'TrustAllSslSocketFactory.java', 'package-info.java', 'SplunkAdapterTest.java', 'header.txt', 'StatementTest.java']"
c2ff8f81988ce52d7c1c737075548e7d108d9fee,Temporary fix for [OPTIQ-390] Transitive inference (RelMdPredicates) doesn't handle semi-join,['aa8a98ffd7b877d141a0f4929982a6a2f97c20e1'],False,['RelMdPredicates.java']
f67972b3af8f36086936835249c270bad51331c2,SqlRun: Carry on after certain errors (e.g. AssertionError). Add 'if (true)' command.,['582be2a291fd618730c8071b6931d7a8a1da4b30'],False,"['SqlRun.java', 'SqlRunTest.java']"
e60fa76e207f7a9d8c7bdaf0a5dea951f9b561a5,"[OPTIQ-393] If no fields are projected from a table, field trimmer should project a dummy expression

Be careful not to create a dummy on top of a dummy.

Close apache/incubator-optiq#8 which was the original attempt to solve the problem of zero-field relational expressions.",['acee9632f113d0523928add6032d3c4c41944624'],False,"['RelFieldTrimmer.java', 'JdbcTest.java', 'LatticeTest.java', 'misc.oq']"
e34f7f0f894f3d6d503210f941236bae03c441f2,"[OPTIQ-396] Change return type of JoinFactory.createJoin(); add SemiJoinFactory

Close apache/incubator-optiq#11",['973f2f8870060adc0acd23e8d08fe3d2b4021ad0'],False,"['RelFactories.java', 'OptimizeBushyJoinRule.java', 'RelFieldTrimmer.java']"
32e0b6afbf3cc0a146c2131bc16c3f6e3612d309,Freeze hive fmpp > freemarker plugin dependency.,['771ec5449a0e8cea1f2a55626b9850b64a5a4937'],False,['pom.xml']
d63f5d561b99740238b09dcf7587cf81185152c0,"[OPTIQ-384] Add ""apache-"" prefix to tarball and directory within tarball",['c3bf95bb539ae78ffba1db82791b660118ca167f'],False,"['HOWTO.md', 'pom.xml', 'source-assembly.xml']"
b139ab80b23a74ce940095ef5db029b5aa03714a,Fix connection leak in SqlRun,['d62c064f770f38af4e113f8beb95cf4d32373474'],False,['SqlRun.java']
6fbefcec9c21b67577edad9638d4e8299c4971cc,"[OPTIQ-404] MergeProjectRule should not construct RexPrograms for simple mappings

Move ProjectRel.getPermutation() and .isMapping() up to ProjectRelBase.

Fix a bug in RelOptUtil.projectMapping.",['25c6c0c74f9c335c0736b10d3f6490e15dc24eb8'],False,"['ProjectRel.java', 'ProjectRelBase.java', 'MergeProjectRule.java', 'RelOptMaterialization.java', 'RelOptUtil.java']"
cc137b5cbb5e0a3630a0fb740b1583b0274f980c,Fix tests on Windows.,['fd20d5c41d47377aa0e0f592e409f81f5952ac82'],False,"['LatticeTest.java', 'OptiqAssert.java', 'SqlRunTest.java']"
1d2cb011856d5d7c43cd55df6d0ceb71812ff24e,"Now, a lattice can materialize an aggregate-join and use it in a subsequent query.

Add AggregateFilterTransposeRule, to help crystallize a query into a form that matches an aggregate table.

Minor fixes and tweaks to BreadthFirstIterator, DepthFirstIterator, ArrayTable, StarTable, Mappings.",['fbac0d6a57e75f1f94843bd5376f2aa95d76f4aa'],False,"['pom.xml', 'StarTable.java', 'ArrayTable.java', 'CloneSchema.java', 'JavaRules.java', 'BreadthFirstIterator.java', 'DepthFirstIterator.java', 'AggregateFilterTransposeRule.java', 'AggregateStarTableRule.java', 'RelOptLattice.java', 'RelOptMaterialization.java', 'RelOptUtil.java', 'HepPlanner.java', 'VolcanoPlanner.java', 'RexPermuteInputsShuttle.java', 'RexUtil.java', 'RelStructuredTypeFlattener.java', 'Mappings.java', 'FoodmartTest.java', 'JdbcTest.java', 'LatticeTest.java', 'LinqFrontJdbcBackTest.java', 'OptiqAssert.java', 'DirectedGraphTest.java', 'MappingTest.java']"
3148ca34c2b0c89db905ead99d12ecc65e880bef,"Document how to build from git, and how to get jars from maven repo.

Document that we require maven 3.2, because of
https://jira.codehaus.org/browse/MNG-3385, fixed in maven 3.1.0-alpha-1.
That bug is minor, and maven 3.0 works fine for most purposes.

Add video links.",['7938e10d53ea9f7f0ebd1217a7ded9523e1613f9'],False,"['README.md', 'HOWTO.md']"
6f805ae4cec33ac4e380fdd08db89f6fd4494622,Bad package name in package-info was causing errors in Eclipse.,['3c32deb2bb06dc56ff036419c5f4e7ded61b8eac'],False,['package-info.java']
3b447fcc2c6360b69cb7d4e8343dd15f7cc0ba95,Fix javadoc error.,['0fd4e3d9ea63fa67a97ea8ba73e46a12e31af2b1'],False,['RelDataTypeSystemImpl.java']
232a8f4dab75d73451aad19a0a652a59184bec71,"[OPTIQ-421] Add COVAR_POP and COVAR_SAMP aggregate functions

Close apache/incubator-optiq#14

Pull requests closed by other recent changes (committed already):
Close apache/incubator-optiq#12
Close apache/incubator-optiq#5
Close apache/incubator-optiq#2",['24eb1b84169127cc07cfd00473b7fb7f40365435'],False,"['CombinedParser.jj', 'SqlAvgAggFunction.java', 'SqlStdOperatorTable.java', 'StandardConvertletTable.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java']"
5d95c5fd1a809f07c82f968e48d46cb4f1f3e100,"[OPTIQ-427] Off-by-one issues in RemoveDistinctAggregateRule, AggregateFilterTransposeRule",['a1539e319c1d2443a7c0965c5081eb6fd25fdd25'],False,"['AggregateRelBase.java', 'FilterRelBase.java', 'AggregateFilterTransposeRule.java', 'AggregateStarTableRule.java', 'RemoveDistinctAggregateRule.java', 'RelOptMaterialization.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'RelDecorrelator.java', 'Util.java', 'FoodmartTest.java', 'LatticeTest.java', 'MaterializationTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
356a606094d82e4eed4a56637a0fce857f5d47cd,"[OPTIQ-427] Off-by-one issues in RemoveDistinctAggregateRule, AggregateFilterTransposeRule",['5d95c5fd1a809f07c82f968e48d46cb4f1f3e100'],False,"['pom.xml', 'OptiqConnectionImpl.java', 'Lattice.java', 'TileSuggester.java', 'JsonLattice.java', 'ModelHandler.java', 'OptiqMaterializer.java', 'LatticeTest.java', 'pom.xml']"
af86cd87a8c129867d49d87c15d62896a56f9108,[OPTIQ-422] Add REGR_SXX and REGR_SYY regression functions,['d4ab395c3ee346a4d40a44fcb949eab2d5d11171'],False,"['CombinedParser.jj', 'SqlCovarAggFunction.java', 'SqlStdOperatorTable.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java']"
48105c08c84a0f1304331bc67c5fb15213d528a3,Add tests inspired by Derby bugs.,['af86cd87a8c129867d49d87c15d62896a56f9108'],False,['misc.oq']
90f0bead8923dfb28992b60baee8d8cb92c18d9e,"[OPTIQ-386] Fix NOTICE

Close apache/incubator-optiq#16",['1bfcf3256c5a2937f0ca7acd6e91681dd4634b7f'],False,"['NOTICE', 'HISTORY.md']"
3c4b5982daa318660b989f37905455f3ad74863d,Fix javadoc hyperlinks in README.md,['90f0bead8923dfb28992b60baee8d8cb92c18d9e'],False,['README.md']
8fc5c90f7e542f833d2eea0804ef74987ec327e8,"Update references to web sites, git repositories, jira, mailing lists, travis CI now that [INFRA-8413] is fixed.

Update references to jira cases from OPTIQ-xxx to CALCITE-xxx.

Expand instructions in HOWTO for publishing a release.",['44c72c32cbb4c47ed8b6e33db5dc2c353d250bf4'],False,"['.travis.yml', 'README.md', 'Lattice.java', 'RelMdPredicates.java', 'Bug.java', 'FoodmartTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'ReflectiveSchemaTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'RelOptRulesTest.java', 'RexProgramTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'misc.oq', 'subquery.oq', 'HISTORY.md', 'HOWTO.md', 'MongoRules.java', 'MongoAdapterTest.java', 'TpcdsTest.java', 'pom.xml']"
e4fcf2a3be10c53e72276ca42789cf5fbd7fe7c7,"[CALCITE-444] Filters wrongly pushed into full outer join

This change contains deprecated APIs that will be removed in a day or two.",['3afe4b14942e4a60672f807f52b512b6df24b28b'],False,"['RelMdUtil.java', 'PushFilterPastJoinRule.java', 'RelOptUtil.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
41215c2f358a0006c944c48c30f26506ea60e493,"Various lattice improvements.

Add model that demonstrates lattices.

Allow lattice 'sql' attribute to be multi-line in lattice, view and materialization.

Don't allow roll up distinct-count.

When generating SQL in JDBC adapter, translate $SUM0 as SUM.

Fix enumerator over single-column ArrayTable.

Document model for lattice, tile, measure.

Improve algorithm to look for tiles that match a query, to allow inexact matches.

Look for materialized tiles that can be rolled up before creating a tile that is an exact match for the query. If there is a tile that has the right dimensionality but the wrong measures, in the worst case create a new tile with the union of the measures. If there are multiple tiles that can be rolled up, choose the one with the fewest rows.

Add attribute ""algorithmMaxMillis"" to JSON lattice element, and improve documentation for JSON model.

Make class TileKey top-level.

Add AggregateCall.create, which can infer the type of the call before creating it. This allows us to make SqlSumEmptyIsZeroAggFunction a singleton, by removing its type argument.

Deprecate interface Aggregation; new code should use SqlAggFunction.",['667ca64606c88b3f2690fb6b03a4bc2a5a93713d'],False,"['ColumnMetaData.java', 'Schemas.java', 'MaterializedViewTable.java', 'StarTable.java', 'ArrayTable.java', 'CloneSchema.java', 'JdbcImplementor.java', 'OptiqConnectionImpl.java', 'OptiqSchema.java', 'Lattice.java', 'MaterializationActor.java', 'MaterializationService.java', 'TileKey.java', 'TileSuggester.java', 'JsonLattice.java', 'JsonMaterialization.java', 'JsonRoot.java', 'JsonView.java', 'ModelHandler.java', 'Utilities.java', 'AggregateCall.java', 'Aggregation.java', 'AggregateStarTableRule.java', 'PushAggregateThroughUnionRule.java', 'ReduceAggregatesRule.java', 'RelOptLattice.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'SqlStdOperatorTable.java', 'SqlSumEmptyIsZeroAggFunction.java', 'LatticeTest.java', 'MaterializationTest.java', 'ModelTest.java', 'mysql-foodmart-lattice-model.json', 'MODEL.md']"
c91259dd5b89351a5218af5c89471748213547c2,[CALCITE-447] Change semi-join rules to make use of factories,['1f91bbf811d45d5c6832f23ba27972f2e304537b'],False,"['ConvertMultiJoinRule.java', 'PushSemiJoinPastFilterRule.java', 'PushSemiJoinPastProjectRule.java']"
ea152c61006186c0107dfbc456dc8f6ba69426ac,Fix JdbcTest.testVersion now that version is 1.0.,['1c3a38f6a8f817dbd57f482b806ece85db0802ee'],False,['JdbcTest.java']
f6a17699ead9ec0500ccc8e05df92b4570cf47ab,"Remove unused packages in linq4j, and fix checkstyle issues in linq4j and csv.",['d264db5987eb4e2aa93e21016362c815d01d6932'],False,"['CsvEnumerator.java', 'CsvFieldType.java', 'CsvTable.java', 'CsvTableScan.java', 'JsonTable.java', 'CsvTest.java', 'pom.xml', 'BiBlock.java', 'BiMapper.java', 'BiPredicate.java', 'BiPredicates.java', 'BiValue.java', 'BinaryOperator.java', 'Block.java', 'Blocks.java', 'Combiner.java', 'Factory.java', 'FlatMapper.java', 'Mapper.java', 'Mappers.java', 'Predicate.java', 'Predicates.java', 'Sink.java', 'package-info.java', 'Iterables.java', 'MapStream.java', 'SequentialStreamOps.java', 'StatefulSink.java', 'Stream.java', 'package-info.java', 'EnumerableDefaults.java', 'Linq4j.java', 'Notes.java', 'OrderedEnumerable.java', 'QueryableDefaults.java', 'BlockBuilder.java', 'Expressions.java', 'FunctionExpression.java', 'Primitive.java', 'Functions.java', 'ExpressionTest.java', 'Linq4jTest.java']"
a611d645ad754844a39f3d98f5f814f13dbd9404,"[CALCITE-296] Re-organize package structure;
[CALCITE-419] Naming convention for planner rules

This change only renames files (and deletes some obsolete files). There are no content changes.",['8e480759fc25d7a1e10f7f20f9eddc7556beded8'],False,"['ArrayImpl.java', 'AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'AvaticaFactory.java', 'AvaticaJdbc40Factory.java', 'AvaticaJdbc41Factory.java', 'AvaticaParameter.java', 'AvaticaPrepareResult.java', 'AvaticaPreparedStatement.java', 'AvaticaResultSet.java', 'AvaticaResultSetMetaData.java', 'AvaticaStatement.java', 'BuiltInConnectionProperty.java', 'ByteString.java', 'Casing.java', 'ColumnMetaData.java', 'ConnectStringParser.java', 'ConnectionConfig.java', 'ConnectionConfigImpl.java', 'ConnectionProperty.java', 'Cursor.java', 'DriverVersion.java', 'Handler.java', 'HandlerImpl.java', 'Helper.java', 'InternalProperty.java', 'Meta.java', 'Quoting.java', 'UnregisteredDriver.java', 'package-info.java', 'AvaticaSuite.java', 'ConnectStringParserTest.java', 'package-info.java', 'Parser.jj', 'DataContext.java', 'Demo.java', 'ArrayTable.java', 'CloneSchema.java', 'ColumnLoader.java', 'ListTable.java', 'package-info.java', 'AggAddContext.java', 'AggContext.java', 'AggImpState.java', 'AggImplementor.java', 'AggResetContext.java', 'AggResultContext.java', 'CallImplementor.java', 'EnumerableConvention.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'EnumerableRules.java', 'JavaRelImplementor.java', 'JavaRowFormat.java', 'NestedBlockBuilder.java', 'NestedBlockBuilderImpl.java', 'NotNullImplementor.java', 'NullPolicy.java', 'PhysType.java', 'PhysTypeImpl.java', 'ReflectiveCallNotNullImplementor.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'StrictAggImplementor.java', 'StrictWinAggImplementor.java', 'WinAggAddContext.java', 'WinAggContext.java', 'WinAggFrameContext.java', 'WinAggFrameResultContext.java', 'WinAggImplementor.java', 'WinAggResetContext.java', 'WinAggResultContext.java', 'AggAddContextImpl.java', 'AggResetContextImpl.java', 'AggResultContextImpl.java', 'WinAggAddContextImpl.java', 'WinAggResetContextImpl.java', 'WinAggResultContextImpl.java', 'package-info.java', 'package-info.java', 'AbstractQueryableTable.java', 'JavaTypeFactory.java', 'ReflectiveSchema.java', 'package-info.java', 'JdbcConvention.java', 'JdbcImplementor.java', 'JdbcQueryProvider.java', 'JdbcRel.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverter.java', 'JdbcToEnumerableConverterRule.java', 'JdbcUtils.java', 'package-info.java', 'package-info.java', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'Lex.java', 'package-info.java', 'Context.java', 'FilterNode.java', 'Interpreter.java', 'Node.java', 'Nodes.java', 'ProjectNode.java', 'Row.java', 'Scalar.java', 'ScanNode.java', 'Sink.java', 'SortNode.java', 'Source.java', 'ValuesNode.java', 'package-info.java', 'CalciteConnection.java', 'CalciteConnectionImpl.java', 'CalciteFactory.java', 'CalciteJdbc40Factory.java', 'CalciteJdbc41Factory.java', 'CalcitePrepare.java', 'CalcitePreparedStatement.java', 'CalciteResultSet.java', 'CalciteRootSchema.java', 'CalciteSchema.java', 'CalciteStatement.java', 'Driver.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'MetaImpl.java', 'MetadataSchema.java', 'SqlTimeoutException.java', 'package-info.java', 'Lattice.java', 'MaterializationActor.java', 'MaterializationKey.java', 'MaterializationService.java', 'TileKey.java', 'TileSuggester.java', 'package-info.java', 'JsonColumn.java', 'JsonCustomSchema.java', 'JsonCustomTable.java', 'JsonFunction.java', 'JsonJdbcSchema.java', 'JsonLattice.java', 'JsonMapSchema.java', 'JsonMaterialization.java', 'JsonMeasure.java', 'JsonRoot.java', 'JsonSchema.java', 'JsonTable.java', 'JsonTile.java', 'JsonView.java', 'ModelHandler.java', 'package-info.java', 'package-info.java', 'AbstractRelOptPlanner.java', 'CommonRelSubExprRule.java', 'Context.java', 'Contexts.java', 'Convention.java', 'ConventionTraitDef.java', 'MulticastRelOptListener.java', 'RelImplementor.java', 'RelOptAbstractTable.java', 'RelOptCluster.java', 'RelOptConnection.java', 'RelOptCost.java', 'RelOptCostFactory.java', 'RelOptCostImpl.java', 'RelOptLattice.java', 'RelOptListener.java', 'RelOptMaterialization.java', 'RelOptNode.java', 'RelOptPlanner.java', 'RelOptPredicateList.java', 'RelOptQuery.java', 'RelOptRule.java', 'RelOptRuleCall.java', 'RelOptRuleOperand.java', 'RelOptRuleOperandChildPolicy.java', 'RelOptRuleOperandChildren.java', 'RelOptSamplingParameters.java', 'RelOptSchema.java', 'RelOptSchemaWithSampling.java', 'RelOptTable.java', 'RelOptUtil.java', 'RelTrait.java', 'RelTraitDef.java', 'RelTraitPropagationVisitor.java', 'RelTraitSet.java', 'Strong.java', 'SubstitutionVisitor.java', 'TableAccessMap.java', 'VisitorRelVisitor.java', 'HepInstruction.java', 'HepMatchOrder.java', 'HepPlanner.java', 'HepProgram.java', 'HepProgramBuilder.java', 'HepRelMetadataProvider.java', 'HepRelVertex.java', 'HepRuleCall.java', 'package-info.java', 'package-info.java', 'AbstractConverter.java', 'ChainedPhaseRuleMappingInitializer.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoCost.java', 'VolcanoPlanner.java', 'VolcanoPlannerPhase.java', 'VolcanoPlannerPhaseRuleMappingInitializer.java', 'VolcanoRelMetadataProvider.java', 'VolcanoRuleCall.java', 'VolcanoRuleMatch.java', 'package-info.java', 'CalciteCatalogReader.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'CalciteSqlValidator.java', 'LixToRelTranslator.java', 'PlannerImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'RelOptTableImpl.java', 'package-info.java', 'AbstractRelNode.java', 'Aggregation.java', 'InvalidRelException.java', 'RelCollation.java', 'RelCollationImpl.java', 'RelCollationTraitDef.java', 'RelFieldCollation.java', 'RelImplementorImpl.java', 'RelInput.java', 'RelNode.java', 'RelShuttle.java', 'RelShuttleImpl.java', 'RelVisitor.java', 'RelWriter.java', 'SingleRel.java', 'Converter.java', 'ConverterImpl.java', 'ConverterRule.java', 'NoneConverter.java', 'TraitMatchingRule.java', 'package-info.java', 'Aggregate.java', 'AggregateCall.java', 'Calc.java', 'Collect.java', 'Correlation.java', 'Correlator.java', 'Empty.java', 'Filter.java', 'Intersect.java', 'Join.java', 'JoinInfo.java', 'JoinRelType.java', 'Minus.java', 'OneRow.java', 'Project.java', 'RelFactories.java', 'Sample.java', 'SemiJoin.java', 'SetOp.java', 'Sort.java', 'TableFunctionScan.java', 'TableModify.java', 'TableScan.java', 'Uncollect.java', 'Union.java', 'Values.java', 'Window.java', 'RelJson.java', 'RelJsonReader.java', 'RelJsonWriter.java', 'RelWriterImpl.java', 'RelXmlWriter.java', 'package-info.java', 'LogicalAggregate.java', 'LogicalCalc.java', 'LogicalFilter.java', 'LogicalIntersect.java', 'LogicalJoin.java', 'LogicalMinus.java', 'LogicalOneRow.java', 'LogicalProject.java', 'LogicalTableFunctionScan.java', 'LogicalTableModify.java', 'LogicalTableScan.java', 'LogicalUnion.java', 'LogicalValues.java', 'LogicalWindow.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'DefaultRelMetadataProvider.java', 'Metadata.java', 'MetadataFactory.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelColumnMapping.java', 'RelColumnOrigin.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdExplainVisibility.java', 'RelMdPercentageOriginalRows.java', 'RelMdPopulationSize.java', 'RelMdPredicates.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'package-info.java', 'package-info.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateFilterTransposeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'CalcMergeRule.java', 'CalcRelSplitter.java', 'CalcRemoveRule.java', 'CoerceInputsRule.java', 'EmptyPruneRules.java', 'EquiJoin.java', 'FilterAggregateTransposeRule.java', 'FilterCalcMergeRule.java', 'FilterJoinRule.java', 'FilterMergeRule.java', 'FilterMultiJoinMergeRule.java', 'FilterProjectTransposeRule.java', 'FilterRemoveIsNotDistinctFromRule.java', 'FilterSetOpTransposeRule.java', 'FilterTableFunctionTransposeRule.java', 'FilterTableRule.java', 'FilterToCalcRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinAssociateRule.java', 'JoinCommuteRule.java', 'JoinExtractFilterRule.java', 'JoinProjectTransposeRule.java', 'JoinPushThroughJoinRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToCorrelatorRule.java', 'JoinToMultiJoinRule.java', 'JoinUnionTransposeRule.java', 'LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MultiJoin.java', 'MultiJoinOptimizeBushyRule.java', 'MultiJoinProjectTransposeRule.java', 'ProjectCalcMergeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinTransposeRule.java', 'ProjectMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'ProjectRemoveRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectSortTransposeRule.java', 'ProjectTableRule.java', 'ProjectToCalcRule.java', 'ProjectToWindowRule.java', 'PushProjector.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinFilterTransposeRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SemiJoinRemoveRule.java', 'SemiJoinRule.java', 'SortProjectTransposeRule.java', 'SortRemoveRule.java', 'TableScanRule.java', 'UnionEliminatorRule.java', 'UnionMergeRule.java', 'UnionToDistinctRule.java', 'ValuesReduceRule.java', 'package-info.java', 'RelCrossType.java', 'RelDataType.java', 'RelDataTypeComparability.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeFamily.java', 'RelDataTypeField.java', 'RelDataTypeFieldImpl.java', 'RelDataTypeImpl.java', 'RelDataTypePrecedenceList.java', 'RelDataTypeSystem.java', 'RelDataTypeSystemImpl.java', 'RelProtoDataType.java', 'RelRecordType.java', 'package-info.java', 'RexAction.java', 'RexBuilder.java', 'RexCall.java', 'RexCallBinding.java', 'RexChecker.java', 'RexCopier.java', 'RexCorrelVariable.java', 'RexDynamicParam.java', 'RexExecutable.java', 'RexExecutorImpl.java', 'RexFieldAccess.java', 'RexFieldCollation.java', 'RexInputRef.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexMultisetUtil.java', 'RexNode.java', 'RexOver.java', 'RexPattern.java', 'RexPermutationShuttle.java', 'RexPermuteInputsShuttle.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexRangeRef.java', 'RexShuttle.java', 'RexSlot.java', 'RexSqlConvertlet.java', 'RexSqlConvertletTable.java', 'RexSqlReflectiveConvertletTable.java', 'RexSqlStandardConvertletTable.java', 'RexToSqlNodeConverter.java', 'RexToSqlNodeConverterImpl.java', 'RexTransformer.java', 'RexUtil.java', 'RexVariable.java', 'RexVisitor.java', 'RexVisitorImpl.java', 'RexWindow.java', 'RexWindowBound.java', 'package-info.java', 'package-info.java', 'AbstractCursor.java', 'ArrayComparator.java', 'ArrayEnumeratorCursor.java', 'BinarySearch.java', 'Bindable.java', 'CalciteContextException.java', 'CalciteException.java', 'CalciteResource.java', 'Enumerables.java', 'EnumeratorCursor.java', 'Feature.java', 'FlatLists.java', 'Hook.java', 'Like.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java', 'SortedMultiMap.java', 'Spacer.java', 'Spaces.java', 'SqlFunctions.java', 'Typed.java', 'Unit.java', 'Utilities.java', 'package-info.java', 'AggregateFunction.java', 'FilterableTable.java', 'Function.java', 'FunctionParameter.java', 'ImplementableAggFunction.java', 'ImplementableFunction.java', 'Member.java', 'ModifiableTable.java', 'ProjectableFilterableTable.java', 'QueryableTable.java', 'ScalarFunction.java', 'ScannableTable.java', 'Schema.java', 'SchemaFactory.java', 'SchemaPlus.java', 'Schemas.java', 'SemiMutableSchema.java', 'Statistic.java', 'Statistics.java', 'Table.java', 'TableFactory.java', 'TableFunction.java', 'TableMacro.java', 'TranslatableTable.java', 'AbstractSchema.java', 'AbstractTable.java', 'AbstractTableQueryable.java', 'AggregateFunctionImpl.java', 'DelegatingSchema.java', 'MaterializedViewTable.java', 'ReflectiveFunctionBase.java', 'ScalarFunctionImpl.java', 'StarTable.java', 'TableFunctionImpl.java', 'TableMacroImpl.java', 'ViewTable.java', 'CalciteServer.java', 'CalciteServerStatement.java', 'package-info.java', 'ExplicitOperatorBinding.java', 'JoinConditionType.java', 'JoinType.java', 'SqlAbstractDateTimeLiteral.java', 'SqlAbstractStringLiteral.java', 'SqlAccessEnum.java', 'SqlAccessType.java', 'SqlAggFunction.java', 'SqlAsOperator.java', 'SqlBasicCall.java', 'SqlBinaryOperator.java', 'SqlBinaryStringLiteral.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlCharStringLiteral.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlDateLiteral.java', 'SqlDelete.java', 'SqlDialect.java', 'SqlDynamicParam.java', 'SqlExplain.java', 'SqlExplainLevel.java', 'SqlFunction.java', 'SqlFunctionCategory.java', 'SqlFunctionalOperator.java', 'SqlIdentifier.java', 'SqlInfixOperator.java', 'SqlInsert.java', 'SqlInsertKeyword.java', 'SqlInternalOperator.java', 'SqlIntervalLiteral.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlJoin.java', 'SqlKind.java', 'SqlLiteral.java', 'SqlMerge.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlNullSemantics.java', 'SqlNumericLiteral.java', 'SqlOperandCountRange.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlOperatorTable.java', 'SqlOrderBy.java', 'SqlOverOperator.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'SqlProcedureCallOperator.java', 'SqlRankFunction.java', 'SqlSampleSpec.java', 'SqlSelect.java', 'SqlSelectKeyword.java', 'SqlSelectOperator.java', 'SqlSetOperator.java', 'SqlSetOption.java', 'SqlSpecialOperator.java', 'SqlStateCodes.java', 'SqlSyntax.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlUnnestOperator.java', 'SqlUnresolvedFunction.java', 'SqlUpdate.java', 'SqlUtil.java', 'SqlValuesOperator.java', 'SqlWindow.java', 'SqlWith.java', 'SqlWithItem.java', 'SqlWriter.java', 'SqlAdvisor.java', 'SqlAdvisorGetHintsFunction.java', 'SqlAdvisorHint.java', 'SqlAdvisorValidator.java', 'SqlSimpleParser.java', 'package-info.java', 'SqlAbstractTimeFunction.java', 'SqlArrayQueryConstructor.java', 'SqlArrayValueConstructor.java', 'SqlAvgAggFunction.java', 'SqlBetweenOperator.java', 'SqlCase.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlCeilFunction.java', 'SqlCoalesceFunction.java', 'SqlCollectionTableOperator.java', 'SqlColumnListConstructor.java', 'SqlConvertFunction.java', 'SqlCountAggFunction.java', 'SqlCovarAggFunction.java', 'SqlCurrentDateFunction.java', 'SqlCursorConstructor.java', 'SqlDatetimeSubtractionOperator.java', 'SqlExtractFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlFloorFunction.java', 'SqlHistogramAggFunction.java', 'SqlInOperator.java', 'SqlItemOperator.java', 'SqlLeadLagAggFunction.java', 'SqlLikeOperator.java', 'SqlLiteralChainOperator.java', 'SqlMapQueryConstructor.java', 'SqlMapValueConstructor.java', 'SqlMinMaxAggFunction.java', 'SqlMonotonicBinaryOperator.java', 'SqlMonotonicUnaryFunction.java', 'SqlMultisetMemberOfOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetSetOperator.java', 'SqlMultisetValueConstructor.java', 'SqlNewOperator.java', 'SqlNtileAggFunction.java', 'SqlNullifFunction.java', 'SqlOverlapsOperator.java', 'SqlOverlayFunction.java', 'SqlPositionFunction.java', 'SqlRowOperator.java', 'SqlSingleValueAggFunction.java', 'SqlStdOperatorTable.java', 'SqlStringContextVariable.java', 'SqlSubstringFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'SqlThrowOperator.java', 'SqlTrimFunction.java', 'package-info.java', 'package-info.java', 'SqlAbstractParserImpl.java', 'SqlParseException.java', 'SqlParser.java', 'SqlParserImplFactory.java', 'SqlParserPos.java', 'SqlParserUtil.java', 'package-info.java', 'package-info.java', 'SqlFormatOptions.java', 'SqlPrettyWriter.java', 'package-info.java', 'AbstractSqlType.java', 'ArraySqlType.java', 'AssignableOperandTypeChecker.java', 'BasicSqlType.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'CursorReturnTypeInference.java', 'ExplicitOperandTypeInference.java', 'ExplicitReturnTypeInference.java', 'ExtraSqlTypes.java', 'FamilyOperandTypeChecker.java', 'InferTypes.java', 'IntervalSqlType.java', 'JavaToSqlTypeConversionRules.java', 'LiteralOperandTypeChecker.java', 'MapSqlType.java', 'MatchReturnTypeInference.java', 'MultisetOperandTypeChecker.java', 'MultisetSqlType.java', 'ObjectSqlType.java', 'OperandTypes.java', 'OperandsTypeChecking.java', 'OrdinalReturnTypeInference.java', 'ReturnTypes.java', 'SameOperandTypeChecker.java', 'SetopOperandTypeChecker.java', 'SqlOperandCountRanges.java', 'SqlOperandTypeChecker.java', 'SqlOperandTypeInference.java', 'SqlReturnTypeInference.java', 'SqlReturnTypeInferenceChain.java', 'SqlSingleOperandTypeChecker.java', 'SqlTypeAssignmentRules.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeFactoryImpl.java', 'SqlTypeFamily.java', 'SqlTypeName.java', 'SqlTypeTransform.java', 'SqlTypeTransformCascade.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'package-info.java', 'ChainedSqlOperatorTable.java', 'ListSqlOperatorTable.java', 'ReflectiveSqlOperatorTable.java', 'SqlBasicVisitor.java', 'SqlBuilder.java', 'SqlShuttle.java', 'SqlString.java', 'SqlVisitor.java', 'package-info.java', 'AbstractNamespace.java', 'AggChecker.java', 'AggFinder.java', 'AggregatingScope.java', 'AggregatingSelectScope.java', 'AliasNamespace.java', 'CollectNamespace.java', 'CollectScope.java', 'DelegatingNamespace.java', 'DelegatingScope.java', 'DelegatingSqlValidatorCatalogReader.java', 'DelegatingSqlValidatorTable.java', 'EmptyScope.java', 'FieldNamespace.java', 'IdentifierNamespace.java', 'JoinNamespace.java', 'JoinScope.java', 'ListScope.java', 'OrderByScope.java', 'OverScope.java', 'ParameterNamespace.java', 'ParameterScope.java', 'ProcedureNamespace.java', 'SelectNamespace.java', 'SelectScope.java', 'SetopNamespace.java', 'SqlConformance.java', 'SqlIdentifierMoniker.java', 'SqlMoniker.java', 'SqlMonikerComparator.java', 'SqlMonikerImpl.java', 'SqlMonikerType.java', 'SqlMonotonicity.java', 'SqlScopedShuttle.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableFunction.java', 'SqlUserDefinedTableMacro.java', 'SqlValidator.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorException.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorScope.java', 'SqlValidatorTable.java', 'SqlValidatorUtil.java', 'SqlValidatorWithHints.java', 'TableConstructorNamespace.java', 'TableNamespace.java', 'UnnestNamespace.java', 'WithItemNamespace.java', 'WithNamespace.java', 'WithScope.java', 'package-info.java', 'DefaultValueFactory.java', 'ReflectiveConvertletTable.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlNodeToRexConverter.java', 'SqlNodeToRexConverterImpl.java', 'SqlRexContext.java', 'SqlRexConvertlet.java', 'SqlRexConvertletTable.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'SubqueryConverter.java', 'package-info.java', 'FrameworkConfig.java', 'Frameworks.java', 'Planner.java', 'Program.java', 'Programs.java', 'RelConversionException.java', 'RuleSet.java', 'RuleSets.java', 'ValidationException.java', 'package-info.java', 'BarfingInvocationHandler.java', 'BasicDatetime.java', 'Benchmark.java', 'BitSets.java', 'BitString.java', 'Bug.java', 'BuiltInMethod.java', 'CalciteParserException.java', 'CalciteValidatorException.java', 'CancelFlag.java', 'CastingList.java', 'ChunkList.java', 'ClosableAllocation.java', 'ClosableAllocationOwner.java', 'Compatible.java', 'CompatibleGuava11.java', 'CompositeList.java', 'CompositeMap.java', 'CompoundClosableAllocation.java', 'ControlFlowException.java', 'ConversionUtil.java', 'DateTimeUtil.java', 'DelegatingInvocationHandler.java', 'Filterator.java', 'Glossary.java', 'Holder.java', 'ImmutableIntList.java', 'ImmutableNullableList.java', 'IntList.java', 'IntegerIntervalSet.java', 'JsonBuilder.java', 'NlsString.java', 'NumberUtil.java', 'Pair.java', 'PartiallyOrderedSet.java', 'Permutation.java', 'ReflectUtil.java', 'ReflectiveVisitDispatcher.java', 'ReflectiveVisitor.java', 'RhBase64.java', 'SaffronProperties.java', 'SerializableCharset.java', 'StackWriter.java', 'Stacks.java', 'Static.java', 'Template.java', 'UnmodifiableArrayList.java', 'Util.java', 'XmlOutput.java', 'ZonelessDate.java', 'ZonelessDatetime.java', 'ZonelessTime.java', 'ZonelessTimestamp.java', 'BreadthFirstIterator.java', 'CycleDetector.java', 'DefaultDirectedGraph.java', 'DefaultEdge.java', 'DepthFirstIterator.java', 'DirectedGraph.java', 'Graphs.java', 'TopologicalOrderIterator.java', 'package-info.java', 'JaninoCompiler.java', 'JavaCompiler.java', 'JavaCompilerArgs.java', 'package-info.java', 'AbstractSourceMapping.java', 'AbstractTargetMapping.java', 'IntPair.java', 'Mapping.java', 'MappingType.java', 'Mappings.java', 'package-info.java', 'package-info.java', 'CalciteLogger.java', 'CalciteTimingTracer.java', 'CalciteTrace.java', 'package-info.java', 'SynchronizedJaninoCompiler.java', 'package-info.java', 'package-info.java', 'package-info.java', 'SargBinding.java', 'SargBoundType.java', 'SargEndpoint.java', 'SargExpr.java', 'SargFactory.java', 'SargInterval.java', 'SargIntervalBase.java', 'SargIntervalExpr.java', 'SargIntervalSequence.java', 'SargMutableEndpoint.java', 'SargRexAnalyzer.java', 'SargSetExpr.java', 'SargSetOperator.java', 'SargStrictness.java', 'package-info.java', 'CommonParser.jj', 'Parser.jj', 'RelStatColumnStatistics.java', 'RelStatSource.java', 'package-info.java', 'IdentityHashSet.java', 'package-info.java', 'package-info.java', 'CalciteResource.properties', 'org-apache-calcite-jdbc.properties', 'package-info.java', 'ArrayTableTest.java', 'RangeTable.java', 'JdbcExample.java', 'RelOptPlanReaderTest.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'RexExecutorTest.java', 'BinarySearchTest.java', 'EnumerablesTest.java', 'SqlParserTest.java', 'SqlUnParserTest.java', 'DefaultSqlTestFactory.java', 'DelegatingSqlTestFactory.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlOperatorTest.java', 'SqlPrettyWriterTest.java', 'SqlTestFactory.java', 'SqlTester.java', 'SqlTesterImpl.java', 'SqlTests.java', 'SqlTypeNameTest.java', 'package-info.java', 'CalciteAssert.java', 'CalciteResourceTest.java', 'CalciteSqlOperatorTest.java', 'CalciteSuite.java', 'DiffRepository.java', 'DiffTestCase.java', 'ExceptionMessageTest.java', 'FilteratorTest.java', 'FoodmartTest.java', 'HepPlannerTest.java', 'InterpreterTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'LinqFrontJdbcBackTest.java', 'MaterializationTest.java', 'MockCatalogReader.java', 'MockRelOptCost.java', 'MockRelOptPlanner.java', 'MockSqlOperatorTable.java', 'ModelTest.java', 'MultiJdbcSchemaJoinTest.java', 'ReflectiveSchemaTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexProgramTest.java', 'RexTransformerTest.java', 'ScannableTableTest.java', 'SqlFunctionsTest.java', 'SqlLimitsTest.java', 'SqlTestGen.java', 'SqlToRelConverterExtendedTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'TableInRootSchemaTest.java', 'ConcurrentTestCommand.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestPlugin.java', 'ConcurrentTestPluginCommand.java', 'ConcurrentTestTimedCommandGenerator.java', 'SamplePlugin.java', 'package-info.java', 'package-info.java', 'FrameworksTest.java', 'PlannerTest.java', 'TpchSchema.java', 'BitSetsTest.java', 'ChunkListTest.java', 'PartiallyOrderedSetTest.java', 'PermutationTestCase.java', 'ReflectVisitorTest.java', 'TestUtil.java', 'UtilTest.java', 'DirectedGraphTest.java', 'MappingTest.java', 'EigenbaseTestCase.java', 'SargTest.java', 'SqlPrettyWriterTest.xml', 'HepPlannerTest.xml', 'RelOptRulesTest.xml', 'SqlLimitsTest.xml', 'SqlToRelConverterTest.xml', 'CsvEnumerator.java', 'CsvFieldType.java', 'CsvFilterableTable.java', 'CsvProjectTableScanRule.java', 'CsvScannableTable.java', 'CsvSchema.java', 'CsvSchemaFactory.java', 'CsvTable.java', 'CsvTableFactory.java', 'CsvTableScan.java', 'CsvTranslatableTable.java', 'JsonEnumerator.java', 'JsonTable.java', 'package-info.java', 'CsvTest.java', 'package-info.java', 'AbstractEnumerable.java', 'AbstractEnumerable2.java', 'AbstractQueryable.java', 'BaseQueryable.java', 'CartesianProductEnumerator.java', 'DefaultEnumerable.java', 'DefaultQueryable.java', 'Enumerable.java', 'EnumerableDefaults.java', 'EnumerableOrderedQueryable.java', 'EnumerableQueryable.java', 'Enumerator.java', 'ExtendedEnumerable.java', 'ExtendedOrderedEnumerable.java', 'ExtendedOrderedQueryable.java', 'ExtendedQueryable.java', 'Extensions.java', 'Grouping.java', 'GroupingImpl.java', 'Linq4j.java', 'Lookup.java', 'LookupImpl.java', 'OpType.java', 'Ord.java', 'OrderedEnumerable.java', 'OrderedQueryable.java', 'QueryProvider.java', 'QueryProviderImpl.java', 'Queryable.java', 'QueryableDefaults.java', 'QueryableFactory.java', 'QueryableRecorder.java', 'RawEnumerable.java', 'RawQueryable.java', 'BigDecimalFunction1.java', 'Deterministic.java', 'DoubleFunction1.java', 'EqualityComparer.java', 'FloatFunction1.java', 'Function.java', 'Function0.java', 'Function1.java', 'Function2.java', 'Functions.java', 'IntegerFunction1.java', 'LongFunction1.java', 'NonDeterministic.java', 'NullableBigDecimalFunction1.java', 'NullableDoubleFunction1.java', 'NullableFloatFunction1.java', 'NullableIntegerFunction1.java', 'NullableLongFunction1.java', 'Predicate1.java', 'Predicate2.java', 'package-info.java', 'package-info.java', 'AbstractNode.java', 'ArrayLengthRecordField.java', 'BinaryExpression.java', 'BlockBuilder.java', 'BlockStatement.java', 'Blocks.java', 'CallSiteBinder.java', 'CatchBlock.java', 'ClassDeclaration.java', 'ClassDeclarationFinder.java', 'ConditionalExpression.java', 'ConditionalStatement.java', 'ConstantExpression.java', 'ConstantUntypedNull.java', 'ConstructorDeclaration.java', 'DeclarationStatement.java', 'DefaultExpression.java', 'DeterministicCodeOptimizer.java', 'DynamicExpression.java', 'ElementInit.java', 'Evaluator.java', 'Expression.java', 'ExpressionType.java', 'ExpressionVisitor.java', 'ExpressionWriter.java', 'Expressions.java', 'FieldDeclaration.java', 'ForStatement.java', 'FunctionExpression.java', 'GotoExpressionKind.java', 'GotoStatement.java', 'IndexExpression.java', 'InvocationExpression.java', 'LabelStatement.java', 'LabelTarget.java', 'LambdaExpression.java', 'ListInitExpression.java', 'MemberAssignment.java', 'MemberBinding.java', 'MemberDeclaration.java', 'MemberExpression.java', 'MemberInitExpression.java', 'MemberListBinding.java', 'MemberMemberBinding.java', 'MethodCallExpression.java', 'MethodDeclaration.java', 'NewArrayExpression.java', 'NewExpression.java', 'Node.java', 'OptimizeVisitor.java', 'ParameterExpression.java', 'Primitive.java', 'PseudoField.java', 'ReflectedPseudoField.java', 'Statement.java', 'SwitchCase.java', 'SwitchStatement.java', 'TernaryExpression.java', 'ThrowStatement.java', 'TryStatement.java', 'TypeBinaryExpression.java', 'Types.java', 'UnaryExpression.java', 'Visitor.java', 'WhileStatement.java', 'package-info.java', 'FunctionTest.java', 'package-info.java', 'BlockBuilderBase.java', 'BlockBuilderTest.java', 'DeterministicTest.java', 'ExpressionTest.java', 'InlinerTest.java', 'Linq4jSuite.java', 'Linq4jTest.java', 'OptimizerTest.java', 'PrimitiveTest.java', 'package-info.java', 'TypeTest.java', 'package-info.java', 'MongoAggregate.java', 'MongoEnumerator.java', 'MongoFilter.java', 'MongoMethod.java', 'MongoProject.java', 'MongoRel.java', 'MongoRules.java', 'MongoSchema.java', 'MongoSchemaFactory.java', 'MongoSort.java', 'MongoTable.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'MongoToEnumerableConverterRule.java', 'package-info.java', 'MongoAdapterTest.java', 'TpcdsSchema.java', 'TpcdsSchemaFactory.java', 'package-info.java', 'TpchSchema.java', 'TpchSchemaFactory.java', 'package-info.java', 'TpcdsTest.java', 'TpchTest.java', 'PlusSuite.java', 'EnumerableToSparkConverter.java', 'EnumerableToSparkConverterRule.java', 'HttpServer.java', 'JdbcToSparkConverter.java', 'JdbcToSparkConverterRule.java', 'SparkHandlerImpl.java', 'SparkMethod.java', 'SparkRel.java', 'SparkRules.java', 'SparkRuntime.java', 'SparkToEnumerableConverter.java', 'package-info.java', 'SparkAdapterTest.java', 'SplunkDriver.java', 'SplunkDriverVersion.java', 'SplunkPushDownRule.java', 'SplunkQuery.java', 'SplunkSchema.java', 'SplunkTable.java', 'SplunkTableScan.java', 'package-info.java', 'SearchResultListener.java', 'SplunkConnection.java', 'SplunkConnectionImpl.java', 'package-info.java', 'HttpUtils.java', 'SocketFactoryImpl.java', 'StringUtils.java', 'TrustAllSslSocketFactory.java', 'package-info.java', 'SplunkAdapterTest.java', 'StatementTest.java']"
a0ba73cd2de76696b96a1cd828d2aa4d3ef9eb55,"[CALCITE-306] Standardize code style for ""import package.*;""

Rename classes and packages and generally fix things up after [CALCITE-296] and [CALCITE-419].

Make many inner classes of EnumerableRules (e.g. EnumerableFilter, EnumerableFilterRule) top-level classes.

Apply a consistent formatting convention for string literals split over multiple lines.

Rename generated file org.eigenbase.resource.Resources to org.apache.calcite.runtime.Resources.

Change occurrences of ""optiq"" and ""eigenbase"" in java code to ""calcite"".",['a611d645ad754844a39f3d98f5f814f13dbd9404'],False,"['pom.xml', 'ArrayImpl.java', 'AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'AvaticaFactory.java', 'AvaticaJdbc40Factory.java', 'AvaticaJdbc41Factory.java', 'AvaticaParameter.java', 'AvaticaPrepareResult.java', 'AvaticaPreparedStatement.java', 'AvaticaResultSet.java', 'AvaticaResultSetMetaData.java', 'AvaticaStatement.java', 'BuiltInConnectionProperty.java', 'ByteString.java', 'Casing.java', 'ColumnMetaData.java', 'ConnectStringParser.java', 'ConnectionConfig.java', 'ConnectionConfigImpl.java', 'ConnectionProperty.java', 'Cursor.java', 'DriverVersion.java', 'Handler.java', 'HandlerImpl.java', 'Helper.java', 'InternalProperty.java', 'Meta.java', 'Quoting.java', 'UnregisteredDriver.java', 'package-info.java', 'AvaticaSuite.java', 'ConnectStringParserTest.java', 'package-info.java', 'pom.xml', 'config.fmpp', 'Parser.jj', 'DataContext.java', 'Demo.java', 'ArrayTable.java', 'CloneSchema.java', 'ColumnLoader.java', 'ListTable.java', 'package-info.java', 'AggAddContext.java', 'AggContext.java', 'AggImpState.java', 'AggImplementor.java', 'AggResetContext.java', 'AggResultContext.java', 'CallImplementor.java', 'EnumUtils.java', 'EnumerableAggregate.java', 'EnumerableAggregateRule.java', 'EnumerableCalc.java', 'EnumerableCalcRule.java', 'EnumerableCollect.java', 'EnumerableCollectRule.java', 'EnumerableConvention.java', 'EnumerableEmptyRule.java', 'EnumerableFilter.java', 'EnumerableFilterRule.java', 'EnumerableFilterToCalcRule.java', 'EnumerableInterpreter.java', 'EnumerableIntersect.java', 'EnumerableIntersectRule.java', 'EnumerableJoin.java', 'EnumerableJoinRule.java', 'EnumerableLimit.java', 'EnumerableLimitRule.java', 'EnumerableMinus.java', 'EnumerableMinusRule.java', 'EnumerableOneRowRule.java', 'EnumerableProject.java', 'EnumerableProjectRule.java', 'EnumerableProjectToCalcRule.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'EnumerableRules.java', 'EnumerableSemiJoin.java', 'EnumerableSemiJoinRule.java', 'EnumerableSort.java', 'EnumerableSortRule.java', 'EnumerableTableFunctionScan.java', 'EnumerableTableFunctionScanRule.java', 'EnumerableTableModify.java', 'EnumerableTableModifyRule.java', 'EnumerableTableScan.java', 'EnumerableUncollect.java', 'EnumerableUncollectRule.java', 'EnumerableUnion.java', 'EnumerableUnionRule.java', 'EnumerableValues.java', 'EnumerableValuesRule.java', 'EnumerableWindow.java', 'EnumerableWindowRule.java', 'JavaRelImplementor.java', 'JavaRowFormat.java', 'NestedBlockBuilder.java', 'NestedBlockBuilderImpl.java', 'NotNullImplementor.java', 'NullPolicy.java', 'PhysType.java', 'PhysTypeImpl.java', 'ReflectiveCallNotNullImplementor.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'StrictAggImplementor.java', 'StrictWinAggImplementor.java', 'WinAggAddContext.java', 'WinAggContext.java', 'WinAggFrameContext.java', 'WinAggFrameResultContext.java', 'WinAggImplementor.java', 'WinAggResetContext.java', 'WinAggResultContext.java', 'AggAddContextImpl.java', 'AggResetContextImpl.java', 'AggResultContextImpl.java', 'WinAggAddContextImpl.java', 'WinAggResetContextImpl.java', 'WinAggResultContextImpl.java', 'package-info.java', 'package-info.java', 'AbstractQueryableTable.java', 'JavaTypeFactory.java', 'ReflectiveSchema.java', 'package-info.java', 'JdbcConvention.java', 'JdbcImplementor.java', 'JdbcQueryProvider.java', 'JdbcRel.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverter.java', 'JdbcToEnumerableConverterRule.java', 'JdbcUtils.java', 'package-info.java', 'package-info.java', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'Lex.java', 'package-info.java', 'Context.java', 'FilterNode.java', 'Interpreter.java', 'Node.java', 'Nodes.java', 'ProjectNode.java', 'Row.java', 'Scalar.java', 'ScanNode.java', 'Sink.java', 'SortNode.java', 'Source.java', 'ValuesNode.java', 'package-info.java', 'CalciteConnection.java', 'CalciteConnectionImpl.java', 'CalciteFactory.java', 'CalciteJdbc40Factory.java', 'CalciteJdbc41Factory.java', 'CalcitePrepare.java', 'CalcitePreparedStatement.java', 'CalciteResultSet.java', 'CalciteRootSchema.java', 'CalciteSchema.java', 'CalciteStatement.java', 'Driver.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'MetaImpl.java', 'MetadataSchema.java', 'SqlTimeoutException.java', 'package-info.java', 'Lattice.java', 'MaterializationActor.java', 'MaterializationKey.java', 'MaterializationService.java', 'TileKey.java', 'TileSuggester.java', 'package-info.java', 'JsonColumn.java', 'JsonCustomSchema.java', 'JsonCustomTable.java', 'JsonFunction.java', 'JsonJdbcSchema.java', 'JsonLattice.java', 'JsonMapSchema.java', 'JsonMaterialization.java', 'JsonMeasure.java', 'JsonRoot.java', 'JsonSchema.java', 'JsonTable.java', 'JsonTile.java', 'JsonView.java', 'ModelHandler.java', 'package-info.java', 'package-info.java', 'AbstractRelOptPlanner.java', 'CommonRelSubExprRule.java', 'Context.java', 'Contexts.java', 'Convention.java', 'ConventionTraitDef.java', 'MulticastRelOptListener.java', 'RelImplementor.java', 'RelOptAbstractTable.java', 'RelOptCluster.java', 'RelOptConnection.java', 'RelOptCost.java', 'RelOptCostFactory.java', 'RelOptCostImpl.java', 'RelOptLattice.java', 'RelOptListener.java', 'RelOptMaterialization.java', 'RelOptNode.java', 'RelOptPlanner.java', 'RelOptPredicateList.java', 'RelOptQuery.java', 'RelOptRule.java', 'RelOptRuleCall.java', 'RelOptRuleOperand.java', 'RelOptRuleOperandChildPolicy.java', 'RelOptRuleOperandChildren.java', 'RelOptSamplingParameters.java', 'RelOptSchema.java', 'RelOptSchemaWithSampling.java', 'RelOptTable.java', 'RelOptUtil.java', 'RelTrait.java', 'RelTraitDef.java', 'RelTraitPropagationVisitor.java', 'RelTraitSet.java', 'Strong.java', 'SubstitutionVisitor.java', 'TableAccessMap.java', 'VisitorRelVisitor.java', 'HepInstruction.java', 'HepMatchOrder.java', 'HepPlanner.java', 'HepProgram.java', 'HepProgramBuilder.java', 'HepRelMetadataProvider.java', 'HepRelVertex.java', 'HepRuleCall.java', 'package-info.java', 'package-info.java', 'AbstractConverter.java', 'ChainedPhaseRuleMappingInitializer.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoCost.java', 'VolcanoPlanner.java', 'VolcanoPlannerPhase.java', 'VolcanoPlannerPhaseRuleMappingInitializer.java', 'VolcanoRelMetadataProvider.java', 'VolcanoRuleCall.java', 'VolcanoRuleMatch.java', 'package-info.java', 'CalciteCatalogReader.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'CalciteSqlValidator.java', 'LixToRelTranslator.java', 'PlannerImpl.java', 'Prepare.java', 'QueryableRelBuilder.java', 'RelOptTableImpl.java', 'package-info.java', 'AbstractRelNode.java', 'Aggregation.java', 'InvalidRelException.java', 'RelCollation.java', 'RelCollationImpl.java', 'RelCollationTraitDef.java', 'RelFieldCollation.java', 'RelImplementorImpl.java', 'RelInput.java', 'RelNode.java', 'RelShuttle.java', 'RelShuttleImpl.java', 'RelVisitor.java', 'RelWriter.java', 'SingleRel.java', 'Converter.java', 'ConverterImpl.java', 'ConverterRule.java', 'NoneConverter.java', 'TraitMatchingRule.java', 'package-info.java', 'Aggregate.java', 'AggregateCall.java', 'Calc.java', 'Collect.java', 'Correlation.java', 'Correlator.java', 'Empty.java', 'Filter.java', 'Intersect.java', 'Join.java', 'JoinInfo.java', 'JoinRelType.java', 'Minus.java', 'OneRow.java', 'Project.java', 'RelFactories.java', 'Sample.java', 'SemiJoin.java', 'SetOp.java', 'Sort.java', 'TableFunctionScan.java', 'TableModify.java', 'TableScan.java', 'Uncollect.java', 'Union.java', 'Values.java', 'Window.java', 'package-info.java', 'RelJson.java', 'RelJsonReader.java', 'RelJsonWriter.java', 'RelWriterImpl.java', 'RelXmlWriter.java', 'package-info.java', 'package-info.java', 'LogicalAggregate.java', 'LogicalCalc.java', 'LogicalFilter.java', 'LogicalIntersect.java', 'LogicalJoin.java', 'LogicalMinus.java', 'LogicalOneRow.java', 'LogicalProject.java', 'LogicalTableFunctionScan.java', 'LogicalTableModify.java', 'LogicalTableScan.java', 'LogicalUnion.java', 'LogicalValues.java', 'LogicalWindow.java', 'package-info.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'DefaultRelMetadataProvider.java', 'Metadata.java', 'MetadataFactory.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelColumnMapping.java', 'RelColumnOrigin.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdExplainVisibility.java', 'RelMdPercentageOriginalRows.java', 'RelMdPopulationSize.java', 'RelMdPredicates.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'package-info.java', 'package-info.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateFilterTransposeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'CalcMergeRule.java', 'CalcRelSplitter.java', 'CalcRemoveRule.java', 'CoerceInputsRule.java', 'EmptyPruneRules.java', 'EquiJoin.java', 'FilterAggregateTransposeRule.java', 'FilterCalcMergeRule.java', 'FilterJoinRule.java', 'FilterMergeRule.java', 'FilterMultiJoinMergeRule.java', 'FilterProjectTransposeRule.java', 'FilterRemoveIsNotDistinctFromRule.java', 'FilterSetOpTransposeRule.java', 'FilterTableFunctionTransposeRule.java', 'FilterTableRule.java', 'FilterToCalcRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinAssociateRule.java', 'JoinCommuteRule.java', 'JoinExtractFilterRule.java', 'JoinProjectTransposeRule.java', 'JoinPushThroughJoinRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToCorrelatorRule.java', 'JoinToMultiJoinRule.java', 'JoinUnionTransposeRule.java', 'LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MultiJoin.java', 'MultiJoinOptimizeBushyRule.java', 'MultiJoinProjectTransposeRule.java', 'ProjectCalcMergeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinTransposeRule.java', 'ProjectMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'ProjectRemoveRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectSortTransposeRule.java', 'ProjectTableRule.java', 'ProjectToCalcRule.java', 'ProjectToWindowRule.java', 'PushProjector.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinFilterTransposeRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SemiJoinRemoveRule.java', 'SemiJoinRule.java', 'SortProjectTransposeRule.java', 'SortRemoveRule.java', 'TableScanRule.java', 'UnionEliminatorRule.java', 'UnionMergeRule.java', 'UnionToDistinctRule.java', 'ValuesReduceRule.java', 'package-info.java', 'RelCrossType.java', 'RelDataType.java', 'RelDataTypeComparability.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeFamily.java', 'RelDataTypeField.java', 'RelDataTypeFieldImpl.java', 'RelDataTypeImpl.java', 'RelDataTypePrecedenceList.java', 'RelDataTypeSystem.java', 'RelDataTypeSystemImpl.java', 'RelProtoDataType.java', 'RelRecordType.java', 'package-info.java', 'RexAction.java', 'RexBuilder.java', 'RexCall.java', 'RexCallBinding.java', 'RexChecker.java', 'RexCopier.java', 'RexCorrelVariable.java', 'RexDynamicParam.java', 'RexExecutable.java', 'RexExecutorImpl.java', 'RexFieldAccess.java', 'RexFieldCollation.java', 'RexInputRef.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexMultisetUtil.java', 'RexNode.java', 'RexOver.java', 'RexPattern.java', 'RexPermutationShuttle.java', 'RexPermuteInputsShuttle.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexRangeRef.java', 'RexShuttle.java', 'RexSlot.java', 'RexSqlConvertlet.java', 'RexSqlConvertletTable.java', 'RexSqlReflectiveConvertletTable.java', 'RexSqlStandardConvertletTable.java', 'RexToSqlNodeConverter.java', 'RexToSqlNodeConverterImpl.java', 'RexTransformer.java', 'RexUtil.java', 'RexVariable.java', 'RexVisitor.java', 'RexVisitorImpl.java', 'RexWindow.java', 'RexWindowBound.java', 'package-info.java', 'AbstractCursor.java', 'ArrayComparator.java', 'ArrayEnumeratorCursor.java', 'BinarySearch.java', 'Bindable.java', 'CalciteContextException.java', 'CalciteException.java', 'CalciteResource.java', 'Enumerables.java', 'EnumeratorCursor.java', 'Feature.java', 'FlatLists.java', 'Hook.java', 'Like.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'ResultSetEnumerable.java', 'SortedMultiMap.java', 'Spacer.java', 'Spaces.java', 'SqlFunctions.java', 'Typed.java', 'Unit.java', 'Utilities.java', 'package-info.java', 'AggregateFunction.java', 'FilterableTable.java', 'Function.java', 'FunctionParameter.java', 'ImplementableAggFunction.java', 'ImplementableFunction.java', 'Member.java', 'ModifiableTable.java', 'ProjectableFilterableTable.java', 'QueryableTable.java', 'ScalarFunction.java', 'ScannableTable.java', 'Schema.java', 'SchemaFactory.java', 'SchemaPlus.java', 'Schemas.java', 'SemiMutableSchema.java', 'Statistic.java', 'Statistics.java', 'Table.java', 'TableFactory.java', 'TableFunction.java', 'TableMacro.java', 'TranslatableTable.java', 'AbstractSchema.java', 'AbstractTable.java', 'AbstractTableQueryable.java', 'AggregateFunctionImpl.java', 'DelegatingSchema.java', 'MaterializedViewTable.java', 'ReflectiveFunctionBase.java', 'ScalarFunctionImpl.java', 'StarTable.java', 'TableFunctionImpl.java', 'TableMacroImpl.java', 'ViewTable.java', 'package-info.java', 'package-info.java', 'CalciteServer.java', 'CalciteServerStatement.java', 'package-info.java', 'ExplicitOperatorBinding.java', 'JoinConditionType.java', 'JoinType.java', 'SqlAbstractDateTimeLiteral.java', 'SqlAbstractStringLiteral.java', 'SqlAccessEnum.java', 'SqlAccessType.java', 'SqlAggFunction.java', 'SqlAsOperator.java', 'SqlBasicCall.java', 'SqlBinaryOperator.java', 'SqlBinaryStringLiteral.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlCharStringLiteral.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlDateLiteral.java', 'SqlDelete.java', 'SqlDialect.java', 'SqlDynamicParam.java', 'SqlExplain.java', 'SqlExplainLevel.java', 'SqlFunction.java', 'SqlFunctionCategory.java', 'SqlFunctionalOperator.java', 'SqlIdentifier.java', 'SqlInfixOperator.java', 'SqlInsert.java', 'SqlInsertKeyword.java', 'SqlInternalOperator.java', 'SqlIntervalLiteral.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlJoin.java', 'SqlKind.java', 'SqlLiteral.java', 'SqlMerge.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlNullSemantics.java', 'SqlNumericLiteral.java', 'SqlOperandCountRange.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlOperatorTable.java', 'SqlOrderBy.java', 'SqlOverOperator.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'SqlProcedureCallOperator.java', 'SqlRankFunction.java', 'SqlSampleSpec.java', 'SqlSelect.java', 'SqlSelectKeyword.java', 'SqlSelectOperator.java', 'SqlSetOperator.java', 'SqlSetOption.java', 'SqlSpecialOperator.java', 'SqlStateCodes.java', 'SqlSyntax.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlUnnestOperator.java', 'SqlUnresolvedFunction.java', 'SqlUpdate.java', 'SqlUtil.java', 'SqlValuesOperator.java', 'SqlWindow.java', 'SqlWith.java', 'SqlWithItem.java', 'SqlWriter.java', 'SqlAdvisor.java', 'SqlAdvisorGetHintsFunction.java', 'SqlAdvisorHint.java', 'SqlAdvisorValidator.java', 'SqlSimpleParser.java', 'package-info.java', 'SqlAbstractTimeFunction.java', 'SqlArrayQueryConstructor.java', 'SqlArrayValueConstructor.java', 'SqlAvgAggFunction.java', 'SqlBetweenOperator.java', 'SqlCase.java', 'SqlCaseOperator.java', 'SqlCastFunction.java', 'SqlCeilFunction.java', 'SqlCoalesceFunction.java', 'SqlCollectionTableOperator.java', 'SqlColumnListConstructor.java', 'SqlConvertFunction.java', 'SqlCountAggFunction.java', 'SqlCovarAggFunction.java', 'SqlCurrentDateFunction.java', 'SqlCursorConstructor.java', 'SqlDatetimeSubtractionOperator.java', 'SqlExtractFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlFloorFunction.java', 'SqlHistogramAggFunction.java', 'SqlInOperator.java', 'SqlItemOperator.java', 'SqlLeadLagAggFunction.java', 'SqlLikeOperator.java', 'SqlLiteralChainOperator.java', 'SqlMapQueryConstructor.java', 'SqlMapValueConstructor.java', 'SqlMinMaxAggFunction.java', 'SqlMonotonicBinaryOperator.java', 'SqlMonotonicUnaryFunction.java', 'SqlMultisetMemberOfOperator.java', 'SqlMultisetQueryConstructor.java', 'SqlMultisetSetOperator.java', 'SqlMultisetValueConstructor.java', 'SqlNewOperator.java', 'SqlNtileAggFunction.java', 'SqlNullifFunction.java', 'SqlOverlapsOperator.java', 'SqlOverlayFunction.java', 'SqlPositionFunction.java', 'SqlRowOperator.java', 'SqlSingleValueAggFunction.java', 'SqlStdOperatorTable.java', 'SqlStringContextVariable.java', 'SqlSubstringFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'SqlThrowOperator.java', 'SqlTrimFunction.java', 'package-info.java', 'package-info.java', 'SqlAbstractParserImpl.java', 'SqlParseException.java', 'SqlParser.java', 'SqlParserImplFactory.java', 'SqlParserPos.java', 'SqlParserUtil.java', 'package-info.java', 'package-info.java', 'SqlFormatOptions.java', 'SqlPrettyWriter.java', 'package-info.java', 'AbstractSqlType.java', 'ArraySqlType.java', 'AssignableOperandTypeChecker.java', 'BasicSqlType.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'CursorReturnTypeInference.java', 'ExplicitOperandTypeInference.java', 'ExplicitReturnTypeInference.java', 'ExtraSqlTypes.java', 'FamilyOperandTypeChecker.java', 'InferTypes.java', 'IntervalSqlType.java', 'JavaToSqlTypeConversionRules.java', 'LiteralOperandTypeChecker.java', 'MapSqlType.java', 'MatchReturnTypeInference.java', 'MultisetOperandTypeChecker.java', 'MultisetSqlType.java', 'ObjectSqlType.java', 'OperandTypes.java', 'OperandsTypeChecking.java', 'OrdinalReturnTypeInference.java', 'ReturnTypes.java', 'SameOperandTypeChecker.java', 'SetopOperandTypeChecker.java', 'SqlOperandCountRanges.java', 'SqlOperandTypeChecker.java', 'SqlOperandTypeInference.java', 'SqlReturnTypeInference.java', 'SqlReturnTypeInferenceChain.java', 'SqlSingleOperandTypeChecker.java', 'SqlTypeAssignmentRules.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeFactoryImpl.java', 'SqlTypeFamily.java', 'SqlTypeName.java', 'SqlTypeTransform.java', 'SqlTypeTransformCascade.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'package-info.java', 'ChainedSqlOperatorTable.java', 'ListSqlOperatorTable.java', 'ReflectiveSqlOperatorTable.java', 'SqlBasicVisitor.java', 'SqlBuilder.java', 'SqlShuttle.java', 'SqlString.java', 'SqlVisitor.java', 'package-info.java', 'AbstractNamespace.java', 'AggChecker.java', 'AggFinder.java', 'AggregatingScope.java', 'AggregatingSelectScope.java', 'AliasNamespace.java', 'CollectNamespace.java', 'CollectScope.java', 'DelegatingNamespace.java', 'DelegatingScope.java', 'DelegatingSqlValidatorCatalogReader.java', 'DelegatingSqlValidatorTable.java', 'EmptyScope.java', 'FieldNamespace.java', 'IdentifierNamespace.java', 'JoinNamespace.java', 'JoinScope.java', 'ListScope.java', 'OrderByScope.java', 'OverScope.java', 'ParameterNamespace.java', 'ParameterScope.java', 'ProcedureNamespace.java', 'SelectNamespace.java', 'SelectScope.java', 'SetopNamespace.java', 'SqlConformance.java', 'SqlIdentifierMoniker.java', 'SqlMoniker.java', 'SqlMonikerComparator.java', 'SqlMonikerImpl.java', 'SqlMonikerType.java', 'SqlMonotonicity.java', 'SqlScopedShuttle.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableFunction.java', 'SqlUserDefinedTableMacro.java', 'SqlValidator.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorException.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorScope.java', 'SqlValidatorTable.java', 'SqlValidatorUtil.java', 'SqlValidatorWithHints.java', 'TableConstructorNamespace.java', 'TableNamespace.java', 'UnnestNamespace.java', 'WithItemNamespace.java', 'WithNamespace.java', 'WithScope.java', 'package-info.java', 'DefaultValueFactory.java', 'ReflectiveConvertletTable.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlNodeToRexConverter.java', 'SqlNodeToRexConverterImpl.java', 'SqlRexContext.java', 'SqlRexConvertlet.java', 'SqlRexConvertletTable.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'SubqueryConverter.java', 'package-info.java', 'FrameworkConfig.java', 'Frameworks.java', 'Planner.java', 'Program.java', 'Programs.java', 'RelConversionException.java', 'RuleSet.java', 'RuleSets.java', 'ValidationException.java', 'package-info.java', 'BarfingInvocationHandler.java', 'BasicDatetime.java', 'Benchmark.java', 'BitSets.java', 'BitString.java', 'Bug.java', 'BuiltInMethod.java', 'CalciteParserException.java', 'CalciteValidatorException.java', 'CancelFlag.java', 'CastingList.java', 'ChunkList.java', 'ClosableAllocation.java', 'ClosableAllocationOwner.java', 'Compatible.java', 'CompatibleGuava11.java', 'CompositeList.java', 'CompositeMap.java', 'CompoundClosableAllocation.java', 'ControlFlowException.java', 'ConversionUtil.java', 'DateTimeUtil.java', 'DelegatingInvocationHandler.java', 'Filterator.java', 'Glossary.java', 'Holder.java', 'ImmutableIntList.java', 'ImmutableNullableList.java', 'IntList.java', 'IntegerIntervalSet.java', 'JsonBuilder.java', 'NlsString.java', 'NumberUtil.java', 'Pair.java', 'PartiallyOrderedSet.java', 'Permutation.java', 'ReflectUtil.java', 'ReflectiveVisitDispatcher.java', 'ReflectiveVisitor.java', 'RhBase64.java', 'SaffronProperties.java', 'SerializableCharset.java', 'StackWriter.java', 'Stacks.java', 'Static.java', 'Template.java', 'UnmodifiableArrayList.java', 'Util.java', 'XmlOutput.java', 'ZonelessDate.java', 'ZonelessDatetime.java', 'ZonelessTime.java', 'ZonelessTimestamp.java', 'BreadthFirstIterator.java', 'CycleDetector.java', 'DefaultDirectedGraph.java', 'DefaultEdge.java', 'DepthFirstIterator.java', 'DirectedGraph.java', 'Graphs.java', 'TopologicalOrderIterator.java', 'package-info.java', 'JaninoCompiler.java', 'JavaCompiler.java', 'JavaCompilerArgs.java', 'package-info.java', 'AbstractSourceMapping.java', 'AbstractTargetMapping.java', 'IntPair.java', 'Mapping.java', 'MappingType.java', 'Mappings.java', 'package-info.java', 'package-info.java', 'CalciteLogger.java', 'CalciteTimingTracer.java', 'CalciteTrace.java', 'package-info.java', 'java.sql.Driver', 'CalciteResource.properties', 'ArrayTableTest.java', 'RangeTable.java', 'JdbcExample.java', 'RelOptPlanReaderTest.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'RexExecutorTest.java', 'BinarySearchTest.java', 'EnumerablesTest.java', 'SqlParserTest.java', 'SqlUnParserTest.java', 'DefaultSqlTestFactory.java', 'DelegatingSqlTestFactory.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlOperatorTest.java', 'SqlPrettyWriterTest.java', 'SqlTestFactory.java', 'SqlTester.java', 'SqlTesterImpl.java', 'SqlTests.java', 'SqlTypeNameTest.java', 'package-info.java', 'CalciteAssert.java', 'CalciteResourceTest.java', 'CalciteSqlOperatorTest.java', 'CalciteSuite.java', 'DiffRepository.java', 'DiffTestCase.java', 'ExceptionMessageTest.java', 'FilteratorTest.java', 'FoodmartTest.java', 'HepPlannerTest.java', 'InterpreterTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'LinqFrontJdbcBackTest.java', 'MaterializationTest.java', 'MockCatalogReader.java', 'MockRelOptCost.java', 'MockRelOptPlanner.java', 'MockSqlOperatorTable.java', 'ModelTest.java', 'MultiJdbcSchemaJoinTest.java', 'ReflectiveSchemaTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexProgramTest.java', 'RexTransformerTest.java', 'ScannableTableTest.java', 'SqlFunctionsTest.java', 'SqlLimitsTest.java', 'SqlTestGen.java', 'SqlToRelConverterExtendedTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'TableInRootSchemaTest.java', 'ConcurrentTestCommand.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestPlugin.java', 'ConcurrentTestPluginCommand.java', 'ConcurrentTestTimedCommandGenerator.java', 'SamplePlugin.java', 'package-info.java', 'package-info.java', 'FrameworksTest.java', 'PlannerTest.java', 'TpchSchema.java', 'BitSetsTest.java', 'ChunkListTest.java', 'PartiallyOrderedSetTest.java', 'PermutationTestCase.java', 'ReflectVisitorTest.java', 'TestUtil.java', 'UtilTest.java', 'DirectedGraphTest.java', 'MappingTest.java', 'HepPlannerTest.xml', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'misc.oq', 'subquery.oq', 'CsvEnumerator.java', 'CsvFieldType.java', 'CsvFilterableTable.java', 'CsvProjectTableScanRule.java', 'CsvScannableTable.java', 'CsvSchema.java', 'CsvSchemaFactory.java', 'CsvTable.java', 'CsvTableFactory.java', 'CsvTableScan.java', 'CsvTranslatableTable.java', 'JsonEnumerator.java', 'JsonTable.java', 'package-info.java', 'CsvTest.java', 'bug.json', 'filterable-model.json', 'model-with-custom-table.json', 'model-with-view.json', 'model.json', 'smart.json', 'pom.xml', 'AbstractEnumerable.java', 'AbstractEnumerable2.java', 'AbstractQueryable.java', 'BaseQueryable.java', 'CartesianProductEnumerator.java', 'DefaultEnumerable.java', 'DefaultQueryable.java', 'Enumerable.java', 'EnumerableDefaults.java', 'EnumerableOrderedQueryable.java', 'EnumerableQueryable.java', 'Enumerator.java', 'ExtendedEnumerable.java', 'ExtendedOrderedEnumerable.java', 'ExtendedOrderedQueryable.java', 'ExtendedQueryable.java', 'Extensions.java', 'Grouping.java', 'GroupingImpl.java', 'Linq4j.java', 'Lookup.java', 'LookupImpl.java', 'OpType.java', 'Ord.java', 'OrderedEnumerable.java', 'OrderedQueryable.java', 'QueryProvider.java', 'QueryProviderImpl.java', 'Queryable.java', 'QueryableDefaults.java', 'QueryableFactory.java', 'QueryableRecorder.java', 'RawEnumerable.java', 'RawQueryable.java', 'BigDecimalFunction1.java', 'Deterministic.java', 'DoubleFunction1.java', 'EqualityComparer.java', 'FloatFunction1.java', 'Function.java', 'Function0.java', 'Function1.java', 'Function2.java', 'Functions.java', 'IntegerFunction1.java', 'LongFunction1.java', 'NonDeterministic.java', 'NullableBigDecimalFunction1.java', 'NullableDoubleFunction1.java', 'NullableFloatFunction1.java', 'NullableIntegerFunction1.java', 'NullableLongFunction1.java', 'Predicate1.java', 'Predicate2.java', 'package-info.java', 'package-info.java', 'AbstractNode.java', 'ArrayLengthRecordField.java', 'BinaryExpression.java', 'BlockBuilder.java', 'BlockStatement.java', 'Blocks.java', 'CallSiteBinder.java', 'CatchBlock.java', 'ClassDeclaration.java', 'ClassDeclarationFinder.java', 'ConditionalExpression.java', 'ConditionalStatement.java', 'ConstantExpression.java', 'ConstantUntypedNull.java', 'ConstructorDeclaration.java', 'DeclarationStatement.java', 'DefaultExpression.java', 'DeterministicCodeOptimizer.java', 'DynamicExpression.java', 'ElementInit.java', 'Evaluator.java', 'Expression.java', 'ExpressionType.java', 'ExpressionVisitor.java', 'ExpressionWriter.java', 'Expressions.java', 'FieldDeclaration.java', 'ForStatement.java', 'FunctionExpression.java', 'GotoExpressionKind.java', 'GotoStatement.java', 'IndexExpression.java', 'InvocationExpression.java', 'LabelStatement.java', 'LabelTarget.java', 'LambdaExpression.java', 'ListInitExpression.java', 'MemberAssignment.java', 'MemberBinding.java', 'MemberDeclaration.java', 'MemberExpression.java', 'MemberInitExpression.java', 'MemberListBinding.java', 'MemberMemberBinding.java', 'MethodCallExpression.java', 'MethodDeclaration.java', 'NewArrayExpression.java', 'NewExpression.java', 'Node.java', 'OptimizeVisitor.java', 'ParameterExpression.java', 'Primitive.java', 'PseudoField.java', 'ReflectedPseudoField.java', 'Statement.java', 'SwitchCase.java', 'SwitchStatement.java', 'TernaryExpression.java', 'ThrowStatement.java', 'TryStatement.java', 'TypeBinaryExpression.java', 'Types.java', 'UnaryExpression.java', 'Visitor.java', 'WhileStatement.java', 'package-info.java', 'Linq4jExample.java', 'FunctionTest.java', 'package-info.java', 'BlockBuilderBase.java', 'BlockBuilderTest.java', 'DeterministicTest.java', 'ExpressionTest.java', 'InlinerTest.java', 'Linq4jSuite.java', 'Linq4jTest.java', 'OptimizerTest.java', 'PrimitiveTest.java', 'package-info.java', 'TypeTest.java', 'package-info.java', 'pom.xml', 'MongoAggregate.java', 'MongoEnumerator.java', 'MongoFilter.java', 'MongoMethod.java', 'MongoProject.java', 'MongoRel.java', 'MongoRules.java', 'MongoSchema.java', 'MongoSchemaFactory.java', 'MongoSort.java', 'MongoTable.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'MongoToEnumerableConverterRule.java', 'package-info.java', 'MongoAdapterTest.java', 'mongo-foodmart-model.json', 'mongo-zips-model.json', 'pom.xml', 'TpcdsSchema.java', 'TpcdsSchemaFactory.java', 'package-info.java', 'TpchSchema.java', 'TpchSchemaFactory.java', 'package-info.java', 'TpcdsTest.java', 'TpchTest.java', 'TpchTest.java', 'PlusSuite.java', 'pom.xml', 'pom.xml', 'EnumerableToSparkConverter.java', 'EnumerableToSparkConverterRule.java', 'HttpServer.java', 'JdbcToSparkConverter.java', 'JdbcToSparkConverterRule.java', 'SparkHandlerImpl.java', 'SparkMethod.java', 'SparkRel.java', 'SparkRules.java', 'SparkRuntime.java', 'SparkToEnumerableConverter.java', 'package-info.java', 'SparkAdapterTest.java', 'pom.xml', 'SplunkDriver.java', 'SplunkDriverVersion.java', 'SplunkPushDownRule.java', 'SplunkQuery.java', 'SplunkSchema.java', 'SplunkTable.java', 'SplunkTableScan.java', 'package-info.java', 'SearchResultListener.java', 'SplunkConnection.java', 'SplunkConnectionImpl.java', 'package-info.java', 'HttpUtils.java', 'SocketFactoryImpl.java', 'StringUtils.java', 'TrustAllSslSocketFactory.java', 'package-info.java', 'SplunkAdapterTest.java', 'checker.xml', 'suppressions.xml', 'StatementTest.java']"
b87f66b08e90fdbf570b48cba5dc1f751ea399f4,Fix Linq4j.product; the cartesian product of 0 attributes is one row of 0 attributes.,['dc662db6675eeccf7a2e417153f8751ddf67fe20'],False,"['CartesianProductEnumerator.java', 'Linq4jTest.java']"
911840a75e22ab53cb896fe2ca6f423ef6221559,"Better handling of null values due to GROUPING SETS.

Expand GROUPING SETS at validate time, into AggregatingSelectScope, so that we know which columns become nullable, and use the same information at SQL-to-rel time.

Fix an infinite loop when validating a call in a GROUP BY clause.",['b87f66b08e90fdbf570b48cba5dc1f751ea399f4'],False,"['EnumerableAggregate.java', 'JavaRowFormat.java', 'PhysTypeImpl.java', 'Aggregate.java', 'AggregateReduceFunctionsRule.java', 'RexBuilder.java', 'AggChecker.java', 'AggregatingSelectScope.java', 'DelegatingScope.java', 'EmptyScope.java', 'SqlValidatorImpl.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'BuiltInMethod.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'SqlToRelConverterTest.xml', 'agg.oq', 'dummy.oq']"
a5584ea79244ecbf86150ec8c82bac50d319e0e2,"[CALCITE-464] Make parser accept configurable max length for SQL identifier

Add new SqlParser.Config interface and SqlParser.ConfigBuilder class; change parser .constructor and factory methods to use it.

Contribution from Jinfeng Ni, some fix-up by Julian Hyde.",['ca980a469702224c458c9e3473e679ff491c3578'],False,"['Parser.jj', 'CalcitePrepareImpl.java', 'PlannerImpl.java', 'SqlAbstractParserImpl.java', 'SqlParser.java', 'FrameworkConfig.java', 'Frameworks.java', 'SqlParserTest.java', 'DefaultSqlTestFactory.java', 'InterpreterTest.java', 'PlannerTest.java']"
b8a6b1e36d1244df8844fe536058ef0cbf1e62cf,Fix typo in Glossary,['c6d66d792f86b277304dc48f013824091161e347'],False,['Glossary.java']
55aa593b7ec2c21826b0ad9b31e855ef22e764f0,Fix too wide line in testOnConnectionClose,['59657ec75981fb1416d127c413a8dd7ae3571a1d'],False,['JdbcTest.java']
94752a6066cd8a379782510a78a885cffb5aadb9,"[CALCITE-93] Calcite RPC server;
[CALCITE-94] Remote JDBC driver

Add module, calcite-avatica-server. HttpServer is an RPC server that listens on port 8765 for JSON requests over HTTP.

We can now execute basic queries, and schema and catalogs metadata requests, over request-response.

Change interface AvaticaPrepareResult to class Meta.Signature.

Move DateTimeUtil to Avatica and rename to DateTimeUtils.

Linq4j.iterableEnumerator checks whether the Iterable is already an Enumerable; IterableEnumerator calls close() if the Iterator implements Closeable.

Add test case for [CALCITE-508] (not fixed yet).

For remote testing, allow CalciteAssert to test all connections, not just CalciteConnection.",['b1d22c7ed929e586808f90b25df13fb86cb89546'],False,"['pom.xml', 'AvaticaHandler.java', 'HttpServer.java', 'Main.java', 'package-info.java', 'AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'AvaticaFactory.java', 'AvaticaJdbc41Factory.java', 'AvaticaParameter.java', 'AvaticaPreparedStatement.java', 'AvaticaResultSet.java', 'AvaticaResultSetMetaData.java', 'AvaticaStatement.java', 'AvaticaUtils.java', 'BuiltInConnectionProperty.java', 'ColumnMetaData.java', 'ConnectionConfig.java', 'ConnectionConfigImpl.java', 'ConnectionProperty.java', 'InternalProperty.java', 'Meta.java', 'MetaImpl.java', 'UnregisteredDriver.java', 'AvaticaRemoteConnectionConfigImpl.java', 'AvaticaRemoteConnectionProperty.java', 'Driver.java', 'Handler.java', 'JsonHandler.java', 'JsonService.java', 'LocalJsonService.java', 'LocalService.java', 'MockJsonService.java', 'RemoteMeta.java', 'RemoteService.java', 'Service.java', 'package-info.java', 'AbstractCursor.java', 'ArrayImpl.java', 'ArrayIteratorCursor.java', 'ByteString.java', 'Casing.java', 'Cursor.java', 'DateTimeUtils.java', 'IteratorCursor.java', 'ListIteratorCursor.java', 'MapIteratorCursor.java', 'PositionedCursor.java', 'Quoting.java', 'RecordIteratorCursor.java', 'Spacer.java', 'Spaces.java', 'TimeUnit.java', 'TimeUnitRange.java', 'package-info.java', 'java.sql.Driver', 'AvaticaSuite.java', 'RemoteDriverTest.java', 'pom.xml', 'Parser.jj', 'ColumnLoader.java', 'ListTable.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'JdbcUtils.java', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'Lex.java', 'CalciteConnectionImpl.java', 'CalciteJdbc41Factory.java', 'CalciteMetaImpl.java', 'CalcitePrepare.java', 'CalcitePreparedStatement.java', 'CalciteResultSet.java', 'CalciteStatement.java', 'Driver.java', 'JavaTypeFactoryImpl.java', 'MetaImpl.java', 'MetadataSchema.java', 'MaterializationService.java', 'SubstitutionVisitor.java', 'VolcanoPlanner.java', 'CalcitePrepareImpl.java', 'RelWriterImpl.java', 'RexBuilder.java', 'RexLiteral.java', 'ArrayEnumeratorCursor.java', 'EnumeratorCursor.java', 'ObjectEnumeratorCursor.java', 'RecordEnumeratorCursor.java', 'SqlFunctions.java', 'Schemas.java', 'CalciteServer.java', 'SqlDateLiteral.java', 'SqlIntervalQualifier.java', 'SqlLiteral.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlAbstractParserImpl.java', 'SqlParser.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'IntervalSqlType.java', 'SqlTypeName.java', 'SqlNodeToRexConverterImpl.java', 'StandardConvertletTable.java', 'Frameworks.java', 'BuiltInMethod.java', 'Compatible.java', 'DateTimeUtil.java', 'JsonBuilder.java', 'ZonelessDate.java', 'ZonelessDatetime.java', 'ZonelessTime.java', 'ZonelessTimestamp.java', 'CalciteRemoteDriverTest.java', 'SqlParserTest.java', 'DefaultSqlTestFactory.java', 'SqlTester.java', 'SqlTesterImpl.java', 'CalciteAssert.java', 'CalciteSuite.java', 'ExceptionMessageTest.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java', 'SqlFunctionsTest.java', 'SqlValidatorTest.java', 'UtilTest.java', 'AbstractEnumerable2.java', 'EnumerableQueryable.java', 'Linq4j.java', 'MongoEnumerator.java', 'pom.xml', 'SplunkQuery.java']"
f2a67050b30f727932fd94947c926ae0d7287ded,"[CALCITE-512] Add GROUP_ID and GROUPING_ID functions

Upgrade to quidem-0.2 (fixes right-justification of numeric columns)",['42bbaad997b3be659b91fd9d94d2982372605b30'],False,"['CalciteResource.java', 'SqlKind.java', 'SqlAbstractGroupFunction.java', 'SqlGroupIdFunction.java', 'SqlGroupingFunction.java', 'SqlGroupingIdFunction.java', 'SqlStdOperatorTable.java', 'SqlToRelConverter.java', 'CalciteResource.properties', 'SqlValidatorTest.java', 'agg.oq', 'misc.oq', 'pom.xml']"
155d24f1aa2b0733e402aca6c2b0ba1ed1ef456b,"[CALCITE-511] copy method in LogicalAggregate not copying the indicator value properly
fixes #26",['f2a67050b30f727932fd94947c926ae0d7287ded'],False,['LogicalAggregate.java']
0ab7f5ef0f67c8bb96d4460d733ad4e953643085,Fix QUARTER function for null values and JDBC escape syntax,['a059f76c79080b0e283cb54e273f1ef89a444282'],False,"['SqlJdbcFunctionCall.java', 'StandardConvertletTable.java', 'SqlOperatorBaseTest.java']"
e5a08c4caa9b1a74cd88d41b3757b462c9c39ffe,"Add a test that calls all functions with arguments of all types that they claim to accept

Clean up various problems that it discovered. Log [CALCITE-525] ""Exception-handling in built-in functions"" for the remaining issues.

Close apache/incubator-calcite#28",['24258852fe70e22dd94dd2e625e7fd781da1b236'],False,"['SqlLikeOperator.java', 'CompositeOperandTypeChecker.java', 'OperandTypes.java', 'SetopOperandTypeChecker.java', 'SqlValidatorImpl.java', 'SqlOperatorBaseTest.java', 'SqlTests.java', 'SqlValidatorTest.java']"
696da1685f6c86b6e90abfbe369ea861deeb72d5,"[CALCITE-483][CALCITE-489] Update Correlate mechanics and implement EnumerableCorrelate (aka nested loops join)

Notable changes:
 * Correlation variable is produced by Correlate relation for its left input
 * In the right input, correlation is referred as RexFieldAccess(RexCorrelVariable)
 * De-correlation is still performed by default, however it can be disabled by forceDecorrelate=false connection property

fixes #20",['8e196a41c5de02d5fc14d64d07315658188ad4f7'],False,"['EnumUtils.java', 'EnumerableCalc.java', 'EnumerableCorrelate.java', 'EnumerableCorrelateRule.java', 'EnumerableJoin.java', 'EnumerableRelImplementor.java', 'EnumerableRules.java', 'JavaRelImplementor.java', 'RexToLixTranslator.java', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'RelImplementor.java', 'RelSet.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'Prepare.java', 'AbstractRelNode.java', 'BiRel.java', 'RelImplementorImpl.java', 'RelNode.java', 'RelShuttle.java', 'RelShuttleImpl.java', 'Correlate.java', 'CorrelationId.java', 'Correlator.java', 'Join.java', 'Uncollect.java', 'RelJson.java', 'LogicalCorrelate.java', 'RelMdColumnUniqueness.java', 'RelMdUniqueKeys.java', 'JoinToCorrelateRule.java', 'ProjectJoinTransposeRule.java', 'PushProjector.java', 'RexExecutorImpl.java', 'SemiJoinType.java', 'DeduplicateCorrelateVariables.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'Programs.java', 'BuiltInMethod.java', 'CalciteTrace.java', 'CalciteSuite.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'EnumerableCorrelateTest.java', 'package-info.java', 'SqlToRelConverterTest.xml', 'CorrelateJoinType.java', 'DefaultEnumerable.java', 'EnumerableDefaults.java', 'ExtendedEnumerable.java', 'CorrelateJoinTest.java', 'Linq4jSuite.java', 'SparkRules.java', 'SparkToEnumerableConverter.java']"
7eb1bfdb06a568ae537bbd1b63c0fb4c0e759a9c,"Fix javadoc errors for java8

fixes #30",['501040719720f9c312b2cc0db52f1fb2a7604f78'],False,"['AggAddContext.java', 'AggContext.java', 'AggImplementor.java', 'CallImplementor.java', 'EnumerableInterpreter.java', 'EnumerableRel.java', 'JavaRelImplementor.java', 'RelOptNode.java', 'RelOptRule.java', 'RelTrait.java', 'AbstractRelNode.java', 'RelNode.java', 'ConverterRule.java', 'Aggregate.java', 'Calc.java', 'Correlate.java', 'Join.java', 'Project.java', 'SetOp.java', 'RelDataTypeFactory.java', 'Schema.java', 'SchemaFactory.java', 'AbstractSchema.java']"
019a16f94b8c856b604c5525051666ded88f841a,"[CALCITE-534] Missing implementation of ResultSetMetaData.getColumnClassName (Knut Forkalsrud)

Based on a patch by Knut Forkalsrud, but extended by Julian Hyde, adding extra tests and changing the logic to derive the column class name from the SQL type, not the value type of the internal representation.",['288254b22b270b9a6e893490e776a3ba4ff01fb6'],False,"['ColumnMetaData.java', 'MetaImpl.java', 'CalcitePrepareImpl.java', 'ReflectiveSchemaTest.java', 'TableInRootSchemaTest.java']"
03c258365f395a6e878d8019bc53aa70e0e0b265,Fix code style,['33080b78dddb1e31c5841a1d961b612538a07234'],False,"['BiRel.java', 'CorrelationId.java', 'JoinToCorrelateRule.java', 'DeduplicateCorrelateVariables.java', 'CorrelateJoinType.java']"
c9e58edf0001af203ecd374d92fb82ed3d152e1d,"[CALCITE-545] When a projected expression can only have one value, replace with that constant

Fix conversion of Character to char in generated Java code.",['03c258365f395a6e878d8019bc53aa70e0e0b265'],False,"['RexToLixTranslator.java', 'RelOptPredicateList.java', 'ReduceExpressionsRule.java', 'ValuesReduceRule.java', 'RexExecutorImpl.java', 'RexInputRef.java', 'RexShuttle.java', 'RexUtil.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
0fda7afc84af372553e3fd21e666cc683d456f1f,Fix indeterminacy in a test,['1d9e784d9a331b7c44dcc95cb6dcad17d3348bba'],False,"['EnumerablesTest.java', 'Functions.java']"
dad74b97a01736221d90b79b534252658f58a5a2,Change copyright year,['6c88546ea8a0deb544df57536ed24466fbb46b85'],False,['NOTICE']
957dea1042fcc7a4a26a93f845c5d17cadd5ba1f,"[CALCITE-536] Add @PackageMarker to package-info.java so maven-compiler skips compilation when the sources are unchanged

This is a temporary workaround for https://jira.codehaus.org/browse/MCOMPILER-205.
The proper fix is to generate empty package-info.class in maven-compiler-plugin when package-info.java is ""empty""",['46b5691864224e9ebbd12775848f95f187c5530c'],False,"['package-info.java', 'package-info.java', 'package-info.java', 'PackageMarker.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'PackageMarker.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java', 'package-info.java']"
35a5b4f53b550761b3e6f1321767471a9820d95f,[CALCITE-539] Avoid rewrite of org-apache-calcite-jdbc.properties,['dfdf700211ad6ff0ba82fd48e9c93353a4a9c5db'],False,['pom.xml']
dd05f6cd91d864c802d842c6f5f7ee48d943a1d8,"[CALCITE-541] Update maven-source-plugin to 2.4 to get speedup in jdk 1.8

Old version of maven-source-plugin has ""is java.version==1.7"" guard check for the usage of 1.7+ features.
New version has proper java.version>=1.7, so it is faster in 1.8

Fixes #35",['e16aee7c4a27501a8400e18b088bb929ee694402'],False,['pom.xml']
3c508b5c4fa3aa3eff3837df77a06f3361103dee,"[CALCITE-92] Optimize away Project that merely renames fields

Fixes #32",['dd05f6cd91d864c802d842c6f5f7ee48d943a1d8'],False,"['RelOptUtil.java', 'SubstitutionVisitor.java', 'ProjectRemoveRule.java', 'RexUtil.java', 'RelFieldTrimmer.java', 'JdbcTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'join.oq', 'outer.oq']"
3fccc08ef23d33efbc692b389cc1049ee7939533,[CALCITE-489] Teach CalciteAssert to respect multiple settings,['3c508b5c4fa3aa3eff3837df77a06f3361103dee'],False,"['CalciteRemoteDriverTest.java', 'CalciteAssert.java', 'JdbcAdapterTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MaterializationTest.java', 'ModelTest.java', 'ReflectiveSchemaTest.java', 'EnumerableCorrelateTest.java', 'TpcdsTest.java', 'TpchTest.java']"
01a8064c59985781ca1b59c45cad2d84cce5c9d5,Fix code style,['b822a0d0f17ef6643f3db7967d9a9eff4f11964b'],False,['RexProgramTest.java']
89d42b505053979d7a9a0a8c7c7af37bcec33a69,Fix spurious extra row from FULL JOIN,['1edcba060a55888204f32b8516eee65f8409c8e7'],False,"['JdbcTest.java', 'outer.oq', 'EnumerableDefaults.java', 'Linq4jTest.java']"
d0b5e373e098c495c3a68b77249b1a9e4a284517,Fix code style so that no line opens more than one parenthesis,['506c1ab46b6b3e0279c799acc4e4412d542e8b6d'],False,"['AggImplementor.java', 'EnumerableAggregate.java', 'EnumerableCorrelate.java', 'EnumerableJoin.java', 'EnumerableRelImplementor.java', 'EnumerableTableModify.java', 'EnumerableWindow.java', 'RexImpTable.java', 'StrictAggImplementor.java', 'WinAggAddContextImpl.java', 'Prepare.java', 'RelMdUtil.java', 'SemiJoinRule.java', 'RexBuilder.java', 'RexUtil.java', 'ScalarFunctionImpl.java', 'TableFunctionImpl.java', 'SqlDataTypeSpec.java', 'RelStructuredTypeFlattener.java', 'RelWriterTest.java', 'ReflectiveSchemaTest.java', 'RexProgramTest.java', 'PlannerTest.java', 'EnumerableDefaults.java', 'EnumerableQueryable.java', 'QueryableDefaults.java', 'Functions.java', 'BinaryExpression.java', 'BlockBuilder.java', 'Blocks.java', 'Expressions.java', 'DeterministicTest.java', 'OptimizerTest.java']"
0c052cc68ac0e215ac53ae3fd5dae59c18eb145d,"Oops; fix for [CALCITE-557] should compare rule matches by importance first, class name second",['d0b5e373e098c495c3a68b77249b1a9e4a284517'],False,"['RuleQueue.java', 'misc.oq']"
42d723928b091a7aeb57e9792022d7d7f8afd3d6,"[CALCITE-561] Upgrade parent POM

May also fix [CALCITE-560] Calcite test suite hangs on ubuntu-12.04",['0c052cc68ac0e215ac53ae3fd5dae59c18eb145d'],False,"['pom.xml', 'pom.xml']"
986f994349a92ba2644f7384cefaccd165735832,"[CALCITE-489] Teach CalciteAssert to respect multiple settings, use lex=JAVA in README.md for brevity

Fixes #42",['42d723928b091a7aeb57e9792022d7d7f8afd3d6'],False,"['README.md', 'CalciteRemoteDriverTest.java', 'CalciteAssert.java', 'CalciteSqlOperatorTest.java', 'FoodmartTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'LinqFrontJdbcBackTest.java', 'ReflectiveSchemaTest.java']"
2bbfbdab8b59cf26ace3431a6e00f37bc27ad3e0,"[CALCITE-543] Implement Aggregate (including grouping sets) in Interpreter (Jacques Nadeau)

Minor fix-up by Julian Hyde.",['986f994349a92ba2644f7384cefaccd165735832'],False,"['AbstractSingleNode.java', 'AggregateNode.java', 'Nodes.java', 'Row.java', 'InterpreterTest.java']"
66cfb120fca58e4c809748e2bcef4d3d5a7c6b82,"[CALCITE-544] Implement Union in Interpreter;
[CALCITE-562] Implement inner JOIN in interpreter and improve handling of scalar expressions

Also, progress towards [CALCITE-558] Add BINDABLE convention and make it the default convention for query root, but currently ENUMERABLE is still the default. You can enable BINDABLE by setting CalcitePrepareImpl.ENABLE_BINDABLE; there are 184 test failures.

New interface ArrayBindable extends Bindable. Unlike Bindable the return is guaranteed to be an Object[]. Enumerable convention expects generated code to return a Bindable, which might return custom classes or arrays, and if there is a single column, the array is optimized to the raw column value. Bindable convention assumes that relational expressions implement ArrayBindable and return arrays of column values; the arrays are not optimized if there is only one column.

New interface Scalar represents a compiled way to execute a scalar expression (or expressions) and is easily built from a RexNode or AggregateCall.

Close apache/incubator-calcite#43",['4e18540440036b01370a2c4c0657d14d80b303bf'],False,"['ArrayTable.java', 'AggImpState.java', 'EnumUtils.java', 'EnumerableAggregate.java', 'EnumerableBindable.java', 'EnumerableCalc.java', 'EnumerableCalcRule.java', 'EnumerableConvention.java', 'EnumerableFilterRule.java', 'EnumerableInterpretable.java', 'EnumerableProjectRule.java', 'EnumerableRelImplementor.java', 'EnumerableSort.java', 'EnumerableWindow.java', 'EnumerableWindowRule.java', 'JavaRowFormat.java', 'PhysTypeImpl.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'ReflectiveSchema.java', 'JdbcTable.java', 'AggregateNode.java', 'BindableConvention.java', 'BindableRel.java', 'Bindables.java', 'Context.java', 'FilterNode.java', 'InterpretableConvention.java', 'InterpretableConverter.java', 'InterpretableRel.java', 'Interpreter.java', 'Interpreters.java', 'JaninoRexCompiler.java', 'JoinNode.java', 'Nodes.java', 'NoneToBindableConverterRule.java', 'ProjectNode.java', 'Scalar.java', 'SortNode.java', 'TableScanNode.java', 'UnionNode.java', 'ValuesNode.java', 'WindowNode.java', 'CalcitePrepare.java', 'RelOptUtil.java', 'RelTraitSet.java', 'RelSet.java', 'VolcanoPlanner.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'Prepare.java', 'RelOptTableImpl.java', 'ConverterRule.java', 'Window.java', 'RexExecutorImpl.java', 'ArrayBindable.java', 'AggregateFunctionImpl.java', 'SqlKind.java', 'Programs.java', 'BuiltInMethod.java', 'Util.java', 'SqlParserTest.java', 'InterpreterTest.java', 'JdbcTest.java', 'LatticeTest.java', 'misc.oq', 'ConditionalExpression.java', 'Types.java', 'SparkHandlerImpl.java', 'SparkRules.java']"
b66ff933741c0e66d57ad5316330c8728861327e,"Fix up some class names and URLs in HOWTO, MODEL, TUTORIAL",['cb533784ef974b361c6423d3f008a03db2e232ff'],False,"['HOWTO.md', 'MODEL.md', 'TUTORIAL.md', 'CsvSchema.java']"
6c5dd43113a8695a9fd0c12f564e6c87516ca3b9,[CALCITE-582] EnumerableTableScan broken when table has single column,['341bdd8e2e1a48165652bab1d6341ef4d09e2523'],False,"['EnumerableTableScan.java', 'RangeTable.java', 'JdbcTest.java']"
44650d4fe7236e2079580512c0ec4f020c93ef5a,Fix version,['ff2dfef9b39c8e4e410985bcfca0ea8264a80221'],False,['pom.xml']
c0120dd80bfe5e5fb077a5b631efbccb35afd9eb,"[CALCITE-569] ArrayIndexOutOfBoundsException when deducing collation (Aman Sinha)

This commit adds a test case. Although Aman's patch provided a fix, Julian Hyde had already fixed the issue as part of [CALCITE-88].",['c0a3085ce9f5f5de1d2c9d3656ad740a35a5a91e'],False,['PlannerTest.java']
2709896eb176c14605b1ddc4be57d916ebeb0fe8,"[CALCITE-88] Add collation as a trait and a kind of RelNode metadata

[CALCITE-526] Add EnumerableMergeJoin, which exploits sorted inputs

[CALCITE-71] Provide a way to declare that tables are sorted

[CALCITE-576] Make RelCollation trait and AbstractRelNode.getCollationList consistent

[CALCITE-581] Add LogicalSort relational expression, and make Sort abstract

[CALCITE-254] Propagate RelCollation on aliased columns in JoinRule

[CALCITE-569] ArrayIndexOutOfBoundsException when deducing collation

More efficient algorithm to check for cycles in the tree of equivalence sets.

FilterJoinRule now propagates traits.

Ord.zip returns random-access list.

Replace references to ""Bug#upgrade"" with ""Deprecated // to be removed before ...""

Add composite traits (RelCompositeTrait); subsets only ever have a simple trait, but other RelNodes can have multiple traits, and appear in each subset that those traits. Each composite trait is canonized within its trait definition, and each of the component traits.

Rename RelTraitSet.subsumes and RelTrait.subsumes to satisfies.",['c0120dd80bfe5e5fb077a5b631efbccb35afd9eb'],False,"['ArrayTable.java', 'EnumerableCalc.java', 'EnumerableCalcRule.java', 'EnumerableConvention.java', 'EnumerableFilter.java', 'EnumerableFilterToCalcRule.java', 'EnumerableJoin.java', 'EnumerableLimit.java', 'EnumerableMergeJoin.java', 'EnumerableMergeJoinRule.java', 'EnumerableProjectToCalcRule.java', 'EnumerableRules.java', 'EnumerableSort.java', 'EnumerableSortRule.java', 'EnumerableValues.java', 'EnumerableValuesRule.java', 'PhysTypeImpl.java', 'BindableConvention.java', 'InterpretableConvention.java', 'SortNode.java', 'Convention.java', 'RelCompositeTrait.java', 'RelMultipleTrait.java', 'RelOptAbstractTable.java', 'RelOptCluster.java', 'RelOptMaterialization.java', 'RelOptUtil.java', 'RelTrait.java', 'RelTraitDef.java', 'RelTraitSet.java', 'SubstitutionVisitor.java', 'AbstractConverter.java', 'RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java', 'CalcitePrepareImpl.java', 'LixToRelTranslator.java', 'Prepare.java', 'QueryableRelBuilder.java', 'RelOptTableImpl.java', 'AbstractRelNode.java', 'RelCollation.java', 'RelCollationImpl.java', 'RelCollationTraitDef.java', 'RelCollations.java', 'RelFieldCollation.java', 'RelNode.java', 'Aggregate.java', 'Calc.java', 'Correlate.java', 'JoinInfo.java', 'Project.java', 'RelFactories.java', 'Window.java', 'RelJson.java', 'LogicalAggregate.java', 'LogicalCalc.java', 'LogicalCorrelate.java', 'LogicalFilter.java', 'LogicalIntersect.java', 'LogicalJoin.java', 'LogicalMinus.java', 'LogicalProject.java', 'LogicalSort.java', 'LogicalTableFunctionScan.java', 'LogicalTableModify.java', 'LogicalTableScan.java', 'LogicalUnion.java', 'LogicalValues.java', 'BuiltInMetadata.java', 'DefaultRelMetadataProvider.java', 'RelMdCollation.java', 'RelMetadataQuery.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'CalcRelSplitter.java', 'FilterCalcMergeRule.java', 'FilterJoinRule.java', 'FilterTableFunctionTransposeRule.java', 'FilterToCalcRule.java', 'JoinToCorrelateRule.java', 'ProjectCalcMergeRule.java', 'ProjectRemoveRule.java', 'ProjectToCalcRule.java', 'ProjectToWindowRule.java', 'PruneEmptyRules.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SortProjectTransposeRule.java', 'UnionMergeRule.java', 'UnionToDistinctRule.java', 'ValuesReduceRule.java', 'RexNode.java', 'RexOver.java', 'RexProgram.java', 'RexUtil.java', 'Statistic.java', 'Statistics.java', 'SqlWindow.java', 'SqlAdvisor.java', 'SqlLiteralChainOperator.java', 'SqlShuttle.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'Programs.java', 'Bug.java', 'BuiltInMethod.java', 'ImmutableBitSet.java', 'ImmutableIntList.java', 'Util.java', 'RelWriterTest.java', 'VolcanoPlannerTraitTest.java', 'RelCollationTest.java', 'SqlParserTest.java', 'CalciteAssert.java', 'CalciteSuite.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MockCatalogReader.java', 'RelMetadataTest.java', 'ScannableTableTest.java', 'SqlToRelTestBase.java', 'FrameworksTest.java', 'PlannerTest.java', 'ImmutableBitSetTest.java', 'sort.oq', 'Ord.java', 'MongoRules.java', 'SplunkPushDownRule.java']"
9ffba4a5f0ba83bac157a2c8ea1f800e3f3fcaa6,"Australian time-zones changed in tzdata2014f, Java 1.8.0_31",['e0b3c4a47786fcb081c90fdbe850ad6b28da75ca'],False,['UtilTest.java']
18d4f70a7ebd5f5b3b0d8b83820f8d770be1d19e,"[CALCITE-594] Add RelDistribution trait and Exchange relational expression

Close apache/incubator-calcite#52",['c493108d38af2c152a0de48c98eec210fd5ae9fc'],False,"['EnumerableCalc.java', 'EnumerableFilter.java', 'EnumerableLimit.java', 'EnumerableValues.java', 'RelOptAbstractTable.java', 'RelOptTable.java', 'RelTraitSet.java', 'CalciteMaterializer.java', 'RelOptTableImpl.java', 'RelDistribution.java', 'RelDistributionTraitDef.java', 'RelDistributions.java', 'RelHomogeneousShuttle.java', 'RelInput.java', 'RelNode.java', 'RelShuttle.java', 'RelShuttleImpl.java', 'Exchange.java', 'Project.java', 'Sort.java', 'SortExchange.java', 'RelJson.java', 'RelJsonReader.java', 'LogicalCalc.java', 'LogicalExchange.java', 'LogicalFilter.java', 'LogicalProject.java', 'LogicalValues.java', 'BuiltInMetadata.java', 'RelMdCollation.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdDistribution.java', 'RelMdPopulationSize.java', 'RelMdPredicates.java', 'RelMetadataQuery.java', 'CalcMergeRule.java', 'CalcRemoveRule.java', 'FilterAggregateTransposeRule.java', 'Statistic.java', 'Statistics.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'BuiltInMethod.java', 'ImmutableIntList.java', 'MockCatalogReader.java', 'SqlToRelTestBase.java']"
f9db1ee9210a04f7a3ddae23e52e26be1669debb,"[CALCITE-593] Validator in Frameworks should expand identifiers (Jinfeng Ni)

Change SqlValidator in Frameworks to expand identifiers by default, the same behavior as CalcitePrepareImpl.

Close apache/incubator-calcite#51",['18d4f70a7ebd5f5b3b0d8b83820f8d770be1d19e'],False,"['PlannerImpl.java', 'FrameworksTest.java']"
b659d0f3be34819705beffed612d82b3c162cd9c,"[CALCITE-607] Change visibility of constructor in metadata providers for size, memory, parallelism (Jesus Camacho Rodriguez)

Close apache/incubator-calcite#55",['dacde8f2ee4abb0cc11f102b1373d5d41909d91a'],False,"['RelMdMemory.java', 'RelMdParallelism.java', 'RelMdSize.java']"
49ec280180cfa74cb35f6a50fbcf84857f690951,"[CALCITE-566] ReduceExpressionsRule requires planner to have an Executor

Also fix some code style issues",['b659d0f3be34819705beffed612d82b3c162cd9c'],False,"['ReduceExpressionsRule.java', 'SqlParserTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'RelOptRulesTest.xml']"
ee3347f805d7802ab8f6defbea3ec616a1c04ff0,[CALCITE-577] Revert temporary API changes introduced in [CALCITE-575],['0ecd8702ab95fd59b7ef2182720d12b2167ae968'],False,"['ProjectRemoveRule.java', 'RexUtil.java', 'RelFieldTrimmer.java']"
abe76e3d1e9b823518b7264a359c448641b7b14c,Further fix for [CALCITE-588],['3eb6515d651de14f8baa20cf9987331ab31200fb'],False,"['RexLiteral.java', 'SqlUserDefinedTableMacro.java', 'Litmus.java', 'JdbcTest.java']"
321217ddd6629fda3e2620c39283c415724c123e,[CALCITE-614] IN clause in CASE in GROUP BY gives AssertionError,['119a39931df38e92cacc25973c46154549247061'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
b312031f3ead3adb272b79d02d7fcfc095ec4deb,[CALCITE-606] Fix trait propagation and add test case,['d3fc7cf2595a3290c1f2de2ef9daf0dafb782be4'],False,"['RelSet.java', 'VolcanoPlanner.java', 'TestTraitPropagation.java']"
3b55c35a58b45d2a8538f9bc77f11e51a2d45e6b,"Fix TestTraitPropagation.withoutHack (withoutHack now succeeds, withHack now fails).

Deduce the collations of a RelSubset by looking at its traits. (For other kinds of RelNode that would cause a cycle.)

Remove AbstractConverters again (Jacques had restored them, but performance was terrible.)

When creating a RelSubset make sure that its traits are simple. (Occurs when creating a subset to convert an existing rel that has multiple collations to a different calling convention. The subset can only have one collation.)

Add a version of RelOptRule.convert that takes a single trait, to avoid simplifying other traits of that RelNode. Many current calls to convert(RelNode, RelTraitSet) should probably use this method.

Add a short-cut to RelTraitSet.replace for the case where the new trait is canonized and the same as the old.

In TestTraitPropagation, use SortRemoveRule; implement RelOptTable.unwrap and Table.getStatistic and use EnumerableTableScan.create, so that table scan is sorted; make PhysSortRule a ConvertRule, so that its input ends up in the same RelSet; fix a typo giving PhysTable the wrong convention.

Call simplify in RelOptRule.convert rather than VolcanoPlanner.",['b312031f3ead3adb272b79d02d7fcfc095ec4deb'],False,"['RelOptRule.java', 'RelTraitSet.java', 'RelSet.java', 'VolcanoPlanner.java', 'RelMdCollation.java', 'TraitPropagationTest.java', 'CalciteSuite.java']"
0d80fd25315bc53f71622415c8bb3d364e634507,[CALCITE-646] AvaticaStatement execute method broken over remote JDBC (Yeong Wei and Julian Hyde),['272e604082bbaf27a93e5c4f04a2eb1c951a99f4'],False,"['JdbcMeta.java', 'JdbcResultSet.java', 'RemoteDriverTest.java', 'AvaticaConnection.java', 'AvaticaStatement.java', 'Meta.java', 'MetaImpl.java', 'JsonService.java', 'LocalService.java', 'MockJsonService.java', 'RemoteMeta.java', 'Service.java', 'CalciteMetaImpl.java', 'CalciteRemoteDriverTest.java']"
e48c7627c162726f42e786a0e0b8c3042315491a,"[CALCITE-366] Support Aggregate push down in bushy joins (Jesus Camacho Rodriguez)

Fix up (Julian Hyde):
* replace pointer comparison with RexNode.isAlwaysTrue;
* add to the list of built-in rules, and add SQL test.

Close apache/incubator-calcite#75",['5f57f78927a38939be56325fa9b6f44693b29cc9'],False,"['VolcanoPlanner.java', 'AggregateJoinTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'join.oq']"
65774b056bcd277634e0fc6f678806f15ba05e83,"Fix traits in MongoDB adapter, and NPE in JdbcTest",['e48c7627c162726f42e786a0e0b8c3042315491a'],False,"['JdbcTest.java', 'MongoRules.java', 'MongoAdapterTest.java']"
a42b88d4ff73c41587f6a593d56fda8e25f27fbb,[CALCITE-676] AssertionError in GROUPING SETS query,['615065ac7e4aca3edf1bfb3fd8e56bf4ddba3da3'],False,"['AggregateProjectMergeRule.java', 'ImmutableBitSet.java', 'join.oq']"
8276f2580ed427d02cee7f3695f182e77a7ae978,"[CALCITE-675] Enable AggregateProjectMergeRule in standard rule set

Fix various bugs involving field mix-ups in Aggregates",['a42b88d4ff73c41587f6a593d56fda8e25f27fbb'],False,"['PhysTypeImpl.java', 'VolcanoPlanner.java', 'AggregateProjectMergeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcTest.java', 'LatticeTest.java', 'EnumerableCorrelateTest.java', 'join.oq', 'misc.oq', 'subquery.oq']"
3e26a873ae17759a9fce12d56c133488558fb771,"[CALCITE-671] ByteString does not deserialize properly as a FetchRequest parameterValue

Add class TypedValue, which encodes to JSON as say {type: LONG, value: 1}, to provide information about how the value should be decoded to a Java type (in this case, Long).

Encode BINARY and VARBINARY parameters and column values as Base64 strings as they go over JSON, convert ByteString in Avatica code, then to byte[] in JDBC.

Move RhBase64 to Base64 under Avatica and upgrade to version 2.3.7.

Fix ""expirydiration"" typo.",['8276f2580ed427d02cee7f3695f182e77a7ae978'],False,"['JdbcMeta.java', 'RemoteDriverTest.java', 'ColumnMetaData.java', 'JsonService.java', 'LocalService.java', 'RemoteMeta.java', 'Service.java', 'TypedValue.java', 'AbstractCursor.java', 'Base64.java', 'ByteString.java', 'RhBase64.java', 'SqlFunctionsTest.java']"
28d640af324e91237f82590467e2d239393b3eaa,Add CalciteAssert.assertArrayEqual for more user-friendly asserts,['b6283dbb74983410c99357332aadd90ec9a000d3'],False,['CalciteAssert.java']
9e272f2913ac6f7e3eb9e99cffcd0571df227a78,"Support AVG aggregations in MongoDB, support basic calculations in mongo (+, -, /, *, case, etc)

fixes #18",['b18a4df3dacc63d01aa71e3145049e3fdb2eef5c'],False,"['MongoAggregate.java', 'MongoRules.java', 'MongoAdapterIT.java']"
93c2ff517f44ca35285811130ce86f1a022956bb,"First swipe at [CALCITE-522] (Xavier Leong)

Build static DatabaseProperties map, name change on Meta enum, cache
DatabaseProperties lookup at RemoteMeta.

Close apache/incubator-calcite#77",['a357e910809da869e2edbad68f35346b1f5498fd'],False,"['JdbcMeta.java', 'RemoteDriverTest.java', 'AvaticaDatabaseMetaData.java', 'Meta.java', 'MetaImpl.java', 'JsonService.java', 'LocalService.java', 'RemoteMeta.java', 'Service.java', 'CalciteMetaImpl.java', 'DatabaseProperties.java', 'CalciteRemoteDriverTest.java']"
f107218b956a1b25d11c8d06c6378bdd22c75378,"Add tests for scalar sub-queries, including test cases for [CALCITE-709] Errors with LIMIT inside scalar sub-query",['f5434a495271a6887f7964423630405cf3d8c877'],False,"['JdbcTest.java', 'scalar.oq']"
af01c5afa849f38e8148130afcdf8e911575d7bd,"[CALCITE-710] Identical conditions in the WHERE clause cause assertion error (Sean Hsuan-Yi Chu)

When look up subqueries, perform the same logic as the way when ones were registered.

Close apache/incubator-calcite#82",['f076a9bacc25dc5671b5557e48d9a654a6aa6854'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
f98d567fa6843762a830a272e06f2d74908ce440,"[CALCITE-716] Scalar sub-query and aggregate function in SELECT or HAVING clause gives AssertionError

Based on work by Sean Hsuan-Yi Chu.",['61ba314f1328dd5392d3d440763139ea81b86645'],False,"['SqlValidator.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'subquery.oq']"
a27bb57ab612fdb87d77cb073f9aaa93499ee775,[CALCITE-728] Test suite hangs on Windows,['bc45a2c047349826e22641e82468a2d4dad948e3'],False,"['FoodmartTest.java', 'JdbcTest.java', 'FrameworksTest.java', 'pom.xml']"
9475b2d337ab16b0b98dd046784afab2e7c5ca24,Fix up [CALCITE-259]; code generation for SINGLE_VALUE in hsqldb almost working,['01b2d057c329165f1180c53a8d8329b1b225447f'],False,"['JdbcRules.java', 'JdbcAdapterTest.java']"
20f591246448778e010ba822b5b9103dcda945b5,"Enable Travis CI on new-master branch and bug-fix branches named ""NNN-description""",['37535f886bb5d7c4bd816ea62f4c2e8328cbaa54'],False,['.travis.yml']
8b53dc49f49113daf12a355c5db18ccc248f4924,"[CALCITE-749] Add MaterializationService.TableFactory (Rajat Venkatesh)

Return TableEntry for getTable family of functions (breaking change).

Close apache/incubator-calcite#90",['ec9d966042f870c70593fca9e8bf55f8f74317e9'],False,"['CalciteMetaImpl.java', 'CalciteSchema.java', 'MaterializationService.java', 'CalciteCatalogReader.java']"
ebce955d700602720882aa01b6ddead9ab10bde0,"Test case for [CALCITE-754] Validator error when resolving OVER clause of JOIN query (Hsuan-Yi Chu)

Close apache/incubator-calcite#93",['4cc539fc28fac0c5897ada1cc5e57729807d260d'],False,['SqlValidatorTest.java']
87acda3179d6a5536f8af1506d5048ef06aeb591,[CALCITE-754] Validator error when resolving OVER clause of JOIN query,['ebce955d700602720882aa01b6ddead9ab10bde0'],False,"['SqlNode.java', 'SqlWindow.java', 'SqlCastFunction.java', 'SelectNamespace.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'SqlValidatorTest.java']"
2b2176577c9c36466772eee8636dca159bcc5d9a,Fix coverity warnings,['6718963132e8984877c379bc5fc95534b31022e4'],False,"['Schemas.java', 'RelBuilder.java']"
468a161bbd8fd4994085d96e2bc801209a17cf76,"[CALCITE-757] Fix expansion of view of another view (Venki Korukanti)

Pass ViewExpanderImpl to SqlToRelConverter so that a view of another view is expanded properly.

The issue was found in [DRILL-1145].

Close apache/incubator-calcite#94",['2b2176577c9c36466772eee8636dca159bcc5d9a'],False,['PlannerImpl.java']
ced25ee3b1d4cf5193bc8fe339f4116cc2e89913,"Change jsonRequest encoding to UTF-8 (Guitao Ding)

Close apache/incubator-calcite#89",['468a161bbd8fd4994085d96e2bc801209a17cf76'],False,['AvaticaHandler.java']
e7d15adde55029953166ec0b35e81133df4c1e68,Test case and workaround for [CALCITE-760] Aggregate recommender blows up if row count estimate is too high,['bc8c4a98b7e80f8a4c1e0b7ac8b8e61b2ca434f0'],False,['LatticeTest.java']
02eddd18aa516b19022ceb85a775071a24b4e518,Fix Windows line-endings in RelBuilderTest,['21cf1259b8c02b63dbfebb8cf23e65f73bca567c'],False,['RelBuilderTest.java']
e39911ed78221b23a8837f00b806a251ee496401,"[CALCITE-280] BigDecimal underflow (Li Yang)

Fix by Li Yang, test case by Julian Hyde.",['8774a671f035d7bbc8fe8fa420ba237941431c08'],False,"['SqlFunctions.java', 'agg.oq']"
03111d2b680c4f4eb4886d60cab9beebd1c7bdcb,[CALCITE-780] HTTP error 413 when sending a long string to the Avatica server,['40c55fd463e4a249953bf298450110027d6c3bd6'],False,"['AvaticaHandler.java', 'RemoteMetaTest.java', 'AvaticaUtils.java', 'RemoteService.java']"
830afef0484e7b59de01331c2305a33c20df152e,Re-enable a test; fix some code formatting; fix Windows line endings,['03111d2b680c4f4eb4886d60cab9beebd1c7bdcb'],False,"['RelOptUtil.java', 'FlatLists.java', 'JdbcTest.java', 'RelBuilderTest.java', 'MongoTable.java']"
c57d80725766c84834a35e4f3b68feb38540b66c,"[CALCITE-801] NullPointerException using USING on table alias with column aliases

Fix an issue numbering the fields in a RelCrossType",['23396f0637724205ae35a89972bb61bc60d3e946'],False,"['RelCrossType.java', 'RelDataTypeFactoryImpl.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'join.oq']"
5a365609c0d050e5e832449bdadad1e309f0f204,Fix up previous commit; add some tests for constant reduction,['4a9b19390b2f9ab5a6d3bc2340c323d3a39cfa80'],False,"['EnumerableWindow.java', 'MaterializedViewSubstitutionVisitor.java', 'RelOptUtil.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'VisitorDataContext.java', 'AggregateFilterTransposeRule.java', 'AggregateUnionTransposeRule.java', 'FilterAggregateTransposeRule.java', 'SqlKind.java', 'RexExecutorTest.java', 'DiffRepository.java', 'RexImplicationCheckerTest.java']"
f7ec3e847eb3ba82c182a63327fd1da490df648b,Change the argument types of SqlOperator.getMonotonicity to allow it to be used for RexNode as well as SqlNode,['ef5833f3f4b8b6a2296a6f43170981dac03012ad'],False,"['RelMdCollation.java', 'RexCallBinding.java', 'RexLiteral.java', 'SqlAsOperator.java', 'SqlBinaryOperator.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlLiteral.java', 'SqlOperator.java', 'SqlOperatorBinding.java', 'SqlPrefixOperator.java', 'SqlAbstractTimeFunction.java', 'SqlCastFunction.java', 'SqlCurrentDateFunction.java', 'SqlDatetimeSubtractionOperator.java', 'SqlExtractFunction.java', 'SqlFloorFunction.java', 'SqlMonotonicBinaryOperator.java', 'SqlMonotonicUnaryFunction.java', 'SqlStringContextVariable.java', 'SqlSubstringFunction.java']"
9177063b5217ba01a7a34f85a0bf8e8753adeb20,Complete [CALCITE-783] by fixing some planner rules,['c711fed6e2392f296554719a98b2d737da53c9b5'],False,"['EnumerableAggregateRule.java', 'EnumerableProjectRule.java', 'JdbcRules.java', 'RelOptTableImpl.java', 'RelFieldCollation.java', 'RelMdCollation.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'RelFieldTrimmer.java', 'JdbcTest.java', 'LatticeTest.java', 'join.oq', 'MongoRules.java']"
cf7a7a97368d6e72b2a413f9f8857f54c2970e61,"[CALCITE-751] Push aggregate with aggregate functions through join

In this iteration, it is not safe to use the extended rule (that can handle
aggregate functions) in the Volcano planner, only in the Hep planner. The
extended rule requires metadata that can handle cyclic relational expressions
(to be fixed in [CALCITE-794]).",['41541d44d458ec4e4c6067cb40aa68dd1f433bda'],False,"['SubstitutionVisitor.java', 'AggregateCall.java', 'RelMdColumnUniqueness.java', 'AggregateJoinTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'RexBuilder.java', 'SqlAggFunction.java', 'SqlSplittableAggFunction.java', 'SqlCountAggFunction.java', 'SqlMinMaxAggFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'agg.oq', 'join.oq', 'TpcdsTest.java']"
e03dafcf20c8c5af5fffda88b4813017dca30048,"Fix up [CALCITE-714]

Also, forgot to close the pull request for [CALCITE-761] Pre-populated materializations, so:

Close apache/incubator-calcite#98",['29030d8c12709525cf874f4c28a13abe165f46aa'],False,"['Filter.java', 'FilterCorrelateRule.java', 'FilterProjectTransposeRule.java', 'RexUtil.java', 'RelDecorrelator.java']"
c9d7233d4e2be531814663f2a2ef3fc5600c4950,[CALCITE-834] StackOverflowError getting predicates from the metadata provider,['a61be0db744081af4c375fb0dcbae4a95041ff9d'],False,"['RelMdPredicates.java', 'RelMetadataTest.java']"
6bc8efc4318ef919e7a3a4a42afc574e8f5845f5,Fix javadoc links,['c9d7233d4e2be531814663f2a2ef3fc5600c4950'],False,['Main.java']
24d3620c385a27b83b8cfb95016ad173626d47aa,"In RelBuilder, build expressions by table alias

RelBuilder.distinct was projecting no fields, should project all

Change some RelBuilder parameters from List to Iterable

RelBuilder.filter must preserve aliases

RelBuilder.field(String, String) must have right nullability post outer join",['27b359bf4c8a3aacc658daacf8442fd7cab11b05'],False,"['RelBuilder.java', 'RelBuilderTest.java']"
54249d04d4b578cfd7cb437e097d848e57737987,"[CALCITE-812] Make JSON reader and writer use properly quoted key names (Marc Prud'hommeaux)

Fix Mongo test (Julian Hyde)

Close apache/incubator-calcite#116",['77674a7c64dfbe7f45a2fea12bce475a9f96161f'],False,"['RelJsonReader.java', 'JsonBuilder.java', 'RelWriterTest.java', 'UtilTest.java', 'MongoAdapterIT.java']"
a3da69153b030552abf87f279487ebda4a5ae69c,"Fix up [CALCITE-809], deprecating Sink.setSourceEnumerable",['30d618d5f6254b269f7a6740f78ba9b63ff79040'],False,"['Interpreter.java', 'Sink.java', 'StreamTest.java', 'DelegatingEnumerator.java', 'Linq4j.java']"
5e7d457ae82cc7a0e3bf055fa2e1f45b19186dcf,"Further fix up [CALCITE-809], eliminating the proxy sink",['a3da69153b030552abf87f279487ebda4a5ae69c'],False,"['Interpreter.java', 'TableScanNode.java', 'Linq4j.java', 'TransformedEnumerator.java', 'Linq4jTest.java']"
d19a9133f4941ef80195b8ef19fb7c21a1258abd,"[CALCITE-847] AVG window function in GROUP BY gives AssertionError (Hsuan-Yi Chu)

Close apache/incubator-calcite#126",['2a215df30d26f4363e6a7fe2d27be0ee7db9357f'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
f98ed96f041b615dca1560b7014d112a40e43d6e,"[CALCITE-862] JdbcSchema gives NullPointerException on non-standard column type (Marc Prud'hommeaux)

Solution is for SqlTypeName.getNameForJdbcType to fall back to ANY.

Close apache/incubator-calcite#125",['d19a9133f4941ef80195b8ef19fb7c21a1258abd'],False,"['JdbcSchema.java', 'SqlTypeName.java']"
977206c5c0521f4e7aa3f18159b19a6467e0744c,"Fix up [CALCITE-844], and enable ProjectWindowTransposeRule by default",['5219eb8cd4e8c1f0b1654da3136ce1c04e38a96e'],False,"['CalcitePrepareImpl.java', 'ProjectWindowTransposeRule.java']"
600e1caf083f4dc30becb386f984eebda8c48a9c,Replace Stack with ArrayDeque,['f003187cf1422d98a688787ba3b6a9e1c5a9c32e'],False,"['SqlPrettyWriter.java', 'SqlScopedShuttle.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'ConcurrentTestCommandScript.java']"
16512edc1308b6643bbdba901996a4b0a5c014e9,"[CALCITE-881] Allow schema.table.column references in GROUP BY

To keep the horse in front of the cart, move a few fields and methods from
AggregatingSelectScope to a new class Resolved, which is created after the
scope tree is built, i.e. during validation.",['600e1caf083f4dc30becb386f984eebda8c48a9c'],False,"['SqlAbstractGroupFunction.java', 'AggregatingSelectScope.java', 'DelegatingScope.java', 'SqlToRelConverter.java', 'SqlValidatorTest.java', 'misc.oq']"
25b2860704f1998710f1e3ccf6661476169f200e,"[CALCITE-823] Add ALTER ... RESET statement (Sudheesh Katkam)

+ Parser support for statements like:
  ALTER scope RESET `option`.`name`;
  (reset option, multi-part identifier)

  ALTER scope RESET ALL;
  (reset all options)

  SET `option.name` = 1;
  (optional 'ALTER scope')

+ This is a breaking change in SetSqlOption API:
  #getName returns a multi-part SqlIdentifier
  #setName expects a SqlNode rather than a String

+ Added unit tests in SqlParseTest#testSqlOptions

Close apache/incubator-calcite#128",['9f149015835c7c1af9cdeb657cb70a96e7ac3353'],False,"['Parser.jj', 'SqlSetOption.java', 'SqlParserTest.java', 'reference.md']"
ad4bdca339dbb7df517ebe6eadcf22744d893459,"[CALCITE-882] Allow web site to be deployed not as the root directory of the web server (Josh Elser)

Lift all url prefixes in _config.yml and update templates to account for non '/' root deployments.

Trim trailing spaces.

Close apache/incubator-calcite#131

And a pull request I forgot to close earlier:

Close apache/incubator-calcite#129",['25b2860704f1998710f1e3ccf6661476169f200e'],False,"['_config.yml', 'adapter.md', 'algebra.md', 'api.md', 'avatica.md', 'howto.md', 'index.md', 'lattice.md', 'model.md', 'tutorial.md', 'docs_option.html', 'docs_ul.html', 'header.html', 'news_contents.html', 'news_contents_mobile.html', 'news_item.html', 'primary-nav-items.html', 'section_nav.html', 'top.html', 'news_item.html', '2015-06-05-algebra-builder.md', '2015-09-02-release-1.4.0-incubating.md', '_gridism.scss', 'index.md', 'doap_calcite.rdf', 'fontawesome-webfont.svg', 'index.html', 'index.md']"
02cfd7fdacb2f43ed06f2ebb32cf3205ca26df95,"Linq4j: Implement EnumerableDefaults methods (MiNG)

Methods are:
* ""defaultIfEmpty""
* ""elementAt"" and ""elementAtOrDefault""
* ""last"" and ""lastOrDefault""
* ""selectMany""
* ""sequenceEqual""
* ""groupBy"" and ""groupByK""
* ""groupJoin""
* ""toMap""
* ""zip""

Fix up, removing unnecessary @Override annotations and type
parameters, and some problems on JDK 1.7. (Julian Hyde)

Close apache/incubator-calcite#132",['aaac1d23a95d6b42c1866bd95db7d3bce2f2d788'],False,"['QueryableRelBuilder.java', 'DefaultEnumerable.java', 'DefaultQueryable.java', 'EnumerableDefaults.java', 'EnumerableQueryable.java', 'ExtendedEnumerable.java', 'ExtendedQueryable.java', 'QueryableFactory.java', 'QueryableRecorder.java', 'Linq4jTest.java']"
a1e0b0068f585cfd5e2ffb2b4747d8b62c7d19df,"[CALCITE-897] Enable debugging using ""-Dcalcite.debug""",['0715f5b55f363a58e3dd8c20caac0024e19be413'],False,"['CalcitePrepareImpl.java', 'Util.java']"
815fa262b83d5a864b1eacdc3661df3b04704c20,"[CALCITE-828] Use RelBuilder in rules rather than type-specific RelNode factories

All rules now have a RelBuilderFactory, from which RelOptCall can
create a RelBuilder. All built-in rules that took a relational
expression factory (for example ProjectFactory) now use the RelBuilder.
We have converted some, but not all, other implicit uses of a factory.

We now recommend that any rules that are generic have a
RelBuilderFactory constructor parameter, but we have not changed
existing rules to implement this policy. People will need to adapt
rules and write tests to ensure the rules are generic.

Add various methods to RelBuilder.

Mostly we add new rule constructors and deprecate the old constructor.
But a few breaking changes:
* Rename ProtoRelBuilder to RelBuilderFactory;
* Rename DEFAULT_PROTO to LOGICAL_BUILDER;
* Change signature of TableScan.project method;
* Change signature of RelFieldTrimmer constructor;
* Add filter argument to RelBuilder.aggregateCall method.

Also, not an API change, but a change in behavior: RelBuilder methods
to create set operations (union, except, intersect) get their
left-to-right arguments by reading the oldest-to-newest stack elements.",['a1e0b0068f585cfd5e2ffb2b4747d8b62c7d19df'],False,"['Contexts.java', 'RelOptRule.java', 'RelOptRuleCall.java', 'RelOptUtil.java', 'RelFactories.java', 'TableScan.java', 'LogicalWindow.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateJoinTransposeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'CalcRelSplitter.java', 'CalcSplitRule.java', 'FilterAggregateTransposeRule.java', 'FilterCorrelateRule.java', 'FilterJoinRule.java', 'FilterMergeRule.java', 'FilterProjectTransposeRule.java', 'FilterSetOpTransposeRule.java', 'JoinCommuteRule.java', 'JoinProjectTransposeRule.java', 'JoinPushExpressionsRule.java', 'JoinPushThroughJoinRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToCorrelateRule.java', 'LoptOptimizeJoinRule.java', 'MultiJoinOptimizeBushyRule.java', 'ProjectMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'ProjectSortTransposeRule.java', 'ProjectToWindowRule.java', 'SemiJoinProjectTransposeRule.java', 'SortJoinTransposeRule.java', 'SortProjectTransposeRule.java', 'UnionMergeRule.java', 'UnionToDistinctRule.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'RelBuilderFactory.java', 'JdbcAdapterTest.java', 'RelBuilderTest.java', 'SqlToRelTestBase.java', 'PlannerTest.java', 'RelOptRulesTest.xml', 'MongoAdapterIT.java', 'algebra.md']"
d697ca16456424f04ad81e550ee19f677c7520b2,"Improve [CALCITE-895] fix, visiting the whole expression via a shuttle",['2fa63dda5809d519dc60aa36f464476bed961df3'],False,['ReduceExpressionsRule.java']
538a7df8636e7e76ef3a7ae8964065efbbefa634,"[CALCITE-866] Break out Avatica documentation and add JSON reference (Josh Elser)

Close apache/incubator-calcite#137",['1c292a9d5225f495d319aaa581185a18ae4502aa'],False,"['docs.yml', 'avatica_json_reference.md', 'avatica_overview.md', 'avatica_roadmap.md', 'docs_ul.html']"
4000edd8e69956cdc6a95f3c8d6292d648c0bb32,"[CALCITE-910] Improve handling of ARRAY, MULTISET, STRUCT types

[CALCITE-877] Allow ROW as argument to COLLECT

Add annotation classes for map and array types.

Convert multisets of POJOs to lists of lists, otherwise the
code generator doesn't know the record representation.

Fix muddled columns when RelFieldTrimmer is applied to Aggregate.",['8f2b32cda8ae95e66490a83c8ef17411e66e1095'],False,"['Meta.java', 'AbstractCursor.java', 'ArrayImpl.java', 'StructImpl.java', 'EnumerableCollect.java', 'EnumerableRelImplementor.java', 'EnumerableTableScan.java', 'EnumerableUncollect.java', 'RexImpTable.java', 'Array.java', 'Map.java', 'CalciteResultSet.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'CalcitePrepareImpl.java', 'RelDataTypeFactoryImpl.java', 'SqlFunctions.java', 'ArraySqlType.java', 'RelFieldTrimmer.java', 'BuiltInMethod.java', 'JdbcTest.java', 'misc.oq', 'Types.java']"
26f303e8334c44567b7584b2525f726919740b72,Fix Piglet DUMP applied to multisets and structs,['c050790ffd0b6e8def3ace995ac9a75c2b923c28'],False,"['PigRelBuilder.java', 'CalciteHandler.java', 'PigletTest.java']"
73e81ac2608605c4df0792b0df17c93db0ad7a58,"[CALCITE-905] getTables returns empty result in JdbcMeta (Jan Van Besien)

Fix instructions for installing protobuf.",['26f303e8334c44567b7584b2525f726919740b72'],False,"['JdbcMeta.java', 'RemoteDriverTest.java', 'Common.java', 'Requests.java', 'Responses.java', 'Service.java', 'requests.proto', 'howto.md']"
b1e91e1e6b3cb240899ce4448cea0c22c2ebce30,"[CALCITE-914] Add JsonSubType for ExecuteResponse, and fix JSON docs (Josh Elser)

Close apache/incubator-calcite#143",['6385cf5d0d7a4e9c4414b5d8214f039bc1a03787'],False,"['Service.java', 'avatica_json_reference.md']"
f5f83e5df2ada64bfc211952f2f273619d94d3ae,"Add a table function to generate mazes with solutions

The solver used to be recursive, but blew the stack at 300k cells.
Now we can generate and solve 100m cell mazes in 1 minute.",['5eb395c9ff5f60a409332b1a32536629d2d3f92e'],False,"['Maze.java', 'MazeTable.java', 'ExampleFunctionTest.java', 'model.json']"
cee8e8448c314753dacda8f880fac2bcab701f08,"[CALCITE-705] DML in Avatica, and split Execute out from Fetch request (Yeong Wei)

Add support for DML statements (INSERT, UPDATE, DELETE),
Statement.executeUpdate returns int update count.

Add new 'Execute' request that binds parameters. This used to occur
implicitly during first Fetch; Fetch no longer takes parameters.

Add statement type. If signature is null then defaults to
Meta.StatementType.SELECT.

Add testRemoteStatementInsert for JSON and PROTOBUF serialization test.

In JsonHandlerTest, replace testFetchRequestWithNumberParameter
with testExecuteRequestWithNumberParameter.

Cosmetic fix-ups by Julian Hyde.

Close apache/incubator-calcite#145
Close apache/incubator-calcite#154",['f5f83e5df2ada64bfc211952f2f273619d94d3ae'],False,"['JdbcMeta.java', 'JdbcResultSet.java', 'RemoteDriverTest.java', 'RemoteMetaTest.java', 'AvaticaConnection.java', 'AvaticaPreparedStatement.java', 'AvaticaStatement.java', 'Meta.java', 'MetaImpl.java', 'Common.java', 'Requests.java', 'AbstractService.java', 'JsonService.java', 'LocalService.java', 'MockProtobufService.java', 'ProtobufService.java', 'ProtobufTranslationImpl.java', 'RemoteMeta.java', 'Service.java', 'AbstractCursor.java', 'common.proto', 'requests.proto', 'ProtobufHandlerTest.java', 'ProtobufTranslationImplTest.java', 'JsonHandlerTest.java', 'CalciteConnectionImpl.java', 'CalciteMetaImpl.java', 'CalcitePrepare.java', 'RelOptUtil.java', 'CalcitePrepareImpl.java', 'CalciteRemoteDriverTest.java', 'JdbcFrontLinqBackTest.java']"
9a410f5d61e5af24f130f2d5047d64e2c6ae341e,Fix tests that wrongly used executeQuery to execute INSERT statements,['cee8e8448c314753dacda8f880fac2bcab701f08'],False,"['CalciteAssert.java', 'JdbcFrontLinqBackTest.java']"
4f415b24e52511eb9ef1faaf2b274f0241dcde5b,"[CALCITE-666] Anti-semi-joins against JDBC adapter give wrong results (Yeong Wei)

This issue has been fixed for some time. This commit just contains test cases.",['9a410f5d61e5af24f130f2d5047d64e2c6ae341e'],False,['JdbcAdapterTest.java']
a6f65dc97ac578c886544b961cb4db40e90bcccf,"[CALCITE-923] Type mismatch when converting LEFT join to INNER

We were not fixing up nullability of the ON clause. Test case is as for [CALCITE-666].",['4f415b24e52511eb9ef1faaf2b274f0241dcde5b'],False,"['FilterJoinRule.java', 'RexUtil.java']"
afd7e2e213d8db6a2a1689bb0e9842833178ff1b,"[CALCITE-927] Call finagle for all calls that return ResultSetResponses (Josh Elser)

Fix ProtobufService, add a MockDriver test.

Close apache/incubator-calcite#157",['ee0e824d1246bb3ac4da3bfd2757d390f8ca6583'],False,"['RemoteDriverMockTest.java', 'RemoteMetaTest.java', 'AbstractService.java', 'JsonService.java', 'MockJsonService.java', 'MockProtobufService.java', 'ProtobufService.java']"
56a612af4c537b2f9cab0e1979a28ded20ae59d8,"[CALCITE-919] Avoid setScale on BigDecimal when scale=0 (Josh Elser)

Close apache/incubator-calcite#148",['afd7e2e213d8db6a2a1689bb0e9842833178ff1b'],False,"['AbstractCursor.java', 'NumberAccessorTest.java']"
5ed5ef46909774c6284a6a7521cc3b2c0d23177a,"[CALCITE-930] Now Calcite is a top-level project, remove references to ""incubating""

 Also remove ""incubator"", incubation disclaimer, fix URLs and mailing list names

 Update the PMC list",['9db3b023d003b44b005cff5013ffe1ef4f00f221'],False,"['.travis.yml', 'DISCLAIMER', 'README', 'README.md', 'JsonRoot.java', 'package-info.java', 'pom.xml', 'README.md', '_config.yml', 'contributors.yml', 'adapter.md', 'api.md', 'contributing.md', 'downloads.md', 'history.md', 'howto.md', 'index.md', 'tutorial.md', '2014-06-27-release-0.8.0-incubating.md', '_style.scss', 'index.md', 'doap_calcite.rdf', 'index.md', 'index.html']"
d50c46a1a970c6bad47f31c1dfc56a14146c37f3,[CALCITE-932] Fix muddled columns when RelFieldTrimmer is applied to Aggregate,['5ed5ef46909774c6284a6a7521cc3b2c0d23177a'],False,['RelFieldTrimmer.java']
a63639b1ab7c52f5b425a69359d66ce08ee59bbc,"[CALCITE-912] Add Avatica OpenConnectionRequest (Bruno Dumon)

Goal: passing of connection properties (the 'info') from the remote
avatica driver to the corresponding server-side connection.

Changes include:
 * in Meta: explicit opening of connections: there is a new
   openConnection() call. Client decides on the connection id.
   Implicit creation of unknown connections is gone.
 * JdbcMeta: default connection is gone, all methods have been
   extended with a connection id.
 * correspondingly, the various Service.Request's now carry a
   connection id (will make fixing CALCITE-871 easy)
 * (unrelated, but was useful for testing) more meaningful error
   messages in remote driver",['d50c46a1a970c6bad47f31c1dfc56a14146c37f3'],False,"['pom.xml', 'JdbcMeta.java', 'AvaticaHandler.java', 'AvaticaProtobufHandler.java', 'RemoteDriverMockTest.java', 'RemoteDriverTest.java', 'RemoteMetaTest.java', 'AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'Meta.java', 'MetaImpl.java', 'Requests.java', 'Responses.java', 'Driver.java', 'JsonHandler.java', 'JsonService.java', 'LocalService.java', 'MockJsonService.java', 'MockProtobufService.java', 'ProtobufService.java', 'ProtobufTranslationImpl.java', 'RemoteMeta.java', 'RemoteProtobufService.java', 'RemoteService.java', 'Service.java', 'requests.proto', 'responses.proto', 'ProtobufTranslationImplTest.java', 'JsonHandlerTest.java', 'CalciteMetaImpl.java', 'pom.xml']"
5be93fb40e7b41fdeeef57e622118427a90cc037,"[CALCITE-645] Implement AvaticaSqlException to pass server-side exception information to clients (Josh Elser)

Created ErrorResponse to serve as the message to pass between client and server.
Attempted to introduce information necessary to fill out SQLException. Some refactoring
of the server Handlers was included to unify exception handling.",['a63639b1ab7c52f5b425a69359d66ce08ee59bbc'],False,"['JdbcMeta.java', 'AvaticaHandler.java', 'AvaticaProtobufHandler.java', 'RemoteMetaTest.java', 'AvaticaClientRuntimeException.java', 'AvaticaSeverity.java', 'AvaticaSqlException.java', 'AvaticaStatement.java', 'Helper.java', 'Meta.java', 'Common.java', 'Responses.java', 'AbstractHandler.java', 'AvaticaRuntimeException.java', 'Driver.java', 'Handler.java', 'JsonHandler.java', 'JsonService.java', 'LocalService.java', 'MockJsonService.java', 'MockProtobufService.java', 'ProtobufHandler.java', 'ProtobufService.java', 'RemoteProtobufService.java', 'RemoteService.java', 'Service.java', 'common.proto', 'responses.proto', 'AbstractHandlerTest.java', 'ErrorResponseTest.java', 'ProtobufHandlerTest.java', 'ProtobufTranslationImplTest.java', 'AvaticaClientRuntimeExceptionTest.java', 'AvaticaSeverityTest.java', 'AvaticaSqlExceptionTest.java', 'ExceptionMessageTest.java']"
86610552e3bcb47814db98108e7753320ad1af84,"[CALCITE-908] Bump protobuf to 3.0.0-beta-1, fix deprecations and update docs (Josh Elser)

Close apache/incubator-calcite#144",['5be93fb40e7b41fdeeef57e622118427a90cc037'],False,"['Common.java', 'Requests.java', 'Responses.java', 'ProtobufTranslationImpl.java', 'ProtobufTranslationImplTest.java', 'pom.xml', 'howto.md']"
690faa55f553fdaa86aa91a3f2c731d6c16007ca,"[CALCITE-935] Improve how ReduceExpressionsRule handles duplicate constraints (Pengcheng Xiong)

Add a test case making sure that non-equi constraints and identical constraints
do not prevent constant reduction.

Some fix up (Julian Hyde)",['c5f2599f493ecdd12494e6cb0bb36ee0f09fe857'],False,"['ReduceExpressionsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
6f326d0391923f4c4af5f9e60eb2ce263fdad081,"[CALCITE-921] Fix incorrectness when calling getString() on binary data (Josh Elser)

Close apache/incubator-calcite#160",['bf178d55f88c317f36c68807649d35d3e0614e6a'],False,"['RemoteMetaTest.java', 'AbstractService.java', 'JsonService.java', 'ProtobufService.java', 'AbstractCursor.java']"
4c3eb7cdc4f59509799511597ee2cdf10cd1f548,Fix Windows issues (line endings and checkstyle suppressions),['5c45547582d8a05fc929c97d0930122a15817fdd'],False,"['PigRelBuilderTest.java', 'Fluent.java', 'suppressions.xml']"
b82704f8c1a1559b4b2a04315ae934851a4a74eb,"[CALCITE-951] Print the server-side stack in the local exception (Josh Elser)

The AvaticaSqlException has a string representation of the stack
trace from the server, but didn't explicitly add it when printing
its own stacktrace.

Close apache/calcite#165",['2fd8c5a462a4369a267cfc118fa87b03ccba6478'],False,"['RemoteMetaTest.java', 'AvaticaSqlException.java']"
a4844695becdca9c4342e56821ffc31d3ce78640,Fix Windows test failure,['ac8d04ed95589f29571b7de3c220876c3ebc3a00'],False,['JdbcTest.java']
8cd8ad9259bbab48b8794e6033eafddc2d611698,[CALCITE-979] Broken links in web site,['c7809245478a74b3e574f2899589d83dfb27817f'],False,"['package-info.java', 'package-info.java', 'algebra.md', 'history.md', 'howto.md', 'index.md', 'lattice.md', 'model.md']"
16478ee19e53bd20c249170de2a5e7e83a68b1d3,"Factor user-defined function tests from JdbcTest to UdfTest, and classes into Smalls

No functionality changes.",['4e61eae560f5e2e46ca96a1002522cd1a3317a4e'],False,"['CalciteSuite.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java', 'UdfTest.java', 'Smalls.java']"
d3c5acd3a95e1926e0985e99a2d802a60e096b32,"[CALCITE-966] VolcanoPlanner should clear ruleNames in order to avoid rule name conflicting error

close apache/calcite#167",['3e49bc4384ae51732f8b3589c4a0db77001f1890'],False,"['VolcanoPlanner.java', 'PlannerTest.java']"
3be816f450450e8e43286e6ea208af6e30520146,"[CALCITE-989] Add server's address in each response

If the clients knows what server processed a response, the
client do perform their own load-balancing.

Fix some server Handler class hierarchy to make more sense
supporting both json and protobuf.",['81b487684f9a0781d6e58494cba1b690ff42c028'],False,"['AvaticaHandler.java', 'AvaticaJsonHandler.java', 'AvaticaProtobufHandler.java', 'DelegatingAvaticaHandler.java', 'HandlerFactory.java', 'HttpServer.java', 'Main.java', 'AlternatingRemoteMetaTest.java', 'RemoteMetaTest.java', 'HandlerFactoryTest.java', 'AvaticaClientRuntimeException.java', 'AvaticaSqlException.java', 'Helper.java', 'Responses.java', 'AbstractHandler.java', 'AbstractService.java', 'Handler.java', 'LocalService.java', 'MockProtobufService.java', 'ProtobufTranslationImpl.java', 'Service.java', 'responses.proto', 'ErrorResponseTest.java', 'ProtobufHandlerTest.java', 'ProtobufTranslationImplTest.java', 'AvaticaClientRuntimeExceptionTest.java', 'AvaticaSqlExceptionTest.java', 'JsonHandlerTest.java']"
d259cad23d396cef213f6e773f2e22e205f4230c,[CALCITE-989] Fix some bugs found by static analysis,['14419d8c360da8bdfa9d29f8c1d2fff357106db0'],False,['Service.java']
cd58fe73f29dd576ac2525f22c34e9b3d4df1913,"[CALCITE-983] Handle nulls in ErrorResponse's protobuf representation better

Added some more unit tests to make sure null attributes aren't
causing failures in ErrorResponse (and thus causing the client
to choke). Also fixed a broken hashCode and added toString.",['d259cad23d396cef213f6e773f2e22e205f4230c'],False,"['Responses.java', 'Service.java', 'responses.proto', 'ProtobufTranslationImplTest.java']"
e9d506021252e1da6c09cebad3f747cd0e627d90,"[CALCITE-968] Stream-to-relation and stream-to-stream joins (Milinda Pathirage)

Rule to transform Delta(Scan(constant-table)) to Empty;
fix NullPointerException in PruneEmptyRules.",['9c86556ff397f2548bffe90e7e338774d329211d'],False,"['PruneEmptyRules.java', 'StreamRules.java', 'CalciteResource.java', 'SqlValidatorImpl.java', 'CalciteResource.properties', 'SqlAdvisorTest.java', 'MockCatalogReader.java', 'SqlValidatorTest.java', 'StreamTest.java']"
937fc461a375818921e8147c2d23e26b7e8dfca0,Fix up [CALCITE-968],['e9d506021252e1da6c09cebad3f747cd0e627d90'],False,"['StreamRules.java', 'CalciteResource.java', 'SqlValidatorImpl.java', 'CalciteResource.properties', 'MockCatalogReader.java', 'SqlValidatorTest.java', 'StreamTest.java']"
de3880298b180a38013c2a748758c863082ac272,[CALCITE-992] Validate and resolve sequence reference as a Table object,['937fc461a375818921e8147c2d23e26b7e8dfca0'],False,"['RexImpTable.java', 'CalcitePrepareImpl.java', 'Prepare.java', 'CalciteResource.java', 'SqlSequenceValueOperator.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'StandardConvertletTable.java', 'Util.java', 'CalciteResource.properties', 'UtilTest.java', 'sequence.oq']"
fa08c46d3f9b1d5bb6f8f2772effb76d02cecb9a,"[CALCITE-459] When parsing SQL, allow single line comment on last line (Zhen Wang)

Close apache/calcite#175

Unrelated PR I forgot to close in a previous change:

Close apache/calcite#172",['a850c41e2da262234475ec56383457475e9fabee'],False,"['Parser.jj', 'SqlParserTest.java']"
47e0e7c952aed22dd237529bb459a59580034f91,"Remove redundant code from RelToSqlConverter

Change default of Context.ignoreCast to false, otherwise
JdbcTest.testVarcharEquals fails. Strip casts inside comparisons.

Use dispatcher rather visitor pattern.

JdbcRel.implement methods delegate to JdbcImplementor (using code
inherited from RelToSqlConverter).",['980d9f811af4e0ff32fc1487e469a51585db48a6'],False,"['JdbcImplementor.java', 'JdbcRules.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'CalciteSuite.java']"
963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb,"[CALCITE-980] Fix AND and OR implementation in Enumerable convention

Previously it could fail with NPE or return wrong result

fixes #169",['47e0e7c952aed22dd237529bb459a59580034f91'],False,"['RexImpTable.java', 'JdbcTest.java', 'ReflectiveSchemaTest.java', 'conditions.oq']"
f12aa72ec79f8300be6441c1afd83c908f9fe0be,"[CALCITE-1015] OFFSET 0 causes AssertionError (Zhen Wang)

Close apache/calcite#181",['5197a714705c7bfaa6a46a0907267b47870b18d1'],False,"['SqlToRelConverter.java', 'RelBuilder.java', 'JdbcTest.java', 'RelBuilderTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'sort.iq']"
1c5eddd0494f8b292736a4c6e300da4c697235f0,"[CALCITE-984] Massive cleanup of Avatica JSON docs

* Added docs for many missing messages
* Ensured Requests/Responses/Misc were sorted alphabetically
* Added missing `rpcMetadata` fields
* Changed styling of enum list items",['1bbb6a2b97bf3da149c5f878b2d59ceafa737521'],False,['avatica_json_reference.md']
eaa35a41b4df6474c50e4b7437d8c1834265661f,"[CALCITE-1032] Verify javadoc of private methods

Verification happens when you run ""mvn javadoc:javadoc"". ""mvn site""
still just generates public javadoc.

Change Travis to verify private methods.

Fix all outstanding errors.

Upgrade to junit-4.12.",['1c5eddd0494f8b292736a4c6e300da4c697235f0'],False,"['.travis.yml', 'DelegatingAvaticaHandler.java', 'AvaticaConnection.java', 'ConnectStringParser.java', 'MetaImpl.java', 'AbstractCursor.java', 'DateTimeUtils.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'CalciteMaterializer.java', 'RelXmlWriter.java', 'RelMdPredicates.java', 'LoptOptimizeJoinRule.java', 'ReduceDecimalsRule.java', 'RexMultisetUtil.java', 'SqlJdbcFunctionCall.java', 'BitSets.java', 'ImmutableBitSet.java', 'pom.xml']"
c8709f3874740f198b7423d1acc7d31b423725a3,"[CALCITE-1034] Use a custom checker for code style rules that Checkstyle cannot express

Fix code style to match rules.",['60b2825c8a49c62ea3caf2212521809ebc545bd8'],False,"['RemoteMetaTest.java', 'Service.java', 'Lattice.java', 'VolcanoPlanner.java', 'JdbcTest.java', 'TestUtil.java', 'MongoAdapterIT.java', 'pom.xml', 'SplunkConnectionImpl.java', 'checker.xml']"
f0899a69372ed8eddc714c5dfd53d208a935ef23,"Following [CALCITE-989], make all equals and hashCode methods uniform

Fix a bug in SchemasRequest.equals.",['c8709f3874740f198b7423d1acc7d31b423725a3'],False,['Service.java']
808d540b3df47d98b25eeb83ee8f407909ba8c3a,Fix variant of [CALCITE-923] that occurs in RelOptRulesTest.testPushFilterPastProject,['39f505fa9def053be54b548c030acb3e3973aa02'],False,"['FilterJoinRule.java', 'RelOptTestBase.java', 'SqlToRelTestBase.java']"
d4bbf58d6e5f4f67ebae412b5a1aae23769eccb7,"[CALCITE-1041] User-defined function that returns DATE or TIMESTAMP value

Rationalize code that translates to an from internal representation (e.g. DATE stored as int).

Fix an bug with overloaded UDFs, and a bug with UDF args of type SMALLINT (short).

Deprecate Utilities.equal.

Add methods to in BuiltInMethod.",['efb668bb58cdc85e85facba3ec2365549778eee8'],False,"['EnumUtils.java', 'EnumerableRelImplementor.java', 'PhysTypeImpl.java', 'ReflectiveCallNotNullImplementor.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'StrictAggImplementor.java', 'CalciteCatalogReader.java', 'FlatLists.java', 'SqlFunctions.java', 'Utilities.java', 'SqlUtil.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeUtil.java', 'BuiltInMethod.java', 'CalciteAssert.java', 'UdfTest.java', 'Smalls.java']"
894dd9b522228f43d26eba8fabcf244a33029d19,Fix RelToSqlConverterTest on Windows,['d4bbf58d6e5f4f67ebae412b5a1aae23769eccb7'],False,['RelToSqlConverterTest.java']
ba1eee121c52ab0c2891fd4faa423e0a55f5b5f9,"Fix ""endPosTable already set"" from javac

Non clean build fails with javac exception.
It is believed that the cause is that Maven tries to run annotation pre-proessor over already pre-processed files.
Running annotation again is not allowed, thus javac failure.

The workaround is to clean ubenchmark/target directory on validate to avoid incremental compilations

More info here: https://bugs.openjdk.java.net/browse/JDK-8067747?focusedCommentId=13872639&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13872639

Exception:
An exception has occurred in the compiler (1.8.0_66). Please file a bug at the Java Bug Database (http://bugreport.java.com/bugreport/) after checking the database for duplicates. Include your program and the following diagnostic in your report.  Thank you.
java.lang.IllegalStateException: endPosTable already set
	at com.sun.tools.javac.util.DiagnosticSource.setEndPosTable(DiagnosticSource.java:136)
	at com.sun.tools.javac.util.Log.setEndPosTable(Log.java:350)
	at com.sun.tools.javac.main.JavaCompiler.parse(JavaCompiler.java:667)
	at com.sun.tools.javac.main.JavaCompiler.parseFiles(JavaCompiler.java:950)
	at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.<init>(JavacProcessingEnvironment.java:892)
	at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.next(JavacProcessingEnvironment.java:921)
	at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1187)
	at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1170)
	at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:856)
	at com.sun.tools.javac.main.Main.compile(Main.java:523)
	at com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:129)
	at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:138)
	at org.codehaus.plexus.compiler.javac.JavaxToolsCompiler.compileInProcess(JavaxToolsCompiler.java:125)
	at org.codehaus.plexus.compiler.javac.JavacCompiler.performCompile(JavacCompiler.java:169)
	at org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:823)
	at org.apache.maven.plugin.compiler.CompilerMojo.execute(CompilerMojo.java:129)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:862)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:286)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)",['4a29b3ccf64e9a7d1534f540fd7f6d3d813605a0'],False,['pom.xml']
4762b889699f5fb963749dca8b3106c17f44f2a9,"[CALCITE-854] Implement UNNEST ... WITH ORDINALITY

Also allow UNNEST applied to ARRAY types, and lay groundwork for UNNEST with more than one argument.

Improve the error location for the ""List of column aliases must have same degree as table"" message.",['8bc5f8538f5c284e93ddc4ecfb59dab9458117f7'],False,"['Parser.jj', 'EnumerableUncollect.java', 'EnumerableUncollectRule.java', 'PhysType.java', 'PhysTypeImpl.java', 'CalcitePrepareImpl.java', 'Uncollect.java', 'ProjectMergeRule.java', 'SqlUnnestOperator.java', 'SqlArrayQueryConstructor.java', 'SqlArrayValueConstructor.java', 'SqlMultisetQueryConstructor.java', 'SqlStdOperatorTable.java', 'AbstractNamespace.java', 'AliasNamespace.java', 'UnnestNamespace.java', 'SqlToRelConverter.java', 'SqlParserTest.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'reference.md']"
cd92b77c476f7b095b330507402bfc6c3208e300,Fix NullPointerException in SqlJoin.toString,['239babd8fc26bf35be96a77fbfbea379138f3a37'],False,"['SqlJoin.java', 'SqlWriter.java', 'SqlPrettyWriter.java']"
505a9064b96a6c8399735fc2fa4d0ac9d5f3ed87,"[CALCITE-816] Represent sub-query as a RexNode

Reduce 3-value logic to 1- or 2-value logic.

Optimize certain IN and EXISTS to an inner join.

Represent correlation variables using CorrelationId wherever possible.

In Join, replace field ""ImmutableSet<String> variablesStopped"" with
""ImmutableSet<CorrelationId> variablesSet"". RelNode.getVariablesSet
is now preferred to RelNode.getVariablesStopped.

Make Join.joinType final.

Verify in builder that there are no correlation variables where there
shouldn't be.

Refactor decorrelator.

Logged [CALCITE-1045] for remaining work.",['cd92b77c476f7b095b330507402bfc6c3208e300'],False,"['EnumerableJoin.java', 'EnumerableJoinRule.java', 'EnumerableMergeJoin.java', 'EnumerableMergeJoinRule.java', 'EnumerableThetaJoin.java', 'RexImpTable.java', 'JdbcRules.java', 'Bindables.java', 'Lattice.java', 'RelOptCluster.java', 'RelOptQuery.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java', 'Prepare.java', 'AbstractRelNode.java', 'RelNode.java', 'Correlate.java', 'CorrelationId.java', 'EquiJoin.java', 'Join.java', 'RelFactories.java', 'SemiJoin.java', 'RelJson.java', 'LogicalCalc.java', 'LogicalCorrelate.java', 'LogicalFilter.java', 'LogicalJoin.java', 'RelMdUniqueKeys.java', 'EquiJoin.java', 'JoinToCorrelateRule.java', 'JoinUnionTransposeRule.java', 'SubQueryRemoveRule.java', 'StreamRules.java', 'LogicVisitor.java', 'RexBiVisitor.java', 'RexBuilder.java', 'RexCall.java', 'RexCorrelVariable.java', 'RexDynamicParam.java', 'RexFieldAccess.java', 'RexInputRef.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexNode.java', 'RexOver.java', 'RexProgram.java', 'RexRangeRef.java', 'RexShuttle.java', 'RexSubQuery.java', 'RexUtil.java', 'RexVisitor.java', 'RexVisitorImpl.java', 'SchemaPlus.java', 'SqlKind.java', 'SqlValidatorImpl.java', 'DeduplicateCorrelateVariables.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'Programs.java', 'RelBuilder.java', 'Bug.java', 'CalciteAssert.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'LatticeTest.java', 'ReflectiveSchemaTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexTransformerTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorTest.java', 'EnumerableCorrelateTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'join.iq', 'misc.iq', 'subquery.iq', 'reference.md']"
cabdcf44e4aec4d4ceea7f97c8c6fd9e9dbd36b1,"[CALCITE-794] Detect cycles when computing statistics

Make RelMetadataQuery methods non-static. Each active call is
registered in the RelMetadataQuery instance; it throws
CyclicMetadataException when it detects a cycle, and the caller can
catch it to return a sensible default value for the particular kind of
metadata.

Change signature of FlatLists.of(Object...) to
FlatLists.copyOf(Comparable...).

Temporarily disable all failing tests.

Add metadata for EnumerableLimit.",['2cef85941359c530e7f0ed40265ce3c6f9db6bf8'],False,"['EnumerableCalc.java', 'EnumerableFilter.java', 'EnumerableInterpreter.java', 'EnumerableJoin.java', 'EnumerableLimit.java', 'EnumerableMergeJoin.java', 'EnumerableProject.java', 'EnumerableSemiJoin.java', 'EnumerableThetaJoin.java', 'EnumerableValues.java', 'EnumerableWindow.java', 'JavaRowFormat.java', 'PhysTypeImpl.java', 'JdbcRules.java', 'JdbcToEnumerableConverter.java', 'Bindables.java', 'AbstractRelOptPlanner.java', 'ConventionTraitDef.java', 'RelOptCost.java', 'RelOptPlanner.java', 'HepPlanner.java', 'HepRelMetadataProvider.java', 'HepRelVertex.java', 'AbstractConverter.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'VolcanoRelMetadataProvider.java', 'PlannerImpl.java', 'AbstractRelNode.java', 'RelNode.java', 'SingleRel.java', 'ConverterImpl.java', 'Aggregate.java', 'Calc.java', 'Correlate.java', 'Exchange.java', 'Filter.java', 'Intersect.java', 'Join.java', 'Minus.java', 'Project.java', 'SemiJoin.java', 'Sort.java', 'TableFunctionScan.java', 'TableModify.java', 'TableScan.java', 'Union.java', 'Values.java', 'Window.java', 'RelWriterImpl.java', 'LogicalCalc.java', 'LogicalFilter.java', 'LogicalProject.java', 'LogicalTableFunctionScan.java', 'LogicalValues.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'CyclicMetadataException.java', 'Metadata.java', 'MetadataFactory.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelMdCollation.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdDistribution.java', 'RelMdExplainVisibility.java', 'RelMdMaxRowCount.java', 'RelMdMemory.java', 'RelMdParallelism.java', 'RelMdPercentageOriginalRows.java', 'RelMdPopulationSize.java', 'RelMdPredicates.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdSize.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'UnboundMetadata.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinTransposeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'JoinPushTransitivePredicatesRule.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MultiJoinOptimizeBushyRule.java', 'ReduceExpressionsRule.java', 'SortJoinTransposeRule.java', 'SortUnionTransposeRule.java', 'SubQueryRemoveRule.java', 'FlatLists.java', 'StarTable.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'Bug.java', 'BuiltInMethod.java', 'NumberUtil.java', 'TraitPropagationTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'RelMetadataTest.java', 'PlannerTest.java', 'UtilTest.java', 'agg.iq', 'MongoFilter.java', 'MongoProject.java', 'MongoSort.java', 'MongoTableScan.java', 'MongoToEnumerableConverter.java', 'EnumerableToSparkConverter.java', 'JdbcToSparkConverter.java', 'SparkRules.java', 'SparkToEnumerableConverter.java']"
361096ba1d0436f588e4c7a3290560059882223f,"[CALCITE-1040] Differentiate better between arrays and scalars in protobuf

The original implementation of ColumnValue tried to always use a repeated
field to serialize the value of a column in a row. This was flawed for
multiple reasons. Instead, go the ""struct"" approach like TypedValue.

Since we're using protobuf, make the attempt to support the Calcite
1.5 structure (avoid removing the old field).",['0045e01f6178df5bcc8caf780040f3cff159bb20'],False,"['Meta.java', 'Common.java', 'common.proto', 'FrameTest.java', 'ProtobufHandlerTest.java', 'ProtobufTranslationImplTest.java', 'avatica_protobuf_reference.md']"
e15f89e5823104f0890ee92675cc0da45dcec4ca,"Upgrade toolbox, to fix line length issue on Windows",['b4b04d29cb63ceea123ec41dd3247a0555f9c150'],False,['pom.xml']
2712d7dafc1b724c33b0c29846666c1903d5afb2,"[CALCITE-1053] CPU spin in ReflectiveRelMetadataProvider.apply -> HashMap.get

The map in question is shared between multiple threads and updated at the same time.
Thus the map should be a ConcurrentMap.

Problem was reported here: https://mail-archives.apache.org/mod_mbox/calcite-dev/201601.mbox/%3C56952E8F.7090705%40gmail.com%3E",['5323d8d48baa2d7bc8dea8b03bc0bda93563e0f9'],False,['ReflectiveRelMetadataProvider.java']
3cba7055061108ce0e079d8756bcfb020b8628c3,"[CALCITE-1047] ChunkList.clear throws AssertionError

Re-work ChunkList with a more robust implementation of ListIterator and more thorough tests.",['2712d7dafc1b724c33b0c29846666c1903d5afb2'],False,"['ChunkList.java', 'ChunkListTest.java']"
898fdfc2720770ec4752fb702ce0aae1521aa07d,"[CALCITE-978] Enable customizing constant folding rule behavior when a Filter simplifies to false (Jason Altekruse)

For static schema systems, a Filter that is always false or null can be
replaced by a Values operator that produces no rows, as the schema
information can just be taken from the input Rel. In dynamic schema
environments, the filter might have an unknown input type, in these cases
they must define a system specific alternative to a Values operator, such
as inserting a Limit 0 instead of a Filter on top of the original input.

This change enables this behavior to be customized by a subclass of the
constant reduction rules.

Close apache/calcite#183",['ee283cadf17d8add8e8ea2bf1f8dd5735f05dc1d'],False,['ReduceExpressionsRule.java']
62576556abd0467eba7c964a90b9dc2178807f7a,"[CALCITE-1060] Fix test deadlock by initializing DriverManager before registering AlternatingDriver

Early DriverManager initialization is required to prevent
Driver.<clinit> -> DriverManager.findServiceProviders -> Class.forName(""Driver"")
deadlock.

Note: proper resolution might need to add an entry for
""AlternatingDriver"" to the service manifest.

Close apache/calcite#185",['af77ec861989c50229c55be1889efcb0031cfd32'],False,['AlternatingRemoteMetaTest.java']
d80e26c016babcb250e41b0abe94b8b0cfadbbe7,"[CALCITE-864] Correlation variable has incorrect row type if it is populated by right side of a Join

Also fixes [CALCITE-559], apparently a duplicate issue.",['999021115689521694754d1c766feda6da467e8d'],False,"['RelDataTypeFactory.java', 'SqlQualified.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'subquery.iq']"
82b586040ffbb4a7e46544b39b2dcc165d642430,"[CALCITE-551] Sub-query inside aggregate function

The bug seems to have been fixed by recent changes; this commit adds test cases.",['d80e26c016babcb250e41b0abe94b8b0cfadbbe7'],False,"['SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'agg.iq']"
4ec47270b199cef58c39f6bf07209c5fb40875ef,[CALCITE-1067] Test failures due to clashing temporary table names,['82b586040ffbb4a7e46544b39b2dcc165d642430'],False,"['RemoteDriverTest.java', 'RemoteMetaTest.java', 'AvaticaUtils.java', 'AvaticaUtilsTest.java']"
f55d10c147746d6299fb713adc184576380a1f49,[CALCITE-1068] Deprecate Stacks,['4ec47270b199cef58c39f6bf07209c5fb40875ef'],False,"['CalcitePrepare.java', 'ModelHandler.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'RelShuttleImpl.java', 'ReduceExpressionsRule.java', 'SqlIntervalLiteral.java', 'AggChecker.java', 'AggregatingSelectScope.java', 'OverScope.java', 'SelectScope.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'PartiallyOrderedSet.java', 'StackWriter.java', 'Stacks.java', 'XmlOutput.java', 'SqlPrettyWriterTest.java', 'MockCatalogReader.java']"
05a57992a45f9aa66db31355aa7733cfadafa1e1,"[CALCITE-669] Mass removal of Java Logging for SLF4J

Replace FINE with DEBUG, FINER and FINEST with TRACE.
Includes the slf4j-log4j12 binding for test-time. Attempts
remove all conditional logging blocks unless there is
a reason to keep them. Adds forward-looking documentation
for log-level changes.

Closes apache/calcite#186",['f55d10c147746d6299fb713adc184576380a1f49'],False,"['pom.xml', 'JdbcMeta.java', 'AvaticaJsonHandler.java', 'AvaticaProtobufHandler.java', 'DelegatingAvaticaHandler.java', 'HttpServer.java', 'log4j.properties', 'pom.xml', 'Driver.java', 'pom.xml', 'Parser.jj', 'EnumerableAggregateRule.java', 'EnumerableJoinRule.java', 'EnumerableMergeJoinRule.java', 'EnumerableRules.java', 'JdbcRules.java', 'Bindables.java', 'AbstractRelOptPlanner.java', 'RelOptPlanner.java', 'RelOptRuleCall.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'VisitorDataContext.java', 'HepPlanner.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'Prepare.java', 'AbstractRelNode.java', 'InvalidRelException.java', 'SqlImplementor.java', 'CalcRelSplitter.java', 'ValuesReduceRule.java', 'CalciteException.java', 'ResultSetEnumerable.java', 'SqlAdvisor.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'SqlValidatorException.java', 'SqlValidatorImpl.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'Benchmark.java', 'Util.java', 'CalciteLogger.java', 'CalciteTimingTracer.java', 'CalciteTrace.java', 'SqlValidatorTest.java', 'log4j.properties', 'pom.xml', 'MongoRules.java', 'log4j.properties', 'pom.xml', 'PigletParser.jj', 'log4j.properties', 'pom.xml', 'history.md', 'howto.md', 'pom.xml', 'SplunkPushDownRule.java', 'SplunkConnectionImpl.java', 'HttpUtils.java', 'StringUtils.java', 'log4j.properties', 'suppressions.xml']"
7ce2e62133be221e65d67250ad28809324d055c8,"[CALCITE-998] Exception when calling STDDEV_SAMP, STDDEV_POP (Matthew Shaer)

Close apache/calcite#191

Also, fix some javadoc,
and close an unrelated PR that was merged a while ago:

Close apache/calcite#174",['5324a3988c8ca354c7af771b124762be3002c648'],False,"['AggregateReduceFunctionsRule.java', 'Pair.java', 'SqlOperatorBaseTest.java', 'agg.iq', 'GroupingImpl.java']"
670fa73e24a7b72d6ddafd69793474083bb4b9f0,"[CALCITE-1083] SqlNode.equalsDeep has O(n ^ 2) performance

Cause of the problem is that Litmus.fail constructs an error message string, even if the particular implementation of Litmus does not use the string. Solution is to pass a format string and arguments, which are only converted to strings if the message is used, the same as SLF4J Logger does.",['e0f29dd797229a883d6461e75915cb376dd6b208'],False,"['RelOptUtil.java', 'Aggregate.java', 'Join.java', 'Project.java', 'RexChecker.java', 'RexLiteral.java', 'RexProgram.java', 'RexUtil.java', 'SqlBinaryOperator.java', 'SqlCall.java', 'SqlDataTypeSpec.java', 'SqlDynamicParam.java', 'SqlIdentifier.java', 'SqlIntervalQualifier.java', 'SqlLiteral.java', 'SqlNodeList.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'SqlInOperator.java', 'SqlStdOperatorTable.java', 'RelDecorrelator.java', 'Litmus.java']"
72b2cfb799242e0d1d7e6aed8bfe43cceb554c7c,"Fix up [CALCITE-1062]

Add SqlKind for ROW_NUMBER and other rank functions.

Use iterator rather than list when resolving operator overloads.",['c1ceba45e5939be812bbe0bba6ee27586862b8e0'],False,"['SqlFunction.java', 'SqlKind.java', 'SqlOperator.java', 'SqlRankFunction.java', 'SqlUtil.java', 'SqlStdOperatorTable.java', 'ReflectiveSqlOperatorTable.java', 'SqlToRelConverter.java']"
95fd04176576958c7766c98945186092ae226764,"[CALCITE-553] Enable compiler profiles by default

A number of profiles were conditionally enabled by default
in an attempt to make incremental compilation work. The
implementation ended up breaking standard maven convention
such as the inclusion of the ""clean"" lifecycle phase with
another lifecycle phase such as ""package"".

The profiles can still be disabled on the command line by
users who wish to do so (and know they haven't updated the
files).

Closes apache/calcite#196",['8bbef2d6fbba8547adc55dcbb7d5b07a7a5437bc'],False,"['pom.xml', 'howto.md', 'index.md']"
5fdc866b72739163a6a418ea7aa1a7f68812761e,"[CALCITE-1097] Exception when executing query with too many aggregation columns (chenzhifa)

Change the SyntheticRecordType class generated method to avoid using too many parameters.

Close apache/calcite#198",['19cfde74d726e5307276acb071c84441545b976e'],False,"['EnumerableAggregate.java', 'EnumerableRelImplementor.java', 'JdbcTest.java', 'Smalls.java']"
d14040c52f8b0bc351443cff1584e8b587378698,"[CALCITE-604] Tune metadata by generating a dispatcher at runtime

Currently we dispatch to metadata providers using reflection. With
this change, we generate a dispatcher class and compile using Janino.

Cache results within a metadata call. This should yield a performance
improvement when, say, a Join requires many kinds of metadata
(rowCount, averageRowSize, selectivity) and they all rely on the
rowCount of the input, and that rowCount is expensive to compute.",['8cba7fc421488cb27ce0756ecd2d422a71f72650'],False,"['RelOptCluster.java', 'RelOptMaterialization.java', 'HepRelMetadataProvider.java', 'VolcanoPlanner.java', 'VolcanoRelMetadataProvider.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'DefaultRelMetadataProvider.java', 'JaninoRelMetadataProvider.java', 'MetadataDef.java', 'MetadataHandler.java', 'NullSentinel.java', 'ReflectiveRelMetadataProvider.java', 'RelMdCollation.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdDistribution.java', 'RelMdExplainVisibility.java', 'RelMdMaxRowCount.java', 'RelMdMemory.java', 'RelMdParallelism.java', 'RelMdPercentageOriginalRows.java', 'RelMdPopulationSize.java', 'RelMdPredicates.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdSize.java', 'RelMdUniqueKeys.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'SqlToRelConverter.java', 'Programs.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java']"
8c90d862179f43ab8855f4ff50cbc1d5968b21a2,"[CALCITE-1109] Fix up condition when pushing Filter through Aggregate (Amogh Margoor)

Close apache/calcite#201",['25d1e42a7fb248d24caaaa949779e06056c9916c'],False,"['FilterAggregateTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
1a9be678313267963b82888a00878914d372d01c,[CALCITE-1086] Avoid sending Signature on Execute for updates,['8c90d862179f43ab8855f4ff50cbc1d5968b21a2'],False,"['AvaticaConnection.java', 'AvaticaPreparedStatement.java', 'AvaticaStatement.java', 'Meta.java']"
0de38aaa38e0dc43d21c0b2dac4278c67c1dc24c,"[CALCITE-1092] Use singleton descriptor instances for protobuf field presence checks

Protobuf uses a FieldDescriptor instance to identify an attribute in
some Message and exposes a single hasField method on Message which
accepts a FieldDescriptor. Profiling showed that the Avatica server
was spending a non-zero amount of time in HashMap operations to repeatedly
fetch the appropriate FieldDescriptor each time we were translating
a protobuf to a POJO.

We can reduce this cost by maintaining singletons of these FieldDescriptors
in the POJO class and avoid the repeated HashMap lookups.",['ea41b3412f099c8f1051f1b324b1ba03d644962a'],False,"['ColumnMetaData.java', 'ConnectionPropertiesImpl.java', 'Meta.java', 'ProtobufService.java', 'Service.java', 'ProtobufHandlerTest.java']"
1d3a26dfac17fea458402a637449007dc095bced,"[CALCITE-1094] Replace ByteArrayOutputStream to avoid synchronized writes

Pull in the ZeroCopyByteString class. We can cap the amount of byte[]'s
that we are making by providing a buffer to the current thread. This also
avoids any synchronization on a typical object pool.",['0de38aaa38e0dc43d21c0b2dac4278c67c1dc24c'],False,"['AvaticaJsonHandler.java', 'AvaticaProtobufHandler.java', 'HBaseZeroCopyByteString.java', 'package-info.java', 'AvaticaUtils.java', 'ProtobufTranslation.java', 'ProtobufTranslationImpl.java', 'RequestTranslator.java', 'Service.java', 'TypedValue.java', 'UnsynchronizedBuffer.java', 'ProtobufSerializationTest.java', 'UnsynchronizedBufferTest.java']"
cf5d07bde81a7c6a82bdab34ec798d0bf01ac01c,"In TimeUnit add WEEK, QUARTER, MICROSECOND values, and change type of multiplier",['eead3d21b0ef18f05029cefbb6b4fb888e75c548'],False,"['TimeUnit.java', 'TimeUnitRange.java', 'RexBuilder.java', 'StandardConvertletTable.java']"
7901eda051dc756ba5a985d1cf2fed1942459281,"[CALCITE-1064] Address problematic maven-remote-resources-plugin

The current configuration of the pom with this plugin was causing
the top-level module to pull down the artifacts that were about
to be built instead of using the artifacts after they were built.

By moving the remote-resources-plugin configuration to the apache-release
profile, this defers this check from running at the start
of the build, and generates a valid DEPENDENCIES file at the
end of the build when the reactor has all of the artifacts
which were just built.",['82c3b293b172364058cc29dada5794659db4e389'],False,"['pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml']"
48415a80b8f7f5763cbc3ba4e90c59e3dbeca389,"[CALCITE-1064] maven-remote-resources-plugin cleanup for Calcite

Same changes that I made to Avatica, apply them to Calcite.",['83a8e883a9a50b618d5892aa708f55a5dd1bd169'],False,"['pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml']"
6c9c3d66f0bf849096d9cf18e348c7369db07eb3,[CALCITE-1144] Fix LICENSE for Avatica,['b30e570fa0f250e0bcaef9cf680af0fa335d3855'],False,"['LICENSE', 'LICENSE']"
7ad5ae26794653b133c0e13c395666c0336b2a45,Fix branch-avatica-1.7 version,['a5d26f8694d6c0c54e0725fd69cc75e5f982bac2'],False,"['pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml']"
94f8837c4974edc33e58b16b9ee2f061125b9b60,"[CALCITE-1147] Allow multiple providers for the same kind of metadata

Make it possible to extend RelMetadataQuery for a user-defined metadata
type, and create a test case illustrating.

Give an explicit error when metadata provider does not have a RelNode
handler (that is, a safety net if there are no handlers for more specific
RelNode sub-classes).

Improve how we handle ExecutionException.",['22aa8a8072bd98d4d81d17aad7db5a972e03478e'],False,"['CachingLatticeStatisticProvider.java', 'HepRelMetadataProvider.java', 'VolcanoRelMetadataProvider.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'JaninoRelMetadataProvider.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'CalciteAssert.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'SqlToRelTestBase.java']"
500e2dc9f916e558a0dfaadde449436c4ed10425,Fix javadoc errors,['68a17fc91bcec738907e980c9ea3f97e44e875cf'],False,"['RelBuilderExample.java', 'RexProgramTest.java', 'ConcurrentTestTimedCommandGenerator.java', 'howto.md']"
83266054098220d33be02be38a8a230ca6d6fd38,"Add news item for release 1.7.0 and Cassandra adapter

Also:
* Fix up release notes;
* Make documentation links relative to site base URL;
* Link to Cassandra from Adapters page;
* Trim trailing spaces.",['00e755db100c4bccfb2976a03c4f75a2adfc69be'],False,"['adapter.md', 'cassandra.md', 'history.md', 'howto.md', 'stream.md', '2016-03-22-cassandra-adapter.md', '2016-03-22-release-1.7.0.md']"
857c06b6744840daac52f7a3ab7f6e0d32c90e41,"[CALCITE-1163] Fix Avatica sub-site logo link destination

Also added a small section that links back to the main
Apache Calcite website.

Signed-off-by: Josh Elser <elserj@apache.org>",['b374133361d31ebe8e136668b4a5148ce2cb83b1'],False,"['header.html', 'index.html']"
5dfa3f1ece54d2f95057c5b5097dc0f7fae693ee,"[CALCITE-1128] Implement JDBC batch update methods in remote driver

This commit provides an implementation for:

* Statement.addBatch(String)
* PreparedStatement.addBatch()
* PreparedStatement.executeBatch()

The implementation is fairly straightforward except for the addition
of a new server interface: ProtobufMeta. This is a new interface which
the Meta implementation can choose to also implement to provide a ""native""
implementation on top of Protobuf objects instead of the Avatica POJOs.

During the investigations Avatica performance pre-1.7.0, it was found
that converting protobufs to POJOs was a very hot code path. This short-circuit
helps us avoid extra objects on the heap and computation to create them
in what should be a very hot code path for write-workloads.

Closes apache/calcite#209",['857c06b6744840daac52f7a3ab7f6e0d32c90e41'],False,"['AvaticaConnection.java', 'AvaticaPreparedStatement.java', 'AvaticaStatement.java', 'Meta.java', 'Requests.java', 'Responses.java', 'JsonService.java', 'LocalService.java', 'ProtobufMeta.java', 'ProtobufService.java', 'ProtobufTranslationImpl.java', 'RemoteMeta.java', 'Service.java', 'TypedValue.java', 'requests.proto', 'responses.proto', 'ExecuteBatchRequestTest.java', 'ProtobufTranslationImplTest.java', 'JsonHandlerTest.java', 'JdbcMeta.java', 'RemoteDriverTest.java', 'json_reference.md', 'protobuf_reference.md']"
406372f1274a6a0c9fe2b471ce6d65669e798633,"[CALCITE-1159] Kerberos-based client authentication via SPNEGO

A large set of changes, spanning both new APIs for creating
the Avatica HTTP server and new options for clients to use
the new authentication mechanism. Tests are included that
verify end-to-end SPNEGO-based authentication with Kerberos.

Parallel test running has been removed as it has been
problematic with both HSQLDB and now Kerby (the in-memory
KDC implementation).

Docs have also been updated to include details on how downstream
users should create servers and clients as well as RPC-level details.

Closes apache/calcite#214",['5dfa3f1ece54d2f95057c5b5097dc0f7fae693ee'],False,"['BuiltInConnectionProperty.java', 'ConnectionConfig.java', 'ConnectionConfigImpl.java', 'AvaticaCommonsHttpClientImpl.java', 'AvaticaCommonsHttpClientSpnegoImpl.java', 'AvaticaHttpClientFactoryImpl.java', 'ProtobufTranslationImpl.java', 'RemoteProtobufService.java', 'Service.java', 'pom.xml', 'pom.xml', 'AbstractAvaticaHandler.java', 'AuthenticationType.java', 'AvaticaJsonHandler.java', 'AvaticaProtobufHandler.java', 'AvaticaServerConfiguration.java', 'DoAsRemoteUserCallback.java', 'HandlerFactory.java', 'HttpServer.java', 'PropertyBasedSpnegoLoginService.java', 'AvaticaSpnegoTest.java', 'SpnegoTestUtil.java', 'AbstractAvaticaHandlerTest.java', 'HttpServerSpnegoWithJaasTest.java', 'HttpServerSpnegoWithoutJaasTest.java', 'log4j.properties', 'docs.yml', 'client_reference.md', 'security.md']"
48d8ebf57fcb9890854dcdec4c26a4bd8ff26a9c,[CALCITE-1128] Remove unused member and fix pb builder use,['406372f1274a6a0c9fe2b471ce6d65669e798633'],False,['Service.java']
87b0eb55b531890ff181996593efa4ab224262a6,"Site: add upcoming talks, and fix link to Apache phonebook",['3ba595a17832875ffef7ce9c0e374e19b996b53a'],False,"['index.md', 'index.md']"
ba9783f30398c52e514db06191d5faf631e57490,"[CALCITE-836] Expose more server-side database properties

A number of properties from the Avatica server can be
exposed to clients, including the Avatica server version
and version information about the wrapped JDBC driver and database.

To support this, DatabaseProperty's no longer need to refer to methods in
DatabaseMetaData. Thus, we can support a generic collection
of Avatica-based properties.

This also allows DatabaseMetaData to be unwrap'ed into Properties.

Some error handling in protobuf code is also improved
to give some better error messages (ran into this while
debugging this feature).

Closes apache/calcite#216",['87b0eb55b531890ff181996593efa4ab224262a6'],False,"['pom.xml', 'FilteredConstants.java', 'AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'AvaticaDatabaseMetaDataImpl.java', 'AvaticaJdbc41Factory.java', 'InternalProperty.java', 'Meta.java', 'ProtobufTranslationImpl.java', 'Service.java', 'pom.xml', 'JdbcMeta.java', 'RemoteDriverTest.java', 'RemoteMetaTest.java']"
3e25f2ffa0eab11051f6295fd3706d2397f2524c,[CALCITE-836] Add missing table summary for javadoc error,['4140927c99b9dceb15ef4b85059b60e7898de0e7'],False,['AvaticaDatabaseMetaData.java']
889b9a88b2bff748c4d6a31d369fc03d56ef958d,"[CALCITE-1180] Implement Statement.clearBatch() in Avatica

A simple omission in the original batch support and a trivial
fix for the Avatica Statement and PreparedStatement impls.
Includes a test for both as well.",['37ed160f423b6c95cecd1b8f9ab4a2a2d220057f'],False,"['AvaticaPreparedStatement.java', 'AvaticaStatement.java', 'RemoteDriverTest.java']"
70829e53f1ea036909f74400454ca6902fa818dc,[CALCITE-1185] Send ErrorResponse on request parsing error,['ea71f9295ae3bed9b88046f9a9e426bcc93a0005'],False,"['AbstractHandler.java', 'AbstractHandlerTest.java', 'RemoteMetaTest.java']"
04c5ff9e8ae0627025406c627f8474913ba863a0,"[CALCITE-1189] Get the bytes from a string as UTF-8

When we don't specify a Charset to use when creating
bytes from a String, we fall back to the default charset
for the JVM. Since Protobuf is requiring UTF-8 bytes for
this attribute in the message, we also need to give it
bytes which can be parsed into a UTF-8 string.",['919b31f0ebbd1501b9b2216fcc8534449fa3258e'],False,['TypedValue.java']
5e1cc5464413904466c357766843cd491b23f646,[CALCITE-1182] Add ProjectRemoveRule to pre-processing program of materialization substitution (fix javadoc warnings),['a5928f04655df08e1680ef508219e957575ac8d1'],False,['MaterializedViewSubstitutionVisitor.java']
7a00d4cca220b86fc41c32d89b8a4e0e660e70c7,[CALCITE-1201] Fix incorrect attribute separator in json docs,['5e1cc5464413904466c357766843cd491b23f646'],False,['json_reference.md']
825acf1e4f728e906ced0b17c4d53d71a121c3e6,"[CALCITE-1204] Fix invalid Javadoc and suppress checkstyle ""errors""",['4df0075f3f58ca0927c53c229ca910778c1e2d38'],False,"['MaterializedViewSubstitutionVisitor.java', 'suppressions.xml']"
dc553607d3c7f2a9baa74f7e059dde09d0df5f3c,"[CALCITE-1207] Allow numeric connection properties, and 'K', 'M', 'G' suffixes",['f97cdfbee4f7ccaeaa91328005bf3e3a52e6666a'],False,"['ConnectionConfigImpl.java', 'ConnectionProperty.java', 'AvaticaUtilsTest.java']"
dd8d3c5888618d1568db49f0deb8b4a2f7c2b56f,"[CALCITE-1121] Druid adapter

Depends on ""foodmart"" and ""wikiticker"" data sets in calcite-test-dataset.

Generates ""select"" and ""groupBy"" query types;
can push project and filter into DruidQuery;
filters can consist of AND, OR, NOT, =, !=, <, <=, >, >=;
splits projects, pushing down the parts that Druid can handle;
fetches large Druid ""select"" queries a page at a time;
does not yet push down HAVING, ORDER BY or LIMIT.

Add CalciteAssert.returnsOrdered.

Add druid to sqlline path.

Rename cassandra.md to cassandra_adapter.md.",['eadc6766b211eba853dd046f9b79383b31488420'],False,"['CalciteConnectionProperty.java', 'Interpreter.java', 'Row.java', 'VolcanoRuleCall.java', 'CalciteAssert.java', 'pom.xml', 'DruidConnection.java', 'DruidConnectionImpl.java', 'DruidQuery.java', 'DruidResultEnumerator.java', 'DruidRules.java', 'DruidSchema.java', 'DruidSchemaFactory.java', 'DruidTable.java', 'DruidTableFactory.java', 'QueryType.java', 'package-info.java', 'DruidAdapterIT.java', 'druid-foodmart-model.json', 'druid-wiki-model.json', 'foodmart-schema.spec', 'log4j.properties', 'pom.xml', 'adapter.md', 'cassandra_adapter.md', 'druid_adapter.md', 'sqlline']"
26a6458903cd13d2a541b59042d178e8177705a9,"[CALCITE-1179] Extend list of time units and time unit ranges (Venki Korukanti)

The purpose of this commit is to allow more time units in Calcite's
EXTRACT function. This commit covers only Avatica changes.
[CALCITE-1177] will make the corresponding Calcite changes after the next
Avatica release.",['62f9abae4e0c79b02d4a46b4a6aa40aebc6418f9'],False,"['TimeUnit.java', 'TimeUnitRange.java']"
26fddf2a641aebf943f18b7da8f81397955f4e59,"[CALCITE-1213] Make AvaticaDatabaseMetaData the implementation again

Changing the implementation's name and make the interface the implementation's
name leads for some confusion compilation errors (if you're not aware of what
happened ahead of time). We can easily work around that since the interface
is primarily to co-locate avatica-specific method definitions together.",['26a6458903cd13d2a541b59042d178e8177705a9'],False,"['AvaticaConnection.java', 'AvaticaDatabaseMetaData.java', 'AvaticaDatabaseMetaDataImpl.java', 'AvaticaFactory.java', 'AvaticaJdbc41Factory.java', 'AvaticaSpecificDatabaseMetaData.java', 'InternalProperty.java', 'RemoteDriverTest.java', 'RemoteMetaTest.java']"
6baa9c4bed1100012ebf4ef9547cbb077f2edaaf,[CALCITE-1212] Fix NPE on some Cassandra projects,['26fddf2a641aebf943f18b7da8f81397955f4e59'],False,"['CassandraMethod.java', 'CassandraProject.java', 'CassandraRel.java', 'CassandraRules.java', 'CassandraTable.java', 'CassandraToEnumerableConverter.java', 'CassandraAdapterIT.java']"
4255767d9ccc3221963a98d7e2e8ce3b68e156a3,"[CALCITE-1215] Fix missing override in CassandraTable

The Iterator introduced in CALCITE-1212 was missing an override for
remove() breaking the CI build",['6baa9c4bed1100012ebf4ef9547cbb077f2edaaf'],False,['CassandraTable.java']
da875a67fe8718345e567ef9ac40380cf38d043f,"Fix up [CALCITE-1168] DESCRIBE statement

Now we have DESCRIBE SCHEMA and DESCRIBE TABLE;
DESCRIBE DATABASE, CATALOG and STATEMENT do not do anything
useful yet, and are covered by [CALCITE-1221].",['a065200ad714ed5f9015e8a00b534c10f9fa6a15'],False,"['Parser.jj', 'SqlDescribeSchema.java', 'SqlDescribeTable.java', 'SqlKind.java', 'SqlParserTest.java', 'reference.md']"
e4dd6dc765e125b156c2317fbe567f11585ea9f2,"[CALCITE-1209] Ensure protobuf does not serialize bytes as base64 strings

CALCITE-1103 inadvertently introduced a fix for binary data being
encoded as base64'ed strings instead of native binary data. This
left a backwards compatibility problem where older clients would
be unable to communicate with newer servers.

Unit tests were added for the legacy parsing for backwards compatibility
as well as verifying new data is serialized as native bytes.",['3599cebbcfe52a2ee1c146fe97f75b168800e4f9'],False,"['TypedValue.java', 'TypedValueTest.java']"
1be4056b4b5ff4c75bf8f05bd2bc45e5cf01fa10,"Fix up [CALCITE-1115], moving TRANSLATE3 to OracleSqlOperatorTable

Also add some more validator tests.",['4e33eedc2412085a475110101d92c9910930f897'],False,"['Parser.jj', 'RexImpTable.java', 'RexToLixTranslator.java', 'RexSqlStandardConvertletTable.java', 'OracleSqlOperatorTable.java', 'SqlStdOperatorTable.java', 'SqlTranslate3Function.java', 'SqlOperatorBaseTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java']"
44a6ba67b92c193468f0de9dc3417c218624e69f,"Fix up [CALCITE-1219], moving tests to new class SqlOperatorBindingTest",['1b4209ec973b8b86749fb3cc14262cdd17df0999'],False,"['CalciteSuite.java', 'SqlOperatorBindingTest.java', 'UtilTest.java']"
2b74c79a96a4040b5b44b90ad764aaa9ad169374,Fix javadoc,['44a6ba67b92c193468f0de9dc3417c218624e69f'],False,"['CassandraAdapterIT.java', 'DruidAdapterIT.java', 'MongoAdapterIT.java']"
354e8240d49de42bd6972d985fea692e4785e8b0,"[CALCITE-855] UNNEST with multiple arguments

Change a few FlatList contructor methods to return ComparableList.",['6031b7a477be2e60828df586f4a3542065b97bce'],False,"['EnumerableUncollect.java', 'FlatLists.java', 'SqlFunctions.java', 'SqlUnnestOperator.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'CompositeSingleOperandTypeChecker.java', 'OperandTypes.java', 'SameOperandTypeChecker.java', 'SqlToRelConverter.java', 'BuiltInMethod.java', 'JdbcTest.java', 'UtilTest.java', 'CartesianProductEnumerator.java', 'Linq4j.java']"
9deff987ba177a6eb1ded2813e770a9233f3f2f4,"[CALCITE-1218] Lift try/catch to Jetty Handler to prevent exceptions propagating to Jetty

We need to make sure that we always send back an ErrorResponse to the
client when we can't execute their Request (for whatever reason).

I tried to write a test to exercise this, but ran into tons of issues
trying to do this because of the relocation of protobuf classes. This
will be alleviated by CALCITE-1224 in the future.",['ebb68dadf64e318025bd3e2d12d1ed6608384fb7'],False,"['AbstractHandler.java', 'AbstractHandlerTest.java', 'AvaticaJsonHandler.java', 'AvaticaProtobufHandler.java']"
a15aa88bb2820d8de008375d9033fc5c22fc1775,[CALCITE-1236] Log a debug message when an error is sent back to the client,['0d2eae5be5adcebcc2dd7df6a7887d70cc961b6d'],False,"['AvaticaJsonHandler.java', 'AvaticaProtobufHandler.java']"
720b117ed4c4096b274d636711245f583b3e9826,"Fix typo in SQL (Yi Xinglu)

Close apache/calcite#231",['a15aa88bb2820d8de008375d9033fc5c22fc1775'],False,['stream.md']
9bd7d7550cfe31b76e3970a532014a8186e1ff5a,"[CALCITE-1150] Add dynamic record type and dynamic star for schema-on-read table

 * Add dynamic star column and dynamic record type. Use ""**"" as the dynamic star column name prefix,
 * RelOptTableImpl.toRel() will convert a dynamicRecordType to RelRecordType. This ensures an immutable record type in sql-to-rel,
 * Add RelDataType.isDynamicStruct().

Close apache/calcite/#228",['720b117ed4c4096b274d636711245f583b3e9826'],False,"['RelOptTableImpl.java', 'DynamicRecordType.java', 'DynamicRecordTypeImpl.java', 'RelDataType.java', 'RelDataTypeField.java', 'RelDataTypeFieldImpl.java', 'RelDataTypeHolder.java', 'RelDataTypeImpl.java', 'SqlIdentifier.java', 'SqlItemOperator.java', 'SqlTypeName.java', 'DelegatingScope.java', 'OrderByScope.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'CalciteRemoteDriverTest.java', 'MockCatalogReader.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
987a257ae7cff588ac2f63518a7f75263a9bddb9,"[CALCITE-1243] Ensure signed fields are used in protobuf for specifying rows to return

It was found that the protobuf definitions where specifying some fields in some
messages as unsigned integers where Avatica was expecting negative values
to be meaningful. We failed to notice this in Avatica because the Java bindings
for protobuf are equivalent for signed and unsigned typed. This breaks clients
in other languages though.

Some confusing logic surrounding `maxRowCount` being used for two different
meanings (both maximum number of rows for the statement and the maximum number
of rows returned in the first frame) was also corrected since the values in
the protocol buffers were being changed.

The incorrect fields were deprecated, documented, and backwards-compatibally modified
so that older clients can continue to operate without change. Clients in languages
which do have differentiation between signedness in types will have to use the
newer version of the client and server to get this fix.",['9bd7d7550cfe31b76e3970a532014a8186e1ff5a'],False,"['Meta.java', 'Requests.java', 'RemoteMeta.java', 'Service.java', 'requests.proto', 'ProtobufSerializationTest.java', 'JdbcMeta.java', 'JdbcResultSet.java', 'protobuf_reference.md']"
b8cb7c7c7398cc0d4236f9717111b338a824bc27,"[CALCITE-1248] Fix a bunch of incorrect/pedantic instructions in HOWTO

Lots of unnecessary copy-paste stuff came across in the website that
can be removed. Consolidated a bunch of unnecessary Maven hacks
as well.",['1072a3cdfd46e0c743733f83a2944fdbbdb01353'],False,['howto.md']
d58bf9150bb7e354e4b5980ecee0c96218a0893d,"[CALCITE-1249] Fix LICENSE in avatica-standalone-server

Needs to mention HSQLDB's 3-clause bsd.",['f3ba5c3352af82db4436453da03176636819b36f'],False,"['pom.xml', 'LICENSE']"
b6f0e1021b8d8e0dc08e6da49391a76cdb6cfb14,"[CALCITE-1246] Cleanup duplicate variables in JoinPushThroughJoinRule (Yi Xinglu)

Also, fix typo in comment.

Close apache/calcite#234",['5a697eedf1a6d32fe4b6e504dc0454429949d423'],False,['JoinPushThroughJoinRule.java']
514154f3b7e98866670d396bc274b0add0b627ba,Cosmetic changes,['ea25b7327e734f93acae85dc60f6188f852bed12'],False,"['SqlValidatorImpl.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'pom.xml']"
e25ceef6f31f9c0989ef695e6599e2f81f1f3556,"Fix up [CALCITE-750], mainly removing mutable state

Also, fix parser position of ""agg(args) over windowSpec"".",['918e612bbb4da90ad94b283c1f06cf055102c09e'],False,"['Parser.jj', 'SqlOverOperator.java', 'AggFinder.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml']"
fa76779106ce975e9893c7cd38678f0ce98d3f27,"[CALCITE-1151] Fix SqlSetOption to correctly handle SqlOperator.createCall (Sudheesh Katkam, Minji Kim)

Close apache/calcite#244",['b5e6663f85f4bed637b406c3590c790845f219d3'],False,"['SqlSetOption.java', 'SqlSetOptionOperatorTest.java', 'CalciteSuite.java']"
4987d54061783ee5c707a60140b3e367baccdd49,"Release notes

Change versions from 1.7 to 1.8.

Tell apache-rat to ignore a Druid JSON file, because JSON files cannot
have headers.",['d18da01ed88c772f62123e8420cdefc9b5d76daf'],False,"['README', 'pom.xml', 'adapter.md', 'history.md', 'howto.md', 'index.md']"
4483e1cc98491c6760d718d07d255bc1f6f10ebd,[CALCITE-1285] Fix client URL template in example config file,['f68ae55ca3eb9241a47d956a49a4b407ce40a565'],False,['example_config.yml']
0599cdde009d6e08f0cb973f914b526f9518dc47,"[CALCITE-991] Create separate SqlFunctionCategory values for table functions and macros (Julien Le Dem, Minji Kim)

Add a simple test for CalciteCatalogReader (Minji Kim).

Fix up (Julian Hyde).

Close apache/calcite#168",['a2d7165f360e450889ba8b8d051810ddb45e3b62'],False,"['Parser.jj', 'CalciteCatalogReader.java', 'RelJson.java', 'SqlFunction.java', 'SqlFunctionCategory.java', 'SqlUtil.java', 'SqlAbstractParserImpl.java', 'ListSqlOperatorTable.java', 'AggFinder.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableFunction.java', 'SqlUserDefinedTableMacro.java', 'RelStructuredTypeFlattener.java', 'LookupOperatorOverloadsTest.java', 'CalciteSuite.java']"
acd27fdea5fb54375a999a9221b79a6df166660c,"[CALCITE-528] When making field names unique, follow type system's case-sensitivity policy (Jacques Nadeau, Jinfeng Ni, Minji Kim)

Ensure that uniquify keeps the ordinal position of input names (Jinfeng Ni).

Add tests (Minji Kim).

Fix up (Julian Hyde).

Close apache/calcite#245",['0599cdde009d6e08f0cb973f914b526f9518dc47'],False,"['EnumerableRel.java', 'Lattice.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'CalciteCatalogReader.java', 'Join.java', 'SemiJoin.java', 'LogicalProject.java', 'CalcRelSplitter.java', 'JoinProjectTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'RelDataTypeFactory.java', 'RelDataTypeSystem.java', 'RelDataTypeSystemImpl.java', 'RexProgramBuilder.java', 'RexUtil.java', 'SqlCall.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'LexCaseSensitiveTest.java', 'SqlValidatorUtilTest.java', 'CalciteSuite.java', 'MockCatalogReader.java']"
ac9c8c7af020a0532e3e7e31b4216f69d9f0b39f,"[CALCITE-1302] Create SqlTypeName values for each interval range, e.g. YEAR_MONTH

As a result, we don't need to use SqlIntervalQualifier as often. Also,
the JDBC client gets more information from the type.

Change the CalciteAssert.checkResultCount API.",['5511253b5c46741dfed8e1ac8d4fa23025aeb3c5'],False,"['RexImpTable.java', 'RexToLixTranslator.java', 'JavaTypeFactoryImpl.java', 'CalcitePrepareImpl.java', 'RelMdSize.java', 'RelDataTypeSystemImpl.java', 'RexBuilder.java', 'RexLiteral.java', 'SqlIntervalQualifier.java', 'SqlLiteral.java', 'IntervalSqlType.java', 'MatchReturnTypeInference.java', 'SqlTypeAssignmentRules.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeFactoryImpl.java', 'SqlTypeFamily.java', 'SqlTypeName.java', 'SqlTypeUtil.java', 'SqlValidatorImpl.java', 'SqlNodeToRexConverterImpl.java', 'StandardConvertletTable.java', 'Util.java', 'CalciteRemoteDriverTest.java', 'SqlOperatorBaseTest.java', 'CalciteAssert.java', 'SqlValidatorTest.java']"
e30600d63b5468cc8566977bcc1695ce17db91df,Cosmetic changes,['787a9a1b19da84021d2a9090c6ff5972e999c6b3'],False,"['LICENSE', 'LICENSE', 'Parser.jj', 'LoptOptimizeJoinRule.java', 'SqlFunction.java', 'RelToSqlConverterTest.java', 'SqlTests.java', 'MockCatalogReader.java', 'PlannerTest.java']"
a3bc0d8ea3c1f320b96a4ab9641becee90a388bc,"[CALCITE-1148] Fix RelTrait conversion (e.g. distribution, collation) (Minji Kim)

In the current calcite, trait conversion is not handled properly, e.g.
collation/distribution traits are not converted (shown by the tests).
This patch fixes this issue.

For each RelCollationTrait, introduce a new API, canConvert() which
should return true if the conversion from a trait to the other is
possible.

For each Convention, introduce two new APIs, canConvertConvention()
returns true if the convernsion is possible, and useAbstractConverters()
returns true if the trait conversion should be handle via
AbstractConverters.  By default, both functions return false.

In RelSet, when adding a new RelSubset, if the convention returns false
for useAbstractConverters(), we do not add AbstractConverters.  Even if
convention.useAbstractConverters() return true, we only add
AbstractConverters if the AbstractConverters can convert (i.e. if
RelCollationTrait.canConvert() returns true) and the conversion is
needed (i.e. if RelTrait.satisfies() returns false).

Added test cases.

Close apache/calcite#210",['5bc0e0e536bd12d8c1551271097af229e68c88c6'],False,"['EnumerableConvention.java', 'BindableConvention.java', 'InterpretableConvention.java', 'Convention.java', 'ConventionTraitDef.java', 'RelTraitDef.java', 'RelSet.java', 'VolcanoPlanner.java', 'RelCollationTraitDef.java', 'CollationConversionTest.java', 'ComboRuleTest.java', 'PlannerTests.java', 'TraitConversionTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'CalciteSuite.java', 'JdbcAdapterTest.java', 'JdbcTest.java']"
c22628fe0a1ae774b9f8549599bdee515cad2d2f,[CALCITE-1314] Intermittent failure in SqlParserTest.testGenerateKeyWords,['840ba75e4495f0f087153c3843e641b1f5e54810'],False,['SqlParserTest.java']
6955a03b82f1237b09c3c69485783ba68254698a,"Document release process

Change highlighting to work around https://github.com/jekyll/jekyll/issues/4448",['c22628fe0a1ae774b9f8549599bdee515cad2d2f'],False,"['adapter.md', 'howto.md']"
42af029fbcad199b080a37a08781508979d1ffa0,Cosmetic changes,['6955a03b82f1237b09c3c69485783ba68254698a'],False,"['VisitorDataContext.java', 'RelFactories.java', 'DynamicRecordTypeImpl.java', 'RelDataTypeHolder.java', 'SqlDescribeSchema.java', 'SqlDescribeTable.java', 'RexBuilderTest.java', 'ConcurrentTestPlugin.java', 'ConcurrentTestPluginCommand.java', 'SamplePlugin.java']"
d1f4f885c0ead3332320c19c91fa76130714e068,"[CALCITE-1325] Druid adapter requires Guava 14.0 or higher

This change allows the Druid adapter to compiler and run on versions of Guava as low as 11.",['42af029fbcad199b080a37a08781508979d1ffa0'],False,"['Compatible.java', 'DruidSchema.java', 'history.md']"
a0c98837c2012cec540e350ac16613923002afb2,"[CALCITE-1330] DB2 does not support character set in data type name (Minji Kim)

Close apache/calcite#260

Change-Id: I320a235650aaa30e88a8fb14a5afefeb63839f33",['6002cd2809250cdfa095235fe79a30c41218b6b6'],False,['SqlDialect.java']
b4df7c97bb7905cb2c510a08830b8bd710107119,"[CALCITE-1332] JDBC adapter for DB2 should always use aliases for tables: x.y.z AS z (Minji Kim)

Hold aliases in order-preserving Map rather than List<Pair>.

Close apache/calcite#261

fix up",['c933c79f7ba2ccedd109c4a3cb55e23cfbe90f2b'],False,"['JdbcImplementor.java', 'JdbcTableScan.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'SqlDialect.java', 'RelToSqlConverterTest.java']"
5145e8f66869311c2ac783adc83a669d121f7e0c,Fix QuidemTest and CsvTest on Windows,['5c74b6b41c33af466c0b1798101d84df56138725'],False,"['QuidemTest.java', 'CsvTest.java']"
f8c2c8070238b99d8b16dc9b057e1a53462b1d9a,[CALCITE-1343] Broken Druid query,['7936185e55e3243c9fec6bb6461a934d2539e32f'],False,"['AggregateNode.java', 'AggregateFunctionImpl.java', 'SqlToRelConverter.java', 'CalciteAssert.java', 'misc.iq', 'DruidAdapterIT.java']"
69839c3798c8221081d80edaaca27a310ce9005e,"[CALCITE-1327] In nested windowed aggregates, check that PARTITION BY columns are in GROUP BY (Gautam Parai)

Also fixes [CALCITE-1340] Invalid errors for windowed aggregates.

Discriminate aggregate functions from mere window functions. Don't
declare ""SELECT RANK()"" to be an aggregating query; even if it's
missing OVER, RANK is only a window function, not an aggregate function.

Close apache/calcite#258",['f8c2c8070238b99d8b16dc9b057e1a53462b1d9a'],False,"['SqlAggFunction.java', 'SqlOperator.java', 'AggChecker.java', 'AggFinder.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'SqlValidatorTest.java']"
216035f890c298a631137fa98d83478b6c00ab3b,"Fix up [CALCITE-1220], replacing remove(i)/add(i,x) by set(i,x)",['9b1624a88a506a3ceb1c5ccada1522d2a665aec6'],False,['RexUtil.java']
317802d7333a2efea35b6449645f948723d1814c,"Fix up [CALCITE-1365], wrong method call",['216035f890c298a631137fa98d83478b6c00ab3b'],False,['RelMdPredicates.java']
29daa4513f19c82a410ea3c36a6116260caa0216,"[CALCITE-1366] Metadata provider should not pull predicates up through GROUP BY ()

Add a test for the previous fix-up of [CALCITE-1365].

Close apache/calcite#276",['317802d7333a2efea35b6449645f948723d1814c'],False,"['RelMdPredicates.java', 'PlannerTest.java']"
8eca1c9f42d7ee63fa2007d9154b56ab7ab3d9f1,"More improvements to RexUtil.simplify

Use Ordering.sortedCopy rather than sorting lists in-place.

Fix a couple more manifestations of [CALCITE-1283].",['29daa4513f19c82a410ea3c36a6116260caa0216'],False,"['RuleQueue.java', 'VolcanoPlanner.java', 'RelMdPredicates.java', 'LoptSemiJoinOptimizer.java', 'RexUtil.java', 'SqlTypeFactoryImpl.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcTest.java', 'RexProgramTest.java', 'PlannerTest.java', 'RelOptRulesTest.xml', 'MongoAdapterIT.java', 'Fluent.java']"
87435a9b86e0d44a6c9123c028e5c5180fe3da88,"[CALCITE-1334] Convert predicates on EXTRACT function calls into date ranges

Test the code on the 'timestamp' column of a Druid table.

This change requires RangeSet, and therefore Guava 14 or higher.",['8eca1c9f42d7ee63fa2007d9154b56ab7ab3d9f1'],False,"['RelOptUtil.java', 'DateRangeRules.java', 'SqlKind.java', 'SqlExtractFunction.java', 'SqlStdOperatorTable.java', 'DateRangeRulesTest.java', 'SqlAdvisorTest.java', 'CalciteSuite.java', 'MockCatalogReader.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexImplicationCheckerTest.java', 'RelOptRulesTest.xml', 'DruidConnectionImpl.java', 'DruidQuery.java', 'DruidTableFactory.java', 'DruidAdapterIT.java', 'druid-foodmart-model.json', 'pom.xml']"
bf03cd9dc752017c0d90fc0168fcbdfc61be619d,"[CALCITE-1226] Disable AvaticaSpnegoTest due to intermittent failures

Since April, about 11% of test runs have shown this problem. The underlying issue, [CALCITE-1183], is still open.",['87435a9b86e0d44a6c9123c028e5c5180fe3da88'],False,['AvaticaSpnegoTest.java']
23c14b5f8552923f0af21d8bf552d091cd8b7fea,"[CALCITE-1371] fix setDate with Calendar in AvaticaSite

Closes apache/calcite#279",['3ed625cf39c2671f57dbd0c73f27060169560269'],False,"['AvaticaSite.java', 'RemoteDriverTest.java']"
c7cbfdf955061352496ac98bfa898d0f32faaaf6,"[CALCITE-1288] Avoid doing a self-join for mixed regular and DISTINCT aggregate functions (Gautam Parai)

Close apache/calcite#247",['28c475a75f7a0c2f7b469c2dbad965267ad977eb'],False,"['AggregateExpandDistinctAggregatesRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
63a7a1a96856d3f900d2a6997da859aa06cb54ad,"Fix up [CALCITE-1334], Calendar instance with UTC",['c7cbfdf955061352496ac98bfa898d0f32faaaf6'],False,['DateRangeRules.java']
baaf2562ea16cc7d11964afb04a4d68d2d1ade04,Fix up previous commit,['962eac566cb19a95d8581a1b10fc120657069b1c'],False,"['CalciteMetaImpl.java', 'DruidDateTimeUtils.java', 'DruidQuery.java', 'DruidRules.java', 'DruidTable.java']"
339ac13eb23b5aac6cadc16c42e36deebbcd1e39,"[CALCITE-1095] NOT precedence

Previously prefix operators such as NOT were not handled in the same
way as infix and postfix operators. With a new precedence climbing
parser, we can handle all operators uniformly.

Document precedence of all operators, adjusting some to match the SQL
standard; for example, LIKE now has slightly higher precedence than =,
and NOT has lower precedence than =.

Add a test to ensure that operators' real rankings match the documentation.",['f9724c2739fe482d36cfdd5aa6cad207c7a8fcd4'],False,"['Parser.jj', 'SqlPrefixOperator.java', 'SqlSpecialOperator.java', 'SqlBetweenOperator.java', 'SqlInOperator.java', 'SqlItemOperator.java', 'SqlLikeOperator.java', 'SqlStdOperatorTable.java', 'SqlParserUtil.java', 'PrecedenceClimbingParser.java', 'Util.java', 'SqlParserTest.java', 'SqlTesterImpl.java', 'CalciteSuite.java', 'SqlValidatorTest.java', 'PrecedenceClimbingParserTest.java', 'operator.iq', 'reference.md']"
0938c7b6d767e3242874d87a30d9112512d9243a,"Complete [CALCITE-1208] by giving ""resolve"" a call-back, so it can make multiple matches

Change parser to make 'SELECT t.*.c' illegal.

Address Jinfeng's review comments.

Add a test for converting a query with UNION in FROM clause.",['a859f93ff2fc800e3e4a481274e3daf19f72e8b2'],False,"['Parser.jj', 'CalciteCatalogReader.java', 'AggregateExpandDistinctAggregatesRule.java', 'DynamicRecordTypeImpl.java', 'RelDataType.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeHolder.java', 'RelDataTypeImpl.java', 'RelRecordType.java', 'StructKind.java', 'CalciteResource.java', 'FlatLists.java', 'SqlIdentifier.java', 'CatalogScope.java', 'DelegatingScope.java', 'EmptyScope.java', 'ListScope.java', 'ParameterScope.java', 'SqlQualified.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorImpl.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'WithScope.java', 'SqlToRelConverter.java', 'ImmutableIntList.java', 'Pair.java', 'CalciteResource.properties', 'SqlParserTest.java', 'SqlAdvisorTest.java', 'MockCatalogReader.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'SplunkPushDownRule.java']"
b5b9e53ace83397175baa0d7546c03f1cf85b17d,"Fix tests on Windows, and those broken by [CALCITE-1342]

Add a test case for [DRILL-4906] (which worked already in Calcite).",['a877d704f2297c9206fbcb5e37aeada57727583f'],False,"['JdbcTest.java', 'misc.iq']"
514d262e50dec42e8605479f9d6b2d95f0d5fe2e,"[CALCITE-1394] Javadoc warnings due to CoreMatchers.containsString and mockito-all

Change occurrences of CoreMatchers.containsString to StringContains.containsString,
and CoreMatchers.startsWith to StringStartsWith.startsWith, to be compatible with
the version of hamcrest inside mockito-all.",['683958579f6b64749a730024d24cc09585dd741b'],False,"['RemoteDriverTest.java', 'RemoteMetaTest.java', 'BasicAuthHttpServerTest.java', 'DigestAuthHttpServerTest.java', 'SqlParserUtil.java']"
14ac78229989d416290573a1a8641747df7dd9c8,[CALCITE-1398] Change visibility of RelFieldTrimmer utility methods,['fb6c24adcc49ca83ee92af325a2664475cc00ebc'],False,['RelFieldTrimmer.java']
963876bbbf4e9da2d0ea7687b9ed10ca7e9172c4,"[CALCITE-1386] ITEM operator ignores the value type of the collection, assigns to Object variable (Jungtaek Lim)

* Modify MethodImplementor to cast return value to desired return type
  when necessary
* Change ItemImplementor to use NullPolicy.ANY since ITEM can still
  return null even though both operands are not null
* Fix Types.castIfNecessary to handle RecordType as an exceptional
  case (can't be converted to Class)
* Change Csv tests to test its behavior
* Address Array / Map type to be nullable
* Address unit tests

Close apache/calcite#283",['22ddc820204552834b98104428e3acb15e1050be'],False,"['RexImpTable.java', 'SqlFunctions.java', 'SqlTypeFactoryImpl.java', 'BuiltInMethod.java', 'CalciteAssert.java', 'CalciteSuite.java', 'CollectionTypeTest.java', 'JsonTable.java', 'CsvTest.java', 'Types.java']"
73544eda3c043db65c82d79161856b00cf7744c6,"[CALCITE-1403] Fix intervals and timezone offsets in DruidAdapterIT

Note that we now require Drild 0.9.1 or higher (for support granularity greater than ""day"").

In DruidQuery, convert ""descending"" from a String to boolean JSON value.

When a Druid REST call fails, included the generated query in the error message.",['e5a42f1ca80eca0bb6f0c8f6677f106fadb2e652'],False,"['pom.xml', 'DruidConnectionImpl.java', 'DruidDateTimeUtils.java', 'DruidQuery.java', 'DruidTable.java', 'DruidTableFactory.java', 'DruidAdapterIT.java']"
59978493b4123e8e5139ef76a5db257ad5f5bf88,"[CALCITE-1410] Fix JDBC metadata classes (Laurent Goujon)

Implement or fix metadata classes in MetaImpl to conform to JDBC
specification, so that the ResultSet returned by each
DatabaseMetaData.getXxx call has the right columns with the right type
and nullability.

Also add a test case for each of them to prevent possible breakage.

Close apache/calcite#296",['66274481fbca9c3ed9cd1f6f690bb2163ff07ba9'],False,"['MetaImpl.java', 'MockProtobufService.java', 'MetaResultSetTest.java', 'ProtobufTranslationImplTest.java', 'RemoteDriverMockTest.java']"
c3592044c1db6d2ca21cbc3e25d47f3854db3347,"[CALCITE-1419] Implement JDBC functions: LTRIM, RTRIM and 3-parameter LOCATE and POSITION (Jungtaek Lim)

* For fixing LOCATE with 3 params easily, modify POSITION to also have
  optional third parameter: POSITION(string IN string FROM integer)
* Add newly added POSITION to SQL reference page

Close apache/calcite#299",['68b78f06233dc0cc7ee98066201e12c46da609a5'],False,"['Parser.jj', 'SqlFunctions.java', 'SqlJdbcFunctionCall.java', 'SqlPositionFunction.java', 'OperandTypes.java', 'SameOperandTypeChecker.java', 'SameOperandTypeExceptLastOperandChecker.java', 'SqlOperatorBaseTest.java', 'SqlValidatorTest.java', 'reference.md']"
5cfe4e18b9a6dd9ff5f607844df3351c90c3e079,"[CALCITE-1418] Implement SUBSTRING function for BINARY and VARBINARY (Jungtaek Lim)

SqlFunctions doesn't have overloaded version of substring() which
receives ByteString. Hence calling SUBSTRING(binary FROM integer) and
SUBSTRING(binary FROM integer FOR integer) will fail.

This patch adds SqlFunctions.substring(ByteString, int[, int]), and
relevant tests. Also fixes RexLiteral since now ByteString is used for
representing binary literal.

Close apache/calcite#298",['573462138f3ce42915f3d2674a8271270f928152'],False,"['RexLiteral.java', 'SqlFunctions.java', 'RexExecutorTest.java', 'SqlOperatorBaseTest.java']"
4edb3697f6a4117da80663a14b3a5664b26dc912,"[CALCITE-1433] Fix missing avatica test-jar dependency

During CALCITE-1224, some artifacts have been renamed. Fix avatica-server
and standalone-server modules to use the new artifact name.

Closes apache/calcite#305",['92b3d381de4c0f6670cff06d54ce06b8231e6684'],False,"['pom.xml', 'pom.xml', 'pom.xml']"
6010ce10faba4457ffdc0809bff981bebba5237b,"[CALCITE-1458] Add column values to the deprecated protobuf attribute

When we omit adding these column values to the deprecated `values`
attribute, older clients may suddenly stop seeing records which
they previously could see on query.

Closes apache/calcite#314",['ab25d36c799ed915852d9f51230905bac26870f4'],False,"['Meta.java', 'FrameTest.java']"
3e886e9e898066d5e251ec6d958478282e817d79,"[CALCITE-1461] Hard-coded class name in JaninoRelMetadataProvider breaks shading (Jark Wu)

Close apache/calcite#318",['0f36aec7fd2c8de1acfe381af7bb4f0690511377'],False,['JaninoRelMetadataProvider.java']
01d4760c6c6d57e177121b88aabe1ef56a9c7bd7,Fix a test case broken in [CALCITE-1453],['9f664b9c872ca56924ddd44de4cad03435b16e2b'],False,['SqlFunctionsTest.java']
b22733c7c52def566abf84dd020258ae0194b21d,"[CALCITE-1270] Upgrade Calcite to avatica-1.9, sqlline-1.2.0

[CALCITE-1475] Jackson shading causes JsonIgnore to be ignored when serializing response as JSON

Add types for enum properties (leveraging recent API changes in Avatica).

Calcite changes corresponding to [CALCITE-1301] Add cancel flag to AvaticaStatement.

Depend on avatica-core rather than avatica (fixes [CALCITE-1475]) (Josh Elser).",['01d4760c6c6d57e177121b88aabe1ef56a9c7bd7'],False,"['pom.xml', 'pom.xml', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'CalciteConnectionImpl.java', 'CalciteMetaImpl.java', 'CalciteResultSet.java', 'JsonSchema.java', 'CalciteResource.java', 'CalciteResource.properties', 'JdbcTest.java', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml', 'pom.xml']"
1b95bd826f4a707113c2134e57ad63e5e3ca628b,Site: Change PMC chair,['b22733c7c52def566abf84dd020258ae0194b21d'],False,['contributors.yml']
bfcd4980d2cec1b0d7d998190510c3604e261d4b,"Upgrade Quidem

Allow Hook instances to return values.

Fix some javadoc problems under JDK 1.7.",['6378fa6889a2527f13ef70a223ee4ee305bb51fb'],False,"['CalcitePrepareImpl.java', 'Prepare.java', 'RelOptTableImpl.java', 'Hook.java', 'Closer.java', 'CalciteAssert.java', 'JdbcTest.java', 'QuidemTest.java', 'RelOptTestBase.java', 'DruidTable.java', 'pom.xml', 'SparkAdapterTest.java']"
03d6b00cdadb1b7dd4e4ae6de370c7f4bf5e2207,"[CALCITE-1479] AssertionError in ReduceExpressionsRule on multi-column IN subquery (Gian Merlino)

Close apache/calcite#317",['bfcd4980d2cec1b0d7d998190510c3604e261d4b'],False,"['ReduceExpressionsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
dd3782e73c7ef16abeeb7bb1a06f157a68c5fce7,[CALCITE-1482] Fix leak on CassandraSchema creation,['435b6d47b195f55e4a926da3ba27f3bb0e5699cc'],False,['CassandraSchema.java']
76fef36cb6464c2790ed0385359a7f9db70457c6,"[CALCITE-1447] Implement INTERSECT DISTINCT by rewriting to UNION ALL and counting (Pengcheng Xiong)

Add some extra Quidem tests, and revert unintended changes to dummy.iq. (Julian Hyde)

Close apache/calcite#313
Close apache/calcite#323",['dd3782e73c7ef16abeeb7bb1a06f157a68c5fce7'],False,"['RelOptUtil.java', 'IntersectToDistinctRule.java', 'SqlToRelConverter.java', 'JdbcFrontLinqBackTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'dummy.iq', 'misc.iq']"
fea541163cb609b4622972e7b25faa6ac9d60dd0,"[CALCITE-1384] Extension point for ALTER statements (Gabriel Reid)

Add a parser extension point for parsing of ALTER statements.

The main content of this commit is the addition of an initial
test setup to allow testing parsing extension points within
Calcite itself. This involves the addition of test-specific
parser templates and building of a test-specific parser.

Fix running mvn clean install site, but ensuring that the
javacc generated test sources directory is excluded from the
source root when compiling (it's added as a source root by the
javacc plugin).

Also change the package of the parser extension testing classes
to make it more clear that they are only for testing (for added
clarity in the exclusions in the pom).

Close apache/calcite#322",['aed0a9e90cc2a9c7a90dde5a5775f329db743bc2'],False,"['pom.xml', 'config.fmpp', 'Parser.jj', 'SqlAlter.java', 'SqlSetOption.java', 'config.fmpp', 'compoundIdentifier.ftl', 'parserImpls.ftl', 'SqlParserTest.java', 'ExtensionSqlParserTest.java', 'SqlUploadJarNode.java', 'CalciteSuite.java', 'pom.xml']"
b7e99bca93b6601a7e28ae0f3100031a75f67a92,"[CALCITE-1486] Invalid ""Invalid literal"" error for complex expression",['f36584ab7718496de3430aa80b97f4ea98c9b308'],False,"['SqlCallBinding.java', 'SqlLiteral.java', 'misc.iq']"
3ccfb9c0622c0b12f7b74403dabb80badd2b3bfb,"Cosmetic changes, and deprecate some methods",['3f92157d5742dd10f3b828d22d7a753e0a2899cc'],False,"['RelOptPredicateList.java', 'RelOptUtil.java', 'RelMdPredicates.java', 'FilterRemoveIsNotDistinctFromRule.java', 'JoinExtractFilterRule.java', 'SemiJoinFilterTransposeRule.java', 'RexExecutorImpl.java', 'RelDecorrelator.java', 'SqlRexContext.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'MaterializationTest.java', 'SqlToRelConverterTest.java']"
9b62ab3dca7c3c8aac3f8c0106ecc459a291d9a6,"[CALCITE-1502] AssertionError in ReduceExpressionsRule when CASE is used with optional value and literal (Serhii Harnyk)

Close apache/calcite#328",['b196b26d093028565cb59ab36507d1520eed2a9c'],False,"['RexUtil.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
6a2d9e02e7696d46428a19d37cb8ad88ef304981,[CALCITE-1498] Avoid LIMIT with trivial ORDER BY being pushed through JOIN endlessly,['ce2122ff2562340333bfa0ba371872fc9a9c6251'],False,"['RelMdUtil.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
bac9ee7cb7e76d6307e34091b5a132e3d068dfd7,"Test case for [CALCITE-1493], and clean up test infrastructure

Also, fix a minor performance issue when tracing is disabled.",['751e2b0c6d6e19bef7f07b1e0acf1ce491b59311'],False,"['Prepare.java', 'FlatLists.java', 'CalciteAssert.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'SqlToRelTestBase.java', 'RelOptRulesTest.xml']"
e4d3ad0bdc3beb03e5777b82d15684c6c78e12ee,"[CALCITE-1522] Fix error message for SetOp with incompatible args (Jess Balint)

Close apache/calcite#331",['c397f37bda7bbb6f323aa43dd44f0a3733c2d8b6'],False,"['SetOp.java', 'RelBuilder.java', 'RelBuilderTest.java']"
02752fe78f817ed317b8873d2f4c7b79bfe8b9b5,"[CALCITE-1527] Support DML in the JDBC adapter (Christian Tzolov)

Extend CalcisteAssert to verify DML statements;
Resolve the RowType for SqlNode UPDATE consistently with the INSERT and DELETE;
Add field sourceExpressionList field to TableModify;
Implement DML for JDBC Adapter (i.e. DmlRel-To-Sql);
Make sure the ResultSetEnumerable keeps the statment/connection open.

Use same code path for INSERT ... VALUES and INSERT ... SELECT;
fix pretty-printing of INSERT ... VALUES (Julian Hyde).",['106dcc0fa58d651c17a3a01993e23f4bf3fdbf89'],False,"['EnumerableTableModify.java', 'EnumerableTableModifyRule.java', 'JdbcRules.java', 'JdbcTable.java', 'JdbcToEnumerableConverter.java', 'RelOptUtil.java', 'CalcitePrepareImpl.java', 'TableModify.java', 'LogicalTableModify.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'ResultSetEnumerable.java', 'ModifiableTable.java', 'SqlInsert.java', 'SqlValuesOperator.java', 'SqlWriter.java', 'SqlRowOperator.java', 'SqlStdOperatorTable.java', 'SqlPrettyWriter.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'CalciteAssert.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'JdbcToSparkConverter.java']"
1ccebc89befa93a0bf2a4d98cf35b2558a37f6d4,"[CALCITE-1493] Wrong plan for NOT IN correlated queries

The problem was that RelBuilder.join for correlations needed to add
the filter below the right-hand input.

Additional fix due to Vineet Garg.

Also added a few more RelBuilder methods, and a test case for
[CALCITE-1513] Correlated NOT IN query throws AssertionError.

Improve deduction of nullability of NOT NOT EXISTS.",['9535efb6ce35f02ce8de7034c90def37a130fac6'],False,"['RelOptUtil.java', 'SubQueryRemoveRule.java', 'LogicVisitor.java', 'RelDecorrelator.java', 'RelBuilder.java', 'RelBuilderTest.java', 'RelOptRulesTest.java', 'RexTransformerTest.java', 'RelOptRulesTest.xml', 'blank.iq', 'subquery.iq', 'algebra.md']"
e38d51e8f4e61e32213aaeb39790e58069f718a4,"[CALCITE-1519] Standardize on ""sub-query"" rather than ""subquery"" in class names and comments

There are lots of backward-compatible changes (e.g. leaving the old
name but deprecated) but the following changes are breaking (albeit
to APIs not widely used):
* public interface SubqueryConverter becomes SubQueryConverter
* public enum RelOptUtil.SubqueryType becomes SubQueryType
* public void SqlPrettyWriter.setSubqueryStyle() becomes setSubQueryStyle
* public void SqlToRelConverter.setSubqueryConverter() becomes setSubQueryConverter
* public boolean SqlToRelConverter.canConvertSubquery() becomes canConvertSubQuery
* public boolean SqlToRelConverter.convertSubquery() becomes convertSubQuery
* public SqlToRelConverter.Config.getInSubqueryThreshold() becomes getInSubQueryThreshold",['1ccebc89befa93a0bf2a4d98cf35b2558a37f6d4'],False,"['Parser.jj', 'RelOptUtil.java', 'Prepare.java', 'Sample.java', 'CalciteResource.java', 'SqlKind.java', 'SqlOperator.java', 'SqlSelect.java', 'SqlWriter.java', 'SqlSimpleParser.java', 'SqlInOperator.java', 'SqlStdOperatorTable.java', 'SqlAbstractParserImpl.java', 'SqlPrettyWriter.java', 'SelectNamespace.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'SubQueryConverter.java', 'Programs.java', 'CalciteResource.properties', 'SqlParserTest.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlPrettyWriterTest.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlPrettyWriterTest.xml', 'misc.iq', 'sub-query.iq', 'CsvTest.java', 'MongoRules.java', 'history.md']"
cd806089478dae1276280c1bedf487c9719907fa,Fix Strong functionality broken in [CALCITE-1526],['d6940a1a9384b55f1c94de9ea4d2aaab4dac5b83'],False,"['RelOptUtil.java', 'Strong.java', 'RexProgramTest.java']"
1d2067bd0497540b3e416ac5c7440ea9578cd196,"[CALCITE-1511] Decorrelation fails if query has more than one EXISTS in WHERE clause

[CALCITE-1537] Unnecessary project expression in multi-sub-query plan

Add ""planMid"" resource to RelOptRulesTest, checked if lateDecorrelate
is enabled.

Add a test case for multiple scalar sub-queries, but it won't be fixed
until [CALCITE-1045].",['3f261072c96a3c5042b2987c35880826f0a47a00'],False,"['SubQueryRemoveRule.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RelOptRulesTest.xml', 'sub-query.iq']"
70b8325130bc6be953e5a9a0ce99f9e0c383268b,"Concluding [CALCITE-1555] Enable Join.isValid

This change corrects the nullability of RexInputRefs used in a Join's
ON clause. Previously, a namespace used in an outer join was made
nullable, but that was incorrect for the ON clause. To fix, we add
class ScopeChild and record that the namespace is nullable when used
from afar, but we don't alter the row type of the namespace.",['1d2067bd0497540b3e416ac5c7440ea9578cd196'],False,"['Join.java', 'AbstractNamespace.java', 'DelegatingNamespace.java', 'DelegatingScope.java', 'EmptyScope.java', 'JoinScope.java', 'ListScope.java', 'OverScope.java', 'ScopeChild.java', 'SelectScope.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'TableScope.java', 'WithScope.java', 'SqlToRelConverter.java', 'RelOptRulesTest.java']"
31d68f71b01f016625a1def800c283820c600840,"[CALCITE-1551] Preserve alias in RelBuilder.project (Jess Balint)

This is accomplished by changing the structure of the Frame in
RelBuilder to include alias and field information for all fields in the
RelNode irrespective of their origin. Rel aliases also preserved on
group keys through aggregate operations.

In PigRelBuilder, we retain aggregate aliases, because Pig Latin
relies upon them.

Close apache/calcite#340",['0ef3660d68d81c9221dfdc6b2eabd8f886fb618d'],False,"['PigRelBuilder.java', 'RelBuilder.java', 'PigRelBuilderTest.java', 'RelBuilderTest.java', 'StreamTest.java', 'RelOptRulesTest.xml']"
934271f21c18da33cb69d7e932a7438a6fa63529,"[CALCITE-1547] Release Calcite 1.11.0

Add release notes, change version number, change copyright year.

Re-format older release notes.",['b0362231a6b1cbc85a0e1fe2308d2476800f1511'],False,"['NOTICE', 'README', 'pom.xml', 'history.md', 'howto.md']"
408285f08f0b8e0e019dc0c6fe02d8e05425f4a3,"[CALCITE-1543] Correlated scalar sub-query with multiple aggregates gives AssertionError (Kurt Young)

Add TPC-H test case (Julian Hyde)

Close apache/calcite#343",['8dd935ee5513fcfd3e12e5bbab091247d01741d7'],False,"['RelDecorrelator.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'TpchTest.java']"
446c2b7611be33571baff005ceb4651d9fe6ed1f,"[CALCITE-1258] JDK 1.9

Upgrade JMH, so that it works on JDK 1.9.

Apparently MEDIUM format strings for date and date-time have changed
in JDK 1.9, so make them explicit.

Upgrade maven-javadoc-plugin, due to [MJAVADOC-442].

Javadoc no longer likes tags: remove @sql.92, @sql.99, @sql.2003,
@pre, @post.",['2b9663752a0bfffce4641450b01365cc4f2124e1'],False,"['Parser.jj', 'VolcanoRuleCall.java', 'VolcanoRuleMatch.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypePrecedenceList.java', 'RexOver.java', 'SqlCollation.java', 'SqlUtil.java', 'SqlAbstractParserImpl.java', 'BasicSqlType.java', 'ReturnTypes.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlTypeFactoryImpl.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'SqlLimitsTest.java', 'pom.xml', 'howto.md']"
5c6a94f4beb10fd73adc324ca9f906a9a5970d8c,"[CALCITE-1567] JDK9 support for Avatica

97 tests are disabled because Mockito doesn't work under JDK9. I have
logged [CALCITE-1568] to re-enable them when Mockito is fixed.",['446c2b7611be33571baff005ceb4651d9fe6ed1f'],False,"['AvaticaConnectionTest.java', 'AvaticaStatementTest.java', 'QueryStateTest.java', 'AbstractHandlerTest.java', 'AvaticaCommonsHttpClientImplTest.java', 'AvaticaHttpClientTest.java', 'KerberosConnectionTest.java', 'ProtobufHandlerTest.java', 'DropwizardHistogramTest.java', 'DropwizardMeterTest.java', 'DropwizardMetricsSystemTest.java', 'DropwizardTimerTest.java', 'MetricsSystemLoaderTest.java', 'pom.xml', 'JdbcMetaTest.java', 'StatementInfoTest.java', 'AbstractAvaticaHandlerTest.java', 'HandlerFactoryTest.java', 'HttpServerBuilderTest.java', 'BaseTckTest.java']"
2c2b883910147b429ed38030cc6cf6543ace6e98,[CALCITE-1571] Could not resolve VIEW with SimpleCalciteSchema,['5184aa7baba6298a31fa063e5ac2c55e41a21a13'],False,"['CachingCalciteSchema.java', 'CalciteSchema.java', 'SimpleCalciteSchema.java', 'JdbcTest.java']"
28ae333f0c7174b758487dbb5ddef91dacacd213,"[CALCITE-1574] Memory leak in maven

Upgrade maven-jar-plugin and maven-source-plugin to versions that
have fixed [MSOURCES-94].

Disable UdfTest.testUserDefinedFunction; logged
  [CALCITE-1561] Intermittent test failures
to remind us to re-enable.

Skip javadoc on Travis; with it, builds exceed Travis time limit.",['46474d74d3a0851037fd7103ba59adeffbebdab0'],False,"['.travis.yml', 'UdfTest.java', 'pom.xml']"
5f9c019080c7231acaf3df80732d915351051d93,"[CALCITE-1549] More helpful error message when schema, table or column not found",['28ae333f0c7174b758487dbb5ddef91dacacd213'],False,"['RexImpTable.java', 'CalciteSchema.java', 'JavaTypeFactoryImpl.java', 'CalciteCatalogReader.java', 'Prepare.java', 'RelOptTableImpl.java', 'CalciteResource.java', 'Table.java', 'Wrapper.java', 'SqlIdentifier.java', 'AbstractNamespace.java', 'DelegatingScope.java', 'DelegatingSqlValidatorCatalogReader.java', 'EmptyScope.java', 'IdentifierNamespace.java', 'ListScope.java', 'OrderByScope.java', 'SqlNameMatcher.java', 'SqlNameMatchers.java', 'SqlQualified.java', 'SqlValidatorCatalogReader.java', 'SqlValidatorImpl.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'WithScope.java', 'SqlToRelConverter.java', 'Util.java', 'CalciteResource.properties', 'LookupOperatorOverloadsTest.java', 'DefaultSqlTestFactory.java', 'SqlAdvisorTest.java', 'CollectionTypeTest.java', 'ExceptionMessageTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MockCatalogReader.java', 'MultiJdbcSchemaJoinTest.java', 'ReflectiveSchemaTest.java', 'SqlToRelTestBase.java', 'SqlValidatorTest.java', 'UtilTest.java', 'misc.iq']"
a118f821e3d49b6fc30c0e1e39d72026f2bf6ea1,"[CALCITE-1578] Druid adapter: wrong semantics of topN query limit with granularity

[CALCITE-1579] Druid adapter: wrong semantics of groupBy query limit with granularity

[CALCITE-1580] Druid adapter: Wrong semantics for ordering within groupBy queries

Add CalciteAssert.returnsStartingWith, to allow checking large results
without introducing LIMIT to the query (which might cause Calcite to
use a different plan).",['a621902869d0e95b8b46c58e33e870ef1a76c17e'],False,"['CalciteAssert.java', 'DruidQuery.java', 'DruidRules.java', 'DruidAdapterIT.java']"
83e517d51f2601a4795ec386a2e17f9a6e3c7303,"[CALCITE-1594] ConventionTraitDef.getConversionData() is not thread-safe

Symptom is a hang in the test suite, with many threads in
ConventionTraitDef.getConversionData() and waiting to lock a WeakHashMap.
The solution is to replace the WeakHashMap with a LoadingCache, which is
thread-safe.",['e5c9f2ed3d44e690185ff7c5da25a9d655fbfc9e'],False,['ConventionTraitDef.java']
c3288a1443f1934db6e081ef691c251ba063edc8,"[CALCITE-1535] Give error if column referenced in ORDER BY is ambiguous (Zhen Wang)

Close apache/calcite#359",['0f45481daf31ebdec8e8e6b9f42262b5fe3a9257'],False,"['OrderByScope.java', 'SqlValidatorTest.java']"
603648bc2466ab699fa6646ffc1ad717b8c11880,"[CALCITE-1597] Obsolete Util.newInternal, .pre, .post, .permAssert and Throwables.propagate

Replace Util.newInternal with new AssertionError in some contexts,
new RuntimeException in others. Replace methods pre, pos, permAssert
in Util with methods in Preconditions.

Remove uses of Throwables.propagate and .propagateIfPossible because
they are deprecated as of Guava 20. Create method
Util.throwIfUnchecked because we can't use Guava's
Throwables.throwIfUnchecked yet.",['89f112511ce741c06349015a5f247cfb64ce23a8'],False,"['CassandraRules.java', 'Parser.jj', 'AggregateNode.java', 'CalciteConnectionImpl.java', 'CachingLatticeStatisticProvider.java', 'ConventionTraitDef.java', 'RelOptUtil.java', 'HepPlanner.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'AbstractRelNode.java', 'BiRel.java', 'ConverterImpl.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'JaninoRelMetadataProvider.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'CalcRelSplitter.java', 'JoinCommuteRule.java', 'ProjectToWindowRule.java', 'ReduceDecimalsRule.java', 'RexBuilder.java', 'RexLiteral.java', 'RexProgramBuilder.java', 'ViewTable.java', 'SqlCallBinding.java', 'SqlLiteral.java', 'SqlNode.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'SqlSyntax.java', 'SqlWindow.java', 'SqlLikeOperator.java', 'SqlMinMaxAggFunction.java', 'SqlAbstractParserImpl.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'BasicSqlType.java', 'ReturnTypes.java', 'SqlTypeAssignmentRules.java', 'SqlTypeUtil.java', 'ReflectiveSqlOperatorTable.java', 'AbstractNamespace.java', 'SetopNamespace.java', 'SqlIdentifierMoniker.java', 'SqlValidatorImpl.java', 'ReflectiveConvertletTable.java', 'RelFieldTrimmer.java', 'SqlNodeToRexConverterImpl.java', 'SqlToRelConverter.java', 'RelRunners.java', 'Closer.java', 'ReflectUtil.java', 'SaffronProperties.java', 'Util.java', 'JaninoCompiler.java', 'VolcanoPlannerTest.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'DiffRepository.java', 'JdbcAdapterTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'QuidemTest.java', 'ReflectiveSchemaTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RexProgramTest.java', 'SqlTestGen.java', 'SqlToRelTestBase.java', 'StreamTest.java', 'DruidConnectionImpl.java', 'DruidQuery.java', 'DruidAdapterIT.java', 'ElasticsearchSchema.java', 'CsvEnumerator.java', 'CsvStreamReader.java', 'CsvTest.java', 'MongoRules.java', 'MongoAdapterIT.java', 'CalciteHandler.java']"
d335e48ce62bf124a961343d7b843c045ffb6b15,"[CALCITE-1569] Code generation for fields of type java.sql.Date (Zhen Wang)

Date condition currently generates Integer == Integer, which is
always false.

Review comments from Julian Hyde: The fix isn't ideal. I'd rather
that we convert java.sql.Date values when they enter the system. And,
if we allow java.sql.Date values then we should treat java.util.Date,
java.sql.Time and java.sql.Timestamp values similarly. But, being
pragmatic, I'm going to accept the patch because it fixes cases that
didn't work previously. If we see further problems in this area, we
might back out the changes and do it properly.

Close apache/calcite#356",['499b55e32b5febe1c88612c3b80ebb71b3b71f88'],False,"['EnumerableTableScan.java', 'JavaRowFormat.java', 'PhysTypeImpl.java', 'RexToLixTranslator.java', 'SqlFunctions.java', 'ReflectiveSchemaTest.java']"
7605d42185ac627f33d14ffbb0e95d6ca4082659,"[CALCITE-1600] In Meta.Frame.create, change type of ""offset"" parameter from ""int"" to ""long"" (Gian Merlino)

Close apache/calcite#351",['ae12a5dcc47ad1afc9a023a2b498a328196afb44'],False,['Meta.java']
fdf017aad5c339c6c41441156dfaf60805f25343,Following [CALCITE-1619] fix javadoc error and clarify javadoc,['2c9fddfe7db9c0c7c55b8a8b2fe1b00948cd94b2'],False,['DruidAdapterIT.java']
4f257149f1f52d5f42d505ee53186e88a578fc3f,[CALCITE-1622] Bugs in website example code (Damjan Jovanovic),['fdf017aad5c339c6c41441156dfaf60805f25343'],False,['index.md']
7f9f4a165006756ace562d618b81909600736fed,Fix build broken with Guava 21 by [CALCITE-1628],['824d7e7a5943891ed39052c4e6e737646e52721c'],False,['SemiJoinRule.java']
57b38db5ee1ee31b444fbd535d8df574f8cd7e11,[CALCITE-365] AssertionError while translating query with WITH and correlated sub-query,['7f9f4a165006756ace562d618b81909600736fed'],False,"['RelDecorrelator.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'misc.iq', 'sub-query.iq']"
d6093f080215a51c7617747440569c13611ee70d,"[CALCITE-1621] Adding a cast around the null literal in aggregate rules (Anton Mushin)

Fix over-zealous Aggregate simplification in [CALCITE-1634] (Julian Hyde).

Close apache/calcite#371",['b74d3b13eb98e71633a724e8f2d1a7ceadaf9352'],False,"['AggregateExpandDistinctAggregatesRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateValuesRule.java', 'RelBuilder.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
1b11385687171946d961fc4c836ee348f682b00a,"[CALCITE-1654] Avoid generating a String from the Request/Response when it will not be logged

An OutOfMemoryError lead us to find that for each request and response
handled by Avatica, the protobuf message is converted to a String, even
if it would not be logged. This can cause a bit of unnecessary pressure
on the heap usage.

Closes apache/calcite#380",['abfcc79bcd635ee73791c2d647c3f843d047ee5d'],False,['ProtobufTranslationImpl.java']
cf46d3be19f701ad056aba3b60a701b962e0f1b0,"[CALCITE-884] Web adapter (Henry Olson)

Some fix-ups (Julian Hyde):
* Upgrade calcite;
* Upgrade natty, jsoup;
* Rename files, and move to org.apache.calcite.adapter.file package;
* Add file adapter documentation and history (based on original README
  and HISTORY);
* Add EMPS.html and DEPTS.html examples.",['1b11385687171946d961fc4c836ee348f682b00a'],False,"['SchemaFactory.java', 'pom.xml', 'FileEnumerator.java', 'FileFieldType.java', 'FileReader.java', 'FileReaderException.java', 'FileRowConverter.java', 'FileSchema.java', 'FileSchemaFactory.java', 'FileTable.java', 'FileTableScan.java', 'package-info.java', 'FileReaderTest.java', 'FileSuite.java', 'SqlTest.java', 'package-info.java', 'sales.json', 'DEPTS.html', 'EMPS.html', 'tableNoTH.html', 'tableNoTheadTbody.html', 'tableOK.html', 'tableX2.html', 'testModel.json', 'webjoin.sql', 'wiki.json', 'pom.xml', 'adapter.md', 'file.md', 'history.md', 'sqlline', 'sqlline.bat']"
24c25fc30315f308df13eb303177163e5a972949,"Following [CALCITE-884] Add CSV, JSON functionality to file adapter

Add interface Source, as a common facade over File and URL;
change example CSV adapter to use Source rather than File.

Relative paths in CSV and File adapter are now relative to the model,
rather than relative to the current directory. This makes it easier to
use the same model.json file from tests and from sqlline.

Create table ""States_as_of"", a snapshot the ""States"" wikipedia table
at a particular date, to ensure test stability.",['cf46d3be19f701ad056aba3b60a701b962e0f1b0'],False,"['Source.java', 'Sources.java', 'CalciteSuite.java', 'SourceTest.java', 'CsvEnumerator.java', 'CsvFilterableTable.java', 'CsvScannableTable.java', 'CsvSchema.java', 'CsvStreamReader.java', 'CsvStreamScannableTable.java', 'CsvStreamTableFactory.java', 'CsvTable.java', 'CsvTableFactory.java', 'CsvTranslatableTable.java', 'JsonEnumerator.java', 'JsonTable.java', 'pom.xml', 'FileEnumerator.java', 'FileReader.java', 'FileRowConverter.java', 'FileSchema.java', 'FileSchemaFactory.java', 'FileTable.java', 'FileReaderTest.java', 'SqlTest.java', 'sales.json', 'testModel.json', 'wiki.json', 'pom.xml']"
ee289e4f42ad9e3a36d9c80a01cf3df86393bd8f,"Add test case for [CALCITE-685]

Currently throws AssertionError: ""Correlation variable $cor0 should be defined"" in EnumerableRelImplementor.getCorrelVariableGetter.",['34997ad1bb0b4ff0d4ed738859127872029ebf0e'],False,['JdbcTest.java']
052f854594f92fd52a142c53998b83d70302075b,"[CALCITE-1439] Handle errors during constant reduction

If there is an error during constant reduction, simply return the
original expression. Then the query will return an error when
executed, which is the desired behavior.",['98016a4e3c456fb78240e3f2273ccc92a3e8a207'],False,"['RexExecutable.java', 'RexProgramTest.java', 'misc.iq']"
73e437fe5c13182a49c36b1abc559384dfbe94d2,"[CALCITE-1494] More efficient plan for correlated sub-queries, omitting value-generating scans where possible

Omit value-generator for correlation variables joined to columns or
expressions.

Fix NOT IN and nested correlation (Vineet Garg).

Rename Correlation to CorRef and CorDef.

In comments inside RelDecorrelator, change ""LogicalFilter"" to ""Filter"", etc.",['052f854594f92fd52a142c53998b83d70302075b'],False,"['RexUtil.java', 'RelDecorrelator.java', 'JdbcTest.java', 'MaterializationTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'EnumerableCorrelateTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'blank.iq', 'misc.iq', 'sub-query.iq']"
4ba9d1b2284b93bee8f94d4fcff62b8ff2235d84,"[CALCITE-1664] CAST('<string>' as TIMESTAMP) wrongly adds part of sub-second fraction to the value

Fix is in Avatica. In Calcite, add a test case (currently with the wrong result, until we upgrade to the Avatica version with the fix).",['bb6ae0acf76d7890d545b64c29b0d0d60ed43190'],False,"['DateTimeUtils.java', 'DateTimeUtilsTest.java', 'misc.iq']"
952214a24fdc70c602500cac3b4d7b0e873f6399,"[CALCITE-1661] Support aggregation functions on DECIMAL in DruidAdapter

* Fixes issue with family type identification",['24df135e976ade48147c6d7f8d8302ae3aced9ce'],False,"['DruidQuery.java', 'DruidRules.java']"
4a3df4ef9746760b17c639c6b5be609a31adcd5c,Improved plan due to [CALCITE-1601] fix,['952214a24fdc70c602500cac3b4d7b0e873f6399'],False,['DruidAdapterIT.java']
f8546915671cc4d96fa3b5561e289c3bfd80209f,"[CALCITE-1655] Druid adapter: add IN filter (Slim Bouguerra)

We cannot do end-to-end tests of IN and BETWEEN because Calcite
expands these before creating RexNode, but this change contains unit
tests of converting RexCall with IN and BETWEEN into Druid JSON.

Close apache/calcite#381",['4e1038255163792b8055d1b0c3f312bda872252d'],False,"['pom.xml', 'DruidQuery.java', 'DruidQueryFilterTest.java', 'pom.xml']"
55d7c6d80faf8a4b1b54bbde41b79064f1e36466,[CALCITE-1675] Two-level column name cannot be resolved in ORDER BY,['a56b84e3ba2dbcb47b60f040c86a43209acc154c'],False,"['DelegatingScope.java', 'ListScope.java', 'MatchRecognizeScope.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
0d996daf5df17fb9b05d62fb143f3478bbaa3c80,"[CALCITE-1684] Change default precision of VARCHAR and VARBINARY from 1 to ""unspecified"" (Kevin Liew)

If you concatenate two strings and the sum of their precisions is
greater than the maximum precision (65,536 by default on Calcite, but
can be overriden in RelDataTypeSystem) the result precision will be
unspecified.

When casting from unspecified precision to a particular precision,
may need to truncate values.

Some unrelated USING tests, and fix typos in method names.

Close apache/calcite#394",['46672b41fdb0c0aedb30d0ec7158d138d36222d5'],False,"['RexToLixTranslator.java', 'RelDataTypeSystemImpl.java', 'ReturnTypes.java', 'SqlTypeFactoryImpl.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'SqlTests.java', 'SqlValidatorTest.java', 'misc.iq', 'PigFilter.java', 'PigAdapterTest.java', 'PigRelBuilderStyleTest.java']"
713c8f4fc9931b7118f393b9348441f25e36c9a2,"[CALCITE-1561] Make PigTest cluster aware of data files; hopefully this will prevent intermittent test failures (Eli Levine)

Also add dependencies.

Close apache/calcite#397",['e0a1f7d3069f0eefeb8bdd411a250cd1fb0532f3'],False,"['pom.xml', 'PigRelBuilderStyleTest.java']"
5ee4378454e6b2302841d0bd0b3aba0c70a39912,"[CALCITE-1700] Further cleanup on the StandaloneServer

* Remove unnecessary dependencies
* Consolidates shade-plugin configuration
* Removes confusing re-use of 'server' package
* Fixes log4j.properties",['8bac70e5020c50505b34df6eaae18c0ca414f2c2'],False,"['pom.xml', 'StandaloneServer.java', 'package-info.java', 'java.sql.Driver', 'log4j.properties']"
1e405d63e6a25d3411ecc0cfe8f13f0c5d30068a,[CALCITE-1715] Downgrade to Guava 19.0 to fix Cassandra incompatibility,['5ee4378454e6b2302841d0bd0b3aba0c70a39912'],False,['pom.xml']
9c8b5979754855d06226f6c3879aee04cabcb3af,[CALCITE-1716] Fix Cassandra integration tests,['1e405d63e6a25d3411ecc0cfe8f13f0c5d30068a'],False,['CassandraAdapterIT.java']
a89c62cd6d6cc181c90881afa0bf099746739a91,"Add file headers; fix rat, assembly and checkstyle warnings

Rename a few private Druid rule classes to be consistent with naming
convention, and fix javadoc.",['9c8b5979754855d06226f6c3879aee04cabcb3af'],False,"['DruidRules.java', 'pom.xml', 'avatica_json_reference.md', 'avatica_overview.md', 'avatica_protobuf_reference.md', 'avatica_roadmap.md', 'source-assembly.xml']"
cf5ff72b7ee7877c8782a649c21d43c40c9389b2,"Add news item for release 1.12.0

Also update list of upcoming talks,
change references to ""JDK 1.x"" to ""JDK x"",
squash some of Jekyll's garbage whitespace,
and fix Ted's picture.",['9ef9430c382fb3c3a92898e4990f4b7b909ad2ee'],False,"['contributors.yml', 'history.md', 'howto.md', 'docs_contents_mobile.html', 'docs_option.html', 'news_contents_mobile.html', '2017-03-24-release-1.12.0.md', 'index.md', 'index.md']"
c231aae494ffd3a587bf4ddd21c71e95813e3daa,"Site: Fix a broken link to Avatica overview

Make the base URL of Avatica's site into a variable.",['370dfdac54de00c883869954cfaaf5e20f0f2519'],False,"['_config.yml', 'adapter.md', 'history.md', '2016-03-22-release-1.7.0.md', 'index.html']"
9f87b666976181d7946aa9c6c4fefef01c53858c,"[CALCITE-1734] Fix select query result parsing with druid 0.9.2 (Nishant Bangarwa)

Close apache/calcite#416",['95c6918463166b13898cf50868f6d290f8384770'],False,['DruidConnectionImpl.java']
04c0c8b6f212e513aba76a36e62f99e4bde4370e,"[CALCITE-1725] Push project aggregate of time extract to druid

* Fixes in Extract output column name to avoid possible name collisions.
* Handling CAST in translation.
* Style fixes.",['ef03b6e4c6dbae800e7c1aaa1deb5bbd7960e911'],False,"['DruidDateTimeUtils.java', 'DruidQuery.java', 'DruidRules.java', 'ExtractionDimensionSpec.java', 'TimeExtractionDimensionSpec.java', 'TimeExtractionFunction.java', 'DruidAdapterIT.java']"
e76d5ee33a3cda0d9ce495e21681f5bede25f129,"[CALCITE-1725] Push project aggregate of time extract to druid

* Fix 'testPushAggregateOnTime' test.",['35cd2abc8a53c746eabcd9f273ec2dd3b9dee98e'],False,"['DruidConnectionImpl.java', 'DruidQuery.java', 'DruidAdapterIT.java']"
0d2d11f3b8ab4a11279b4f73d0cd913902872880,"[CALCITE-1639] TIMESTAMPADD(MONTH, ...) should return last day of month if the day overflows (Hongbin Ma)

Close apache/calcite#431",['cd136985af5b9d0b74751bd65d9669996363786e'],False,"['SqlFunctions.java', 'SqlOperatorBaseTest.java', 'SqlFunctionsTest.java']"
e9d0ca6731b2f5ec33b9270b5ffcaaf9e4eb8537,[CALCITE-1456] Change SubstitutionVisitor to use generic RelBuilder instead of Logical instances of the operators when possible,['9a691a7db88f96f930a4a4609f8aea6df601a909'],False,"['MaterializedViewSubstitutionVisitor.java', 'SubstitutionVisitor.java', 'MutableRels.java']"
7cec056a0fc3c4c93d6e3b7de0a687ad213c0825,Fix javadoc,['e9d0ca6731b2f5ec33b9270b5ffcaaf9e4eb8537'],False,"['RelOptUtil.java', 'BuiltInMetadata.java', 'RelMdAllPredicates.java', 'RelMdExpressionLineage.java', 'RelMdNodeTypes.java', 'RelMdTableReferences.java', 'RelMetadataQuery.java', 'AbstractMaterializedViewRule.java', 'RexTableInputRef.java', 'RexUtil.java', 'SqlParserTest.java', 'MaterializationTest.java', 'materialized_views.md']"
c94a080b3520a568e5452cc33ca3a443cf2f50ab,"Fix OVERLAPS operator

Refactor StandardConvertletTable, creating methods to help create
calls to common operators.",['39c22f0c8b7b5b46a152f432e8708ce73ace1ef7'],False,"['StandardConvertletTable.java', 'Bug.java', 'SqlOperatorBaseTest.java']"
6f07293a3843c8790af9c028b2962fd8a0512db9,[CALCITE-1767] Fix join/aggregate rewriting rule when same table is referenced more than once,['d2368327ede5891417e579998c0e30e1ef5c54c5'],False,"['RelMdAllPredicates.java', 'AbstractMaterializedViewRule.java', 'RexTableInputRef.java', 'RexUtil.java', 'MaterializationTest.java', 'RelMetadataTest.java']"
bb74e5a0c6e9d769dcc52bad1a92f810b475f2ee,"[CALCITE-1771] Upgrade to Druid 0.10.0 (Nishant Bangarwa)

The main work is in https://github.com/vlsi/calcite-test-dataset/pull/20;
in Calcite it's just a documentation change (plus checking that the tests
pass).

Close apache/calcite#442",['ef00738a053cbe881f2c840f3e3b5feeb010b6e1'],False,['history.md']
a11d14054e9c1d2ce22f60e11536f1885faaae7c,"[CALCITE-1761] Auxiliary group functions (TUMBLE_START, HOP_END) do not resolve time field correctly

Also, add tests missed in [CALCITE-1615].

Test case by Haohui Mai.

Close apache/calcite#435",['9c10c3da15ee65190cca4767d9a52406ba9ba1b0'],False,"['SqlBasicCall.java', 'SqlGroupFunction.java', 'SqlStdOperatorTable.java', 'AggChecker.java', 'AuxiliaryConverter.java', 'SqlToRelConverter.java', 'MockCatalogReader.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
60b4f4eb10a018e7d6ab8ae4f6ac0f4d0b598b1f,Fix compilation error on guava-21.0 and JDK 9,['fa308a30aee6322fe94ba2e3e6795ad1ac7bc676'],False,['TableNamespace.java']
6b8e2c3d3e4468206ac974a090fa8e7db6b4e347,"[CALCITE-1778] Query with ""WHERE CASE ..."" throws AssertionError ""Cast for just nullability not allowed""

Solve by making RelBuilder remove nullability casts before creating filters.

Remove some spaces from test logs.",['60b4f4eb10a018e7d6ab8ae4f6ac0f4d0b598b1f'],False,"['FilterProjectTransposeRule.java', 'ReduceExpressionsRule.java', 'RexSimplify.java', 'RelBuilder.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
520c0ccc9b8ec4832f69ebba366e23d80326be5f,"[CALCITE-1777] Druid adapter: ""WHERE FALSE"" causes AssertionError (Slim Bouguerra)

Close apache/calcite#444",['6b8e2c3d3e4468206ac974a090fa8e7db6b4e347'],False,"['DruidRules.java', 'DruidAdapterIT.java']"
ea994131cd6d109ff7edf5e61754104e2b8619be,"[CALCITE-1770] Druid adapter: CAST(NULL AS ...) gives NPE (Slim Bouguerra)

Avoid pushing literal NULL values to Druid.

Close apache/calcite#448",['e046be23d7364e16648ade5240ad948a04cc814b'],False,"['DruidQuery.java', 'DruidAdapterIT.java']"
32cca802ecded64cceff5a3d98cf981e25b6769b,Disable test pending fix for [CALCITE-1789] Wikipedia format change breaks file adapter test,['ea994131cd6d109ff7edf5e61754104e2b8619be'],False,"['FileReaderTest.java', 'SqlTest.java']"
868d64140d446cdb33652c0c76c4038b1ca26a14,"Add test case for [CALCITE-1769] Push filter involving cast to numeric down to Druid

The test case specifies a query as a RelNode tree rather than the
usual SQL. A work around for [CALCITE-1774] was necessary to make it
work.

It turns out that [CALCITE-1769] was fixed in 1.12, probably
[CALCITE-1695].

Fix log4j.properties; now tracing goes to the console, not a file.

Close apache/calcite#440",['7c7e932eb1dbb0d2d759303d37d0e21c8fb24c69'],False,"['Prepare.java', 'DruidAdapterIT.java', 'log4j.properties']"
1342d4cbb8099dc6a1820014a3ccc90a0d57106b,"[CALCITE-1795] Extend materialized view rewriting to produce rewritings using Union operators

Includes 'Invalid range' fix in RexSimplify.processRange",['6689c7536a94dfed760c65f57c987dfeadc6d71b'],False,"['AbstractMaterializedViewRule.java', 'RexSimplify.java', 'CalciteAssert.java', 'MaterializationTest.java', 'RexProgramTest.java']"
d619304070bf2874ab760c92ec2573ee6c19f536,"[CALCITE-1788] Simplify handling of position in the parser

Add a new class, Span, a mutable builder for SqlParserPosition. It makes
it easier to keep track of the positions of all of the tokens and
non-terminals that are being reduced to a non-terminal.

Extension parsers may need to change ""SqlParserPos pos"" parameters to
""Span s"".",['7d8e0528bec568e2abe7f8287510c1e79b178b1d'],False,"['Parser.jj', 'SqlImplementor.java', 'SqlItemOperator.java', 'Span.java', 'SqlAbstractParserImpl.java', 'SqlParserPos.java', 'SqlValidatorImpl.java', 'parserImpls.ftl', 'SqlParserTest.java', 'SqlValidatorTest.java', 'PigletParser.jj', 'history.md', 'reference.md']"
b6175f807d62ea5be268e1312d9ea52e569f56cb,Fix in examples added in CALCITE-1796,['991784971006ede1caec5f8e8c2452a77dd485c9'],False,['materialized_views.md']
4519ef6e599ebe9b1c182016bea62d0ac920ea1a,"[CALCITE-1742] Create a read-consistent view of CalciteSchema for each statement compilation

Add interface Schema#snapshot(long).

CalciteCatalogReader should not add resolved tables into
CalciteSchema's explicit table map.

Close apache/calcite#421",['f8ab9078bae8c519ce4c86d741490779ea899a14'],False,"['ReflectiveSchema.java', 'JdbcSchema.java', 'CachingCalciteSchema.java', 'CalciteConnectionImpl.java', 'CalciteMetaImpl.java', 'CalcitePrepare.java', 'CalciteResultSet.java', 'CalciteSchema.java', 'SimpleCalciteSchema.java', 'MaterializationService.java', 'CalciteCatalogReader.java', 'CalcitePrepareImpl.java', 'RelOptTableImpl.java', 'RexUtil.java', 'Schema.java', 'Schemas.java', 'AbstractSchema.java', 'DelegatingSchema.java', 'EmptyScope.java', 'RexExecutorTest.java', 'LinqFrontJdbcBackTest.java', 'MockRelOptPlanner.java', 'MultiJdbcSchemaJoinTest.java', 'RexImplicationCheckerTest.java', 'CsvSchema.java']"
915c218b0fcbff26652071d267903d97875c7b9e,"[CALCITE-1807] Upgrade to Avatica 1.10.0

Includes fix to [CALCITE-1664] CAST('<string>' as TIMESTAMP) adds part of sub-second fraction to the value

Replace uses of DateTimeUtils.GMT_Zone with UTC_ZONE.",['c8462e1acb01c0ff1b5d62a1ef318bfcc01301c0'],False,"['Parser.jj', 'RexLiteral.java', 'SqlDialect.java', 'Util.java', 'SqlParserTest.java', 'CalciteAssert.java', 'JdbcTest.java', 'SqlLimitsTest.java', 'misc.iq', 'DruidConnectionImpl.java', 'FileRowConverter.java', 'pom.xml']"
946b24f4dc163dee018de90b2dcf7082bb892cfe,"Following [CALCITE-1798] implement date-time FLOOR for more JDBC dialects (Chris Baynes)

Add support for MySQL and Microsoft SQL Server;
also fix a bug in the PostgreSQL and Oracle implementations.

Close apache/calcite#458",['205af8134857ba312415b9a5b4a48020fe0ce888'],False,"['SqlFloorFunction.java', 'RelToSqlConverterTest.java']"
83cef58b2b51e3e428fa50e532bf6ce6fa8f201c,"[CALCITE-1802] Add post-aggregation step for Union in materialized view rewriting

Fix for expressions on top of view, DISTINCT and additional tests",['f22a9965a4e0f97b4f60c29ad52c0328a6a1e221'],False,"['AbstractMaterializedViewRule.java', 'MaterializationTest.java']"
d4b0acdd32552360f983013aa1ab7505e19f4a28,"[CALCITE-1816] JaninoRelMetadataProvider generated classes leak ACTIVE nodes on exception (Remus Rusanu)

GeneratedMetadataHandler_XXX methods now remove ACTIVE guard nodes from
mq.map for any exception, not just NoHandler.

Close apache/calcite#461",['83cef58b2b51e3e428fa50e532bf6ce6fa8f201c'],False,['JaninoRelMetadataProvider.java']
6cb4d45b02b03a71f4fe1ce52844f750e3ec1fd8,"[CALCITE-1613] Implement EXTRACT for time unit DOW, DOY; and fix CENTURY

Remove the functions and tests that were moved over to Avatica in
[CALCITE-1608].

Leave functions and tests that were added in [CALCITE-1639] and have not
yet been moved to Avatica.",['d4b0acdd32552360f983013aa1ab7505e19f4a28'],False,"['StandardConvertletTable.java', 'SqlOperatorBaseTest.java', 'SqlFunctionsTest.java']"
4069013f1b49fc1b83f5e1b608be15f1774b2b38,"Improved fix for [CALCITE-1810]

Use SqlOperandTypeInference, and as a result, we can deduce the types
of array constructor arguments during SQL-to-Rel conversion; now
queries work end-to-end. Also works for MULTISET as well as ARRAY.",['f164fb8eaa9dbcbb44b0a3e1cd3427d457ebffb8'],False,"['SqlMultisetValueConstructor.java', 'SqlValidatorImpl.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'misc.iq']"
91d95762158bb8937fedcd0b9ff334cf049fa92b,Disable another test pending fix for [CALCITE-1789] Wikipedia format change breaks file adapter test,['d393cab26e72f3c0de5eebcbeac5d94fff87a997'],False,['FileReaderTest.java']
e57c7372aca1679a2178c3a5fb2e71933e6f6908,[CALCITE-1847] Fix failing queries in Cassandra adapter,['56d5261abb893dd92b0a2cc4893292876a2b7880'],False,['CassandraTable.java']
395d379127c7407827246614bd61253152c15805,Fix for Windows,['e57c7372aca1679a2178c3a5fb2e71933e6f6908'],False,"['SourceTest.java', 'pom.xml', 'PigRelBuilderStyleTest.java']"
1855861a1a54b450aa72b5ef098fcbd2ce3d430c,"Cosmetic changes

Problems addressed:
* trailing spaces;
* missing <p> and <blockquote> in javadoc;
* missing newline at ends of files;
* missing space in 'if(', 'switch(' etc.

Change ""new BigDecimal"" to ""BigDecimal.valueOf"", now we no longer support JDK 1.4.",['395d379127c7407827246614bd61253152c15805'],False,"['CassandraRules.java', 'CassandraSchema.java', 'CloneSchema.java', 'AggResetContext.java', 'PhysType.java', 'JsonColumn.java', 'SubstitutionVisitor.java', 'VisitorDataContext.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'TableModify.java', 'RelXmlWriter.java', 'RelMdPredicates.java', 'AbstractMaterializedViewRule.java', 'IntersectToDistinctRule.java', 'JoinPushThroughJoinRule.java', 'MultiJoinProjectTransposeRule.java', 'PushProjector.java', 'ReduceDecimalsRule.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeSystemImpl.java', 'StructKind.java', 'RexFieldAccess.java', 'RexProgramBuilder.java', 'RexTableInputRef.java', 'SocketFactoryImpl.java', 'ModifiableView.java', 'SchemaFactory.java', 'TableFactory.java', 'SqlIntervalQualifier.java', 'SqlSplittableAggFunction.java', 'SqlStateCodes.java', 'SqlWindow.java', 'SqlWriter.java', 'SqlFloorFunction.java', 'package-info.java', 'SqlParseException.java', 'SqlPrettyWriter.java', 'CompositeOperandTypeChecker.java', 'ExtraSqlTypes.java', 'ReturnTypes.java', 'SqlSingleOperandTypeChecker.java', 'SqlValidatorUtil.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'Glossary.java', 'NumberUtil.java', 'Permutation.java', 'ReflectUtil.java', 'StackWriter.java', 'Mappings.java', 'RelBuilderExample.java', 'SqlTester.java', 'DiffRepository.java', 'MaterializationTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RexImplicationCheckerTest.java', 'package-info.java', 'TestUtil.java', 'DruidRules.java', 'ElasticsearchAdapterIT.java', 'CsvEnumerator.java', 'DEPTS.csv', 'DEPTS.csv', 'Linq4j.java', 'Deterministic.java', 'ConstantUntypedNull.java', 'OptimizeShuttle.java', 'PigAggregate.java', 'Ast.java', 'materialized_views.md', '2015-11-10-release-1.5.0.md', 'sqlline']"
a088aab78655e138353f40b57bebaf3cf3aec939,"[CALCITE-1805] Druid adapter incorrectly pushes down ""COUNT(c)""; Druid only supports ""COUNT(*)""

Fixes DruidAdapterIT.testGroupByAvgSumCount and DruidAdapterIT.testTimeExtractThatCannotBePushed",['12e020e0f6e157f9339ecaedeb1570cc46d7f99d'],False,"['AggregateNode.java', 'DruidAdapterIT.java']"
bdaa485eecf7e5d6a80b3ee7cc3ccd5579c41794,"[CALCITE-1805] Druid adapter incorrectly pushes down ""COUNT(c)""; Druid only supports ""COUNT(*)""

Fixes issue with multiple mixed aggregate functions",['304eb9c54dd0565fd48006b75c715c944f82f974'],False,"['DruidRules.java', 'DruidAdapterIT.java']"
f63a65a8c6ffd9a771e27ef0446496c6b67baeea,[CALCITE-1852] Fix for UnionMergeRule to deal correctly with EXCEPT,['db95f5ba8247a5c00039719e246d6ee27f04d6cf'],False,"['UnionMergeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
43e32fa5a4d5828370dbdf9cffe3bb295ffc475a,[CALCITE-1855] Fix float values in Cassandra adapter,['d5c713c5cd447e261e3ae5cffa728c073f425e28'],False,['CassandraEnumerator.java']
03bb2cea517a62c9d7c80295527328e1b5c84ef9,"[CALCITE-1854] Fix value range of TINYINT in documentation (James Xu)

Close apache/calcite#480",['43e32fa5a4d5828370dbdf9cffe3bb295ffc475a'],False,['reference.md']
df826434d7c674caa29a0d1709a52f3e1013baf5,"Split the mock catalog into ""core"" and ""extended""

Not only the extended catalog take longer to create, but it creates
views, which require parsing and validation, and therefore a ""simple""
validation test is no longer simple, and tends to hit a lot of spurious
break points before the real action starts happening. For most tests,
the core catalog is sufficient.",['319e888f792f1f416cbddbf77f02fd167195eef2'],False,"['DefaultSqlTestFactory.java', 'DelegatingSqlTestFactory.java', 'SqlAdvisorTest.java', 'SqlTestFactory.java', 'MockCatalogReader.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'SqlToRelConverterTest.xml']"
47c8df9ecad8aa0c8a65530dd89b94b3749f54a2,"[CALCITE-1833] User-defined aggregate functions with more than one parameter (hzyuemeng1)

I don't like the fact that SqlUserDefinedAggregateFunction now has a
type factory field. I see why it is necessary - because the
SqlFunction.getParamTypes method does not take a type factory argument -
but we should consider changing it in future.

Close apache/calcite#481",['f47465236b7650f2280092b708fa39062fe79ffd'],False,"['CalciteCatalogReader.java', 'SqlUserDefinedAggFunction.java', 'UdfTest.java', 'Smalls.java']"
d4ab1e508b47e4e168296ad701742e879f05c571,"[CALCITE-1873] In a ""GROUP BY ordinal"" query, validator gives invalid ""Expression is not being grouped"" error if column has alias

The solution is to ignore column aliases when validating a ""GROUP BY
ordinal"" query. Otherwise, you get an error like ""Expression 'EMP.EMPNO'
is not being grouped"" (see test case).

Close apache/calcite#490",['47c8df9ecad8aa0c8a65530dd89b94b3749f54a2'],False,"['SqlValidatorImpl.java', 'SqlValidatorTest.java']"
b199b9cd0d8959961a2469f3274f87ff0c8122ac,Cosmetic changes,['8e707d433f6f0e0ca9a35218fd8f92e555eb1b4d'],False,"['RelMetadataQuery.java', 'DateRangeRules.java', 'SqlCollation.java', 'SqlIntervalQualifier.java', 'SqlToRelConverter.java', 'JdbcFrontLinqBackTest.java', 'ConcurrentTestPluginCommand.java']"
05595f64902aa02c22a1a92c23452d74ceef02fe,Fix plan changes in Druid tests caused by [CALCITE-1842],['551b5622cfbc913c8ee547d6b95ba7898c7f340c'],False,"['DruidDateTimeUtils.java', 'DruidAdapterIT.java']"
0cbd2a1825768835dccce1b24f746bc968908c3a,[CALCITE-1900] Detect cyclic views and give useful error message,['bdb953fa06d6549039c2967404b0194ab7ae6a8c'],False,"['CalciteConnectionImpl.java', 'CalcitePrepare.java', 'CalciteResource.java', 'Schemas.java', 'ViewTableMacro.java', 'CyclicDefinitionException.java', 'IdentifierNamespace.java', 'CalciteResource.properties', 'JdbcTest.java']"
b516216b6a51fb17b9cebb47e5b84c31207bab8f,"[CALCITE-1899] When reading JSON model, give error if mandatory JSON attributes are missing",['ee0afb6e38ce09f82cc1883aae757306b55ce8fe'],False,"['JsonColumn.java', 'ModelHandler.java', 'ModelTest.java']"
a473eca597300395ff89f949401505ec122a9774,"[CALCITE-1907] Table function with 1 column gives ClassCastException

Create a new test class, TableFunctionTest. Move some existing tests for
user-defined table functions from JdbcTest and UdfTest into
TableFunctionTest, and add some new ones.

StdinTableFunction, to be added in [CALCITE-1896], also relies on this
fix.",['bdaa33f9cac508c3802ad0fcced34f1bb37a63c0'],False,"['EnumerableRelImplementor.java', 'EnumerableTableFunctionScan.java', 'SqlValidatorImpl.java', 'CalciteSuite.java', 'JdbcTest.java', 'TableFunctionTest.java', 'UdfTest.java', 'Smalls.java']"
54ed57f8244384cf56323450feb5e6cfd6bc6245,"[CALCITE-1931] Change the return type of RANK and other aggregate functions

Various aggregate functions that used to return INTEGER now return other
types: RANK, DENSE_RANK, and NTILE now return BIGINT;
CUME_DIST and PERCENT_RANK now return DOUBLE.

Close apache/calcite#511",['c2d388578237c3db366f734f559cae04791d96af'],False,"['RelDataTypeSystem.java', 'RelDataTypeSystemImpl.java', 'SqlRankFunction.java', 'SqlNtileAggFunction.java', 'SqlStdOperatorTable.java', 'ReturnTypes.java', 'JdbcTest.java', 'SqlToRelConverterTest.xml', 'history.md']"
7321c8708bd1273b8cd4aab818bf3abb55afb2a4,"[CALCITE-1930] Fix AggregateExpandDistinctAggregatesRule when there are multiple AggregateCalls referring to the same input

Close apache/calcite#510",['bfaea7ccfd33e9a4b5fee1617f56f2ccdd78db08'],False,"['AggregateExpandDistinctAggregatesRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'agg.iq']"
ea4095ad41e38415d7bdd67e2a2fe1764043b0bc,"[CALCITE-1787] Add ThetaSketch and HyperUnique support to Calcite via rolled up columns (Zain Humayun)

* Fixes mvn site",['025eaf118f820ce4659d3891b838aa01016e7012'],False,['Table.java']
183004093139d697b479a32b1f82db511bf74127,"[CALCITE-1944] Window function applied to sub-query that returns dynamic star gets wrong plan (Volodymyr Vysotskyi)

Also some minor/cosmetic changes:
* Ensure that SqlSelect.windowDecls and .keywordList are not null.
* Fix javadoc in AbstractTable.
* Rename/move a few resources in SqlToRelConverterTest.

Close apache/calcite#517",['22e5cfc0d0cf05fab398e3d5aa49209d5e1424ca'],False,"['AbstractTable.java', 'SqlSelect.java', 'SqlWindow.java', 'SqlValidatorImpl.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
9ab47c0000732ec99c3162954e1eb74eaa30cddf,"[CALCITE-1963] Upgrade checkstyle, and fix code to comply

Upgrade maven-checkstyle-plugin from 2.12.1 (checkstyle 5.7) to
2.17 (checkstyle 6.11.2).

Ensure compliance with the new version: lots of cosmetic changes,
especially whitespace, no functionality changes.

I would have liked to set Indentation.forceStrictCondition=true, to
ensure that parameter and argument lists are indented correctly. But it
generates lots of false-negatives in nested expressions, so we can't
do it at this point.",['210fa866e792ce379f2deb52f79fc0686866f07a'],False,"['CassandraEnumerator.java', 'CassandraLimit.java', 'CassandraRules.java', 'CassandraTable.java', 'CassandraToEnumerableConverter.java', 'CassandraToEnumerableConverterRule.java', 'CassandraAdapterIT.java', 'ArrayTable.java', 'ColumnLoader.java', 'ListTable.java', 'EnumerableAggregate.java', 'EnumerableInterpretable.java', 'EnumerableMergeJoin.java', 'EnumerableRelImplementor.java', 'EnumerableRules.java', 'EnumerableWindow.java', 'RexImpTable.java', 'WinAggImplementor.java', 'ReflectiveSchema.java', 'JdbcRules.java', 'JdbcTable.java', 'AbstractSingleNode.java', 'Interpreter.java', 'CachingCalciteSchema.java', 'CalciteConnectionImpl.java', 'CalciteJdbc41Factory.java', 'CalciteMetaImpl.java', 'CalcitePrepare.java', 'JavaTypeFactoryImpl.java', 'CachingLatticeStatisticProvider.java', 'Lattice.java', 'TileSuggester.java', 'ConventionTraitDef.java', 'RelCompositeTrait.java', 'RelOptListener.java', 'RelOptRule.java', 'RelOptUtil.java', 'RexImplicationChecker.java', 'TableAccessMap.java', 'HepInstruction.java', 'HepRelMetadataProvider.java', 'RelSet.java', 'VolcanoPlanner.java', 'VolcanoRelMetadataProvider.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'CalciteSqlValidator.java', 'LixToRelTranslator.java', 'QueryableRelBuilder.java', 'RelOptTableImpl.java', 'Match.java', 'RelFactories.java', 'LogicalWindow.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'JaninoRelMetadataProvider.java', 'ReflectiveRelMetadataProvider.java', 'RelMdColumnUniqueness.java', 'RelMdPredicates.java', 'RelMdUtil.java', 'RelMetadataProvider.java', 'RelMetadataQuery.java', 'RelToSqlConverter.java', 'AbstractMaterializedViewRule.java', 'AggregateJoinTransposeRule.java', 'AggregateUnionTransposeRule.java', 'CalcRelSplitter.java', 'FilterRemoveIsNotDistinctFromRule.java', 'JoinToMultiJoinRule.java', 'LoptSemiJoinOptimizer.java', 'ProjectToWindowRule.java', 'PushProjector.java', 'SubQueryRemoveRule.java', 'RelDataTypeSystemImpl.java', 'RexCallBinding.java', 'RexExecutorImpl.java', 'RexOver.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexUtil.java', 'RexWindowBound.java', 'CalciteResource.java', 'Enumerables.java', 'FlatLists.java', 'Like.java', 'ResultSetEnumerable.java', 'SqlFunctions.java', 'Schemas.java', 'TableFunction.java', 'SqlDescribeSchema.java', 'SqlDescribeTable.java', 'SqlDialect.java', 'SqlIntervalQualifier.java', 'SqlMatchRecognize.java', 'SqlSplittableAggFunction.java', 'SqlUtil.java', 'SqlWithItem.java', 'SqlAdvisorGetHintsFunction.java', 'SqlArgumentAssignmentOperator.java', 'SqlDefaultOperator.java', 'SqlExtendOperator.java', 'SqlGroupIdFunction.java', 'SqlGroupingFunction.java', 'SqlGroupingIdFunction.java', 'SqlItemOperator.java', 'SqlOverlapsOperator.java', 'SqlRollupOperator.java', 'SqlStdOperatorTable.java', 'BasicSqlType.java', 'OperandTypes.java', 'ReturnTypes.java', 'SqlOperandCountRanges.java', 'SqlTypeExplicitPrecedenceList.java', 'SqlBasicVisitor.java', 'DelegatingScope.java', 'EmptyScope.java', 'ParameterNamespace.java', 'SqlUserDefinedTableFunction.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'Frameworks.java', 'RelBuilder.java', 'RuleSets.java', 'BitSets.java', 'CompatibleGuava11.java', 'ImmutableBitSet.java', 'ImmutableIntList.java', 'ImmutableNullableList.java', 'PartiallyOrderedSet.java', 'ReflectUtil.java', 'Util.java', 'XmlOutput.java', 'Graphs.java', 'JaninoCompiler.java', 'MappingType.java', 'Mappings.java', 'CalciteTrace.java', 'RootHr.java', 'ArrayTableTest.java', 'JdbcExample.java', 'CalciteRemoteDriverTest.java', 'TraitPropagationTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'SqlParserTest.java', 'ExtensionSqlParserTest.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'CalciteAssert.java', 'CalciteSuite.java', 'ExceptionMessageTest.java', 'FilteratorTest.java', 'FoodmartTest.java', 'InterpreterTest.java', 'JdbcTest.java', 'MaterializationTest.java', 'MockCatalogReader.java', 'ReflectiveSchemaTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'ScannableTableTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorMatchTest.java', 'SqlValidatorTest.java', 'StreamTest.java', 'ConcurrentTestCommand.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestTimedCommandGenerator.java', 'PlannerTest.java', 'Smalls.java', 'UtilTest.java', 'DruidConnectionImpl.java', 'DruidRules.java', 'QueryType.java', 'DruidAdapterIT.java', 'ElasticsearchFilter.java', 'ElasticsearchProject.java', 'ElasticsearchRules.java', 'ElasticsearchSchema.java', 'ElasticsearchTable.java', 'ElasticsearchAdapterIT.java', 'CsvEnumerator.java', 'CsvFieldType.java', 'JsonEnumerator.java', 'CsvTest.java', 'Maze.java', 'SqlTest.java', 'EnumerableDefaults.java', 'Linq4j.java', 'Ord.java', 'QueryProviderImpl.java', 'QueryableDefaults.java', 'Functions.java', 'BlockBuilder.java', 'ClassDeclarationFinder.java', 'ExpressionWriter.java', 'Expressions.java', 'FunctionExpression.java', 'OptimizeShuttle.java', 'Linq4jExample.java', 'CorrelateJoinTest.java', 'DeterministicTest.java', 'ExpressionTest.java', 'Linq4jSuite.java', 'Linq4jTest.java', 'MongoEnumerator.java', 'MongoRules.java', 'MongoTable.java', 'PigAggFunction.java', 'PigDataType.java', 'PigTableScan.java', 'PigToEnumerableConverterRule.java', 'PigAdapterTest.java', 'Handler.java', 'CalciteHandler.java', 'Fluent.java', 'FilesTableFunction.java', 'Processes.java', 'PsTableFunction.java', 'VmstatTableFunction.java', 'TpcdsSchema.java', 'TpchSchema.java', 'TpcdsTest.java', 'PlusSuite.java', 'pom.xml', 'SparkRel.java', 'SparkRuntime.java', 'SparkToEnumerableConverter.java', 'SplunkDriver.java', 'SplunkTable.java', 'SplunkConnectionImpl.java', 'SplunkAdapterTest.java', 'StatementTest.java']"
ddae8411cf3fc92360da7e856dce9d3c6b1f7524,"Fix data race in RexCall.toString() (Christian Beikov)

Close apache/calcite#531",['cc20ca13db4d506d9d4d1b861dd1c7ac3944e56e'],False,['RexCall.java']
1e7ae1c30a5e6f4335f2e4cc0059f2f2901e35fd,"[CALCITE-1069] In Aggregate, deprecate indicators, and allow GROUPING to be used as an aggregate function

Deprecate the Aggregate.indicator field (strongly encouraging people
to set it to false) and to allow GROUPING (and its synonym, GROUP_ID)
to be used as an aggregate function. It will be handled at implement
time.

With indicator = false, even queries with more than one grouping set
will just output the join keys and the aggregate functions. A join key
will be nullable if it doesn't appear in all grouping sets.

The output row type of Aggregate will be more consistent, and this will
have benefits such as fewer bugs in rules.

Add RelBuilder.rename().

Remove SqlValidatorNamespace.translate() and
SqlQualified.suffixTranslated().

Mute deprecation warnings.

Remove MutableAggregate.indicator.

Close apache/calcite#470",['ddae8411cf3fc92360da7e856dce9d3c6b1f7524'],False,"['AggContext.java', 'AggResultContext.java', 'EnumerableAggregate.java', 'EnumerableWindow.java', 'RexImpTable.java', 'AggAddContextImpl.java', 'AggResetContextImpl.java', 'AggResultContextImpl.java', 'WinAggResultContextImpl.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'Aggregate.java', 'RelFactories.java', 'LogicalAggregate.java', 'MutableAggregate.java', 'MutableRels.java', 'AbstractMaterializedViewRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinTransposeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'FilterAggregateTransposeRule.java', 'IntersectToDistinctRule.java', 'StreamRules.java', 'CalciteResource.java', 'SqlAggFunction.java', 'SqlAbstractGroupFunction.java', 'SqlGroupIdFunction.java', 'SqlGroupingFunction.java', 'SqlStdOperatorTable.java', 'AggFinder.java', 'AggregatingSelectScope.java', 'DelegatingNamespace.java', 'IdentifierNamespace.java', 'SqlQualified.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'CalciteResource.properties', 'RelWriterTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'SqlValidatorTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'agg.iq']"
310eaa0016a21155fa3d504ba6028c81c49d0d60,"Various tweaks

They are:
* Plug some resource leaks
* Add tests for SELECT DISTINCT ... GROUP BY (they already work)
* Fix OsAdapterTest on Windows; the 'files', 'vmstat' and 'ps' tables do not work on Windows
* In checkstyle, LICENSE and NOTICE don't need header

A pull request we forgot to close in CALCITE-1959:

Close apache/calcite#529",['939c9a62b4905d2cfffcb4adaefd76a809aa3520'],False,"['TableFunctionTest.java', 'agg.iq', 'SqlShell.java', 'OsAdapterTest.java', 'suppressions.xml']"
172db20b2571c676465ccf58e2fd1475748906e9,"[CALCITE-1947] Add time/timestamp with local time zone types to optimizer

* Fixes javadoc",['310eaa0016a21155fa3d504ba6028c81c49d0d60'],False,['RexBuilderTest.java']
67071b6b0ba52eeb953badfff39fa10d85b80bf5,"Annotate interface SqlDialect.Handler (added in [CALCITE-1841]) as ""experimental"" until we settle [CALCITE-1913]

Allow annotation Experimental to apply to constructors.

Also fix a couple of issues from [CALCITE-1947]:
* Long(long) constructor is deprecated in JDK 1.9;
* java.sql.Types.TIME_WITH_TIMEZONE dnd TIMESTAMP_WITH_TIMEZONE don't
  exist until JDK 1.8.",['1f04d556fad1ba8ef4a9ac6f73aca2bdbb945f37'],False,"['SqlDialect.java', 'SqlTypeFamily.java', 'RexProgramTest.java', 'Experimental.java']"
4abb30f755be8ec188b3bd4a8ae1358802dc6f99,Update Coverity URL in documentation,['d633402c41158da3fc00eebcf0e75b0c7da71450'],False,['howto.md']
43fa8e94249d796d0e42b366feb4a8c886994aa4,Add test case for 'select * as x' parser bug,['7a9857504af654d518004a07f05798ebdfd253c1'],False,['SqlParserTest.java']
8441e79cdde01a901de894d44b597cf582a259d1,"[CALCITE-1988] Various code quality issues

* Fix error that SqlNode.clone does not call super.clone; deprecate
  it, and add SqlNode.clone(SqlNode)
* Fix error that NlsString.clone does not call super.clone
* Make AggregateNode.AccumulatorList static, because non-static inner
  classes must not implement Serializable
* Change XmlOutput.content to not use LineNumberReader.readLine, which
  is susceptible to a DoS attack",['d173640c202238c8cb6bdb87d20ab4f3f9fcc88b'],False,"['AggregateNode.java', 'SqlBinaryStringLiteral.java', 'SqlCharStringLiteral.java', 'SqlDateLiteral.java', 'SqlIntervalLiteral.java', 'SqlLiteral.java', 'SqlNode.java', 'SqlNumericLiteral.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlCoalesceFunction.java', 'SqlNullifFunction.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'NlsString.java', 'XmlOutput.java', 'UtilTest.java']"
1a71a66bac99f588e33896c385174eed51f1de16,"Fix URL in FileSchemaFactory javadoc (Marc Prud'hommeaux)

Close apache/calcite#537",['f1a002ea8386fc89abcebc185b1f0e7a7bd30246'],False,['FileSchemaFactory.java']
6971a3065f7f93e9882b044b41ab69babdd46364,"[CALCITE-1983] Push EQUALS and NOT EQUALS operations with numeric cast on dimensions to Druid
* Fix value for strict flag
* Adding additional tests",['fb760a6f4e0cf8ccf92380dd676a72d00402d53e'],False,"['DruidQuery.java', 'DruidAdapterIT.java']"
06c18ca74df2d4bf20a5dccef11d424ab28c97d7,"[CALCITE-2007] Fix RexSimplify behavior when literals come first.

It would incorrectly simplify ""1 < x AND x < 3"" to ""x < 3"".",['453e928b67d56cc5d6384250c88bb809ec49041c'],False,"['RexSimplify.java', 'RexProgramTest.java']"
6c435a03e83eac6c0d9f13b87ef22ad9f93df714,[CALCITE-2008] Fix braces in TRIM signature.,['06c18ca74df2d4bf20a5dccef11d424ab28c97d7'],False,['SqlTrimFunction.java']
3ab5664b7588d871174004131f3bf179eebb29d5,"Site: Add two talks, and committer Christian Beikov

Change-Id: Ic85748ad59972ef83801e0d641c7db0a37969105",['534b09ffdf4972cb9efb978ef7fae46b9deb8e32'],False,"['contributors.yml', 'index.md']"
45425103c0be0604bb3c6c650f8f13ecb47de519,"[CALCITE-1998] Hive ORDER BY null values (Abbas Gadhia)

Make HiveSqlDialect aware of the version so that it may switch NULLS
FIRST/NULLS LAST behavior based on version.  Use DatabaseMetadata
major and minor version integer values instead of relying on strings
to compare versions.

Add dialect for Google BigQuery.

Change the default NullCollation for MySQL to reflect the correct collation.

Optimize the code generated for NULLS FIRST/LAST based on the order of
the sort. If the default sort would return nulls in the same order as
the NULLS FIRST/LAST flag, then we are dropping the emulation of the
NULLS FIRST/LAST clause.  Change the emulateNulls method to support
all types of NullCollations

Fix javadoc, restore MySQL calls to ISNULL. (Julian Hyde)

Close apache/calcite#545",['17cd76af79920524e7da12a08acee3b52f0055a8'],False,"['NullCollation.java', 'RelFieldCollation.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'SqlDialect.java', 'SqlDialectFactoryImpl.java', 'BigQuerySqlDialect.java', 'HiveSqlDialect.java', 'MysqlSqlDialect.java', 'RelToSqlConverterTest.java', 'JdbcTest.java']"
67bd5446911bd8d1fe96b646affab844d85bb165,"Javadoc fixes (Alexey Roytman)

Javadoc for 'filters' @param of ProjectableFilterableTable.scan()
stated the opposite of the truth, and was in conflict with the method
javadoc.

Javadoc for RelDataType.getFieldCount() had ()() in its description;
fixed.

Close apache/calcite#553",['45425103c0be0604bb3c6c650f8f13ecb47de519'],False,"['CassandraFilter.java', 'RelDataType.java', 'ProjectableFilterableTable.java']"
61f1258c678d40d1041d89bdfec58b665a36fb6b,"[CALCITE-2029] Query with IS DISTINCT FROM condition in WHERE or JOIN clause fails with AssertionError, ""Cast for just nullability not allowed"" (Volodymyr Vysotskyi)

Move fix from Filter constructor to IS DISTINCT FROM convertlet (Julian Hyde)

Close apache/calcite#554",['67bd5446911bd8d1fe96b646affab844d85bb165'],False,"['RelOptUtil.java', 'RexBuilder.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml']"
93a3aaeddb18078352556c5c8859b5e3cae7d482,[CALCITE-2038] Fix incomplete sentence in tutorial,['c25f7c93787f210927c455e9907c753695a273a2'],False,['tutorial.md']
fe3529d9a6d4d826c6e77fc4c0d7d18bd681bb85,"[CALCITE-2035] Allow approximate aggregate functions, and add APPROX_COUNT_DISTINCT

There are changes to RelBuilder and AggregateCall APIs, but extensions
to SQL grammar will not happen until [CALCITE-1588].

In Druid adapter, HyperLogLog will be used if the call is to
APPROX_COUNT_DISTINCT or if approximateDistinctCount=true in connection
properties.",['e07e8ad9fa9357b954cf967b95c7130a15c17b20'],False,"['RelOptUtil.java', 'SubstitutionVisitor.java', 'AggregateCall.java', 'Match.java', 'Window.java', 'RelJsonReader.java', 'AbstractMaterializedViewRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateFilterTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'SubQueryRemoveRule.java', 'SqlSplittableAggFunction.java', 'SqlCountAggFunction.java', 'SqlStdOperatorTable.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'PigRelBuilder.java', 'RelBuilder.java', 'RelWriterTest.java', 'TraitPropagationTest.java', 'SqlOperatorBaseTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'DruidQuery.java', 'DruidRules.java', 'DruidTable.java', 'DruidAdapterIT.java', 'algebra.md', 'reference.md']"
830801b6e9fabc9203e3b2094b9fd0640a3ab8c6,"[CALCITE-2036] Fix ""next"" link on powered_by.html",['20eee6313c87a149fb36392a8edf7ede2ec17705'],False,['section_nav.html']
051809b4dc580bda04c401e861a62b52553c2418,"[CALCITE-2039] AssertionError when pushing project to ProjectableFilterableTable

Test case from Enrico Olivelli.",['f7933c7cb340d5880b43abc00fbb13a6fe0ce827'],False,"['Project.java', 'ScannableTableTest.java', 'FrameworksTest.java']"
0ea976eed7ec6a4368c6002025a1eba0377df509,"[CALCITE-2041] When simplifying a nullable expression, allow the result to change type to NOT NULL

Enable tests for [CALCITE-1439].

Close apache/calcite#570
Close apache/calcite#563",['0d10336a37eabd26b856171a2abcc599eecdc878'],False,"['ReduceExpressionsRule.java', 'ValuesReduceRule.java', 'RexUtil.java', 'SqlOperatorBaseTest.java', 'RelOptRulesTest.java', 'RexImplicationCheckerTest.java', 'RelOptRulesTest.xml']"
a5d520df76602d25ed66627f08f5e0db4d048a77,"[CALCITE-2061] Dynamic parameters in OFFSET, FETCH and LIMIT clauses (Enrico Olivelli)

Fix how dynamic parameters are un-parsed (Julian Hyde)

Close apache/calcite#569",['238b3225a2309a1a72bd1383b57982feaa2068e8'],False,"['Parser.jj', 'EnumerableLimit.java', 'RelMdRowCount.java', 'PruneEmptyRules.java', 'SqlDynamicParam.java', 'SqlValidatorImpl.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'reference.md']"
cd493efd3e892d8279582cd9252204d90caa2589,"[CALCITE-2054] Error while validating UPDATE with dynamic parameter in SET clause (Enrico Olivelli)

Close apache/calcite#568",['a5d520df76602d25ed66627f08f5e0db4d048a77'],False,"['SqlValidatorImpl.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
dad581868b815510389f61936b0c583be93d5dc5,"[CALCITE-1616] Data profiler

Profiler does not work on JDK 7, because it relies on
com.yahoo.datasketches:sketches-core:0.9.0, which needs JDK 8 or
higher. Therefore some tests are disabled on JDK 7.

Change interface LatticeStatisticProvider to estimate joint rather
than singleton cardinality.

Bind LatticeStatisticProvider to a Lattice, and create
LatticeStatisticProvider.Factory to do the binding.

Keep results only if they are sufficiently ""surprising"" (informative).
The ""surprise queue"" is FIFO and holds the top N accepted values,
after a warm-up period

PartiallyOrderedSet: find ""hypothetical"" parents and children of
elements not in the set.",['01eb6b5ec28985eb64892fec0918c4a0a7c4aad0'],False,"['pom.xml', 'CachingLatticeStatisticProvider.java', 'DelegatingLatticeStatisticProvider.java', 'Lattice.java', 'LatticeStatisticProvider.java', 'Lattices.java', 'ProfilerLatticeStatisticProvider.java', 'SqlLatticeStatisticProvider.java', 'Profiler.java', 'ProfilerImpl.java', 'SimpleProfiler.java', 'package-info.java', 'PartiallyOrderedSet.java', 'ProfilerTest.java', 'CalciteSuite.java', 'FoodMartLatticeStatisticProvider.java', 'LatticeTest.java', 'Matchers.java', 'PartiallyOrderedSetTest.java', 'TestUtil.java', 'TpchTest.java', 'pom.xml']"
9bb54006aa5cfd7765f791ccaef5e25afacaed86,[CALCITE-2005] Test failures on Windows,['dad581868b815510389f61936b0c583be93d5dc5'],False,"['Interpreter.java', 'CalciteAssert.java', 'RelMetadataTest.java', 'UtilTest.java', 'pom.xml', 'FileReaderTest.java']"
3763abfab2675faeabd2bca9803e86d52aa50cca,"[CALCITE-1808] JaninoRelMetadataProvider loading cache might cause OutOfMemoryError

Limit the size of the cache, controlled by property
""saffron.metadata.handler.cache.maximum.size"" (default 1,000).",['189aad19c4f904e4dd0602fb64c65c5586f093b2'],False,"['JaninoRelMetadataProvider.java', 'SaffronProperties.java', 'Matchers.java', 'RelMetadataTest.java']"
314b5b78b0817d324901e9ce52483fa1de2135c1,"Site: News item for release 1.15.0

Fix hyperlinks for previous releases.",['fdb17bb794a901b586a90fee38432e9a1b3e1496'],False,"['2016-06-13-release-1.8.0.md', '2016-09-22-release-1.9.0.md', '2016-10-12-release-1.10.0.md', '2017-01-09-release-1.11.0.md', '2017-03-24-release-1.12.0.md', '2017-06-26-release-1.13.0.md', '2017-10-02-release-1.14.0.md', '2017-12-11-release-1.15.0.md']"
04cbdb2cead5985322db737e1b0b8ce2259a7306,"[CALCITE-2080] Query with NOT IN operator and literal throws AssertionError: 'Cast for just nullability not allowed' (Volodymyr Vysotskyi)

Alternative fix (in SqlToRelConverter rather than RelOptUtil);
fix query formatting in SqlToRelConverterTest. (Julian Hyde)

Close apache/calcite#579",['314b5b78b0817d324901e9ce52483fa1de2135c1'],False,"['FilterProjectTransposeRule.java', 'RexSimplify.java', 'RexUtil.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
01be1ce69a5cafd8c60d528c28f1220554ee48c7,"[CALCITE-2071] Query with IN and OR in WHERE clause returns wrong result (Vineet Garg)

Initial test case. (Volodymyr Vysotskyi)

Add quidem tests; add a method to derive collations for EnumerableCalc,
without which one of the added tests gets a failed assert when project
is pushed through an EnumerableMergeJoin. (Julian Hyde)

Close apache/calcite#575",['3a335bec79a7a0455d83fe40788c8e5b765f8d7f'],False,"['RelOptUtil.java', 'RelMdCollation.java', 'SqlToRelConverter.java', 'JdbcTest.java', 'sub-query.iq']"
01ee7235b76f8d0111d43ab9d46655c3804777c0,"[CALCITE-2102] Ignore duplicate ORDER BY keys, and ensure RelCollation contains no duplicates (John Fang)

Now, a RelCollation is guaranteed to have unique fields, via a
precondition. SqlToRelConverter and RelBuilder eliminate duplicates,
so users should not receive an error.",['ac5cce707a743299107ba3fd1cfc9a24e745ef42'],False,"['EnumerableMergeJoinRule.java', 'RelCollationImpl.java', 'RelCollations.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'Util.java', 'RelCollationTest.java', 'RelBuilderTest.java', 'SqlToRelConverterTest.java', 'UtilTest.java', 'SqlToRelConverterTest.xml', 'sort.iq']"
a609b4732f545b7a17006728f0d36587b2babc95,"[CALCITE-2105] AggregateJoinTransposeRule incorrectly makes a SUM call NOT NULL when Aggregate has no group keys (jingzhang)

Close apache/calcite#590",['f496d6821adfe9a1584b20c77361b85fbe6873be'],False,"['AggregateJoinTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
cb8376b13ad50003134e398a87161bec68908606,"[CALCITE-2108] AggregateJoinTransposeRule incorrectly splits a SUM0 call when Aggregate has no group keys (jingzhang)

Close apache/calcite#591",['a609b4732f545b7a17006728f0d36587b2babc95'],False,"['SqlSplittableAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
1e9fd38ba7b702675a066f6bd712d03b7b07410e,"[CALCITE-1658] DateRangeRules incorrectly rewrites EXTRACT calls (Nishant Bangarwa)

Fix several issues where DateRangeRules incorrectly rewrites EXTRACT
calls, causing wrong results.

Close apache/calcite#596

Close apache/calcite#587 (unrelated, but forgot to close it in [CALCITE-2102])",['2a171fb86a64e06208564d02ab24bca23d426a0a'],False,"['DateRangeRules.java', 'DateRangeRulesTest.java', 'DruidDateRangeRulesTest.java']"
d3b35a4b5c9270f905175fefa312ab5d8207c1b0,"[CALCITE-2113] Prune the columns coming from the input of an Aggregate by pushing a Project, in both core and Druid adapter (Nishant Bangarwa)

Introduce a rule, DruidAggregateExtractProjectRule that
transforms Aggregate(DruidQuery) to Aggregate(Project(DruidQuery)).
The Project would fix column pruning to Druid in case
HepPlanner is used to plan queries.

Also a general-purpose rule AggregateExtractProjectRule.

Close apache/calcite#594",['1e9fd38ba7b702675a066f6bd712d03b7b07410e'],False,"['AggregateExtractProjectRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'DruidRules.java', 'DruidAdapterIT.java']"
eac017c1a63ca1f5834443cd5a78eefef871db01,Disable broken MongoDB tests; logged [CALCITE-2115] to fix them (Vladimir Dolzhenko),['d3b35a4b5c9270f905175fefa312ab5d8207c1b0'],False,['MongoAdapterIT.java']
1945c9a9283121f7a690ec024632dcd09dff8351,"[CALCITE-2111] In HepPlanner, allow applying rules to RelNodes in depth-first order (LeoWangLZ)

Add new HepMatchOrder value DEPTH_FIRST, and make it the default for
HepPlanner. It is more efficient than ARBITRARY because it avoids
applying the same rule repeatedly to the whole tree each time there is
a match.",['b88bd70a95d5d1b9566141cd38aae5507c2bcea2'],False,"['HepMatchOrder.java', 'HepPlanner.java', 'HepProgram.java', 'HepPlannerTest.java']"
d26330f2c58c1ccd470dc27d2b41b6b4dbb41b45,"Following [CALCITE-2111], fix compilation error that occurs on guava-21 and higher

Close apache/calcite#592",['1945c9a9283121f7a690ec024632dcd09dff8351'],False,['AggregateExtractProjectRule.java']
8de5d8d000104fc1e48d77abac72811c52fd9cf1,"[CALCITE-1188] NullPointerException when EXTRACT is applied to NULL date field (Alessandro Solimando)

This commit is just a test case, and it passes; the bug was apparently fixed a while ago.

Fix a compilation error caused by upgrade to Java 8.

Close apache/calcite#607
Close apache/calcite#608

Change-Id: I5afd0f0609353666fe6236883357beb77cd10c92",['0ecbdab792a80b1f05c6e03e99026f854b7e3af6'],False,"['JdbcTest.java', 'Ast.java']"
be2fe5f95827eb911c49887882268749b45e372b,"[CALCITE-2139] Upgrade maven checkstyle plugin, and fix formatting (Vijay Kumar)

Upgrade maven-checkstyle-plugin from 2.17 (checkstyle 6.11.2) to
3.0.0 (checkstyle 6.18).

Close apache/calcite#609",['adc1bb265c45cef92c26b028c2fe4cc9bdead3f3'],False,"['ProjectToWindowRule.java', 'pom.xml']"
e3a3f7b7915923323e698d0585a2b70fadb35ce6,"Following [CALCITE-2107], fix failing tests in DruidAdapterIT (Nishant Bangarwa)

Close apache/calcite#612",['be2fe5f95827eb911c49887882268749b45e372b'],False,"['DruidDateTimeUtils.java', 'TimeExtractionFunction.java', 'DruidAdapterIT.java']"
a59d677254a10c16920af26d2b19033bbb0e58ce,"Following [CALCITE-1054], fixing failed tests in CoreQuidemTest",['d1bada4231c2ce81b6236e0c11d73c85a7df6e83'],False,"['RexImpTable.java', 'misc.iq']"
6e22245aee0b6d581bdfb5ff0b7aec0d9ff44088,"[CALCITE-1265] In JDBC adapter, push OFFSET and FETCH to data source

In SqlDialect, add a method unparseOffsetFetch, so each dialect has
total control of the syntax it generates; supportsOffsetFetch is now
deprecated, because its boolean return value allowed only two options.

Disable some MySQL and H2 tests; all tests now pass for MySQL, H2 and
PostgreSQL.

Disable a test broken by [CALCITE-1054].",['1bd6839bc3f755c3e5599a1e251e4772e33e3f56'],False,"['JdbcRules.java', 'SqlDialect.java', 'HiveSqlDialect.java', 'HsqldbSqlDialect.java', 'MysqlSqlDialect.java', 'RedshiftSqlDialect.java', 'SqlPrettyWriter.java', 'JdbcTest.java', 'LatticeTest.java']"
3432c774d017d738dff0b5ee76e6a32f1d87183e,[CALCITE-2075] Fix and re-enable SparkAdapterTest,['6e22245aee0b6d581bdfb5ff0b7aec0d9ff44088'],False,"['pom.xml', 'SparkHandlerImpl.java', 'SparkAdapterTest.java']"
e25e74977f4205ab085e8c2472a323df437511f5,"[CALCITE-2162] Exception when accessing sub-field of sub-field of composite Array element (Shuyi Chen)

Solve problem by changing stripDot method to be recursive.

Close apache/calcite#620",['5c2164da9c19b0b13c29c975af3cc0403b2cbbe7'],False,"['SqlValidatorImpl.java', 'MockCatalogReader.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
facd83d311098dd3f35294ba969a19cbf6d54467,"[CALCITE-2128] Add SQL dialect for Jethro Data (Jonathan Doron)

Before creating a JethroDataSqlDialect, SqlDialectFactoryImpl issues a
""show functions extended"" command to Jethro, storing the results in a
cache for next time, and passes the list of supported functions to the
dialect.

Close apache/calcite#602",['0ced3b7f5d641c034a7c8867ec088e5c2decf4e3'],False,"['JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcTableScan.java', 'AbstractJoinExtractFilterRule.java', 'JoinExtractFilterRule.java', 'SqlDialect.java', 'SqlDialectFactory.java', 'SqlDialectFactoryImpl.java', 'JethroDataSqlDialect.java', 'RelToSqlConverterTest.java']"
6b1d24746624b13c97df401f344449f44cb6b3bd,"[CALCITE-2187] Fix build issue caused by CALCITE-2170

Close apache/calcite#631",['0e13a8a021b6bdfa64967b5640dc8b970c11883a'],False,['DruidQuery.java']
a78400f43b5b4a8e7aa01273b2b76f9ad9c907b5,"Oops! Javadoc fixes for CALCITE-2170

Also some formatting changes.",['78ff09a0ae13b34179fd80f4a4a425b3a4acd842'],False,['DruidQuery.java']
d329331932628fb446fc8404639cb67190cab1cc,"[CALCITE-2183] Implement RelSubset.copy (Alessandro Solimando)

Before this fix, during the trim fields phase of query preparation
RelSubset.copy would throw UnsupportedOperationException. This would
only occur if the root was a registered RelSubset, which only occurred
if the root had previously been flattened, which only occurred if Spark
was enabled.",['47c49c9c64e4ec9e6ff6d33f1c7917c7927e673a'],False,"['RelSubset.java', 'misc.iq', 'SparkAdapterTest.java']"
a1fe769114a15559b5f352059aec1f91f416a28b,"[CALCITE-2081] Query with windowed aggregates under both sides of a JOIN throws NullPointerException (Zhen Wang)

Fixed by introducing a counter so that the two windows would have
distinct variable names in generated code. Before this fix there was
a NullPointerException during code generation.

Remove an unused constant.

Close apache/calcite#634",['37a83b10293d80f3d3b89df8027d0311d2f95cfa'],False,"['EnumerableRelImplementor.java', 'EnumerableWindow.java', 'winagg.iq']"
353a8be07b431d04951c05ef2c195f207272f390,"[CALCITE-2179] General improvements for materialized view rewriting rule

* Addendum to create references based on input node type during the rewriting (may prevent difference in nullability issues)",['89f25e221de749766b0c49fb01ee589a595127ef'],False,['AbstractMaterializedViewRule.java']
3ce09bdb2adb01fb7b7abed0cc9f17a86ad448f5,"[CALCITE-2192] RelBuilder wrongly skips creating an Aggregate that prunes columns, if input is unique

Fix output in misc.iq (missed from [CALCITE-2183]).

Close apache/calcite#636",['353a8be07b431d04951c05ef2c195f207272f390'],False,"['RelBuilder.java', 'RelBuilderTest.java', 'agg.iq', 'misc.iq']"
fb3213c3e98bc7e980b74ac845bcc006452d8b18,"[CALCITE-2196] Tweak janino code generation to allow debugging (jingzhang)

Update codeGen of MetadataHandler in JaninoRelMetadataProvider to
include the class definition at the beginning of the generated dynamic
code. This allows Intellij to debug the code.

Add instructions to HOWTO.

Close apache/calcite#639",['1118ccd7ff5a6f3766e395cec4e631c69a4ae629'],False,"['JaninoRelMetadataProvider.java', 'howto.md']"
81d59679b3ffd90339df7d8463c9865b89867e98,"[CALCITE-2088] Chinook database with simple end-to-end tests for Calcite JDBC (Piotr Bojko)

Tests use the chinook-data-hsqldb data set from maven central.

Fix bug, introduced in [CALCITE-2128], where JdbcJoinRule is
erroneously applied to SemiJoin.

In gitignore, ignore netbeans project config overrides.

Close apache/calcite#600",['cc983a6060d0da666cb21a07dfa702ac5d14291b'],False,"['.gitignore', 'JdbcRules.java', 'ConverterRule.java', 'pom.xml', 'CalciteConnectionProvider.java', 'ConnectionFactory.java', 'EnvironmentFairy.java', 'PreferredAlbumsTableFactory.java', 'PreferredGenresTableFactory.java', 'package-info.java', 'chinook.json', 'EndToEndTest.java', 'PlusSuite.java', 'basic.iq', 'preferred-for-specific-user.iq', 'pom.xml']"
4893a3db50eacfb0cd9153d65f1a0c9fec7ff2b3,"[CALCITE-2203] Site: fix redirects to Avatica site (Kevin Risden)

Close apache/calcite#644",['81d59679b3ffd90339df7d8463c9865b89867e98'],False,"['avatica_json_reference.md', 'avatica_overview.md', 'avatica_protobuf_reference.md', 'avatica_roadmap.md']"
cfbf6a2a12388ec7cdc42fdc4d92d59c9f0dd9b9,"Site: Add committer Zhen Wang; update MinJi Kim

Fix quotes in SQL reference.",['4893a3db50eacfb0cd9153d65f1a0c9fec7ff2b3'],False,"['contributors.yml', 'reference.md']"
e5cb1b44055f4f22b575972c5b28909400142aa6,"Revert HTTP in Markdown headers for site

For now this is still the header recommended by the ASF. Putting this on
pause is good either way until we might eventually make the change
across the entire repository.",['1a26ea4d4ff112066ca0de20881be0a4563edf60'],False,"['adapter.md', 'algebra.md', 'api.md', 'avatica_json_reference.md', 'avatica_overview.md', 'avatica_protobuf_reference.md', 'avatica_roadmap.md', 'cassandra_adapter.md', 'druid_adapter.md', 'elasticsearch_adapter.md', 'file_adapter.md', 'geode_adapter.md', 'history.md', 'howto.md', 'index.md', 'lattice.md', 'materialized_views.md', 'model.md', 'os_adapter.md', 'pig_adapter.md', 'powered_by.md', 'reference.md', 'spatial.md', 'stream.md', 'testapi.md', 'tutorial.md']"
fb8ebd31526cd2e203fa3526ca8de7a22ee0d139,"[CALCITE-2197] Fix test failures on Windows due to line endings

Add several new matchers in Matchers: isLinux, containsStringLinux,
hasTree, compose. Change tests that generate platform-specific strings
to use them.",['fe3b65f50f0d74aed7177dadf46eb4dc1bb3e940'],False,"['SortNode.java', 'Project.java', 'RelMdCollation.java', 'CompositeOperandTypeChecker.java', 'RelWriterTest.java', 'RelToSqlConverterTest.java', 'CalciteAssert.java', 'JdbcTest.java', 'LatticeTest.java', 'Matchers.java', 'RelBuilderTest.java', 'UtilTest.java', 'ServerTest.java']"
d134694aedcf19c0620b42045167ee13e15f5e2a,"[CALCITE-2020] Upgrade org.incava java-diff

Upgrade org.incava java-diff from 1.1 to 1.1.1.
The license changed from 2-clause BSD to Apache.
The package changed from org.incava.util.diff to org.incava.diff.

Change-Id: I4d66cef25e5a746bcb1767cd78b9df94ac87e62f",['fb8ebd31526cd2e203fa3526ca8de7a22ee0d139'],False,"['DiffTestCase.java', 'pom.xml']"
03ec2cfda469f9e401ff0ad1045f94cee4a80e1f,"[CALCITE-2201] Pass RelBuilder into RelDecorrelator and RelStructuredTypeFlattener (Volodymyr Vysotskyi)

Add a method RelBuilder.projectNamed to replace RelOptUtil.createProject,
and change various other methods in RelOptUtil to use RelBuilder.
Deprecate obsolete methods in RelOptUtil.

Close apache/calcite#640",['5bf7b9a4d7b54778bbbcb71ed77f15a88b6b9680'],False,"['RelOptUtil.java', 'PlannerImpl.java', 'JoinCommuteRule.java', 'PushProjector.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'Programs.java', 'RelBuilder.java', 'VolcanoPlannerTest.java', 'MutableRelTest.java', 'RelOptTestBase.java', 'SqlToRelConverterTest.xml']"
e365eabc65bf75506904fa4c77e8d49d3536a7d5,"[CALCITE-2220] SqlToRelConverter generates incorrect ordinal while flattening a record-valued field

* Fixes test failure",['d0a119d50e5bd9b366f2e41eff70b2d646935626'],False,['SqlToRelConverterTest.xml']
d881d47766e8162dbdd4deb40a64b1138a4acec4,[CALCITE-2232] Assertion error on AggregatePullUpConstantsRule while adjusting Aggregate indices,['e365eabc65bf75506904fa4c77e8d49d3536a7d5'],False,"['AggregateProjectPullUpConstantsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
8139acb78b100483fbafb078fb82d07f921abef0,change AthenaX description in powered_by page,['6b35306e7818cb3e67e27b9edbb00b1ed8338cdd'],False,['powered_by.md']
f94f4131f69e849fb5f15b090ad400c652b77689,"[CALCITE-2236] Druid adapter: Avoid duplication of fields names during Druid query planing

Close apache/calcite#655",['8139acb78b100483fbafb078fb82d07f921abef0'],False,['DruidQuery.java']
000622daf9af011b88022b4679dd08c7d09f1475,"[CALCITE-2237] Upgrade Maven Surefire plugin to 2.21.0 (Kevin Risden)

Fixes NPE when using Maven Surefire plugin 2.20.1 on JDK 10.
See [SUREFIRE-1439] and [MPOM-184] for details.

Close apache/calcite#656",['a838a73c92575db16de337911564c90a9d4e967f'],False,['pom.xml']
9dc61aea2bcf2ee453bde6b2a909bf7db2986f04,"[CALCITE-2238] [CALCITE-2239] Fix Pig and Spark adapter failures with JDK 10

This fixes both CALCITE-2238 and CALCITE-2239 since upgrading
Apache Hadoop to 2.7.4+ fixes Java version parsing. See HADOOP-14586
for more information about how version parsing is important.

Closes #662

Signed-off-by: Josh Elser <elserj@apache.org>",['502c108473e535a76cebc5e09bd6be5efcc24531'],False,"['PigRelBuilderStyleTest.java', 'pom.xml']"
d83cb9029e37c52fba7d07a5a33978a9f01b8c5f,"[CALCITE-2253] Fix matching predicate for JdbcProjectRule rule

Was broken by [CALCITE-2206].

Close apache/calcite#664",['a8cb62b55087a775a0fe20d597bd935f411701c6'],False,['JdbcRules.java']
af5d85bbe07c696da33b8a46b129dee7e9f44696,"[CALCITE-2261] Switch core module to JDK 8 (Enrico Olivelli)

Now it is possible to use Java 8 language features such as lambdas.

We had to work around a Janino issue,
https://github.com/janino-compiler/janino/issues/47.

Close apache/calcite#667",['9085b601081689b5b7f1e9f57deb20e2229910cb'],False,"['pom.xml', 'SchemaPlus.java', 'pom.xml']"
b1e3c82cb1f25396eb41a106b805f3cff90a5346,"[CALCITE-1949] CalciteStatement should call AvaticaStatement close_(), to avoid memory leak (Kevin Risden)

Close apache/calcite#671",['570aca3d4fea34edcb04d0a5ec02f0fcf8925b0c'],False,['CalciteStatement.java']
09be7e74a6a4d1b1c4f640c8e69b5ebdd467d811,"[CALCITE-2164] Fix alerts raised by lgtm.com (Malcolm Taylor)

Close apache/calcite#621",['b1e3c82cb1f25396eb41a106b805f3cff90a5346'],False,"['RexToLixTranslator.java', 'RelMdDistinctRowCount.java', 'RelMdPopulationSize.java', 'RelMdSize.java', 'JoinToMultiJoinRule.java', 'LoptSemiJoinOptimizer.java', 'ReduceDecimalsRule.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'StackWriter.java', 'LookupImpl.java', 'Linq4jSuite.java', 'LookupImplTest.java']"
92f7259b96744180a0a556ac9f5842f705192b3f,"[CALCITE-2227] Standards-compliant column ordering for NATURAL JOIN and JOIN USING

Now the join column(s) occur only once in the expansion of ""SELECT *"",
and are derived using COALESCE(left.k, right.k) so are sometimes NOT
NULL where preivously nullable. This is a breaking change for those
queries.

Improve type-inference for COALESCE.",['e45ad734e1ff96eb6f6419941579845d5cc20ac7'],False,"['RexImpTable.java', 'RexSimplify.java', 'JoinType.java', 'SqlCoalesceFunction.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'MatchRecognizeScope.java', 'SqlNameMatcher.java', 'SqlNameMatchers.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'ImmutableIntList.java', 'ProfilerTest.java', 'RelToSqlConverterTest.java', 'SqlValidatorUtilTest.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'RexProgramTest.java', 'SqlValidatorTest.java', 'PlannerTest.java', 'UtilTest.java', 'SqlToRelConverterTest.xml', 'join.iq', 'lateral.iq', 'misc.iq', 'sub-query.iq']"
6e3cb089f0f70fe4ba5a60433f8dd63d5a00c2f5,"Site: Add committer Kevin Risden

Fix ordering of contributors.yml.

Add instructions for maintaining the ""site"" branch when there are
changes to the site that we do not wish to deploy until the next
release.",['fd5dc8adf4bca6a4f0c631479985cbb2b43b47e4'],False,"['README.md', 'contributors.yml']"
bd7e66a4487c3c6660903b2e107e6c81a5a63c82,"[CALCITE-2053] Resolve Java user-defined functions that have Double and BigDecimal arguments (余启)

Close apache/calcite#619",['8327e674e7f0a768d124fa37fd75cda4b8a35bb6'],False,"['SqlTypeExplicitPrecedenceList.java', 'UdfTest.java', 'Smalls.java']"
b0f470473087982c48518860b9199a7735d57a5f,"[CALCITE-2264] In JDBC adapter, do not push down a call to a user-defined function (UDF) (Piotr Bojko)

Add new check whether JdbcProjectRule is trying to convert project with
user-defined function through JDBC.

This change can be optimized - maybe - to cascade projections, in which
inner can be pushed to JDBC and the outer cannot.

Close apache/calcite#663",['bd7e66a4487c3c6660903b2e107e6c81a5a63c82'],False,"['JdbcRules.java', 'StringConcatFunction.java', 'chinook.json', 'functions.iq']"
08e432295e202c59427f15b47ec5b54d992db68f,"Test case for [CALCITE-2287] FlatList.equals() throws StackOverflowError (Zhen Wang)

Close apache/calcite#683",['e78f8c61e3ed9c9637a2061db426680b1b3ad042'],False,['UtilTest.java']
7924eb0eb38e7955b054919788baf45f9e72cd6f,"[CALCITE-2287] FlatList.equals() throws StackOverflowError (Zhong Yu)

Close apache/calcite#682",['08e432295e202c59427f15b47ec5b54d992db68f'],False,['FlatLists.java']
d00733bb77ab5fe452dcbbb7b84c5d310e78533f,Fix sqlsh on Linux,['2b93eaa35aa8f758bfe498dc213b6c5dddf20b1f'],False,['sqlsh']
714f6b74054de26896863fe12565f2e32bcbc863,OsAdapterTest breaks when jhyde@apache has made more commits than julianhyde@gmail,['d00733bb77ab5fe452dcbbb7b84c5d310e78533f'],False,['OsAdapterTest.java']
e1326ace25d508f7217a8cbc5a7a2db2abf92048,"[CALCITE-2306] AssertionError in RexLiteral.getValue3 with null literal of type DECIMAL (Godfrey He)

Close apache/calcite#690",['2a4f6c2c7509c94b5eeb89d3925c91828f8ef1e1'],False,"['RexLiteral.java', 'RexBuilderTest.java']"
da568324ad84c5a792f2b9c2bd2c827c1440b19c,"[CALCITE-2265] Allow comparison of ROW values (Dylan Adams)

StandardConvertletTable.consistentType now checks if structs' members
are pair-wise of the same family.

Added isSameFamily and areSameFamily methods to SqlTypeUtil to determine
whether two types, or a list of types, are of the same family. Added
unit test to verify this new functionality.

Added new case to JdbcTest to verify row comparison are executed in
HSQLDB.

Refactored common code from SqlTypeUtil.isComparable for determining
the family of a RelDataType.

Extracted SqlTypeFixture from SqlTypeFactoryTest.

Close apache/calcite#696",['4e47dfea5c87d5d274ae99287e4d91000db58ae6'],False,"['SqlTypeUtil.java', 'StandardConvertletTable.java', 'SqlTypeFactoryTest.java', 'SqlTypeFixture.java', 'SqlTypeUtilTest.java', 'CalciteSuite.java', 'JdbcTest.java']"
6fe55e3ecc1f476bb0d629007f128ee62e771ff0,"[CALCITE-2314] Verify RexNode transformations by evaluating before and after expressions against sample values

Add RexInterpreter, a simple (and incomplete, but good enough for
testing) interpreter of RexNode expressions.

Interpreter skips expressions involving CAST.

Print NullSentinel.INSTANCE as ""NULL""

Disable test for simplifying CEIL/FLOOR (logged CALCITE-2332)

Fix bugs in RexInterpreter. (Zoltan Haindrich)",['c3788056507206c50b8c700ab81abd4b511bb863'],False,"['NullSentinel.java', 'RexAnalyzer.java', 'RexInterpreter.java', 'RexLiteral.java', 'RexSimplify.java', 'Util.java', 'MaterializationTest.java', 'RexImplicationCheckerTest.java', 'RexProgramTest.java']"
27a190ff303700b4329384e05c39bc40c893048e,[CALCITE-2333] Stop releasing zips,['cb5d9bae8da970a9aca2f998c7a4445baf62254d'],False,"['howto.md', 'index.md', 'source-assembly.xml']"
542d51265d683dfd736c5e04f556e065b3667667,"Fix invalid isValid assumption in CalciteRemoteDriverTest

CalciteRemoteDriverTest assumed that isValid(0) would always
throw a SQLException from Avatica. CALCITE-1520 fixed isValid
to work correctly in Avatica. If checking the connection for
proper exception passing, Calcite should use isValid(-1) to
force a SQLException due to the JDBC specification.

Signed-off-by: Kevin Risden <krisden@apache.org>",['e7a4e8431f56ee4acd92b0b2ec5731a97f4e2be2'],False,['CalciteRemoteDriverTest.java']
39fee5d636867a6b1ddf8a5d5bc2d38482c7d33c,"[CALCITE-2341] Fix ImmutableBitSetTest for jdk11

Fix ImmutableBitSetTest#testShift test failure with jdk11, caused
by a change in the error message thrown by jdk11

Close apache/calcite#711",['074d37a0343cf96349a9e2634562249e4693e468'],False,['ImmutableBitSetTest.java']
a99f386d5c36d560c832f9e70542f9d058ea22f5,"[CALCITE-2342] Fix improper use of assert

Fix an improper use of assert in Schemas#path(CalciteSchema,
Iterable<String>) causing iterator not to move to the next
element if assertions are not turned on.

Close apache/calcite#712",['39fee5d636867a6b1ddf8a5d5bc2d38482c7d33c'],False,['Schemas.java']
772815470e25d2836ef876acc6d62dec1b5c4d86,"[CALCITE-2318] NumberFormatException while starting SQLLine

Upgrade sqlline to 1.4.0 to fix
https://github.com/julianhyde/sqlline/issues/75
and the underlying issue https://github.com/jline/jline2/issues/281.",['a99f386d5c36d560c832f9e70542f9d058ea22f5'],False,['pom.xml']
a9d6cfdfdce908b31a4361ac0460b83548d0fd4b,"[CALCITE-2324] EXTRACT function: HOUR, MINUTE and SECOND parts of a DATE must be zero (Sergey Nuyanzin)

Close apache/calcite#728

Change-Id: Iedb930409a4ca7ab778c5ead2eff330b2b316ede",['1877c17b70791b723f745c2c43d04e560dab256f'],False,"['RexImpTable.java', 'SqlOperatorBaseTest.java']"
03dce1337c8c1d46ab050b55af426efa5f33c3a9,"[CALCITE-2341] Fix javadoc for JDK 11

Close apache/calcite#726

Fix javadoc issues with JDK11 by updating javadoc plugin to 3.0.1
and updating HTML to comply with HTML5 spec.",['a9d6cfdfdce908b31a4361ac0460b83548d0fd4b'],False,"['RelOptSamplingParameters.java', 'RelTrait.java', 'package-info.java', 'Glossary.java', 'package-info.java', 'pom.xml']"
e50795a42ccc6804e2044cf6e62b1abe9152d6f4,"[CALCITE-2357] Freemarker dependency override issue in fmpp maven plugin (yanghua)

Close apache/calcite#725",['1ae6a52603006741a4cb6bf558c58d9ac08e866a'],False,['pom.xml']
d35c11c73cc78cf379d7e886cbbfb62b91d75fad,"[CALCITE-2355] Implement multiset operations (Sergey Nuyanzin)

Implement multiset operations: IS A SET, SUBMULTISET OF, MEMBER OF,
MULTISET EXCEPT/INTESECT/UNION [ALL | DISTINCT], FUSION; add
multiset operations: IS NOT A SET, IS EMPTY, IS NOT EMPTY, SUBMULTISET OF.

Fix behavior if neither ALL nor DISTINCT is specified for the case of
MULTISET EXCEPT/INTERSECT/UNION.

Close apache/calcite#727",['e50795a42ccc6804e2044cf6e62b1abe9152d6f4'],False,"['Parser.jj', 'RexImpTable.java', 'RexMultisetUtil.java', 'SqlFunctions.java', 'SqlStdOperatorTable.java', 'BuiltInMethod.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'SqlFunctionsTest.java', 'SqlValidatorTest.java', 'agg.iq', 'operator.iq', 'reference.md']"
9beabf852e222c9733127f690df68fb0ca491d1f,Fix Javadoc for [CALCITE-2345],['4536000f2c4868b75f1000d61a8ac9ed0141fcfa'],False,['MongoAdapterIT.java']
6aac57f819d9b36fb9a050b04d776c4ccceb8c50,"[CALCITE-2286] Support timestamp type for Druid adapter

* Fix for DruidAdapterIT2",['b29397d92e16f8aa77d5e84cf7a21744cd1b19a9'],False,['DruidAdapterIT2.java']
3c051474dd86fb14b85df55fd54b869ff5381cb0,"[CALCITE-2370] Fix failing mongo IT tests when explicit order was not specified (Andrei Sereda)

In general, mongo does not guarantee any particular return order of documents without explicit sorting.

Close apache/calcite#738",['6aac57f819d9b36fb9a050b04d776c4ccceb8c50'],False,['MongoAdapterTest.java']
242e12f256d62c72dafcec57cf60f1a5960ac738,"[CALCITE-2368] Fix misc.iq and scalar.iq quidem unit tests failures on Windows

Close apache/calcite#736",['3c051474dd86fb14b85df55fd54b869ff5381cb0'],False,['QuidemTest.java']
0db06f780e9276424467690c703004df9f012314,"[CALCITE-2369] Fix OsAdapterTest failure on windows (Sergey Nuyanzin)

- Put testDu and testDuFilterSortLimit to ignore in case of Windows

Close apache/calcite#737",['242e12f256d62c72dafcec57cf60f1a5960ac738'],False,['OsAdapterTest.java']
9721283bd0ce46a337f51a3691585cca8003e399,"[CALCITE-2380] Javadoc generation failure in Elasticsearch2 adapter (Andrei Sereda)

The problem is that elasticsearch5 and elasticsearch2 namespaces
overlap when javadoc tries to generate both simultaneously.
Solve by excluding elasticsearch2 package.

Part of apache/calcite#741",['0db06f780e9276424467690c703004df9f012314'],False,['pom.xml']
6e8bb5a16c9c8c0397b79f3e98c0134ab9a32fb3,"Fix-up for [CALCITE-2345] and [CALCITE-2347]

Terminology: Standardize on Elasticsearch, not Elastic or ElasticSearch.

Rename MongoDatabaseRule to MongoDatabasePolicy to avoid confusion
with planner rule classes; similarly ElasticsearchPolicy.

Use project standard indentation.

Ensure that files end in newlines.",['4f8354651021dbabf123836d205aee25c658b6d9'],False,"['UtilTest.java', 'DruidAdapterIT.java', 'DruidAdapterIT2.java', 'Elasticsearch2Enumerator.java', 'ElasticSearch2AdapterTest.java', 'Elasticsearch2AdapterTest.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'ElasticsearchChecker.java', 'zips-mini.json', 'ElasticSearch5AdapterTest.java', 'Elasticsearch5AdapterTest.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'ElasticsearchChecker.java', 'log4j2.xml', 'zips-mini.json', 'MongoAdapterTest.java', 'MongoDatabasePolicy.java', 'MongoAdapterIT.java', 'zips-mini.json']"
68ba411e23ba930bb2086bb3eed4c46edfac23eb,"[CALCITE-2291] Support Push Project past Correlate (Chunhui Shi)

Fix dynamic row type in UNNEST
For the validation phase to pass use a place holder name for SqlUnnestOperator ""$unnest""
Use the same name as the input name for Uncollect Node
Fixing the converter tests to expect ""$unnest"" (Hanumath Maduri)

Fix ProjectCorrelateTransposeRule for SEMI and ANTI Correlate
Fix bug with names loss for Unnest
Update RelDataType for RexCorrelVariable when rule is applied (Volodymyr Vysotskyi)

Close apache/calcite#685

Co-authored-by: chunhui-shi <cshi@maprtech.com>
Co-authored-by: HanumathRao <hanu.ncr@gmail.com>
Co-authored-by: Volodymyr Vysotskyi <vvovyk@gmail.com>",['6e8bb5a16c9c8c0397b79f3e98c0134ab9a32fb3'],False,"['Uncollect.java', 'ProjectCorrelateTransposeRule.java', 'PushProjector.java', 'SqlUnnestOperator.java', 'SqlToRelConverter.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml']"
a7e8fb84cfc5483752a6a5350497971a105462b2,"[CALCITE-2364] Fix timezone issue (in test) between Mongo DB and local JVM (Andrei Sereda)

Mongo expects date-time fields to be in millis UTC. That value can be different if JVM and mongo timezones are
not identical

Close apache/calcite#734",['68ba411e23ba930bb2086bb3eed4c46edfac23eb'],False,['MongoAdapterTest.java']
8a91c8dd4510f0741242f89c1a988e46036a2139,[CALCITE-2387] Fix for date/timestamp cast expressions in Druid adapter,['a7e8fb84cfc5483752a6a5350497971a105462b2'],False,"['DruidSqlCastConverter.java', 'DruidAdapterIT2.java']"
d59b639d27da704f00eff616324a2c04aa06f84c,"[CALCITE-2259] Allow Java 8 syntax

In summary: use lambdas where possible, switch from Guava function
types to Java function types or lambdas, but continue to use Guava
components (such as immutable collections and cache) that have no
equivalent in the Java runtime.

1. Change single-abstract-method (SAM) classes to lambdas. Preserve
formatting wherever possible.

2. Change AssertQuery.returns argument type from Guava Function to Java
Consumer. If you are using a lambda and see 'returns is deprecated',
remove the 'return null;' line, and the lambda will become a Consumer
(whose return is void).

3. Change RelOptRuleOperand and RelOptRule.operand methods to take Java
Predicate rather than Guava Predicate.

4. Change the argument of Hook.add and .addThread from Guava Function to
Java Consumer.

5. Change 'list.toArray(new T[list.size()])' to 'list.toArray(new T[0])'
because the latter is simpler, and just as efficient on recent Java
versions.

6. Resource references; change ""try (Closeable ignore = foo())"" to ""try
  (foo())"", especially uses of TryThreadLocal and Hook.Closeable.

7. Convert linq4j Function1 to java Function, Function2 to java BiFunction

8. Fix occurrences of Intellij's ""Explicit type can be replaced with
<>"" inspection. (Occurs for ""List<String> list = new
ArrayList<String>();"".)

9. Change Guava Preconditions.checkNotNull to Java
Objects.requireNonNull. (Kevin Risden)

10. Break out anonymous classes and fix dependency problems.

11. Use CacheLoader.of(Function) where possible.

12. Replace sub-classes of ThreadLocal with ThreadLocal.withInitial().

13. Replace Guava collection methods with calls to Java collection types,
for example replace Lists.newArrayList() with new ArrayList<>(),
Maps.newHashSet() with new HashSet<>(), similarly Sets.

14. Replace Guava Joiner with String.join.

15. Replace Collections.emptyList() with ImmutableList.of() in a few
places.

For backwards compatibility, we preserved (and deprecated) the old
methods that used Guava types. In a few cases where new and old have
the same signature (after erasure), we could not add a method with the
same name, so we gave the new method a ""J"" suffix. Examples include
Hook.property and .propertyJ, RelOptRule.operand and .operandJ.

In test code, we have not slavishly ensured backwards compatibility.

We do not intend to remove uses of Guava's immutable collections.

We have ignored Intellij's ""Pseudo functional style code"" inspection
most of the time, but in a few cases have converted Lists.transform(),
Iterables.transform(), and Iterables.filter() into Java streams. Use
the Util.toImmutableList() collector if the result is to be an
immutable list. Use Util.transform() rather than Lists.transform()
if you have a Java function rather than a Guava function or lambda.

Not covered in this change (might be done in future):
* Convert Collections.sort(list) to list.sort.
* Review uses of 'for (Map.Entry<K, V> e : map.entrySet())' and see
  whether it makes sense to convert to 'map.forEach((k, v) ->
  ...)'. Intellij inspection is called 'Replace with Map.forEach'.

Breaking changes:
* LatticeStatisticProvider.Factory, result of RexUtil.notFun(), and
  arguments to Mappings.target() are Function (was Guava, now Java)
* Argument to SqlSpecialOperator.TokenSequence.parser() is Predicate
  (was Guava, now Java)
* AggregateNode.AccumulatorFactory extends Supplier (was Guava, now Java)",['5bbc501a565494442784f65870a20cd65a5016f4'],False,"['CassandraRules.java', 'CassandraSchema.java', 'CassandraTable.java', 'CassandraToEnumerableConverter.java', 'CassandraToEnumerableConverterRule.java', 'Parser.jj', 'ArrayTable.java', 'CloneSchema.java', 'ColumnLoader.java', 'ListTable.java', 'ElasticsearchFilter.java', 'ElasticsearchProject.java', 'ElasticsearchTableScan.java', 'ElasticsearchToEnumerableConverter.java', 'ElasticsearchToEnumerableConverterRule.java', 'EnumUtils.java', 'EnumerableAggregate.java', 'EnumerableBindable.java', 'EnumerableCalc.java', 'EnumerableCalcRule.java', 'EnumerableCorrelateRule.java', 'EnumerableFilter.java', 'EnumerableFilterRule.java', 'EnumerableInterpreterRule.java', 'EnumerableLimit.java', 'EnumerableMergeJoin.java', 'EnumerableMergeJoinRule.java', 'EnumerableProject.java', 'EnumerableProjectRule.java', 'EnumerableRel.java', 'EnumerableRelImplementor.java', 'EnumerableTableFunctionScanRule.java', 'EnumerableTableModifyRule.java', 'EnumerableTableScan.java', 'EnumerableTableScanRule.java', 'EnumerableUncollect.java', 'EnumerableValues.java', 'EnumerableValuesRule.java', 'EnumerableWindow.java', 'NestedBlockBuilderImpl.java', 'PhysTypeImpl.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'WinAggAddContextImpl.java', 'WinAggResultContextImpl.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcTable.java', 'JdbcToEnumerableConverterRule.java', 'JdbcUtils.java', 'CalciteConnectionConfigImpl.java', 'AggregateNode.java', 'Bindables.java', 'InterpretableRel.java', 'Interpreter.java', 'JaninoRexCompiler.java', 'JoinNode.java', 'NoneToBindableConverterRule.java', 'SortNode.java', 'TableScanNode.java', 'UnionNode.java', 'ValuesNode.java', 'CalciteConnectionImpl.java', 'CalciteMetaImpl.java', 'CalcitePrepare.java', 'CalciteResultSet.java', 'CalciteSchema.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'MetadataSchema.java', 'CachingLatticeStatisticProvider.java', 'Lattice.java', 'LatticeStatisticProvider.java', 'MaterializationActor.java', 'MaterializationService.java', 'ProfilerLatticeStatisticProvider.java', 'SqlLatticeStatisticProvider.java', 'TileSuggester.java', 'AbstractRelOptPlanner.java', 'Contexts.java', 'ConventionTraitDef.java', 'RelCompositeTrait.java', 'RelOptCluster.java', 'RelOptMaterialization.java', 'RelOptMaterializations.java', 'RelOptPredicateList.java', 'RelOptRule.java', 'RelOptRuleCall.java', 'RelOptRuleOperand.java', 'RelOptRuleOperandChildren.java', 'RelOptUtil.java', 'RelTraitDef.java', 'RelTraitSet.java', 'RexImplicationChecker.java', 'Strong.java', 'SubstitutionVisitor.java', 'HepPlanner.java', 'HepRelMetadataProvider.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'VolcanoRelMetadataProvider.java', 'VolcanoRuleCall.java', 'CalciteCatalogReader.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'LixToRelTranslator.java', 'PlannerImpl.java', 'Prepare.java', 'RelOptTableImpl.java', 'ProfilerImpl.java', 'SimpleProfiler.java', 'RelCollations.java', 'RelDistributions.java', 'RelFieldCollation.java', 'RelRoot.java', 'ConverterRule.java', 'Aggregate.java', 'AggregateCall.java', 'Correlate.java', 'EquiJoin.java', 'Exchange.java', 'Join.java', 'JoinInfo.java', 'Match.java', 'Project.java', 'RelFactories.java', 'SemiJoin.java', 'SetOp.java', 'SortExchange.java', 'TableFunctionScan.java', 'TableModify.java', 'Values.java', 'LogicalCalc.java', 'LogicalFilter.java', 'LogicalJoin.java', 'LogicalProject.java', 'LogicalTableScan.java', 'LogicalValues.java', 'LogicalWindow.java', 'CachingRelMetadataProvider.java', 'ChainedRelMetadataProvider.java', 'JaninoRelMetadataProvider.java', 'MetadataFactoryImpl.java', 'ReflectiveRelMetadataProvider.java', 'RelMdAllPredicates.java', 'RelMdCollation.java', 'RelMdColumnUniqueness.java', 'RelMdExpressionLineage.java', 'RelMdPredicates.java', 'RelMdSize.java', 'RelMdTableReferences.java', 'RelMetadataQuery.java', 'UnboundMetadata.java', 'MutableMultiRel.java', 'MutableRel.java', 'MutableRels.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AbstractMaterializedViewRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExtractProjectRule.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinTransposeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'AggregateValuesRule.java', 'CalcRelSplitter.java', 'DateRangeRules.java', 'FilterAggregateTransposeRule.java', 'FilterJoinRule.java', 'FilterTableScanRule.java', 'JoinAssociateRule.java', 'JoinProjectTransposeRule.java', 'JoinToMultiJoinRule.java', 'LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'MaterializedViewFilterScanRule.java', 'MultiJoinOptimizeBushyRule.java', 'ProjectCorrelateTransposeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinTransposeRule.java', 'ProjectRemoveRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectTableScanRule.java', 'ProjectToWindowRule.java', 'PruneEmptyRules.java', 'PushProjector.java', 'ReduceExpressionsRule.java', 'SemiJoinRule.java', 'SortJoinTransposeRule.java', 'SortProjectTransposeRule.java', 'SubQueryRemoveRule.java', 'UnionPullUpConstantsRule.java', 'ValuesReduceRule.java', 'StreamRules.java', 'DynamicRecordTypeImpl.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeField.java', 'RelDataTypeImpl.java', 'RelRecordType.java', 'RexBuilder.java', 'RexCall.java', 'RexCorrelVariable.java', 'RexExecutorImpl.java', 'RexLiteral.java', 'RexOver.java', 'RexPermuteInputsShuttle.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexShuttle.java', 'RexSimplify.java', 'RexSqlStandardConvertletTable.java', 'RexSubQuery.java', 'RexUtil.java', 'BinarySearch.java', 'Enumerables.java', 'FlatLists.java', 'GeoFunctions.java', 'Hook.java', 'HttpUtils.java', 'PredicateImpl.java', 'ResultSetEnumerable.java', 'SqlFunctions.java', 'FunctionParameter.java', 'Schemas.java', 'Statistics.java', 'Table.java', 'AbstractSchema.java', 'AggregateFunctionImpl.java', 'MaterializedViewTable.java', 'ModifiableViewTable.java', 'StarTable.java', 'SqlBasicCall.java', 'SqlBinaryStringLiteral.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlCharStringLiteral.java', 'SqlDataTypeSpec.java', 'SqlDdl.java', 'SqlDescribeSchema.java', 'SqlDescribeTable.java', 'SqlDialect.java', 'SqlFunction.java', 'SqlIdentifier.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlJoin.java', 'SqlMatchRecognize.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlOperator.java', 'SqlSelect.java', 'SqlSetOption.java', 'SqlSpecialOperator.java', 'SqlUtil.java', 'SqlAdvisor.java', 'SqlAdvisorGetHintsFunction.java', 'SqlAdvisorHint.java', 'JethroDataSqlDialect.java', 'MssqlSqlDialect.java', 'OracleSqlOperatorTable.java', 'SqlDatetimeSubtractionOperator.java', 'SqlLeadLagAggFunction.java', 'SqlQuantifyOperator.java', 'SqlStdOperatorTable.java', 'SqlTimestampAddFunction.java', 'SqlAbstractParserImpl.java', 'SqlParser.java', 'SqlParserPos.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'ArraySqlType.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'FamilyOperandTypeChecker.java', 'InferTypes.java', 'IntervalSqlType.java', 'OperandTypes.java', 'ReturnTypes.java', 'SqlTypeAssignmentRules.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'SqlShuttle.java', 'AggChecker.java', 'AggVisitor.java', 'AggregatingSelectScope.java', 'CatalogScope.java', 'DelegatingScope.java', 'IdentifierNamespace.java', 'ListScope.java', 'SchemaNamespace.java', 'ScopeChild.java', 'SqlIdentifierMoniker.java', 'SqlMonikerImpl.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableMacro.java', 'SqlValidatorImpl.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'TableScope.java', 'UnnestNamespace.java', 'ReflectiveConvertletTable.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'Frameworks.java', 'Programs.java', 'RelBuilder.java', 'BitSets.java', 'CancelFlag.java', 'Compatible.java', 'CompatibleGuava11.java', 'ImmutableBitSet.java', 'ImmutableNullableList.java', 'IntegerIntervalSet.java', 'NameSet.java', 'Pair.java', 'PartiallyOrderedSet.java', 'PrecedenceClimbingParser.java', 'ReflectUtil.java', 'Sources.java', 'TryThreadLocal.java', 'UnmodifiableArrayList.java', 'Util.java', 'XmlOutput.java', 'BreadthFirstIterator.java', 'DefaultDirectedGraph.java', 'DefaultEdge.java', 'DepthFirstIterator.java', 'TopologicalOrderIterator.java', 'JavaCompilerArgs.java', 'Mappings.java', 'CalciteTrace.java', 'CalciteRemoteDriverTest.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'ComboRuleTest.java', 'TraitConversionTest.java', 'TraitPropagationTest.java', 'LookupOperatorOverloadsTest.java', 'ProfilerTest.java', 'RelCollationTest.java', 'RelToSqlConverterTest.java', 'DateRangeRulesTest.java', 'RexExecutorTest.java', 'BinarySearchTest.java', 'EnumerablesTest.java', 'SqlParserTest.java', 'DefaultSqlTestFactory.java', 'SqlOperatorBaseTest.java', 'SqlTesterImpl.java', 'SqlTests.java', 'SqlTypeFactoryTest.java', 'CalciteAssert.java', 'CollectionTypeTest.java', 'ExceptionMessageTest.java', 'FoodMartLatticeStatisticProvider.java', 'InduceGroupingTypeTest.java', 'InterpreterTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'LinqFrontJdbcBackTest.java', 'Matchers.java', 'MaterializationTest.java', 'MockCatalogReader.java', 'MockRelOptPlanner.java', 'MultiJdbcSchemaJoinTest.java', 'MutableRelTest.java', 'QuidemTest.java', 'ReflectiveSchemaTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexProgramTest.java', 'ScannableTableTest.java', 'SqlLineTest.java', 'SqlTestGen.java', 'SqlToRelConverterExtendedTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'StreamTest.java', 'TableFunctionTest.java', 'UdfTest.java', 'ConcurrentTestTimedCommandGenerator.java', 'FrameworksTest.java', 'PlannerTest.java', 'BitSetsTest.java', 'ChunkListTest.java', 'ImmutableBitSetTest.java', 'PartiallyOrderedSetTest.java', 'PermutationTestCase.java', 'PrecedenceClimbingParserTest.java', 'Smalls.java', 'UtilTest.java', 'DirectedGraphTest.java', 'MappingTest.java', 'DefaultDimensionSpec.java', 'DruidConnectionImpl.java', 'DruidDateTimeUtils.java', 'DruidExpressions.java', 'DruidJsonFilter.java', 'DruidQuery.java', 'DruidRules.java', 'DruidSchema.java', 'DruidTable.java', 'ExtractionDimensionSpec.java', 'FloorOperatorConversion.java', 'Granularities.java', 'NaryOperatorConverter.java', 'VirtualColumn.java', 'DruidQueryFilterTest.java', 'DruidAdapterIT.java', 'DruidAdapterIT2.java', 'pom.xml', 'Elasticsearch2Enumerator.java', 'Elasticsearch2Schema.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'Elasticsearch2AdapterIT.java', 'ElasticsearchChecker.java', 'pom.xml', 'Elasticsearch5Enumerator.java', 'Elasticsearch5Schema.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'Elasticsearch5AdapterIT.java', 'ElasticsearchChecker.java', 'CsvEnumerator.java', 'CsvSchema.java', 'CsvTest.java', 'Maze.java', 'MazeTable.java', 'FileRowConverter.java', 'FileSchema.java', 'SqlTest.java', 'GeodeRules.java', 'GeodeSchemaFactory.java', 'GeodeToEnumerableConverter.java', 'JavaTypeFactoryExtImpl.java', 'BaseGeodeAdapterIT.java', 'DefaultQueryable.java', 'EnumerableDefaults.java', 'Extensions.java', 'GroupingImpl.java', 'Linq4j.java', 'Ord.java', 'QueryableDefaults.java', 'QueryableRecorder.java', 'Function1.java', 'Functions.java', 'Predicate1.java', 'Predicate2.java', 'ClassDeclarationFinder.java', 'ConstantExpression.java', 'ConstructorDeclaration.java', 'DeterministicCodeOptimizer.java', 'Expressions.java', 'FunctionExpression.java', 'MethodDeclaration.java', 'TryStatement.java', 'Types.java', 'Linq4jExample.java', 'FunctionTest.java', 'CorrelateJoinTest.java', 'DeterministicTest.java', 'ExpressionTest.java', 'Linq4jTest.java', 'MongoEnumerator.java', 'MongoSchema.java', 'MongoToEnumerableConverter.java', 'MongoToEnumerableConverterRule.java', 'MongoAdapterTest.java', 'MongoDatabasePolicy.java', 'MongoAssertions.java', 'PigAggregate.java', 'PigFilter.java', 'PigRel.java', 'PigTableScan.java', 'PigAdapterTest.java', 'Ast.java', 'PigletParser.jj', 'Fluent.java', 'DuTableFunction.java', 'Processes.java', 'SqlShell.java', 'TpcdsSchema.java', 'EnvironmentFairy.java', 'OsAdapterTest.java', 'TpcdsTest.java', 'TpchTest.java', 'parserImpls.ftl', 'SqlCreateForeignSchema.java', 'SqlCreateMaterializedView.java', 'SqlCreateSchema.java', 'SqlCreateTable.java', 'SqlCreateType.java', 'SqlCreateView.java', 'SqlDropObject.java', '.gitignore', 'README.md', 'docker-compose.yml', 'EnumerableToSparkConverterRule.java', 'HttpServer.java', 'JdbcToSparkConverter.java', 'JdbcToSparkConverterRule.java', 'SparkRules.java', 'SplunkAdapterTest.java', 'signatures.txt']"
3e50a5325357720d109e5fa300dad7a918087139,"[CALCITE-2280] Babel SQL parser

Add BABEL conformance value and SqlConformance.isLiberal() method.

CalciteAssert.withSchema automatically sets the schema as default.",['c749f25dcb8b0f9be41014af181666b6eed6350b'],False,"['pom.xml', 'config.fmpp', 'parserImpls.ftl', 'Babel.java', 'package-info.java', 'BabelParserTest.java', 'BabelQuidemTest.java', 'BabelTest.java', 'dummy.iq', 'select.iq', 'CalciteResource.java', 'SqlAbstractConformance.java', 'SqlConformance.java', 'SqlConformanceEnum.java', 'CalciteResource.properties', 'CalciteAssert.java', 'JdbcFrontJdbcBackTest.java', 'QuidemTest.java', 'pom.xml', 'materialized_view.iq', 'schema.iq']"
cf3eca294bedb5e268752cb54056700541177c99,"[CALCITE-2396] Allow NULL intervals in TIMESTAMPADD and DATETIME_PLUS functions (James Duong)

Fix bug where NULL can be used as an interval for these operators only
for specific time units.

Add a fluent API for testing validation of SQL expressions. (Julian Hyde)

Close apache/calcite#2396",['606240d4f1e39ab36447a9b4abe20c6c519d5cab'],False,"['SqlTimestampAddFunction.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java']"
bc269aab9e87715a250a4e28851d125b195815c7,"[CALCITE-1866] JDBC adapter generates incorrect code when pushing FLOOR to MySQL (Kang Wang, Sergey Nuyanzin)

Fix format string. DateTime FLOOR to HOUR cause MySQL use '%H' rather than '%k'. (Kang Wang)

Add test-cases for MySQL (FLOOR to HOUR, FLOOR to MINUTE, FLOOR to SECOND) (Sergey Nuyanzin)

Close apache/calcite#745",['cf3eca294bedb5e268752cb54056700541177c99'],False,"['MysqlSqlDialect.java', 'RelToSqlConverterTest.java']"
df774b9efa97c0b11ed63036e829750aaa88b99d,"[CALCITE-2383] NTH_VALUE window function (Sergey Nuyanzin)

Break SqlNthValueAggregateFunction out as a top-level class, and add
tests to SqlValidatorTest. (Julian Hyde)

Close apache/calcite#742",['bc269aab9e87715a250a4e28851d125b195815c7'],False,"['Parser.jj', 'RexImpTable.java', 'SqlKind.java', 'SqlNthValueAggFunction.java', 'SqlStdOperatorTable.java', 'SqlAdvisorTest.java', 'SqlValidatorTest.java', 'winagg.iq', 'reference.md']"
3fa29455664bec0056c436491b369e0cd72242ea,"[CALCITE-2299] TIMESTAMPADD(SQL_TSI_FRAC_SECOND) should be nanoseconds (Sergey Nuyanzin)

1) Add NANOSECONDS time unit;
2) Fix SQL_TSI_FRAC_SECOND which should be interpreted as nanoseconds;
3) Add tests.

Close apache/calcite#731",['df774b9efa97c0b11ed63036e829750aaa88b99d'],False,"['Parser.jj', 'SqlIntervalQualifier.java', 'SqlTimestampAddFunction.java', 'SqlTimestampDiffFunction.java', 'StandardConvertletTable.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'reference.md']"
0204f2860c8c83915c62085a47d42a78a10aac46,"[CALCITE-2376] Unify ES2 and ES5 adapters. Migrate to low-level ES rest client as main transport. (Andrei Sereda)

== Major change to elastic search adapter(s)

1. Combine ES2 and ES5 under single maven module (called elasticsearch). Move shared ES source from core to
separate elasticsearch module.

2. Migrate transport layer to low-level rest client. There are no more heavy core server-side ES dependencies
(like Lucene, Netty etc.) in adapter, just apache http client and apache codecs.
Native Transport client will be removed by the vendor in the next release (ES7-8).

3. Manually parse search results using jackson JSON library (this is already a transitive dependency from core)

== Expected breaking changes for clients:
1. Change class names of Schema and SchemaFactory. They don't contain ES major version number anymore (2, 5, 6 etc.):
   - ElasticsearchSchemaFactory(new) vs Elasticsearch{2|5}SchemaFactory (old)
   - ElasticsearchSchema(new) vs Elasticsearch{2|5}Schema (old)
   - changed package name(s)
This affects existing configurations (especially JSON files)

2. There is a single maven module elasticsearch. elasticsearch2 and elasticsearch5 are removed.
Client will have to manually update their artifact dependencies.

Close apache/calcite#744",['195414d706f3a72d289f20f45839c17dfcec31b5'],False,"['ElasticsearchSchema.java', 'package-info.java', 'pom.xml', 'AbstractElasticsearchTable.java', 'ElasticsearchEnumerators.java', 'ElasticsearchFilter.java', 'ElasticsearchMethod.java', 'ElasticsearchProject.java', 'ElasticsearchRel.java', 'ElasticsearchRules.java', 'ElasticsearchSchema.java', 'ElasticsearchSchemaFactory.java', 'ElasticsearchSearchResult.java', 'ElasticsearchSort.java', 'ElasticsearchTable.java', 'ElasticsearchTableScan.java', 'ElasticsearchToEnumerableConverter.java', 'ElasticsearchToEnumerableConverterRule.java', 'ElasticsearchVersion.java', 'MapProjectionFieldVisitor.java', 'package-info.java', 'ElasticSearchAdapterTest.java', 'ElasticsearchVersionTest.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'ElasticsearchChecker.java', 'log4j2.xml', 'zips-mini.json', 'pom.xml', 'Elasticsearch2Enumerator.java', 'Elasticsearch2Schema.java', 'Elasticsearch2SchemaFactory.java', 'Elasticsearch2Table.java', 'Elasticsearch2AdapterTest.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'Elasticsearch2AdapterIT.java', 'log4j.properties', 'Elasticsearch5Enumerator.java', 'Elasticsearch5Schema.java', 'Elasticsearch5Table.java', 'package-info.java', 'Elasticsearch5AdapterIT.java', 'ElasticsearchChecker.java', 'log4j.properties', 'log4j2.xml', 'zips-mini.json', 'pom.xml']"
d68f486b7889bc2d3b08606681f7e5a4c63547f1,"[CALCITE-2384] Performance issue in getPulledUpPredicates (Zoltan Haindrich)

Close apache/calcite#747",['6e99f2ba59e65c6a7774f4968eea83b319a749dc'],False,"['RexSimplify.java', 'Bug.java', 'RelOptRulesTest.xml']"
4402f9194291def0de7263a57889572df339fdb7,"[CALCITE-1167] OVERLAPS should match even if operands are in (high, low) order

Already works (probably fixed in [CALCITE-715]), but added a test case.",['93b8349895df2183864bc4bd7ef2fafa227b22e9'],False,['misc.iq']
be3048300e140c5e9e5b4d23c0b27accd0af4c4d,"assembly:single goal fails with ""Error reading assemblies: No assembly descriptors found""",['6344afc4770b6bb5bafc27c7d3709ab69b52633a'],False,['pom.xml']
3c40d866a43f8a74f35a6b31fadf145c4d1d9f94,"[CALCITE-2417] Fix ClassCastException in RelToSqlConverter with structs (Benoit Hanotte)

Trying to convert the pysical plan of a select * query on a table with a
nested struct throws ClassCastException as RexInputRef cannot be cast to
RexCorrelVariable.
This is due to the cast to RexCorrelVariable not being done on the
referenced expression of RexInputRef accessible through
RexFieldAccess.getReferenceExpr()

Close apache/calcite#761",['dc69a4515198b5b0f980f6a77ca9c3d25a85c4f6'],False,"['SqlImplementor.java', 'RelToSqlConverterStructsTest.java', 'RelToSqlConverterTest.java']"
bd0e140026c409aa932cebf0e1fe223ab3a5319a,"[CALCITE-2419] Use embedded Cassandra for tests

Leverage cassandra-unit library to start a cassandra mini cluster. Database is being populated from
local twissandra.cql file. All other configuration files are also located in test classpath.

Contratry to default project settings (for failsafe and surefire plugins), enforce tests to run sequentially
(using @NotThreadSafe annotation). Some static variables (eg. Hook(s)) are being shared causing
non-deterministic failures (due to concurrent access). It is done to avoid flaky tests.
This limitation should be addressed in future.

Disable adapter test on JDK11 which is not supported by Cassandra 3.x (4.x is still in development).

Close apache/calcite#764
Close apache/calcite#769",['3c40d866a43f8a74f35a6b31fadf145c4d1d9f94'],False,"['pom.xml', 'CassandraSchema.java', 'CassandraSchemaFactory.java', 'CassandraAdapterTest.java', 'cassandra.yaml', 'logback-test.xml', 'model.json', 'twissandra.cql', 'pom.xml', 'suppressions.xml']"
1a94885aa46216a1ab564afcf3e7968ecb54dbf9,[CALCITE-2430] AssertionError: RelDataTypeImpl.getFieldList when SQL Advisor inspects non-struct field,['a18a380095c9f0bb3da9912748a5b368e547134f'],False,"['SqlValidatorImpl.java', 'JdbcTest.java']"
466b3279dcc7a274349ecbbde94b562eb50a043b,[CALCITE-2431] AssertionError: SqlUtil.getAncestry when providing completion hints for sub-schema,['1a94885aa46216a1ab564afcf3e7968ecb54dbf9'],False,"['SqlAdvisor.java', 'JdbcTest.java']"
a0983768d28e48ddd6ebd0488834f80ab54b85d7,"[CALCITE-2428] Cassandra unit test fails to parse JDK version string (Andrei Sereda)

Previous version failed to parse correctly versions like: 9, 10-ea, 11-pre etc.
Change method TestUtil.getJavaMajorVersion() to use regex to detect major JDK version from
a string (usually 'java.version' system property). At some point migrate to
Runtime.version() (which is available 9+)

closes #770",['8b09736870de922b5c0b0b149732ebeacd990437'],False,"['CassandraAdapterTest.java', 'TestUtil.java', 'TestUtilTest.java']"
0bb92498900a6314e93805c5d2238a5179577e61,"[CALCITE-2416] Assertion error when determining monotonicity (Alina Ipatina)

closes #766",['a0983768d28e48ddd6ebd0488834f80ab54b85d7'],False,"['SqlLiteral.java', 'SqlMonotonicBinaryOperator.java', 'SqlOperatorBaseTest.java']"
c11376590aa13a51c41883f74a86ce5cc03df2a4,"fix typo in HepPlanner trace message (Dylan)

closes #754",['0bb92498900a6314e93805c5d2238a5179577e61'],False,['HepPlanner.java']
7088dc7261d294b7c6d5c9f4463435e95f0b9c15,"SqlTestFactory: use lazy initialization of objects

This avoids creating catalogReader objects when several with(key, value)
methods are called in sequence",['96b28f7ba11de22a68d984de6b6b88311cc2c57e'],False,['SqlTestFactory.java']
5574873844a440d2ed14dfdc7b0e40a0dae91355,"[CALCITE-2446] Lateral joins do not work when saved as custom views (Piotr Bojko)

When expanding views, Calcite had one additional step in which
expanded sqlnode tree was validated and thus rewritten. During this
step - information about lateral join was lost.

This change removes validation step from view expansion algorithms.

Also, added bug reproduction in form of unit tests.

Close apache/calcite#780",['ac33200faf62d2667c2fa075fc3423d602131d9d'],False,"['CalcitePrepareImpl.java', 'PlannerImpl.java', 'CalciteAssert.java', 'JdbcTest.java', 'Smalls.java', 'CodesFunction.java', 'chinook.json', 'cross-join-lateral.iq']"
62a0de58d38abb2c1fe85172ff9945fb39da7696,"[CALCITE-2465] Enable use of materialized views for any planner

Includes change to HepPlanner to check whether a transformation already produced a reference to an existing
vertex based on existing graph vertices.",['ca858dd725dea6bf9b4a9059cf1c3ba98bd82f26'],False,"['AbstractRelOptPlanner.java', 'RelOptPlanner.java', 'HepPlanner.java', 'VolcanoPlanner.java', 'AbstractMaterializedViewRule.java', 'MaterializedViewFilterScanRule.java', 'HepPlannerTest.java']"
45782ed3e071695a6f8dd6947b323906cdd5c300,"[CALCITE-2462] RexProgramTest: move ""rex building"" methods to base class

This simplifies creating Rex-based input data for tests

fixes #788",['62a0de58d38abb2c1fe85172ff9945fb39da7696'],False,"['RexProgramBuilderBase.java', 'RexProgramTest.java']"
6d6421c8a4e0c578bfff736c4690c1c6f47572dd,"[CALCITE-2480] NameSet.contains wrongly returns false when element in set is upper-case and seek is lower-case

Implement toString, hashCode and equals for NameSet, NameMap and
NameMultimap; and add tests.

Fix some cosmetic issues in other code, such as missing newline at end
of file.",['5c592b7ed7e71a613d3ddeadcd67300c9ea6b5e8'],False,"['cassandra.yaml', 'logback-test.xml', 'NameMap.java', 'NameMultimap.java', 'NameSet.java', 'RelToSqlConverterStructsTest.java', 'HepPlannerTest.java', 'RexProgramBuilderBase.java', 'SqlToRelConverterTest.java', 'UtilTest.java', 'SqlToRelConverterTest.xml']"
af3e35d64a7c29dfaa451c4ab4880424a8fe8cee,"[CALCITE-2271] Join of two views with window aggregates produces incorrect results or NPE

Avoid NPE in BlockBuilder.append when empty variable initializer is used

closes #673",['6cad2ee13e50e9444f80a744409d4e6ca483a30c'],False,"['EnumerableRelImplementor.java', 'EnumerableWindow.java', 'winagg.iq', 'BlockBuilder.java', 'Expressions.java', 'BlockBuilderTest.java', 'ExpressionTest.java']"
141781bf4d591d973812c73ea9f03d715b5406cb,"[CALCITE-2327] Avoid simplification of x AND NOT(x) to false for nullable x

x AND NOT(x) ==> FALSE AND x IS NULL

closes #707",['af3e35d64a7c29dfaa451c4ab4880424a8fe8cee'],False,"['RexSimplify.java', 'RexProgramTest.java']"
ca3780302463ab2b8ea3180f894f9ea6801f75d0,"MockCatalogReader is used in testing, so cache should be disabled there to avoid thread conflicts and/or stale results",['2f33a0c57b7b7e77b8193d0fff1e3531119aee0a'],False,['MockCatalogReader.java']
80c04cb6028f307a599350fda32411fc19733b3c,"[CALCITE-2505] Add ignored test for fail in RexSimplify with IS DISTINCT FROM

Simplification of isFalse(isNotDistinctFrom(vBool(0), vBool(1))) causes AssertionError: wrong operand count 1 for IS DISTINCT FROM",['6a22cc25f9f7d083f30ff361d8c907f4d6173737'],False,"['RexProgramBuilderBase.java', 'RexProgramTest.java']"
0d707e4e4e5840776670d57b1b7d61ca6d963e13,"[CALCITE-2483] Druid adapter, when querying Druid segment metadata, throws when row number is larger than Integer.MAX_VALUE (Hongze Zhang)

Close apache/calcite#799",['1c30edca1bd7b60e3e8c0368a4c736c4775125d4'],False,['DruidConnectionImpl.java']
29a925a62ed4a2b5855dd1d8ba296455433d32ad,[CALCITE-1026] Fix ModelTest#testYamlFileDetection when source folder has spaces,['370e95ab8557946023ce209e975e1c321765559e'],False,['ModelTest.java']
0c0f61e963497070a62ccdfc50c84b2826ca2d5f,"[CALCITE-2520] Make SparkHandlerImpl#compile silent by default, print code in calcite.debug=true mode only",['4e9064fa94a419987a5d654f0e41899dde60df54'],False,"['JaninoCompiler.java', 'SparkHandlerImpl.java']"
d74027c989ac8b5cd6cd38c04bbabf9ab0e844d6,"[CALCITE-2519] Silence ERROR logs from CalciteException, SqlValidatorException during tests

Use threadCount=1/perCoreThreadCount=false to disable parallel test execution at Travis

Previous option -Dsurefire.parallel= made JUnit to log just CalciteSuite details,
thus the test looked like a stuck one

fixes #816",['0c0f61e963497070a62ccdfc50c84b2826ca2d5f'],False,"['.travis.yml', 'log4j.properties', 'pom.xml']"
0a330e79ff1c120cf7e53af1787be913d83f73ca,"[CALCITE-2491] Refactor NameSet, NameMap, and NameMultimap

Collections are thread-safe when used in read-only scenarios.
Name*.immutableCopyOf are always thread-safe as writes are prohibited :)

fixes #815",['b1789ba18e924e533dbeaea8d0849524197136f7'],False,"['CalciteSchema.java', 'CaseInsensitiveComparator.java', 'NameHelper.java', 'NameMap.java', 'NameMultimap.java', 'NameSet.java', 'UtilTest.java']"
2817bda61dc8d7dd4249f32f250228f5f0797e24,"[CALCITE-2512] Move StreamTest#ROW_GENERATOR to Table.scan().iterator to make it not shared between threads (Sergey Nuyanzin)

fixes #813",['0a330e79ff1c120cf7e53af1787be913d83f73ca'],False,['StreamTest.java']
9589a360656a752be73fb27ce285cd32b22bc0e0,"[CALCITE-2498] fix bug when geode adapter quotes booleans as strings (Andrei Sereda)

GeodeFilter was incorrectly quoting boolean literals as SQL strings ('true' instead of true)

fixes #809",['2817bda61dc8d7dd4249f32f250228f5f0797e24'],False,['GeodeFilter.java']
5e765bd1ab13397d46baaa42db655bd52f5a9ffa,[CALCITE-2522] Remove e.printStackTrace() from CalciteAssert#returns,['9589a360656a752be73fb27ce285cd32b22bc0e0'],False,['CalciteAssert.java']
14a98e93949d016bb4a4d105e42414410803c8e4,[CALCITE-2474] SqlAdvisor: avoid NPE in lookupFromHints where FROM is empty,['1c913e1b0499e85b5bfcb6495e478d68ad34d280'],False,"['SqlValidatorImpl.java', 'SqlAdvisorTest.java']"
77b8c4dbf4f42c8cbbbb0e41ef9d49f0c2d9ba39,"[CALCITE-2476] SqlAdvisor: produce hints when sub-query with * is present in query

simplifySql produced 0 AS ""*"", and it caused the SQL to fail validation.
The fix is to disable transformation of expressions to ""0 as ..."", so it keeps select * as is.",['4afea52a7d50a188cd7b740deea6545013796690'],False,"['SqlSimpleParser.java', 'SqlAdvisorTest.java']"
23eb11eb3b59e496cdc865926537a76fff53c165,"[CALCITE-2484] Move dynamic tests to a separate class like SqlValidatorDynamicTest, and  avoid reuse of MockCatalogReaderDynamic",['c2ae9f0d5b518ea702b4000958b0460e8ef167e1'],False,"['SqlAdvisorTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorDynamicTest.java', 'SqlValidatorTest.java', 'MockCatalogReaderDynamic.java', 'MockCatalogReaderSimple.java']"
fa7b48267195053da7029988e013e6e9cd5151b9,"[CALCITE-2521] Guard RelMetadataTest#testMetadataHandlerCacheLimit with CalciteAssert.ENABLE_SLOW

The test does not reproduce the original bug, and it is very slow to execute.",['0af6e4133d859a7dfd7498f141950a995d248f4c'],False,['RelMetadataTest.java']
3df638c9d34cd83eeb381dd288be786e97ec4c39,[CALCITE-2523] Guard PartiallyOrderedSetTest#testPosetBitsLarge with CalciteAssert.ENABLE_SLOW,['fa7b48267195053da7029988e013e6e9cd5151b9'],False,['PartiallyOrderedSetTest.java']
945399019d707654cf2305af51a0c77f49d53b42,"[CALCITE-2412] Add Windows CI via AppVeyor (Sergey Nuyanzin)

fixes #757",['8f43b3b8a592792e51feb75f2371582eb5013a70'],False,['appveyor.yml']
453441cfd6f10683ebf0d64dfba771588c532911,"[CALCITE-2505] Fix assertion error when simplifying is [not] distinct expressions (Haisheng Yuan)

Sample expression that caused failure: isFalse(isNotDistinctFrom(vBool(0), vBool(1)))

closes #828",['945399019d707654cf2305af51a0c77f49d53b42'],False,"['RexInterpreter.java', 'RexSimplify.java', 'RexProgramTest.java']"
337f247975d92b826e159f6dd50b228bacf5056d,"[CALCITE-2546] Reduce precision of Profiler's surprise and cardinality attributes to avoid FP discrepancies (Alisha Prabhu)

Until this change, running ProfilerTest on PowerPC gave different
results due to different floating point implementation.

Close apache/calcite#829",['5f8c06f03be9bd9daa55a6c1e96d762423604bdd'],False,"['Profiler.java', 'ProfilerTest.java']"
c69e1bcb13000adf9ae4bd433e2f8c75baba1501,"[CALCITE-2535] Enable SqlTester.checkFails (previously it was a no-op) (Hongze Zhang)

Close apache/calcite#823",['337f247975d92b826e159f6dd50b228bacf5056d'],False,"['Bug.java', 'AbstractSqlTester.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlRuntimeTester.java', 'SqlTests.java', 'SqlValidatorTester.java', 'SqlValidatorUtilTest.java', 'SqlTestGen.java', 'SqlValidatorDynamicTest.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTestCase.java', 'misc.iq', 'spatial.iq']"
a5378a3210760ff94933755b716b676b50992db3,"[CALCITE-2537] Use litmus for VolcanoPlanner#validate

VolcanoPlanner#validate() throws exception if validation fail, but this
only happens if the logger level is debug or finer. As changing log level
should not have control side effects, this might throw users off.

This change changes `void VolcanoPlanner#validate()` into
`boolean VolcanoPlanner#isValid(Litmus)` and this method is only called
if assertions are enabled.",['c69e1bcb13000adf9ae4bd433e2f8c75baba1501'],False,['VolcanoPlanner.java']
79af1c9ba735286653697deed3ff849b7c921fe4,"[CALCITE-2528] Support Aggregates in ElasticSearch adapter (Andrei Sereda)

Aggregate functions (count/sum/min/max/avg) are pushed down to ES.

Add ElasticsearchAggregate relational expression to convert SQL into native Elastic aggregations (value_count, min, max etc.).
Enhance ElasticsearchTable to prepare correct aggregate ES JSON query.

Create special classes to parse recursively elastic aggregation response or buckets (located in ElasticJson). They're inspired from existing Elastic high-level client source.

For tests, make Json input more human friendly. Single quotes are accepted and fields can be unquoted (unless
they contain special characters). Also field with dots 'a.b.c' are automatically auto-expanded. This reduces JSON noise.

Fix single projections which previously returned map (see [CALCITE-2485])

Close apache/calcite#801
Close apache/calcite#822",['ce0514690d65c00c0a57c3f942c41050108a395b'],False,"['pom.xml', 'AbstractElasticsearchTable.java', 'ElasticsearchAggregate.java', 'ElasticsearchConstants.java', 'ElasticsearchEnumerators.java', 'ElasticsearchFilter.java', 'ElasticsearchJson.java', 'ElasticsearchMethod.java', 'ElasticsearchProject.java', 'ElasticsearchRel.java', 'ElasticsearchRules.java', 'ElasticsearchSchema.java', 'ElasticsearchSort.java', 'ElasticsearchTable.java', 'ElasticsearchTableScan.java', 'ElasticsearchToEnumerableConverter.java', 'PredicateAnalyzer.java', 'QueryBuilders.java', 'AggregationTest.java', 'BooleanLogicTest.java', 'ElasticSearchAdapterTest.java', 'ElasticsearchJsonTest.java', 'EmbeddedElasticsearchPolicy.java', 'Projection2Test.java', 'ProjectionTest.java', 'QueryBuildersTest.java', 'ElasticsearchChecker.java']"
ac1b63d182dc1871b5215eb9dde7052ab771c284,"[CALCITE-2555] RexSimplify: >=(..., null) could be simplified to null (pengzhiwei)

fixes #831",['79af1c9ba735286653697deed3ff849b7c921fe4'],False,"['Strong.java', 'RexInterpreter.java', 'RexSimplify.java', 'RelOptRulesTest.java', 'RexProgramBuilderBase.java', 'RexProgramTest.java', 'RelOptRulesTest.xml', 'sub-query.iq']"
1420e4da8240d44a6a0f80b42d37a9e6fd836af7,"[CALCITE-2567] Simplify IS NULL(null) to true (pengzhiwei)

fixes #835",['ac1b63d182dc1871b5215eb9dde7052ab771c284'],False,"['RexSimplify.java', 'RexProgramTest.java', 'sub-query.iq']"
19826da5bae2b390ea0cdbb060d2d3f1e28c07ac,"Fix Windows tests broken by [CALCITE-2444] Handle IN expressions when converting SqlNode to SQL (Zoltan Haindrich)

Close apache/calcite#837",['8654c9f7cff1b6eea184b281870bcd3e35f914bd'],False,['RelToSqlConverterTest.java']
8f202e9189a6c1d0abbd8da09d7643b9efd4ad40,Avoid simplification of cast(null as integer) to false in filter expressions broken by [CALCITE-2555],['4f1b5eff9dbed20ecd8b327ada7c6db1bfd8d78d'],False,"['RexSimplify.java', 'RexProgramTest.java', 'RexProgramFuzzyTest.java']"
295ab13e8338bdd0e0c29e051907371c9b2929aa,"Apply small refactorings to Calcite codebase (Java 5, Java 7, Java 8)

Use Objects.equals when possible
Replace for with foreach in Mappings
Use Java 7 diamond operator to reduce code verbosity
Collapse identical catch blocks to multi-catch
Use Double/Float/Long/Boolean hashCode from Java 8
Remove unnecessary substring call arguments
Fix sqlTypeName -> SqlTypeName typo
Make floorKey/ceilingKey non-static so their use in NameMap makes more sense
NameMap uses COMPARATOR.floorKey(name) which is a bit weird when floorKey is static
Add @SafeVarargs to methods that are obviously safe
Replace anonymous types with Java 8 lambdas
Use Collection#removeIf when possible
Use Integer.compare when possible
Suppress AssertWithSideEffects warnings
Add missing check to Permutation#isValid
Permutation#isValid had occurCount[target] != 0 check, however the array was never updated, so the check was useless.
Remove duplicate keys from Strong#MAP
Replace remove+add with set in ReduceExpressionsRule
Remove redundant initializers
Move dead code inside if (false) branch in org.apache.calcite.plan.volcano.RelSubset#add
Revert removal of UtilTest#testHash

closes #834",['8f202e9189a6c1d0abbd8da09d7643b9efd4ad40'],False,"['CassandraFilter.java', 'CassandraProject.java', 'CassandraRel.java', 'CassandraRules.java', 'CassandraSort.java', 'CassandraToEnumerableConverter.java', 'Demo.java', 'EnumerableRelImplementor.java', 'EnumerableTableModify.java', 'EnumerableValues.java', 'EnumerableWindow.java', 'NestedBlockBuilderImpl.java', 'JdbcToEnumerableConverter.java', 'Interpreter.java', 'JaninoRexCompiler.java', 'MulticastRelOptListener.java', 'RelCompositeTrait.java', 'RelOptCluster.java', 'RelOptCostImpl.java', 'RelOptQuery.java', 'RelTraitSet.java', 'Strong.java', 'TableAccessMap.java', 'HepInstruction.java', 'HepProgramBuilder.java', 'HepRuleCall.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'LixToRelTranslator.java', 'JoinInfo.java', 'SetOp.java', 'RelJson.java', 'RelXmlWriter.java', 'JaninoRelMetadataProvider.java', 'RelMdExpressionLineage.java', 'AbstractMaterializedViewRule.java', 'FilterTableFunctionTransposeRule.java', 'JoinUnionTransposeRule.java', 'MultiJoin.java', 'PushProjector.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinJoinTransposeRule.java', 'RexLiteral.java', 'RexProgramBuilder.java', 'RexSqlReflectiveConvertletTable.java', 'RexSqlStandardConvertletTable.java', 'RexTransformer.java', 'FlatLists.java', 'ResultSetEnumerable.java', 'SortedMultiMap.java', 'SqlFunctions.java', 'Utilities.java', 'StarTable.java', 'SqlAdvisor.java', 'SqlSimpleParser.java', 'SqlCaseOperator.java', 'SqlTimestampDiffFunction.java', 'SqlAbstractParserImpl.java', 'SqlParseException.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'ListSqlOperatorTable.java', 'SqlShuttle.java', 'AliasNamespace.java', 'SqlNameMatchers.java', 'SqlValidatorImpl.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'BarfingInvocationHandler.java', 'Benchmark.java', 'CaseInsensitiveComparator.java', 'CompositeList.java', 'CompositeMap.java', 'CompoundClosableAllocation.java', 'DelegatingInvocationHandler.java', 'Holder.java', 'ImmutableNullableList.java', 'JsonBuilder.java', 'Permutation.java', 'UnmodifiableArrayList.java', 'Util.java', 'XmlOutput.java', 'BreadthFirstIterator.java', 'CycleDetector.java', 'DefaultDirectedGraph.java', 'DepthFirstIterator.java', 'Graphs.java', 'TopologicalOrderIterator.java', 'JaninoCompiler.java', 'JavaCompilerArgs.java', 'Mappings.java', 'UtilTest.java', 'DruidSqlCastConverter.java', 'DruidTable.java', 'DruidTableFactory.java', 'ElasticsearchEnumerators.java', 'CsvEnumerator.java', 'CsvFilterableTable.java', 'GeodeFilter.java', 'GeodeSort.java', 'AbstractEnumerable2.java', 'DefaultEnumerable.java', 'EnumerableDefaults.java', 'Linq4j.java', 'LookupImpl.java', 'QueryProviderImpl.java', 'QueryableDefaults.java', 'ClassDeclarationFinder.java', 'Evaluator.java', 'Expressions.java', 'FunctionExpression.java', 'Types.java', 'MongoAggregate.java', 'MongoFilter.java', 'MongoProject.java', 'MongoRel.java', 'MongoRules.java', 'MongoSort.java', 'PigJoin.java', 'VmstatTableFunction.java', 'JdbcToSparkConverter.java', 'SparkMethod.java', 'SparkRules.java', 'SplunkPushDownRule.java', 'SplunkQuery.java', 'SplunkTable.java', 'SplunkConnectionImpl.java', 'StringUtils.java']"
32630d1a2cc4f231968bec458cee5380abbbeb51,"Display random failure of Rex fuzzer in build logs to inspire further fixes

fixes #844",['59b76701d9c805f51b0929577ca604fdbfe00b0b'],False,"['RexInterpreter.java', 'RexProgramFuzzyTest.java']"
52eda6d911f06a542e1d681de294c77e8246e354,"[CALCITE-2527] Simplify (c IS NULL) OR (c IS ...) might result in AssertionError: result mismatch (pengzhiwei)

fixes #846",['32630d1a2cc4f231968bec458cee5380abbbeb51'],False,"['RexSimplify.java', 'RexProgramTest.java']"
56def3946d7e30706b2845464f7fc575c66e4694,"[CALCITE-2581] Avoid errors in simplifying ""null and not (null or ...)"" (pengzhiwei)

closes #849",['40503ff658b7a02d43841f9df7cc655dcbe5de79'],False,"['RexSimplify.java', 'RexProgramTest.java']"
ef822607649ad157568f868086923b2c62a316dc,Avoid NullPointerException when FlatList contains null elements,['3183f2cae6db91f0c2bb0fc99ff6121da56652b8'],False,"['FlatLists.java', 'UtilTest.java']"
2cba817320268f16a707f945d1390d9917188178,"[CALCITE-2585] Support NOT Operator in ElasticSearch Adapter

Fix boolean conditions with negation (NOT). The following queries are now supported:
```sql
select * from elastic where not foo = 1
select * from elastic where not foo in (1, 2, 3)
```

Extend existing Expression interface with `not()` method.

Closes apache/calcite#851",['17e0a054259f10079ce9c95fa01f447e41a84577'],False,"['PredicateAnalyzer.java', 'BooleanLogicTest.java', 'ElasticSearchAdapterTest.java']"
9d6899c919113dc58707b2337297205ed1d7194f,"Fix JavaDoc warnings for Java 9+, and check JavaDoc in Travis CI

Travis verifies JavaDocs for Java 8 and 11 only to save build time.",['72f36a8830afe7f903d8cb32cf547ea484e49fef'],False,"['.travis.yml', 'Java9Workaround.java', 'pom.xml']"
b78dd4a7e33607357ef530d0adb358e9741d9941,"[CALCITE-2586] RexSimplify: case with repeated branches results in assertion error (pengzhiwei)

closes #860",['9d6899c919113dc58707b2337297205ed1d7194f'],False,"['RexSimplify.java', 'RexUtil.java', 'RexProgramTest.java']"
b9da74ee3baed9ef6bd16472cf4a34515e3e29ab,"[CALCITE-2591] EnumerableDefaults#mergeJoin should throw error and not return incorrect results when inputs are not ordered (Enrico Olivelli)

fixes #859",['b78dd4a7e33607357ef530d0adb358e9741d9941'],False,['EnumerableDefaults.java']
9464dd30ae7a57c9e9c410b61940a94ac5cd615f,"Make findbugs:jsr305 dependency optional

It is not required at runtime, so the dependency should not be transitive",['55d86646fe598d215bd53dbeac2bbbf32a9506f9'],False,"['pom.xml', 'pom.xml', 'pom.xml']"
b31da22465e355cf7a6f3c5f9de9bf9ff0190a4b,"Canonize simple cases for composite traits in trait factory

This avoids creating distinct subsets for cases like ""empty collation trait""",['c3215241e21fcf49d7cb7fac809300dbea9ceac2'],False,"['RelCompositeTrait.java', 'RelTraitTest.java', 'CalciteSuite.java', 'MaterializationTest.java', 'QuidemTest.java', 'misc.iq']"
a5d4a8b53cebbf781f0c457bdccc576ec1a9d036,"[CALCITE-2580] RexSimplify: coalesce(null > null, true) produces wrong result filter expressions (pengzhiwei)

fixes #865",['b31da22465e355cf7a6f3c5f9de9bf9ff0190a4b'],False,"['RexSimplify.java', 'RexProgramTest.java']"
ed424ed81d0de66fcfd6a5352f00fb99cc514882,"[CALCITE-2588] Run Geode Adapter tests with an Embedded Instance

Part of the effort to increase test coverage for adapters. Enables execution of all Geode adapter tests during CI build (instead of manual run).

Create special JUnit Rule (`GeodeEmbeddedPolicy`) which starts / stops embedded Geode instance once for all the tests.

Modify GeodeSchema and GeodeTable to accept exising geode instance in the constructor instance of connection parameters.

Ignore two tests which currently fail for both embedded and external instance(s). These bugs will be addressed separately

Local test dataset is taken from `calcite-test-dataset` project (the one which is used for integration testing). Re-use `zips-mini.json` from mongo/elastic adapters.

Closes apache/calcite#857",['9ba9bdc1d84804573c8370605e021e6b3fbab3de'],False,"['pom.xml', 'GeodeAggregate.java', 'GeodeFilter.java', 'GeodeProject.java', 'GeodeRel.java', 'GeodeRules.java', 'GeodeSchema.java', 'GeodeSchemaFactory.java', 'GeodeSort.java', 'GeodeTable.java', 'GeodeTableScan.java', 'GeodeToEnumerableConverter.java', 'GeodeSimpleSchema.java', 'GeodeUtils.java', 'AbstractGeodeTest.java', 'BaseGeodeAdapterIT.java', 'GeodeAdapterIT.java', 'GeodeAssertions.java', 'GeodeBookstoreTest.java', 'GeodeEmbeddedPolicy.java', 'GeodeZipsIT.java', 'GeodeZipsTest.java', 'JsonLoader.java', 'book_customer.json', 'book_master.json', 'log4j.properties', 'model-bookshop.json', 'model-geode-pg-federation.json', 'model-with-classes.json', 'model-zips.json', 'model2.json', 'zips-mini.json']"
999716535b53f8541907fa3269de11e3e6e374e8,"[CALCITE-2506] RexSimplify: coalesce(unaryPlus(nullInt), unaryPlus(vInt())) results in AssertionError: result mismatch (pengzhiwei)

fixes #873",['3a4fba828f3d9e48749fadd22f134891612b7072'],False,"['RexSimplify.java', 'RexProgramTest.java']"
be1769bcc260e0b84380d16bd3cbda834e071209,"[CALCITE-2438] Fix wrong results for IS NOT FALSE(false) (zhiwei.pzw) (Zoltan Haindrich)

closes #778
closes #875",['c39bfaa02a06ac91575076a6e74f29863923f5eb'],False,"['RexCall.java', 'RexProgramTest.java', 'RexProgramFuzzyTest.java']"
dfd012cf082adf50688c2cc57c7e857f6d702f72,"[CALCITE-2611] Linq4j code generation failure if one side of an OR contains unknown (Zoltan Haindrich)

Close apache/calcite#879",['6b3844c0634792263a5073b8ea93565fb3415f41'],False,"['ReflectiveSchemaTest.java', 'OptimizeShuttle.java', 'BlockBuilderTest.java']"
6284d3c88d9c659e0a8ef3dd5cf4819133de7522,"[CALCITE-2617] Add a variant of FilterProjectTransposeRule that can push down a Filter that contains correlated variables (Stamatis Zampetakis)

The default instance of FilterProjectTransposeRule does not push down
a Filter that contains correlated variables, as before.

1. Add a new constructor accepting predicates for the Filter and
   Project operands.
2. Remove the correlating condition check from the body of the rule
   and make it an optional predicate.
3. Pass the new correlating condition predicate to the existing
   constructors (retaining the same functionality for the generic
   INSTANCE rule)

Note: Classes using the protected constructor may break if they rely
on the fact that the Filter is not pushed when it contains correlating
conditions.

Add tests for each variant (Julian Hyde)

Close apache/calcite#887",['4b51b5ab2fe4dfaeffb22adf0e84477ba918aad5'],False,"['FilterProjectTransposeRule.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RelOptRulesTest.xml']"
b47413a1d648455c43dbe8d51df926ebd68b3a36,"[CALCITE-1870] Lattice suggester

Don't add a query graph if it is cyclic.

More concise descriptions of join graphs, and add FoodMart test case.
Add a test based on TPC-DS.

Make FoodMartQueryTest a top-level class, and add a test that runs
through all of its queries and suggests lattices.

API changes to Lattice. Rename class Lattice.Node to LatticeNode, add
sub-class LatticeRootNode that is immutable and has state that was
previously in Lattice. LatticeSuggester makes heavy use of LatticeNode.
Move column unique name into Column, and remove the
Lattice.uniqueColumnNames field.

DirectedGraph.toString sorts lists of vertices and edges.

Add materialized views to documentation menu;
tweak SQL formatting.

In HepPlanner, rename noDAG to noDag.

SqlImplementor: Translate simple RexNode to SQL without requiring RelBuilder;
SqlImplementor.Context is now static, but not all derived classes are.

Fix a typo in UdfTest.",['6284d3c88d9c659e0a8ef3dd5cf4819133de7522'],False,"['Lattice.java', 'LatticeChildNode.java', 'LatticeNode.java', 'LatticeRootNode.java', 'LatticeSpace.java', 'LatticeSuggester.java', 'LatticeTable.java', 'MapSqlStatisticProvider.java', 'MutableNode.java', 'Path.java', 'SqlStatisticProvider.java', 'Step.java', 'JsonSchema.java', 'ModelHandler.java', 'RelOptLattice.java', 'HepPlanner.java', 'SqlImplementor.java', 'StarTable.java', 'SqlValidatorUtil.java', 'FrameworkConfig.java', 'Frameworks.java', 'AttributedDirectedGraph.java', 'DefaultDirectedGraph.java', 'DefaultEdge.java', 'IntPair.java', 'LatticeSuggesterTest.java', 'CalciteSuite.java', 'FoodMartQuerySet.java', 'FoodmartTest.java', 'JdbcTest.java', 'LatticeTest.java', 'UdfTest.java', 'DirectedGraphTest.java', 'hsqldb-foodmart-auto-lattice-model.json', 'TpcdsLatticeSuggesterTest.java', 'docs.yml', 'lattice.md', 'materialized_views.md']"
561c6427e3602510d619b45cd7da840773fa0d2c,"[CALCITE-2405] In Babel parser, make 400 reserved keywords including YEAR, SECOND, DESC non-reserved

Command words (e.g. SELECT, UPDATE, EXPLAIN, ALTER), SQL clause names
(e.g. WHERE, ORDER, INNER but not BY), and keywords that start literals
(DATE, TIME, TIMESTAMP, INTERVAL) remain reserved.

In Planner, use the parser's conformance.

Avoid javac StackOverflowError by splitting up the NonReservedKeywords()
parser method into several parts.

Compatibility warning: If you have created your own sub-parser you must
copy nonReservedKeywords from core config.fmpp to your config.fmpp.
Previously the core non-reserved keywords were in a parser method
CommonNonReservedKeywords(), but that method has been removed.

Upgrade freemarker to 2.3.28.",['9c26a9e74dafadb27ea363d82cfe1105d5dd3329'],False,"['config.fmpp', 'BabelParserTest.java', 'config.fmpp', 'Parser.jj', 'PlannerImpl.java', 'config.fmpp', 'SqlParserTest.java', 'pom.xml', 'config.fmpp']"
4cc46130f71d21e4f5b76f6e645380cd83d2c921,"[CALCITE-2654] In RelBuilder, add a fluent API for building complex aggregate calls

To interface AggCall in RelBuilder, add methods distinct(boolean),
filter(RexNode), approximate(boolean), alias(String). And simplify the
RelBuilder.aggregateCall method to just two arguments:
aggregateCall(op, operands). Thus you only specify the arguments that
are of interest. Similar changes to count, countStar, min, max, sum,
avg.",['425fa7b7fb9cc02f5078e0696284176be0283fa3'],False,"['AbstractMaterializedViewRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExtractProjectRule.java', 'SubQueryRemoveRule.java', 'RelFieldTrimmer.java', 'PigRelBuilder.java', 'RelBuilder.java', 'RelToSqlConverterTest.java', 'RelBuilderTest.java', 'algebra.md']"
7bc9f14032b7cf0761c0b2eefdb6bb588047ec8e,"[CALCITE-2224] Support WITHIN GROUP clause for aggregate functions (Hongze Zhang)

Close apache/calcite#871",['4cc46130f71d21e4f5b76f6e645380cd83d2c921'],False,"['Parser.jj', 'AggImpState.java', 'AggregateLambdaFactory.java', 'EnumerableAggregate.java', 'OrderedAggregateLambdaFactory.java', 'SequencedAdderAggregateLambdaFactory.java', 'SourceSorter.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'CalciteCatalogReader.java', 'RelCollations.java', 'AggregateCall.java', 'Window.java', 'RelJsonReader.java', 'SqlImplementor.java', 'AbstractMaterializedViewRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExtractProjectRule.java', 'AggregateFilterTransposeRule.java', 'AggregateProjectMergeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'SubQueryRemoveRule.java', 'RexBuilder.java', 'CalciteResource.java', 'SqlAggFunction.java', 'SqlFilterOperator.java', 'SqlKind.java', 'SqlRankFunction.java', 'SqlSplittableAggFunction.java', 'SqlWithinGroupOperator.java', 'SqlAbstractGroupFunction.java', 'SqlAnyValueAggFunction.java', 'SqlAvgAggFunction.java', 'SqlCountAggFunction.java', 'SqlCovarAggFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlHistogramAggFunction.java', 'SqlLeadLagAggFunction.java', 'SqlMinMaxAggFunction.java', 'SqlNthValueAggFunction.java', 'SqlNtileAggFunction.java', 'SqlSingleValueAggFunction.java', 'SqlStdOperatorTable.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'AggChecker.java', 'SqlUserDefinedAggFunction.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'BuiltInMethod.java', 'Optionality.java', 'CalciteResource.properties', 'RelWriterTest.java', 'TraitPropagationTest.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'JdbcTest.java', 'RelMetadataTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'PlannerTest.java', 'SqlToRelConverterTest.xml', 'agg.iq', 'DruidRules.java', 'pom.xml', 'algebra.md', 'reference.md']"
8e557d26cffceaf7d7f98d8f8bafd9fbe3bc2447,"[CALCITE-2266] Implement SQL:2016 JSON functions: JSON_EXISTS, JSON_VALUE, JSON_QUERY, JSON_OBJECT, JSON_OBJECTAGG, JSON_ARRAY, JSON_ARRAYAGG, IS JSON predicate (Hongze Zhang)

Close apache/calcite#785",['d7829a3c2b35d1cb52e60167bc446b163b928096'],False,"['config.fmpp', 'pom.xml', 'config.fmpp', 'Parser.jj', 'RexImpTable.java', 'CalciteResource.java', 'SqlFunctions.java', 'SqlJsonConstructorNullClause.java', 'SqlJsonEmptyOrError.java', 'SqlJsonEncoding.java', 'SqlJsonExistsErrorBehavior.java', 'SqlJsonQueryEmptyOrErrorBehavior.java', 'SqlJsonQueryWrapperBehavior.java', 'SqlJsonValueEmptyOrErrorBehavior.java', 'SqlKind.java', 'SqlJsonApiCommonSyntaxOperator.java', 'SqlJsonArrayAggAggFunction.java', 'SqlJsonArrayFunction.java', 'SqlJsonExistsFunction.java', 'SqlJsonObjectAggAggFunction.java', 'SqlJsonObjectFunction.java', 'SqlJsonQueryFunction.java', 'SqlJsonValueExpressionOperator.java', 'SqlJsonValueFunction.java', 'SqlStdOperatorTable.java', 'ReturnTypes.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'CalciteResource.properties', 'config.fmpp', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlTester.java', 'SqlTests.java', 'CalciteSuite.java', 'SqlFunctionsTest.java', 'SqlJsonFunctionsTest.java', 'SqlValidatorTest.java', 'agg.iq', 'pom.xml', 'config.fmpp', 'reference.md']"
4310815a829ef01decccc3a4dcc37f5f8372c671,Fix invocation of deprecated constructor of SqlAggFunction (Hongze Zhang),['8e557d26cffceaf7d7f98d8f8bafd9fbe3bc2447'],False,"['SqlJsonArrayAggAggFunction.java', 'SqlJsonObjectAggAggFunction.java']"
6d9242a168a26ea3bebd3aed7919dccb86b7ebe3,"Following [CALCITE-2266], remove an unwanted dependency

Also, cosmetic changes: spaces and indentation",['4310815a829ef01decccc3a4dcc37f5f8372c671'],False,"['Parser.jj', 'EnumerableRelImplementor.java', 'RexImpTable.java', 'SubQueryRemoveRule.java', 'CalciteResource.java', 'SqlFunctions.java', 'SqlJsonEncoding.java', 'SqlJsonQueryEmptyOrErrorBehavior.java', 'SqlJsonQueryWrapperBehavior.java', 'SqlJsonValueEmptyOrErrorBehavior.java', 'HsqldbSqlDialect.java', 'MysqlSqlDialect.java', 'SqlJsonApiCommonSyntaxOperator.java', 'SqlJsonArrayAggAggFunction.java', 'SqlJsonArrayFunction.java', 'SqlJsonExistsFunction.java', 'SqlJsonObjectAggAggFunction.java', 'SqlJsonObjectFunction.java', 'SqlJsonQueryFunction.java', 'SqlJsonValueExpressionOperator.java', 'SqlJsonValueFunction.java', 'SqlStdOperatorTable.java', 'ReturnTypes.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'SqlOperatorBaseTest.java', 'SqlTester.java', 'SqlTests.java', 'BookstoreSchema.java', 'RexProgramTest.java', 'SqlJsonFunctionsTest.java', 'DruidQueryFilterTest.java', 'DruidAdapterIT.java', 'DruidAdapterIT2.java', 'ElasticSearchAdapterTest.java', 'reference.md']"
1d2929105f47b944c65529fe59b3072cce167116,"[CALCITE-2661] In RelBuilder, add methods for creating Exchange and SortExchange relational expressions (Chunwei Lei)

Close apache/calcite#910",['6d9242a168a26ea3bebd3aed7919dccb86b7ebe3'],False,"['Exchange.java', 'RelFactories.java', 'LogicalSortExchange.java', 'RelBuilder.java', 'RelBuilderTest.java', 'algebra.md']"
614bc7b2bffce28b26d7c52f12a670f4a13f264a,"[CALCITE-2651] Enable scrolling in ElasticSearch adapter for basic search queries

The only efficient way to fetch full (large) result set in elastic is to use scrolling.

Note that behaviour remains unchanged for queries with aggregates and offsets
(like explicit pagination using `from`).",['fcc8bf7f44f92efb3c9a1e1f51ffc1a09cab27b9'],False,"['pom.xml', 'ElasticsearchJson.java', 'ElasticsearchSchema.java', 'ElasticsearchTable.java', 'ElasticsearchTransport.java', 'Scrolling.java', 'ElasticSearchAdapterTest.java', 'EmbeddedElasticsearchPolicy.java', 'ScrollingTest.java']"
53e15af6c5e8e782b2edcd7f5bf4f5f32225d110,"[CALCITE-563] In JDBC adapter, push bindable parameters down to the underlying JDBC data source (Vladimir Sitnikov, Piotr Bojko)

Fix up, moving JdbcPreparedStatementUtils methods into
ResultSetEnumerable, and fixing some comments and typos. (Julian Hyde)

Close apache/calcite#907
Close apache/calcite#902",['02ca9bc995cac5b4b97855a4d06df46e632d7c22'],False,"['JdbcToEnumerableConverter.java', 'CalcitePrepareImpl.java', 'CalciteResource.java', 'ResultSetEnumerable.java', 'SqlDynamicParam.java', 'SqlNode.java', 'SqlWriter.java', 'SqlPrettyWriter.java', 'SqlString.java', 'BuiltInMethod.java', 'CalciteResource.properties', 'CalciteAssert.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'pom.xml', 'CalciteConnectionProvider.java', 'ChinookAvaticaServer.java', 'ConnectionFactory.java', 'RemotePreparedStatementParametersTest.java', 'PlusSuite.java']"
d32ee5c320938b5c34ce09df2276c9570c27a301,"[CALCITE-2675] Type validation error as ReduceExpressionRule fails to preserve type nullability (Zoltan Haindrich)

Close apache/calcite#922",['53e15af6c5e8e782b2edcd7f5bf4f5f32225d110'],False,"['ReduceExpressionsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
847e76cde2894ea7540749f68669ce2d910c2fa9,"[CALCITE-2632] Ensure that RexNode and its sub-classes implement hashCode and equals methods (Zoltan Haindrich)

Previously there was no default hashCode/equals implementations. To
ensure that they are working properly is crucial while working with
basic collections like sets/maps.

Fix ups (Julian Hyde):

* Use Objects.equals(x, y) in preference to x.equals(y) only when x or y
 may be null; and use x == y when objects are primitive.

* When implementing Object.equals, use the pattern

  return this == obj
    || obj instanceof Type
    && a.equals(((Type) obj).a) ...

  whenever possible.

* In the many cases where RexNode.toString() is used as a key in
  collections, use the raw RexNode instead.

Close apache/calcite#943",['ce47088f118b796908b1de4b1440d21d08d2b6b7'],False,"['RexImplicationChecker.java', 'SubstitutionVisitor.java', 'Match.java', 'Window.java', 'RelMdPredicates.java', 'RelMdUtil.java', 'MutableFilter.java', 'MutableJoin.java', 'MutableSemiJoin.java', 'AbstractMaterializedViewRule.java', 'DateRangeRules.java', 'JoinPushExpressionsRule.java', 'PushProjector.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SubQueryRemoveRule.java', 'LogicVisitor.java', 'RexCall.java', 'RexCorrelVariable.java', 'RexDynamicParam.java', 'RexNode.java', 'RexOver.java', 'RexProgramBuilder.java', 'RexRangeRef.java', 'RexSimplify.java', 'RexSubQuery.java', 'RexUtil.java', 'RexVariable.java', 'SqlToRelConverter.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'ElasticsearchRules.java']"
453f171d900ac8ac04bed95bbdd59c986ba4e726,"[CALCITE-2637] In SQL parser, allow prefix '-' between BETWEEN and AND (Qi Yu)

For example, ""WHERE deptno BETWEEN - deptno AND 5"".

Fix Mimer URL; add a test (Julian Hyde)

Close apache/calcite#941",['847e76cde2894ea7540749f68669ce2d910c2fa9'],False,"['Parser.jj', 'SqlParserTest.java']"
45258404b7844204266f8c356a8e41ef1f1e3683,"[CALCITE-2542] In SQL parser, allow '. field' to follow expressions other than tables and columns (Rong Rong)

Fix how SqlNode AtomicRowExpression + DOT operation is parsed, adding
in <DOT> parser for expression2b for parsing additional identifier
after AtomicRowExpression.

Close apache/calcite#933",['849f1416d435acb1409be853f8cc62ff610eda9a'],False,"['Parser.jj', 'SqlDotOperator.java', 'SqlParserTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
de9a7164b2d3e5a1637254fd0d54c7a4c886166e,"[CALCITE-2717] Use Interner instead of LoadingCache to cache traits to allow GC (Haisheng Yuan)

Even though canonicalMap's value is soft referenced, key is strong referenced,
key and value are referencing the same object. So traits in the cache will
never be garbage-collected, which may cause OOM if we have tons of different
traits. This issue has been fixed by caching traits using Interner instead of
LoadingCache. In addition, canonizeComposite is removed, since canonize can do
the same work.

Close apache/calcite#951",['45258404b7844204266f8c356a8e41ef1f1e3683'],False,"['RelCompositeTrait.java', 'RelTraitDef.java']"
d7d28a273c127d324787298ed253fae94b9f221d,"[CALCITE-2679] In Elasticsearch adapter, implement DISTINCT and GROUP BY without aggregate function (Siyuan Liu)

This commit mainly fixed 3 bugs:
1. Group by and distinct query enter the wrong execution branch.
   [ElasticsearchTable:126]
2. Values in agg bucket loses a part after returning as a result.
   [ElasticsearchJson:83-93, 546-551]
3. Logic of removing empty agg blocks can not work. [Elasticsearch:240-254]

Close apache/calcite#927",['e274f1ba28494a037fd6e06d7a7b8d762661484f'],False,"['ElasticsearchJson.java', 'ElasticsearchTable.java', 'ElasticSearchAdapterTest.java']"
16ebc963d8751c3b4fddf27b341a74033b7e4b30,"[CALCITE-2701] Make generated Baz classes immutable

Revert the workaround introduced in EnumerableRelImplementor due to JANINO-169.",['69750ff759a560b462960d81c446bdf912a1b39d'],False,"['EnumerableRelImplementor.java', 'JdbcTest.java']"
25c332d609372522e1090cb141ab8ae5f1bdceb8,"[CALCITE-2529] All numbers are in the same type family (Andrew Pilloud)

The linq4j code generator fails to generate calls to functions
when there is a mix between integer and floating point arguments.
This is due to the incorrect assumption that java integer types
can not be assigned to floating point types. This change fixes
the assignment mapping, enabling the generator to call floating
point functions with integer arguments.

Close apache/calcite#818",['03c88b69c27ce7df22eee889503c70e6fe6bb016'],False,"['SqlFunctions.java', 'SqlOperatorBaseTest.java', 'Primitive.java', 'PrimitiveTest.java']"
be5404713bbcd8cdc19f2651af33707b895d2c04,"[CALCITE-2709] In Geode adapter, allow filtering on DATE, TIME, TIMESTAMP fields (Sandeep Chada)

GeodeFilter changes to support filtering with datetime types (DATE,
TIME, TIMESTAMP).

Close apache/calcite#952",['25c332d609372522e1090cb141ab8ae5f1bdceb8'],False,"['GeodeFilter.java', 'GeodeAllDataTypesTest.java', 'JsonLoader.java']"
dfb29f7627d02f6e4414be7bc42822a26684778c,"[CALCITE-2719] In JDBC adapter for MySQL, fix cast to INTEGER and BIGINT (Piotr Bojko)

MySQL does not support casts to INTEGER and BIGINT; instead we must
cast to SIGNED.

Close apache/calcite#953",['6c7a7edd1b9b11f2c0826db04d60cc2b62bea636'],False,"['MysqlSqlDialect.java', 'RelToSqlConverterTest.java']"
0ad68c3194c7bca24dfd21302418636730274312,"[CALCITE-2684] RexBuilder gives AssertionError when creating integer literal larger than 2^63 (Ruben Quesada Lopez)

Close apache/calcite#928

For [CALCITE-2701]:
Close apache/calcite#935",['dfb29f7627d02f6e4414be7bc42822a26684778c'],False,"['RexBuilder.java', 'RexBuilderTest.java']"
40d12b7419bd544bd829011a18ac37f6bc529ce7,"[CALCITE-2468] Validator throws IndexOutOfBoundsException when trying to infer operand type from STRUCT return type (Rong Rong)

Add example in server module's type.iq test.
Fix type inference when operator is AS with a complex row of just 1 element.

Close apache/calcite#932",['4da9c0d94ee0e2a2f4d03845730ffc63a83a7cbd'],False,"['SqlValidatorImpl.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'type.iq']"
8c7dc786312d0dc0dc3f075c81ff71ac1ea871c5,"[CALCITE-2730] RelBuilder incorrectly simplifies a filter with duplicate conjunction to empty (Stamatis Zampetakis)

1. Modify RexSimplify#processRange method to replace at most one term
   at a time.
2. Add unit test reproducing the problem.
3. Add missing filter in the expected plan of
   RelOptRulesTest#testMergeJoinFilter.
4. Add utility method RexUtil#replaceFirst.

Move RexUtil.replaceFirst into RexSimplify;
change it to replaceLast, so that it simplifies (x, y, x) to (x, y)
rather than the less intuitive (y, x). (Julian Hyde)

Close apache/calcite#959",['f3655e15a11a9fb266af290cb390e690d4301c09'],False,"['RexSimplify.java', 'RelBuilderTest.java', 'RelOptRulesTest.xml']"
6bca0b80859e86ac41ba1e342460db929cf72268,"[CALCITE-2575] Release Calcite 1.18.0

Release notes; change version numbers.

Update release instructions in HOWTO.",['f362785e1f14d74f45a30223a49f927df4b7b0c6'],False,"['README', 'pom.xml', 'history.md', 'howto.md']"
a3711d78d450b7183a65e0ce695527ca92218bd8,"[CALCITE-2463] Silence ERROR logs from CalciteException, SqlValidatorException

Output exception messages to logger only in calcite.debug=true mode

Close #797",['a4bcea8c56527b179d73c826703471f1c56cec37'],False,"['CalciteException.java', 'SqlValidatorException.java']"
5d918acbb0efbf1d1671f034529bdc56a97cb5f8,"[CALCITE-2436] Steps for building site under Windows, misprint fix in SQL Language page",['5ed0c2a3f133e30fd2919a73675b6516d2da67bf'],False,"['README.md', 'reference.md']"
276e24b089bc066e9d9ffe3ed5f9bdf3f4699b96,"[CALCITE-2625] Jdbc adapter: print Window Frame Boundary only for those aggregates that support it (KrishnaKant Agrawal)

fixes #889",['b54f6de9d7f87e9853fc9ec01b586555a089b913'],False,"['SqlImplementor.java', 'RelToSqlConverterTest.java']"
fc5af78bf37a4a8b9e89c20e2a478fb4a95dbd4d,"Site: fix typo at the main page (Marc Prud'hommeaux)

fixes #974",['276e24b089bc066e9d9ffe3ed5f9bdf3f4699b96'],False,['index.md']
1556cdd4bb67e85f1e4036730fa510a29db59df3,"Site: fix JSON syntax error at file adapter page (Marc Prud'hommeaux)

The ""tables"" operand should take an array, but the JSON example doesn't wrap the two tables in brackets.

fixes #965",['fc5af78bf37a4a8b9e89c20e2a478fb4a95dbd4d'],False,['file_adapter.md']
01c8a454622771a8542b1fbdf5b175ff76227bb2,"[CALCITE-2765] Bump Janino dependency to 3.0.11 (Fokko Driesprong)

Fixes some small issues and NPE fixes http://janino-compiler.github.io/janino/changelog.html

fixes #988",['1556cdd4bb67e85f1e4036730fa510a29db59df3'],False,['pom.xml']
e67eb2d74c0a1f32d74025048f30fd8a94d98f8f,"[CALCITE-2767] Fix conversion of Case in RexSqlStandardConvertletTable (Benoit Hanotte)

`SqlCaseOperator.createCall()` requires 4 operands [1]:
 1. first value (i.e. CASE value WHEN...)
 2. when condifitions (as SqlNodeList)
 3. then values (as SqlNodeLists)
 4. else value

`RexSqlStandardConvertletTable` always only pass 3 arguments [2] as it uses the generic form such as
`CASE WHEN condition1 THEN val2 ... ELSE val3 END` and never the form
`CASE val WHEN condition1 THEN val2 ELSE val3`.

When calling `SqlCaseOperator.createCall()`, it needs to pass a null sql node for the first value in
order to correctly provide the 4 expected arguments and not only the last 3.

[1] https://github.com/apache/calcite/blob/59b76701d9c805f51b0929577ca604fdbfe00b0b/core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java#L288
[2] https://github.com/apache/calcite/blob/59b76701d9c805f51b0929577ca604fdbfe00b0b/core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java#L239

fixes #990",['01c8a454622771a8542b1fbdf5b175ff76227bb2'],False,"['RexSqlStandardConvertletTable.java', 'RexToSqlNodeConverterImpl.java', 'RexSqlStandardConvertletTableTest.java', 'CalciteSuite.java']"
9667f8537010d21556a592bd0dfbf20f7d0a4411,"[CALCITE-2471] Shorten AbstractRelNode#computeDigest() digest (Laurent Goujon)

Digest/description created by AbstractRelNode#computeDigest includes
the description of each of its inputs, causing the final string to
be excessively long (e.g. the top level node of a tree containing
the string representation of the whole tree).

Change the function to not use the input's description but instead
its original description which is <typeName>#<id>.

fixes #795",['e67eb2d74c0a1f32d74025048f30fd8a94d98f8f'],False,"['AbstractRelNode.java', 'HepPlannerTest.java']"
416d8c91d6b3dbfad9673a5c9e8e7d97b5f15be0,"[CALCITE-2554] Enrich enumerable join operators with order preserving information (Stamatis Zampetakis)

1. Introduce collation metadata information for EnumerableJoin, EnumerableThetaJoin, EnumerableSemiJoin, and EnumerableCorrelate.

2. Modify static factory create methods to obtain the collation information from the metadata.

3. Change EnumerableJoinRule, EnumerableCorrelateRule to use the static factory method to create the operators.

4. Add SortRemoveRuleTest, exploiting the preserved collation of various enumerable join operatrs to remove a sort.

5. Adapt sql/join.iq removing redundant sort operators.

6. Adapt sql/sub-query.iq due to CALCITE-2582.

7. Add tests verifying the order preserving properties of the join algorithms in EnumerableDefaults.",['9667f8537010d21556a592bd0dfbf20f7d0a4411'],False,"['EnumerableCorrelate.java', 'EnumerableCorrelateRule.java', 'EnumerableJoin.java', 'EnumerableJoinRule.java', 'EnumerableSemiJoin.java', 'EnumerableThetaJoin.java', 'RelMdCollation.java', 'SortRemoveRuleTest.java', 'HrClusteredSchema.java', 'CalciteSuite.java', 'PlannerTest.java', 'join.iq', 'sub-query.iq', 'JoinPreserveOrderTest.java', 'Linq4jSuite.java']"
b505ece7ff6cf906dfdc257848d85f381d103cb3,"[CALCITE-2762] Quidem env variable is always false if its name is separated by dot(.) (Hongze Zhang)

fixes #987",['13fca96c6809097a368625700536364624cb5887'],False,['QuidemTest.java']
8cc6df210188e7a5a8a3a1f8d70b4d53544e9d94,"[CACITE-2629] Remove call to CatalogReader#getAllSchemaObjects

CatalogScope constructor makes a call to CatalogReader#getAllSchemaObjects
and stores its result into a private field which is not used by the
class itself, nor has some accessor other class could use.

Removing this call as it might be expensive on some systems.

fixes #888",['b505ece7ff6cf906dfdc257848d85f381d103cb3'],False,['CatalogScope.java']
d368fc570a5d0f836c049c6acd73f2dd9f467f79,"[CALCITE-2437] FilterMultiJoinMerge should combine filters from Filter relation and multijoin post-join filters

The FilterMultiJoinMergeRule class is intended to combine a filter on
top of a multi join into a single multijoin. But instead of combining
the post join filter with the filter's condition, it simply replaces
it.

Fixing the issue by composing a conjuction of the two filters and
adding it to the new multijoin.

fixes #977",['8cc6df210188e7a5a8a3a1f8d70b4d53544e9d94'],False,"['FilterMultiJoinMergeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
535bd8d41c304c7a1694df765bef639d7d181206,"CALCITE-2375 EnumerableDefaults.join_() leaks connections (Pavel Gubin)

fixes #739",['d368fc570a5d0f836c049c6acd73f2dd9f467f79'],False,['EnumerableDefaults.java']
9c31e96729ed9630b20956eb657f7539e755ef2c,"[CALCITE-2249] AggregateJoinTransposeRule generates inequivalent nodes if Aggregate relNode contains distinct aggregate function (jingzhang)

fixes #661",['535bd8d41c304c7a1694df765bef639d7d181206'],False,"['AggregateJoinTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
d15d6e036b11e4e3588985f315bc4d1e2d2d2471,"[CALCITE-2778] Remove ClosableAllocation, ClosableAllocationOwner, CompoundClosableAllocation (BELUGA BEHR)

fixes #994",['9c31e96729ed9630b20956eb657f7539e755ef2c'],False,"['ClosableAllocation.java', 'ClosableAllocationOwner.java', 'CompoundClosableAllocation.java']"
5ff57651c7bdbc61ecbc212293c21ae90d3d370f,"[CALCITE-2344] Avoid inferring $0=null predicate from $0 IS NULL when $0 is not nullable

fixes #714",['d15d6e036b11e4e3588985f315bc4d1e2d2d2471'],False,"['RelOptUtil.java', 'RexUtil.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
d18d9e499856ebc260ca0fbc1793e7e813e13205,"[CALCITE-2779] Remove References to StringBuffer (Beluga Behr)

fixes #996",['5ff57651c7bdbc61ecbc212293c21ae90d3d370f'],False,"['RelDataTypeImpl.java', 'RexProgram.java', 'ConcurrentTestCommandScript.java']"
62b47aeeb7eeb59beaf5b8f3b54a5c58ba4ca76d,"[CALCITE-2635] getMonotonocity is slow on wide tables (Gian Merlino)

Instead of getting the index of the column from rowType and then comparing
it to the collation field index, gets the collation field index and checks
if the corresponding rowType index matches.

fixes #891",['d18d9e499856ebc260ca0fbc1793e7e813e13205'],False,['RelOptTableImpl.java']
e804521beeec30eccb5ae3a29620f818d0de8427,"[CALCITE-2783] Expressions like ( s or s is unknown ) = true causes Exceptions

Earlier, expressions like ( s or s is null ) = true have resulted in an exception.
Some other fixes to handle null translations to true/false in IS NULL/IS NOT NULL cases.

Close apache/calcite#1007",['fc10982bc856a01c23928de15441822de2d3ffde'],False,"['RexImpTable.java', 'conditions.iq']"
0202ef59519eda6d4c416d84544e152304849715,"[CALCITE-2788]  Building error for sub-project of calcite on ""maven-checkstyle-plugin""",['e804521beeec30eccb5ae3a29620f818d0de8427'],False,"['pom.xml', 'checker.xml']"
b43a314b60f42d1e58febc39c04cbbbefc3503e1,"Fix sqlline by removing redundant slf4j dependency (log4j-over-slf4j) from cassandra-all

SLF4J initialization was failing due to `NoClassDefFoundError`.",['edbaf6c2b61d10eed082ca33993b919b683fd955'],False,['pom.xml']
e80ec9750a0963345444b5614f4cfc5fd4c0da75,"Site: [CALCITE-2734] Update mongo documentation to reflect filename changes

After mongo adapter refactoring some files were renamed (eg. `mongo-zips-model.json`
-> `mongo-models.json` in `test/resources`).",['b43a314b60f42d1e58febc39c04cbbbefc3503e1'],False,['howto.md']
542c086749d504de5542c37f12f6a1329842f18d,"[CALCITE-2814] ElasticSearch adapter. Fix ""group by"" when using raw item access (eg. _MAP['foo'])

The following queries were previsouly failing:

```sql
select max(_MAP['a']), _MAP['b'] from elastic group by _MAP['b']
```",['1961d13fd801a6ef8d12ae6babdb75e61f87013f'],False,"['ElasticsearchAggregate.java', 'ElasticsearchEnumerators.java', 'ElasticsearchMethod.java', 'ElasticsearchRel.java', 'ElasticsearchSort.java', 'ElasticsearchTable.java', 'ElasticsearchToEnumerableConverter.java', 'ElasticSearchAdapterTest.java']"
cf363b5989d35bd8b4d5f14c7a99acea6e9f0f5a,"[CALCITE-2798] Remove ORDER BY in sub-query, provided it has no LIMIT or OFFSET, during SQL-to-RelNode conversion (Haisheng Yuan)

Standard SQL says that ORDER BY in sub-queries should have no effect;
usually we prefer to make optimizations via planner rules, but we do
this change in SqlToRelConverter because a planner rule would have
difficulty telling whether a RelNode's consumers care about the order
in which it produces records.

Close apache/calcite#1021",['542c086749d504de5542c37f12f6a1329842f18d'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'PlannerTest.java', 'SqlToRelConverterTest.xml']"
d9fe7f7ad7c2006780e459ce90e3f442a6246051,"Improve assert messages for CalciteAssert-based tests

Make sure top-most exception is AssertionError, so test failures are simpler to understand.

For instance:

java.lang.AssertionError:
Expected: ""empid=100; deptno=10; DNAME=Sales\nempid=1170; deptno=10; DNAME=Sales\nempid=150; deptno=10; DNAME=Sales\nempid=200; deptno=20; DNAME=null""
     but: was ""empid=100; deptno=10; DNAME=Sales\nempid=110; deptno=10; DNAME=Sales\nempid=150; deptno=10; DNAME=Sales\nempid=200; deptno=20; DNAME=null""

	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.junit.Assert.assertThat(Assert.java:956)
	at org.junit.Assert.assertThat(Assert.java:923)
	at org.apache.calcite.test.CalciteAssert.lambda$checkResult$6(CalciteAssert.java:423)
	at org.apache.calcite.test.CalciteAssert.assertQuery(CalciteAssert.java:557)
	at org.apache.calcite.test.CalciteAssert$AssertQuery.lambda$returns$1(CalciteAssert.java:1456)
	at org.apache.calcite.test.CalciteAssert$AssertQuery.withConnection(CalciteAssert.java:1388)
	at org.apache.calcite.test.CalciteAssert$AssertQuery.returns(CalciteAssert.java:1454)
	at org.apache.calcite.test.CalciteAssert$AssertQuery.returns(CalciteAssert.java:1437)
	at org.apache.calcite.test.CalciteAssert$AssertQuery.returnsUnordered(CalciteAssert.java:1466)
	at org.apache.calcite.test.JdbcTest.testScalarSubQuery(JdbcTest.java:4593)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
	Suppressed: java.lang.RuntimeException: With materializationsEnabled=false, limit=0, sql=select ""empid"", ""deptno"",
 (select ""name"" from ""hr"".""depts""
  where ""deptno"" = e.""deptno"") as dname
from ""hr"".""emps"" as e
		at org.apache.calcite.test.CalciteAssert.assertQuery(CalciteAssert.java:570)
		... 28 more",['18560d1eb21fe46056b6e459d75444419937c9de'],False,['CalciteAssert.java']
21fe666e9634ab9a752c7cc328924b68f6143afe,"[CALCITE-2301] JDBC adapter: use query timeout from the top-level statement

fixes #995",['4be11a9e4425674a86192c8a908177df29725af0'],False,"['DataContext.java', 'JdbcToEnumerableConverter.java', 'CalciteConnectionImpl.java', 'CalciteResource.java', 'ResultSetEnumerable.java', 'BuiltInMethod.java', 'CalciteResource.properties']"
866d855bfb7f95d4e064531fceb0cbf27ed6edff,"[CALCITE-2454] Avoid treating Project(x=1) and Project(x=1) equal in case the type of 1 is int in the first rel and long in the second one

Add type information to RexLiteral#digest, ensure planner uses just RelNode#digest for identity

fixes #1002",['4ccf5caea070580ae030074dc4c213fd67d73255'],False,"['CassandraAdapterTest.java', 'VolcanoPlanner.java', 'Values.java', 'RexBuilder.java', 'RexCall.java', 'RexDigestIncludeType.java', 'RexLiteral.java', 'RexOver.java', 'SqlCollation.java', 'SqlPostfixOperator.java', 'SqlPrefixOperator.java', 'BasicSqlType.java', 'Unsafe.java', 'RelOptUtilTest.java', 'RexBuilderTest.java', 'SqlTests.java', 'CalciteSuite.java', 'JdbcTest.java', 'MaterializationTest.java', 'RelBuilderTest.java', 'RexProgramTest.java', 'StreamTest.java', 'HepPlannerTest.xml', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'agg.iq', 'join.iq', 'misc.iq', 'outer.iq', 'some.iq', 'spatial.iq', 'sub-query.iq', 'DruidAdapterIT.java', 'DruidAdapterIT2.java', 'ElasticSearchAdapterTest.java', 'CsvTest.java', 'GeodeBookstoreTest.java', 'MongoAdapterTest.java', 'os_adapter.md', 'SparkAdapterTest.java']"
d64f60cc513370cd409098f8ec997463329c1d6c,"[CALCITE-2817] Make CannotPlanException great

This addresses the common cases for CannotPlanException: VolcanoPlanner would
try to identify and print explanations like ""the convertsion from LogicalAggregate to enumerable is missing"".

The change also adds VolcanoPlanner#toDot() method to dump planner state in a Graphviz-compatible format.
The state includes sets, subsets, rels. It prints active rule with references to the matched rels.

Color coding:
red subset means it has no rels (besides AbstractConverter) yet
blue (subset, rel) means it is best for its subset
dashed lines connect VolcanoRule with its operands",['2102f1f5442fa271c258b7754da8df07d65847ec'],False,"['RelSubset.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java']"
3cefa45ac13b9768e1a7b7e90ede77c6b6eec27b,"[CALCITE-2853] Avoid multithreaded execution of CalciteRemoteDriverTest

Technically speaking, the test should pass even in concurrent mode,
however Calcite remote driver does not support concurrency yet, so
@NotThreadSafe is added to make CI pass.",['d64f60cc513370cd409098f8ec997463329c1d6c'],False,"['pom.xml', 'CalciteRemoteDriverTest.java']"
9924699e534516f47363aa30d23fb9e64e34ed29,"[CALCITE-2848] Simplifying a case statement's first branch should ignore its safety

Earlier when a CASE expression had any condition/value which contained probably dangerous instructions,
the rewrite to a boolean expression was abandoned.
This change relaxes the check to omit it for first branch's condition - because that would be evaluated anyway.",['6b41a6135d7bb09b4ccd08df665ae089275b8454'],False,"['RexSimplify.java', 'RexProgramTest.java']"
846494a0091b00357f3ccb67c8a4a7d9d226cd7d,"[CALCITE-2464] Allow to set nullability for columns of structured types (Ruben Quesada Lopez)
- Added nullability flag to struct types (previously they were always considered as non-nullable)
- Struct types will be built as non-nullable by default to avoid regresssions, but this
can be changed via RelDataTypeFactory#createTypeWithNullability
- SqlCreateTable will generate nullable struct types, unless they are defined as NOT NULL
- New unit tests",['8eb852039db04c132ae7a99943495f87cf39dfd2'],False,"['JavaTypeFactoryImpl.java', 'RelDataTypeFactoryImpl.java', 'RelRecordType.java', 'SqlTypeFactoryTest.java', 'JdbcTest.java', 'SqlCreateTable.java', 'ServerTest.java', 'type.iq']"
83d8cf1e9189d0098677751d928cc39ac188b5a9,"[CALCITE-2863] ElasticSearch Adapter. select * and predicates on _MAP fail

Fix handling of `select *` in projections.

Example of failing query:
```sql
select * from elastic where _MAP['state'] = 'NY' order by _MAP['city']
```",['c462838f37f02b490088a216773415926688e9f3'],False,"['ElasticsearchProject.java', 'ElasticSearchAdapterTest.java']"
0e15ae669102ceffec49a6f99ac12106226a9ba9,"[CALCITE-2722] Unparsing may have run into StackOverflowError in case of large number of AND/OR operands (Haisheng Yuan)

Create left-deep tree in iterative way instead of recursion to avoid
potential stack overflow in case of large number of OR expressions.

Add testcase (Zoltan Haindrich)

Close apache/calcite#1048",['83d8cf1e9189d0098677751d928cc39ac188b5a9'],False,"['SqlImplementor.java', 'RelToSqlConverterTest.java']"
cce9c79ac3cc40988e342ace5340b5ed771bc2a2,"[CALCITE-2750] PI operator incorrectly identified as dynamic function

Change-Id: I32d931ce22d430d466ddcd8fff6f944eee7cdfc1

[CALCITE-2750] Add a test to ensure that PI function is not dynamic

Change-Id: I9e50b7f75a66bd83904ed771765afda2381c413c

[CALCITE-2750] Add error message in the test

Change-Id: Id7cca495e14bd15a6ac70de904c6329ab60e3682

[CALCITE-2750] Fix checkstyle error

Change-Id: I5a8153e9fedb1a166d8716e45f47f3cd3cc8af58",['67b439fc1d98fd0082517684b74b53cd1050bbf4'],False,"['SqlBaseContextVariable.java', 'SqlStdOperatorTable.java', 'SqlOperatorBaseTest.java']"
ebafff1ede5921901b322872693bf1dbdf09fc8d,"[CALCITE-2878] Avoid use of new RuntimeException(e) in tests

new RuntimeException(e) adds very little info in tests, and it makes stacktraces harder to read.
So it makes sense to just sneaky-throw in those cases, especially for test purposes.",['cce9c79ac3cc40988e342ace5340b5ed771bc2a2'],False,"['CalciteRemoteDriverTest.java', 'RelWriterTest.java', 'ProfilerTest.java', 'RelToSqlConverterTest.java', 'RexSqlStandardConvertletTableTest.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'SqlOperatorBaseTest.java', 'CalciteAssert.java', 'DiffTestCase.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'Matchers.java', 'ReflectiveSchemaTest.java', 'RelMetadataTest.java', 'SqlTestGen.java', 'SqlToRelConverterExtendedTest.java', 'SqlToRelTestBase.java', 'StreamTest.java', 'TableFunctionTest.java', 'FrameworksTest.java', 'TestUtil.java', 'DruidAdapterIT.java', 'DruidAdapterIT2.java', 'ElasticSearchAdapterTest.java', 'EmbeddedElasticsearchNode.java', 'Projection2Test.java', 'pom.xml', 'CsvTest.java', 'SqlTest.java', 'MongoAdapterTest.java', 'MongoAssertions.java', 'PigRelBuilderStyleTest.java', 'pom.xml', 'CalciteHandler.java', 'OsAdapterTest.java', 'SplunkAdapterTest.java']"
e3a319e1f79bc807327bd443433c50c4bbf20866,"[CALCITE-2827] Allow Convention.NONE planning with VolcanoPlanner

By default, cost for Convention.NONE is infinity.
- Add option to allow Convention.None planning with VolcanoPlanner
- Add a unit test

Change-Id: Idcee2ca923c9b10b58cc9352a390a87f899b64ee

[CALCITE-2827] Fix checkstyle error

Change-Id: I50702e6d50d9fe916e15b5bd42f8ec7b12bf0c6f

[CALCITE-2827] Fix grammar errors

Change-Id: Icca105184888ff9cc01b2b71f597f3fbd235b638",['82ab280b492c737c1668360a4a434718465ad013'],False,"['VolcanoPlanner.java', 'VolcanoPlannerTraitTest.java']"
e14cef28af2b4f0aac5c3876aa7023053e294ee1,"[CALCITE-2703] Reduce code generation and class loading overhead when executing queries in the EnumerableConvention

1. Add a configurable Guava cache in EnumerableInterpretable#getBindable to re-use Bindable instances.
2. Avoid caching instances of classes with static fields.
3. Add JMH benchmark for the expensive part of EnumerableInterpretable#getBindable method.
4. Add utility method for obtaining integer runtime properties.
5. NPE in VisitorImpl when visiting a FieldDeclaration without an initializer.",['280642a02a4bcfd1fb9cbe8c5ab672d3619860e7'],False,"['EnumerableInterpretable.java', 'CalciteSystemProperty.java', 'VisitorImpl.java', 'pom.xml', 'CodeGenerationBenchmark.java', 'package-info.java']"
24a7a1b49bc4fb9f089031625f1a7ee052524125,"[CALCITE-2875] fix some misspellings in RelOptListener (Chunwei Lei)

Close apache/calcite#1069",['564caac262e43d7c27397d7bd17ab0f1689fdf4d'],False,['RelOptListener.java']
44c04eedff518ee3ed04106b53775c97cdc77707,"[CALCITE-1513] Correlated NOT IN query throws AssertionError (Vineet Garg)

Close apache/calcite#1063",['24a7a1b49bc4fb9f089031625f1a7ee052524125'],False,['sub-query.iq']
d10aeb7f7e50dc7028ce102a5f590d0c50c49fa8,"[CALCITE-2421] Generalize simplification of self-comparisions

This change enables to rewrite comparisions between the same operands to a form which relys on the nullability check of the original expression.
For example `x=x` is rewritten to `null or x is not null`",['6c9557fb554cd9e7178987030681982f2e85308e'],False,"['RexSimplify.java', 'RexProgramTest.java']"
50012d221d6e9a5e42a957ab0723e0f706b25be3,"[CALCITE-2899] Deprecate RelTraitPropagationVisitor and remove its usages

The class is deprecated for the following reasons:
1. The contract and behavior of RelTraitPropagationVisitor are not consistent.
2. It traverses RelNode subtrees after every rule transformation affecting performance.
3. It exists only for debugging purposes and we have no proof that helps discover issues.
4. It not modified for the past five years.
5. It is unlikely to be used in the future.",['ea5a0364eec6c0de9a52d51a40609692d6e4ad76'],False,"['RelOptRule.java', 'RelTraitPropagationVisitor.java', 'VolcanoRuleCall.java']"
e226ae49f987dde3a64b69cd474152d9adc7c38c,"Cosmetic changes

Remove duplicate calcite-core:test inclusion in piglet/pom.xml

Remove ubenchmark package-info.java (was freaking out shade) and
suppress the resulting checkstyle warning.

Add RelToSqlConverterStructsTest to CalciteSuite.",['50012d221d6e9a5e42a957ab0723e0f706b25be3'],False,"['EnumerableInterpretable.java', 'CalciteSystemProperty.java', 'RuleQueue.java', 'RelMdCollation.java', 'FilterProjectTransposeRule.java', 'RexCall.java', 'RexSimplify.java', 'SqlJsonDepthFunction.java', 'SqlJsonTypeFunction.java', 'RelWriterTest.java', 'SortRemoveRuleTest.java', 'HrClusteredSchema.java', 'CalciteSuite.java', 'RexProgramTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'sub-query.iq', 'ElasticSearchAdapterTest.java', 'Projection2Test.java', 'JoinPreserveOrderTest.java', 'pom.xml', 'elasticsearch_adapter.md', 'index.md', 'suppressions.xml', 'CodeGenerationBenchmark.java', 'package-info.java', 'StringConstructBenchmark.java']"
870d5f48de16d44e44a09891018ba2c138980f68,"[CALCITE-2674] Column name with escape character should not be verified as a function when the column name is same with it (Danny Chan)

Fix-ups (Julian Hyde):
* Make SqlParserPos immutable, and create a sub-class for quoted identifiers;
* Add case to SqlParserTest;
* Convert 'assert' to 'assertThat' in a test.

Close apache/calcite#958",['e226ae49f987dde3a64b69cd474152d9adc7c38c'],False,"['Parser.jj', 'SqlIdentifier.java', 'SqlUtil.java', 'SqlParserPos.java', 'SqlParserTest.java', 'LexEscapeTest.java', 'CalciteSuite.java']"
bfc842a043fc1fb0776d4d2ac633cf91acda3dc0,"[CALCITE-2677] Struct types with one field are not mapped correctly to Java Classes

1. Remove wrong unnesting of single field struct types from JavaTypeFactoryImpl and EnumUtils.
2. Refactor and move EnumUtils#javaRowClass method in PhysTypeImpl since it is used in only one place.
3. Add tests for JavaTypeFactoryImpl#getJavaClass and PhysType#fieldClass methods.
4. Modify EnumerableCollect to work always with rows represented as Object[], necessary for having MULTISET working after fixing CALCITE-2776.
5. Modify PhysType#convertTo to use JavaRowFormat instead of PhysType since the conversion is meant to only change the representation of rows in Java.
6. Disallow optimizations of the row format in the PhysType#convertTo method.
7. Implement SqlFunctions.slice method according to the specification in StdSqlOperatorTable.SLICE.
8. Add struct.iq test for reproducing CALCITE-2677 and CALCITE-2776.
9. Escape tests affected by CALCITE-2776.",['5ee592a19bf377438aa100dbc19d40ae8b2e2cd9'],False,"['EnumUtils.java', 'EnumerableAggregate.java', 'EnumerableCollect.java', 'EnumerableTableScan.java', 'PhysType.java', 'PhysTypeImpl.java', 'JavaTypeFactoryImpl.java', 'SqlFunctions.java', 'Bug.java', 'PhysTypeTest.java', 'JavaTypeFactoryTest.java', 'JdbcTest.java', 'QuidemTest.java', 'struct.iq']"
1229ef27094ea73ad9c7a397f442285c7e1df9b0,"[CALCITE-2932] Update stale Druid integration test cases

Also, fix IOBE during pushing down filtered aggregate in Druid adapter.

Close apache/calcite#1115

Signed-off-by: Kevin Risden <krisden@apache.org>",['600da53545eb9b116aae7692ba287a7acd23d987'],False,"['Bug.java', 'DruidRules.java', 'DruidAdapterIT.java', 'DruidAdapterIT2.java']"
a648f9c12309cc253628930b0cab98591caa66ab,"[CALCITE-2929] Simplification of IS NULL checks are incorrectly assuming that CAST-s are possible

* for non-nullable types the cast was discarded in case of an IS NULL check; so it might resulted in missing errors
  cast('invalid' as int) IS NULL
* in case of non-nullable types; IS NULL have made the assumption that cast will not change its nullability (which is true); however it may raise an error - so it can't be removed.

Close apache/calcite#1116

Signed-off-by: Kevin Risden <krisden@apache.org>",['1229ef27094ea73ad9c7a397f442285c7e1df9b0'],False,"['RexSimplify.java', 'RexProgramTest.java', 'sub-query.iq', 'SparkAdapterTest.java']"
e0e36cf7089a4da32e69a6abd5dc200acf03f661,"[CALCITE-2911] Release Calcite 1.19.0

* Change version numbers
* Release notes

Signed-off-by: Kevin Risden <krisden@apache.org>",['a648f9c12309cc253628930b0cab98591caa66ab'],False,"['README', 'pom.xml', 'history.md', 'howto.md']"
1b430721c0d9e22b2252ffcd893b42959cb7966c,[CALCITE-574] Remove org.apache.calcite.util.Bug.CALCITE_461_FIXED,['81143c8308b302a3f69eb14fb2dc6753a1b891bf'],False,"['Aggregate.java', 'Bug.java']"
11c067f9992d9c8bc29e2326dd8b299ad1e9dbdc,"Site: Add new committers (Haisheng Yuan, Hongze Zhang and Stamatis Zampetakis)",['35ab6c768607226a25a9c033675f62707f0fca0f'],False,['contributors.yml']
ddbcd3955245787fc770d0cee589660a9abd81ad,"Suppress deprecation warning, and remove unicode character from Java source file

Re-format and re-order change log in 1.19 release notes, and fix release date.",['1f4b61989faec2a4b5a4a8eac58cd621843cf2b3'],False,"['PhysType.java', 'PhysTypeImpl.java', 'SqlOperatorBaseTest.java', 'history.md', 'AbstractRelNodeGetRelTypeNameBenchmark.java']"
0537f27d87598dea888050a4cc63cf4d6fe027d7,[CALCITE-2658] Add ExchangeRemoveConstantKeysRule that removes constant keys from Exchange or SortExchange (Chunwei Lei),['a619caeb8742ff0b9fbd762d2a5c47168828886d'],False,"['CalcitePrepareImpl.java', 'ExchangeRemoveConstantKeysRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
81fa5314e94e86b6cf8df244b03f9d57c884f54d,"Site: Add guidelines for JIRA's fix version field

Add guidelines for setting correctly the fix version field in JIRA, as discussed with Francis Chuang and Julian Hyde.",['b6d663c0a4546fcad2ecbf3cf66192ad1ab85854'],False,['index.md']
42f57618149b854a0ff8a7cce396c9b8f4d0d4e0,"Cosmetic changes

Fix javadoc error in E?numerableLimitRuleTest on JDK 8.",['81fa5314e94e86b6cf8df244b03f9d57c884f54d'],False,"['ExchangeRemoveConstantKeysRule.java', 'SqlJsonApiCommonSyntaxOperator.java', 'AuxiliaryConverter.java', 'Programs.java', 'EnumerableLimitRuleTest.java', 'ElasticsearchEnumerators.java', 'Scrolling.java', 'index.md']"
d7946a94adfd2e788f5d324910944dd65dab11ee,"[CALCITE-883] Support RESPECT NULLS, IGNORE NULLS option for LEAD, LAG, FIRST_VALUE, LAST_VALUE, NTH_VALUE functions (Chunwei Lei)

IGNORE NULLS works in the parser and validator but not at runtime.

We have changed the Rex model support for aggregate functions even
though today it is only valid for windowed functions.

Fix javadoc error on JDK 8.

Close apache/calcite#1108",['42f57618149b854a0ff8a7cce396c9b8f4d0d4e0'],False,"['config.fmpp', 'Parser.jj', 'EnumerableWindow.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'AggregateCall.java', 'Window.java', 'RelJson.java', 'RelJsonReader.java', 'LogicalWindow.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateFilterTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'ProjectWindowTransposeRule.java', 'ReduceExpressionsRule.java', 'RexBuilder.java', 'RexOver.java', 'RexShuttle.java', 'CalciteResource.java', 'SqlAggFunction.java', 'SqlFilterOperator.java', 'SqlKind.java', 'SqlNullTreatmentOperator.java', 'SqlOverOperator.java', 'SqlSplittableAggFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlLeadLagAggFunction.java', 'SqlNthValueAggFunction.java', 'SqlStdOperatorTable.java', 'AggChecker.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'CalciteResource.properties', 'RelWriterTest.java', 'TraitPropagationTest.java', 'SqlParserTest.java', 'JdbcTest.java', 'RelMetadataTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'reference.md']"
a75a689eff2f1333adc8fb800bdfa077e94da562,"[CALCITE-2820] Avoid reducing certain aggregate functions when
it is not necessary (Siddharth Teotia)",['d7946a94adfd2e788f5d324910944dd65dab11ee'],False,"['AggregateReduceFunctionsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
906183a35b6355b3f5e394ce838f5ea1dad09ad2,"[CALCITE-2914] Add a new statistic provider, to improve how LatticeSuggester deduces foreign keys

Statistic provider now generates SQL statements to look at a join
condition and figure out whether either side is a unique key, and
whether the other side is a foreign key (i.e. does an anti-join to
verify referential integrity).

Create new package org.apache.calcite.statistic, and move some
existing classes such as MapSqlStatisticProvider into it.

In JDBC adapter, when generating SQL for JDBC tables, use the foreign
catalog, schema and table name.

In Frameworks, use a query provider with a 30 minute, 1,000 element
cache, rather than map provider as default provider.

In LatticeSuggesterTest we continue to use a MapSqlStatisticProvider,
for performance reasons.

Fix deprecated calls to AggregateCall.create added in [CALCITE-1172].

Close apache/calcite#1141",['6d57ff983cc8e1bc0db4b8422a5140184dba3053'],False,"['JdbcRules.java', 'JdbcTable.java', 'Lattice.java', 'MapSqlStatisticProvider.java', 'SqlStatisticProvider.java', 'Step.java', 'AggregateCall.java', 'RelFactories.java', 'RelToSqlConverter.java', 'SqlSplittableAggFunction.java', 'CachingSqlStatisticProvider.java', 'MapSqlStatisticProvider.java', 'QuerySqlStatisticProvider.java', 'package-info.java', 'Frameworks.java', 'LatticeSuggesterTest.java', 'RelToSqlConverterTest.java', 'CalciteSuite.java', 'SqlStatisticProviderTest.java']"
72e952d1a79ee2d7ba05de88cbc2ac11f65cd879,"[CALCITE-2456] VolcanoRuleCall doesn't match unordered child operand when the operand is not the first operand. PruneEmptyRules UNION and MINUS with empty inputs cause infinite cycle. (Zuozhi Wang)

UNION and MINUS corrected by Vladimir Sitnikov.
Note: call.getChildRels(RelNode) was used previously to get inputs of UNION/MINUS,
and it looks like the method is ill-defined (at least, it returns wrong results).

fixes #784",['a8e71f9f295e36e472d9f650d1c76d2501e1fdbf'],False,"['RelOptRuleCall.java', 'VolcanoRuleCall.java', 'PruneEmptyRules.java', 'VolcanoPlannerTest.java', 'SortRemoveRuleTest.java', 'PlannerTest.java']"
af97f55f1fcbb3cf6005393dffd91eb345c04b6f,"[CALCITE-2990] Fix document misspelling in RelInput (Shuming Li)

Close apache/calcite#1154",['72e952d1a79ee2d7ba05de88cbc2ac11f65cd879'],False,['RelInput.java']
02eb106bcd1b0fdb1d0be06d117a94eddc9f3fce,"[CALCITE-3010] In SQL parser, move JsonValueExpression into Expression

* SqlJsonValueExpressionOperator is now a postfix operator;
* Remove SqlStdOperatorTable.JSON_STRUCTURED_VALUE_EXPRESSION;
* Remove SqlStdOperatorTable.JSON_API_COMMON_SYNTAX_WITHOUT_PATH;
* When ""FORMAT JSON"" is implicit, a call to SqlJsonValueExpressionOperator is added and validated during sql-to-rel process;
* Correct JSON_DEPTH's return type.",['ee83efd360793ef4201f4cdfc2af8d837b76ca69'],False,"['Parser.jj', 'RexImpTable.java', 'SqlFunctions.java', 'SqlJsonApiCommonSyntaxOperator.java', 'SqlJsonArrayAggAggFunction.java', 'SqlJsonArrayFunction.java', 'SqlJsonDepthFunction.java', 'SqlJsonKeysFunction.java', 'SqlJsonLengthFunction.java', 'SqlJsonObjectAggAggFunction.java', 'SqlJsonObjectFunction.java', 'SqlJsonValueExpressionOperator.java', 'SqlStdOperatorTable.java', 'InferTypes.java', 'StandardConvertletTable.java', 'Bug.java', 'BuiltInMethod.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlJsonFunctionsTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'agg.iq']"
577e72cb95e5d4d88f187909c14d8691c266ac4c,"[CALCITE-2993] ParseException may be thrown for legal SQL queries due to incorrect ""LOOKAHEAD(1)"" hints

Also:
* Following [CALCITE-883], add absent non-reserved keywords to config.fmpp files;
* Remove redundant ""LOOKAHEAD(1)"" hints;
* The case ""select json_object(key: value) from t"" is added to unit test but not fixed. See the reason from method ""SqlParserTest#testJsonObject"".",['02eb106bcd1b0fdb1d0be06d117a94eddc9f3fce'],False,"['config.fmpp', 'Parser.jj', 'config.fmpp', 'SqlParserTest.java', 'PigletParser.jj', 'config.fmpp']"
603f93d3fd242010a2fd3dd2dd658dbeea0a96fc,"[CALCITE-3003] AssertionError when GROUP BY nested field (Will Yu)

Close apache/calcite#1186",['9ece70f5dcdb00dbc6712496c51f52c05178d4aa'],False,"['SqlValidatorUtil.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
f5363478e1feed6a090b2ac0c9fc52743a653ca0,"[CALCITE-3054] Elasticsearch adapter. Avoid scripting for simple projections

Simple query like below is using `script` when `_source` is sufficient.
```sql
select  _MAP['a'], _MAP['b.a'] from elastic
```",['da4970e647d58b2989077688d1e19747fd459d14'],False,"['ElasticsearchProject.java', 'Projection2Test.java']"
735fc068012a7de5a93563e55f3f9a6846331d11,"[CALCITE-3053] Add a test to ensure that all functions are documented in the SQL reference

Following [CALCITE-2846], fix up the documentation of MySQL- and
Oracle-specific operators to make it better fit narrow web pages.",['c0523d346a13c7c032ddd95a43116a7f2044c726'],False,"['BabelParserTest.java', 'SqlStdOperatorTable.java', 'SqlParserTest.java', 'DocumentationTest.java', 'CalciteSuite.java', 'ServerParserTest.java', 'reference.md']"
b727f3b04286dd39fddb25a9905819449d27475b,"[CALCITE-3056] Elasticsearch adapter. Invalid result with cast function on raw queries

Fix queries of type (with elastic adapter):

```sql
select max(cast(_MAP['foo'] as integer)) from elastic
```",['b8bdfb074be12f90c98f9f1fa2af8cf46f2d36f1'],False,"['ElasticsearchRules.java', 'AggregationTest.java']"
9a4eab5240d96379431d14a1ac33bfebaf6fbb28,"[CALCITE-3017] Re-organize how we represent built-in operators that are not in the standard operator table

Add enum SqlLibrary, with values STANDARD, SPATIAL, ORACLE, MYSQL etc.,
and SqlLibraryOperatorTableFactory, that can create operator tables for
any combination of libraries.

Further changes by Julian Hyde:
 * Adopt the term ""library"" (earlier revisions had ""dialect"" and ""flavor"");
 * Change SqlDialectOperatorTableFactory into a cache (previously it
   pre-built one table per library);
 * Make it responsible for standard and spatial libraries in addition to
   database-specific ones;
 * Move operators from SqlLibraryOperatorTableFactory into a dedicated
   holder class, SqlLibraryOperators;
 * Deprecate OracleSqlOperatorTable, and move its operator definitions.

Close apache/calcite#1203",['6afa38bae794462e6e250237a1b60cc4220b2885'],False,"['Parser.jj', 'RexImpTable.java', 'RexToLixTranslator.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'RexSqlStandardConvertletTable.java', 'OracleSqlDialect.java', 'LibraryOperator.java', 'OracleSqlOperatorTable.java', 'SqlLibrary.java', 'SqlLibraryOperatorTableFactory.java', 'SqlLibraryOperators.java', 'SqlStdOperatorTable.java', 'StandardConvertletTable.java', 'DocumentationTest.java', 'SqlOperatorBaseTest.java', 'SqlValidatorTest.java', 'reference.md']"
c25b29c0c1cae3a57bf91ddfd9f6a0622ca974a4,"[CALCITE-2803] ProjectTransposeJoinRule messes INDF expressions

ProjectTransposeJoinRule does not identify expanded versions of IS NOT
DISTINCT FROM expressions in the join filter, and might push them below
the join operator in a way which makes impossible for
RelOptUtil#splitJoinCondition() to identify the INDF condition and mis-
categorize the join as not being an equi-join.

Fix the issue by collapsing INDF expressions before invoking PushProjector.
Also add support for expanded form CASE(WHEN A IS NULL THEN B IS NULL
WHEN B IS NULL THEN A IS NULL ELSE A = B).",['d0a06f78644906c2ca73e6fb5ea08f7d17f55dab'],False,"['RelOptUtil.java', 'ProjectJoinTransposeRule.java', 'RelOptUtilTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
e98c779d1ec0bc87c81a72b974c89a41a7222a07,"[CALCITE-3017] Improve null handling of JsonValueExpressionOperator

* Remove SqlJsonApiCommonSyntaxOperator;
* Move implementation methods of JSON functions from SqlFunctions to JsonFunctions;
* Add new null policy NullPolicy.ARG0 (currently used by some JSON functions only);
* Change return type to nullable for some operators of JSON functions;
* In code generation, perform regular null semantic check on operands of a call when NullAs.IS_NULL/IS_NOT_NULL is used.",['3f24710db7e1ef91eb8fe934057456bffc2de780'],False,"['Parser.jj', 'NullPolicy.java', 'RexImpTable.java', 'JsonFunctions.java', 'SqlFunctions.java', 'SqlKind.java', 'SqlJsonApiCommonSyntaxOperator.java', 'SqlJsonExistsFunction.java', 'SqlJsonKeysFunction.java', 'SqlJsonPrettyFunction.java', 'SqlJsonQueryFunction.java', 'SqlJsonTypeFunction.java', 'SqlJsonValueFunction.java', 'SqlStdOperatorTable.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'Util.java', 'RelToSqlConverterTest.java', 'SqlOperatorBaseTest.java', 'SqlJsonFunctionsTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'reference.md']"
d6896202c865b38b7821f1e0b644e1de0c95eda2,"[CALCITE-3066] RelToSqlConverter may incorrectly throw an AssertionError for some decimal literals

Close apache/calcite#1213",['a5b382abb6585f01995a350ca1e3937e2f3b91a1'],False,"['SqlImplementor.java', 'RelToSqlConverterTest.java']"
046bb81a9a4ac3e5b63c0ca4a0141446df325a44,"[CALCITE-3052] Error while applying rule MaterializedViewAggregateRule(Project-Aggregate): ArrayIndexOutOfBoundsException

Close apache/calcite#1212",['d6896202c865b38b7821f1e0b644e1de0c95eda2'],False,['AbstractMaterializedViewRule.java']
051058be8f7de31f59718962a88604dc2d1c9d36,"[CALCITE-2282] Remove sql operator table from parser

Differentiate for unresolved functions and non-parameters function identifier unparsing;
Merge logic in SqlIdeitifier and SqlUtil;
Fix Julian's comments address: Remove leftPrec and rightPrec from SqlCollation.

Close apache/calcite#1205",['046bb81a9a4ac3e5b63c0ca4a0141446df325a44'],False,"['SqlImplementor.java', 'SqlCollation.java', 'SqlDataTypeSpec.java', 'SqlDialect.java', 'SqlIdentifier.java', 'SqlUtil.java', 'SqlWriter.java', 'SqlLiteralChainOperator.java', 'SqlAbstractParserImpl.java', 'SqlParserPos.java', 'SqlPrettyWriter.java', 'SqlValidatorUtil.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'SqlValidatorTest.java', 'SqlAttributeDefinition.java']"
c6b6800c220e513f1d9a2b167b2f14cb689c0b06,"[CALCITE-3062] Do not populate provenanceMap if not debug

VolcanoPlanner.provenanceMap captures provenance of all rel nodes added
to the planner but the information is only printed out if planner log
level is debug or finer.  As the map can get quite big with complex
queries, the memory usage can increase significantly.

Detect if planner log level is debug when creating a new volcano planner
and use a blackhole map so that the map is not populated by default.

Change-Id: If6393eb07438ea5f922c9f78f26089160926ef37",['999c41d5ff893a30b2622442a448102c72fc475e'],False,"['VolcanoPlanner.java', 'BlackholeMap.java', 'Util.java', 'UtilTest.java']"
50cd1340c6df8f4d8e2bde287ddd18c1b07e312c,"[CALCITE-3076] AggregateJoinTransposeRule throws error for unique under aggregate keys when generating merged calls

AggregateJoinTransposeRule generates wrong mapping for under agg
calls with unique aggregate keys.

Close apache/calcite#1223",['1a5fca0feab124f33c16d31b65f0ba0806231731'],False,"['AggregateJoinTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
82e7d4e760cb203d31956c55e38e0fdd56119d58,"[CALCITE-2807] Fix `IS NOT DISTINCT FROM` expression identification in RelOptUtil#pushDownJoinConditions()

RelOptUtil#pushDownJoinConditions do not identify and preserve
expanded versions of `IS NOT DISTINCT FROM` expressions, causing
equi-joins to be miscategorized as inequality joins.

Modify the function to try to collapse the expression back to a
canonical `IS NOT DISTINCT FROM` expression if possible before
visiting the expression and pushing it below the join.",['170d5225fb65fd49df83d0234d8a69d11a9469c4'],False,"['RelOptUtil.java', 'RelBuilder.java', 'RelOptUtilTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
b42029fd46958ddf4d62a29182a2dbee66c1adef,"[CALCITE-2985] Implement JSON_STORAGE_SIZE function (xuqianjin)

Also, correct content about error handling of MySQL JSON functions in documentation.

Close apache/calcite#1150",['2cbdb6d9b10d02e655eaca9987a0dcacd7143c03'],False,"['RexImpTable.java', 'CalciteResource.java', 'JsonFunctions.java', 'SqlJsonStorageSizeFunction.java', 'SqlLibraryOperators.java', 'SqlStdOperatorTable.java', 'BuiltInMethod.java', 'CalciteResource.properties', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'JdbcTest.java', 'SqlJsonFunctionsTest.java', 'SqlValidatorTest.java', 'reference.md']"
ee14e012ecbd775c9f845682ddf02bf65204a0f7,"[CALCITE-35] More test cases to guard against providing a broken fix for parenthesized join (Muhammad Gelbana)

Close apache/calcite#1228",['4e1b68e3c0b2a90832cc790c6166cebb14ae2970'],False,['SqlParserTest.java']
b5b036dae318a2118b2c6589be7cfefeb3ed6643,Cosmetic changes,['80e09c0471cdf48484d07d106d07ac28a4e73abc'],False,"['RexImpTable.java', 'RelOptUtil.java', 'AggregateJoinJoinRemoveRule.java', 'AggregateJoinRemoveRule.java', 'ProjectJoinJoinRemoveRule.java', 'ProjectJoinRemoveRule.java', 'SubQueryRemoveRule.java', 'BlackholeMap.java', 'TypeFinderTest.java', 'SqlOperatorBaseTest.java', 'SqlTypeFixture.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'ElasticsearchProject.java', 'KafkaMessageEnumerator.java', 'KafkaRowConverter.java', 'KafkaRowConverterImpl.java', 'KafkaStreamTable.java', 'KafkaTableConstants.java', 'KafkaTableFactory.java', 'KafkaTableOptions.java', 'KafkaAdapterTest.java', 'KafkaMockConsumer.java', 'KafkaRowConverterTest.java', 'kafka.model.json', 'kafka_adapter.md']"
7429c25a178401bd49b74d96645ef4226fc228ce,"[CALCITE-3048] Improve how JDBC adapter deduces current schema on Redshift

In JdbcSchema on PostgreSQL or Redshift, if schema is null, call
CURRENT_SCHEMA() to get it. Similarly catalog and CURRENT_DATABASE().

Without this fix, we sometimes call DatabaseMetaData.getTables with null
or empty schema, and get tables from other schemas, resulting in
a Guava ""Multiple entries with same key"" error.",['fc5704e6038ded2108f232f435060d48015f957d'],False,"['JdbcSchema.java', 'SqlDialectFactoryImpl.java']"
f1cad57035db0f94190433aa6db2352228a641e0,"[CALCITE-3022] Babel: Various SQL parsing issues

* Allow 'DATE(x)' function, per PostgreSQL and Redshift
* Allow ""TIMESTAMP 'yyyy-mm-dd'"" literal (missing time part), per PostgreSQL and Redshift",['5c477f0dee1b9f709016a63ae8e5b824fb560585'],False,"['config.fmpp', 'parserImpls.ftl', 'BabelParserTest.java', 'config.fmpp', 'Parser.jj', 'SqlParserUtil.java', 'config.fmpp', 'config.fmpp']"
21ada17e140ebe76bba7c3e348305eff651bcaef,"[CALCITE-3097] GROUPING SETS breaks on sets of size > 1 due to precedence issues (Steven Talbot)

RelToSqlConverter was converting each composite item in GROUPING SETS into
a SqlNodeList when it should be a call to the ROW operator.

Close apache/calcite#1239",['f1cad57035db0f94190433aa6db2352228a641e0'],False,"['RelToSqlConverter.java', 'SqlRollupOperator.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java']"
00f8b5f5ca1d45ce5029a474c42e674bec31634f,"RelOptUtilTest concurrency fixup

RelOptUtilTest was creating a static RelOptCluster which could be used
during tests running in parallel to acces the associated RelMetadataQuery
instance.  Alas the object is not safe to access from multiple threads
and in some occasions tests would fail with CyclicMetadataException.

Fixing the test class by creating a new RelOptCluster/RelBuilder
instance for each test, and removing the static instances.",['73e6d05fa65f16485caca80571d1fe4fda5c7468'],False,['RelOptUtilTest.java']
48093937ae4db179884d1111fa9d12e978e57e1f,"[CALCITE-2696] Improve design of join-like relational expressions

**Diff**
- Deprecate SemiJoin, EnumerableSemiJoin, SemiJoinType,
EnumerableSemiJoinRule, JoinToCorrelateRule#SEMI
- Add SEMI and ANTI join type to JoinRelType, add method
projectsRight() and isOuterJoin()
- Correlate use JoinRelType instead of SemiJoinType
- Rename EnumerableThetaJoin to EnumerableNestedLoopJoin
- Rename EnumerableJoin to EnumerableHashJoin
- EnumerableJoinRule converts semi join to EnumerableHashJoin
(EnumerableSemiJoin's functionality is merged into this rule)
- Add method isSemiJoin() in Join.java to decide if this join is a semi join
(comes from SemiJoinRule during decorrelateation),
the return value true means the join is a semi join equivalent to
SemiJoin before this patch.
- Cache the JoinInfo in Join and use it to get leftKeys and rightKeys,
merge SemiJoin#computeSelfCost logic into Join#computeSelfCost
- For RelBuilder, removes SemiJoinFactory, method #semiJoin
now returns a LogicalJoin with JoinRelType#SEMI
- Rename EnumerableDefaults#join to EnumerableDefaults#hashJoin
- Rename EnumerableDefaults#thetaJoin to EnumerableDefaults#nestedLoopJoin

**Rules tweak**
- JoinAddRedundantSemiJoinRule now creates LogicalJoin with JoinRelType#SEMI
instead of SemiJoin
- JoinToCorrelateRule deprecates SEMI instance and change the matches
condition to !join.getJoinType().generatesNullsOnLeft() which also
allowed ANTI compared before this patch.
- SemiJoinRule matches SEMI join specifically.

**Metadata tweak**
- RelMdAllPredicates, RelMdExpressionLineage: Add full rowType to
getAllPredicates(Join) cause semi join only outputs one side
- RelMdColumnUniqueness, RelMdSelectivity, RelMdDistinctRowCount,
RelMdSize, RelMdUniqueKeys: merge semi join logic to join

**Test cases change**
- MaterializationTest#testJoinMaterialization11 now can materialize
successfully, cause i allow logical SemiJoin node to match, the original
matches SemiJoin as SemiJoin.class.isAssignableFrom(), which i think is
wrong cause this will only matches subClasses of SemiJoin which is only
EnumerableSemiJoin before this patch.
- SortRemoveRuleTest#removeSortOverEnumerableCorrelate, because
CALCITE-2018, the final EnumerableSort's cost was cached by the previous
EnumerableSort with logical children, so i remove the EnumerableSortRule
and the best plan is correct

close apache/calcite#1157",['00f8b5f5ca1d45ce5029a474c42e674bec31634f'],False,"['EnumUtils.java', 'EnumerableCorrelate.java', 'EnumerableHashJoin.java', 'EnumerableJoinRule.java', 'EnumerableMergeJoin.java', 'EnumerableMergeJoinRule.java', 'EnumerableNestedLoopJoin.java', 'EnumerableRules.java', 'EnumerableSemiJoin.java', 'EnumerableSemiJoinRule.java', 'JdbcRules.java', 'Lattice.java', 'RelOptUtil.java', 'Correlate.java', 'EquiJoin.java', 'Join.java', 'JoinRelType.java', 'RelFactories.java', 'SemiJoin.java', 'LogicalCorrelate.java', 'JaninoRelMetadataProvider.java', 'RelMdAllPredicates.java', 'RelMdCollation.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdExpressionLineage.java', 'RelMdPredicates.java', 'RelMdSelectivity.java', 'RelMdSize.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'MutableCorrelate.java', 'AbstractMaterializedViewRule.java', 'FilterCorrelateRule.java', 'FilterJoinRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinProjectTransposeRule.java', 'JoinToCorrelateRule.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MultiJoin.java', 'ProjectJoinTransposeRule.java', 'PushProjector.java', 'ReduceExpressionsRule.java', 'SemiJoinFilterTransposeRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SemiJoinRemoveRule.java', 'SemiJoinRule.java', 'SemiJoinType.java', 'SqlValidatorUtil.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'BuiltInMethod.java', 'SortRemoveRuleTest.java', 'EnumerablesTest.java', 'JdbcAdapterTest.java', 'JdbcFrontJdbcBackLinqMiddleTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MaterializationTest.java', 'MultiJdbcSchemaJoinTest.java', 'MutableRelTest.java', 'RelMdPercentageOriginalRowsTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'StreamTest.java', 'EnumerableCorrelateTest.java', 'PlannerTest.java', 'RelOptRulesTest.xml', 'agg.iq', 'blank.iq', 'join.iq', 'misc.iq', 'outer.iq', 'some.iq', 'sub-query.iq', 'GeodeZipsTest.java', 'DefaultEnumerable.java', 'EnumerableDefaults.java', 'EnumerableQueryable.java', 'ExtendedEnumerable.java', 'JoinPreserveOrderTest.java', 'Linq4jTest.java', 'PigTableScan.java', 'TpcdsTest.java', 'history.md', 'SparkAdapterTest.java', 'AbstractRelNodeGetRelTypeNameBenchmark.java']"
d8768f9c07fa3927475902e27c13c8bc39687897,"[CALCITE-3082] Fix NPE in SqlUtil#getSelectListItem

Queries similar to `SELECT 1 UNION SELECT 2, 3` might cause Calcite
validator to throw an NPE exception instead of a proper error message.

When validating operands of a set operation, if operands don't have
matching schema, and if one of the operand doesn't have a FROM clause,
SqlUtil#getSelectListItem throws NPE.

Fixing by adding a proper check.",['037250b99d6db8a605b64780a3643f784d07d308'],False,"['SqlUtil.java', 'SqlValidatorTest.java']"
a09fa1eeb7653c4868e0d3f239dc19591110e045,"[CALCITE-2742] Read values of USER and SYSTEM_USER variables from DataContext (Siddharth Teotia, Jacques Nadeau)

Close apache/calcite#1031 (the PR used for this fix)
Close apache/calcite#973 (a previous PR, superceded by 1031)",['d8768f9c07fa3927475902e27c13c8bc39687897'],False,"['DataContext.java', 'RexImpTable.java', 'CalciteConnectionImpl.java', 'SqlFunctions.java', 'BuiltInMethod.java', 'RexExecutorTest.java', 'JdbcTest.java', 'Matchers.java']"
ef0c4c6ddb7553e2e858259007d8ca1cb3692101,"Complete [CALCITE-2969] and [CALCITE-3102] by restoring APIs that use SemiJoin but mask deprecation warnings

Fix description of RelBuilder.semiJoin algebra.md.",['8a2578787910e3c05c4d17006439de1940c0b195'],False,"['EnumerableMergeJoinRule.java', 'EnumerableRules.java', 'EnumerableSemiJoin.java', 'EnumerableSemiJoinRule.java', 'Correlate.java', 'LogicalCorrelate.java', 'RelMdCollation.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdNodeTypes.java', 'RelMdPopulationSize.java', 'RelMdRowCount.java', 'RelMdSize.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'MutableRels.java', 'JoinToCorrelateRule.java', 'Programs.java', 'algebra.md', 'history.md']"
c08ea8b39a5c7ed348459fd02c0ed91ccb9d834f,Cosmetic changes,['b0e83c469ff57257c1ea621ff943ca76f626a9b7'],False,"['EnumerableRepeatUnion.java', 'EnumerableTableSpool.java', 'EnumerableTableSpoolRule.java', 'CalciteSystemProperty.java', 'Join.java', 'RelFactories.java', 'RepeatUnion.java', 'Spool.java', 'TableSpool.java', 'LogicalRepeatUnion.java', 'LogicalTableSpool.java', 'RelBuilder.java', 'EnumerableRepeatUnionTest.java', 'history.md', 'reference.md']"
9a617d5b346f7920162656d8786c45522f578281,"Following [CALCITE-2812] Disable parallel execution of parameterized test to avoid hanging

The patch of CALCITE-2812 introduced a parameterized test, but
parameterized JUnit test hangs when running in parallel mode due to
https://issues.apache.org/jira/browse/SUREFIRE-1430. We have to disable
parallel execution until the issue is fixed.",['7f33215ffaf9c0b8f4bef082913c910c77bf4427'],False,['EnumerableRepeatUnionHierarchyTest.java']
e0774db1fad3e0c509cfa9c1a929875015c14c2b,"[CALCITE-2804] Fix casting to timestamps in Druid

Close apache/calcite#1014",['9a617d5b346f7920162656d8786c45522f578281'],False,"['DruidSqlCastConverter.java', 'DruidAdapterIT.java']"
d8f4cc4aa4f6c8b49bd76d5043e30270b7ff2546,"[CALCITE-2744] RelDecorrelator use wrong output map for LogicalAggregate decorrelate (godfreyhe and Danny Chan)

godfreyhe started the work by apply a new map for LogicalAggregate
decorrelate register, and Danny Chan add shifts for constant keys
mapping.

Also fix the test case name and comments.

close apache/calcite#1254",['e0774db1fad3e0c509cfa9c1a929875015c14c2b'],False,"['RelDecorrelator.java', 'MockSqlOperatorTable.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
614b4350f558a4fabaafc06fef9689ec4c267994,"[CALCITE-3116] Upgrade to Avatica 1.15

Remove bug for CALCITE-2776 which was fixed in Avatica 1.15.
Remove bug for CALCITE-2993 which is fixed in Calcite but forgotten.",['d8f4cc4aa4f6c8b49bd76d5043e30270b7ff2546'],False,"['Bug.java', 'JdbcTest.java', 'QuidemTest.java', 'struct.iq', 'pom.xml']"
941cd4e9540e3ef9b7c15daee42831a0c63da8b9,"Following [CALCITE-2822] simplify test and related classes/rules

I accidentally pushed CALCITE-2822 without these changes. Apologies for
the multiple commits.",['0cb51c64715dd45f8bbcd533cc9096b4bb7b70af'],False,"['MultiJoinProjectTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
2b91eb2ee5cbc1e9a6323f98e9628385faf42e1b,Fix test exception caused by slightly different error message from regex in JDK 13,['340e21a6a93e0766acf3fa292c4ecd86d5f5f8ef'],False,['SqlOperatorBaseTest.java']
a3c56be7bccc58859524ba39e5b30b7078f97d00,[CALCITE-3087] AggregateOnProjectToAggregateUnifyRule ignores Project incorrectly when its Mapping breaks ordering (DonnyZone),['2b91eb2ee5cbc1e9a6323f98e9628385faf42e1b'],False,"['SubstitutionVisitor.java', 'MutableAggregate.java', 'MutableRels.java', 'Mappings.java', 'MaterializationTest.java']"
1cc7c3593a9201886afbd4dfc5ebe5b6d422715d,"Update example announcement

After sending the latest release announcement, the secretary indicated
that we should not link directly to closer.cgi, but instead to Calcite's
downloads page. Changing the sample announcement will save someone else
from future announcement rejection.",['69c8053cd98ec65c55fa1c3b282b076536ab758f'],False,['howto.md']
8dd4fed46ff31df8737788847fdd2963944295f9,"[CALCITE-3155] Empty LogicalValues can not be converted to UNION_ALL without operands which can not be unparsed(Musbah EL FIL)

Empty LogicalValues would be converted to
UNION_ALL Operator with no operands for rel to sql conversion,
which can not be unparsed to SQL string(invalid).

The fix converts the empty values to a ""select NULL, NULL ...
from DUAL where 1 = 0""

Fix-ups(Danny Chan):
* Replace empty values check with Values.isEmpty(e)
* Always generate false condition as `1 = 0`

close apache/calcite#1286",['914e2127b096dd40d6c8a5f5c05ddad89b2e0863'],False,"['RelToSqlConverter.java', 'RelToSqlConverterTest.java']"
d9d79ba69056ff69ab69b4c871ca1d83b0bfff15,"[CALCITE-3152] Unify throws in sql parser

Replace generateParseException() and new ParseExecption to
SqlUtil.newContextException, this makes the error message more user
friendly.",['64a61cda18ada294e74ed6841d714d067bf0cb4e'],False,"['Parser.jj', 'CalciteResource.java', 'CalciteResource.properties', 'SqlParserTest.java']"
0ed54bd64d0beb0849a499e65e872c43f00efce9,[CALCITE-3121] VolcanoPlanner hangs due to subquery with dynamic star,['021fabe2a77264b388a3b681b78bc7e51fb2d978'],False,"['ProjectFilterTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
fe2b59b82facad4d4e86eb4fa4080513b5dfe541,"Fix complitation warnings after mongo java driver upgrade

Some methods were deprecated after client upgrade to 3.10.2 (see [CALCITE-3157])",['72c52f46eab7fbe57ae5236ecc3831113684ff71'],False,"['MongoSchema.java', 'MongoSchemaFactory.java', 'MongoAdapterTest.java']"
0732283cab7894ffdce6a22ebe5d31b28d389a4d,"[CALCITE-3189] Multiple fixes for Oracle SQL dialect

Close apache/calcite#1312",['e5e5809d28f422896147bd9f069f4930f22629ad'],False,"['SqlDialect.java', 'OracleSqlDialect.java', 'RelToSqlConverterTest.java']"
bb0bae9c047db0f4bebaa6cd5b149876476e6ebe,"[CALCITE-3183] During field trimming, Filter is copied with wrong traitSet (Juhwan Kim)

New Filter created after trimming uses its old trait set,
which could cause problem if there has been any update on collation.

Code changes:
- Add a FilterFactory method that includes correlating variables;
- Use RelBuilder when creating a new Filter in trimmer;
- Add test cases for the bug and new RelBuilder method.

Close apache/calcite#1309",['0732283cab7894ffdce6a22ebe5d31b28d389a4d'],False,"['EnumerableRel.java', 'JdbcRules.java', 'RelOptUtil.java', 'RelFactories.java', 'SemiJoinFilterTransposeRule.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'RelBuilderTest.java', 'SqlToRelConverterTest.java', 'misc.iq', 'GeodeAllDataTypesTest.java', 'PigRelFactories.java', 'algebra.md']"
15e63787a6c2ccaa01582991068d8e74daf93d1f,"[CALCITE-3166] Make RelBuilder configurable

Add immutable class RelBuilder.Config, and a builder for it.

Disable elimination of duplicate aggregate calls (added in
[CALCITE-3123]), until [CALCITE-3145] is fixed.",['687b7d8cc8c63259138b43745a9e28ef64483839'],False,"['RelBuilder.java', 'RelBuilderTest.java']"
ab1f777edb617ed9cf1c2f9b9a99c4dd0202a36b,Change type of SqlStdOperatorTable.GROUPING field to public class,['15e63787a6c2ccaa01582991068d8e74daf93d1f'],False,"['SqlStdOperatorTable.java', 'Ord.java']"
8c0d792dd735eded2bb11be0c7c195b8f302ae90,"Fix javadoc error

Fix a javadoc error in RelDataTypeFactory caused by a invalid signature
and introduced by the previous patch",['f7c0b0a18ab72338e0b3afcdfd087aab3572fddb'],False,['RelDataTypeFactory.java']
59c7acd802a885dec1db576974bea6e205d3d955,"[CALCITE-3136] Fix the default rule description of ConverterRule (TANG Wen-hui)

The ConverterRule's description will decide how it is matched, which
should be kept synced with the doc and the current implementation.

close apache/calcite#1275",['9c11efb5aae075f473d7cbfefbac99af1ef31553'],False,"['RelOptRule.java', 'ConverterRule.java', 'RelOptUtilTest.java']"
5754fa95e20fb6a961b01c1c951fc47f21132923,"[CALCITE-2510] Implement CHR function (Sergey Tsvetkov, Chunwei Lei)

It follows oracle standard. Sergey started the work and Chunwei rebased and made some fixup.

Close apache/calcite#810",['59c7acd802a885dec1db576974bea6e205d3d955'],False,"['RexImpTable.java', 'SqlFunctions.java', 'SqlLibraryOperators.java', 'ReturnTypes.java', 'SqlOperatorBaseTest.java', 'reference.md']"
2d52dd3f2dc3e6087c034008037e6c47b201c732,"[CALCITE-3118] VolcanoRuleCall should look at RelSubset rather than RelSet when checking child ordinal of a parent operand (Botong Huang)

When matching in ascending order, only the parent operands in input
RelSubSet should be considered.

Fix-ups:(Danny Chan)
- Remove TestBiRel because it is only used by PhysBiRel
- Add issue link to the test case

close apache/calcite#1260",['5754fa95e20fb6a961b01c1c951fc47f21132923'],False,"['VolcanoRuleCall.java', 'PlannerTests.java', 'VolcanoPlannerTest.java']"
3ebaa591c6fa045310252944a292b85908a938f8,"Following [CALCITE-2804], fix incorrect expected Druid query in test case DruidAdapterIT#testCastToTimestamp (Justin Szeluga)

Close apache/calcite#1262

Co-authored-by: Justin Szeluga <justin.szeluga@gmail.com>
Co-authored-by: Hongze Zhang <hongze@apache.org>",['c1c4e31c849c4c9cb73056be95f5694ccd5fc2db'],False,['DruidAdapterIT.java']
0061b2a172de29acd5859abd7eb93e491d4f4f41,[CALCITE-3153] Improve testing in TpcdsTest using assertEqual instead of printing results,['ccad6f982fc0d6bd45424e602ec0432a1bcecda7'],False,['TpcdsTest.java']
fef2133ee6652688de7c6cd7ecb755cf5459cba1,"Fix compiler warnings

Fix compiler warnings introduced by patches for issues CALCITE-3031 and
CALCITE-3187.
Also force compiler to stop if such warnings are detected.",['d98856bf1a5f5c151d004b769e14bdd368a67234'],False,"['ReduceDecimalsRule.java', 'SubQueryRemoveRule.java', 'RelDataTypeFactoryImpl.java', 'pom.xml']"
41b00bab339a5f5fd514ab873c926cdede37b544,"More compiler fixes, and cosmetic changes",['fef2133ee6652688de7c6cd7ecb755cf5459cba1'],False,"['RelDataTypeSystem.java', 'RelToSqlConverterTest.java', 'RelDataTypeSystemTest.java', 'RelOptRulesTest.java', 'VirtualColumnsExpressionFactory.java', 'RelOptRulesTest.xml', 'sub-query.iq', 'SqlTest.java', 'DEPTS.json', 'EMPTY.json', 'SDEPTS.json', 'history.md']"
61b7280ee1167235e3fbd76a6ce379fc83658dbb,"[CALCITE-3175] AssertionError while serializing to JSON a RexLiteral with Enum type (Wang Yanlin)

An example of this is the ""LEADING"" flag in a call to the ""TRIM""
function. ""LEADING"" is an instance of enum SqlTrimFunction.Flag, and
becomes a RexLiteral of type SYMBOL.

The solution is to serialize enum values as strings, and build a
registry of enum classes that may be serialized to JSON and the names
of their constants. Since the enums have distinct names (for instance,
no other enum class has a constant called ""LEADING""), when we
deserialize we can use a map to convert them to the correct type.

Close apache/calcite#1301",['f82353c80223143673fc78561a05c79d6fd4f364'],False,"['RelEnumTypes.java', 'RelJson.java', 'RexBuilder.java', 'RelBuilder.java', 'RelWriterTest.java']"
357cb741f70f9c9d541dfc77fa0b813ee4dfe959,"[CALCITE-3222] Fix code style issues introduced by [CALCITE-3031] (Vineet Garg)

Close apache/calcite#1345",['c3108bc1231b2aa4ba25227d225544fef4576508'],False,['SubQueryRemoveRule.java']
22817fb34ab0921e6ab6567a9c65819ebd11b9c5,"[CALCITE-3218] Syntax error while parsing DATEADD function (which is valid on Redshift) (Lindsey Meyer)

Fix by adding DATEADD, DATEDIFF, DATE_PART to the Babel parser. They
treat their first argument (e.g. DAY, MONTH) as a time-unit not as an
expression, and therefore don't complain that there's no column called
""day"".

Close apache/calcite#1352

move DATEADD etc. from core parser to babel parser",['b432756e2be9ad0557a56254550eb4438dd0efcf'],False,"['config.fmpp', 'parserImpls.ftl', 'BabelParserTest.java', 'Parser.jj', 'LatticeSuggesterTest.java']"
fb797bbf428a0a949a792b3bc01b612049cb22fc,[CALCITE-3198] Enhance RexSimplify to handle '(x<>a or x<>b)' (fix javadoc),['2678eb9a867c6589208b60c2a07446c658d2d8c6'],False,"['RelOptRulesTest.java', 'RexProgramTest.java']"
602b2a10e3f81888c0759ca69f7415497124ef82,[CALCITE-2835] Markdown errors on the Geode adapter page,['fb797bbf428a0a949a792b3bc01b612049cb22fc'],False,['geode_adapter.md']
6f02ecf33318b223f752a3f6f3daa70753149875,[CALCITE-3198] Enhance RexSimplify to handle '(x<>a or x<>b)' (fix javadoc),['5212d6c47e36995943f4d955a1714bf03eb08e7e'],False,"['RelOptRulesTest.java', 'RexProgramTest.java']"
e8baf4f4720e07cdce1aa2baabf20042b9353bbb,"[CALCITE-2843] Support PostgreSQL cast operator '::' (Muhammad Gelbana)

SqlCastOperator is in SqlLibraryOperators but not SqlStdOperatorTable;
you can enable it using 'fun=postgresql' in your connect string.

Make SqlCastOperator a sub-class of SqlBinaryOperator to match its
syntax, delegating to SqlCastFunction for behavior such as
type-checking. Change its precedence/associativity to match that of
""::"" in PostgreSQL. (Julian Hyde)

Close apache/calcite#1066",['6f02ecf33318b223f752a3f6f3daa70753149875'],False,"['config.fmpp', 'parserImpls.ftl', 'BabelParserTest.java', 'BabelTest.java', 'config.fmpp', 'Parser.jj', 'RexImplicationChecker.java', 'VisitorDataContext.java', 'RexUtil.java', 'SqlKind.java', 'SqlCastFunction.java', 'SqlCastOperator.java', 'SqlLibraryOperators.java', 'StandardConvertletTable.java', 'config.fmpp', 'config.fmpp', 'reference.md']"
996cdd0249a4e5086fadc27a15ccc23eb9defd8e,"[CALCITE-3237] IndexOutOfBoundsException when generating deeply nested Java code from linq4j (Sahith Nallapareddy)

The problem was that ExpressionWriter was using a list of indent
strings but it did not resize the list for very large indents. The
solution was to use Avatica's Spacer class.

Close apache/calcite#1364",['a042b6115120cb48079266444a264e16a9ca611b'],False,"['pom.xml', 'ExpressionWriter.java']"
5ec3a2a503dcf26fe1b3cad8a5a9467264213dcf,"[CALCITE-1935] Implement MATCH_RECOGNIZE, part 3: get it working (Julian Feinauer)

Add support for OR (""|"") and OPTIONAL (""?"") patterns.

Translate eps-NFA to DFA, and implement Matcher based on DFA.

Fixed a Bug in RexImpTable to make the minimal example work.

Close apache/calcite#1343",['2a2de705f93c886cea0996e757348a2493eef737'],False,"['EnumerableMatch.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'Match.java', 'AggregateFilterTransposeRule.java', 'SortJoinCopyRule.java', 'SubQueryRemoveRule.java', 'Automaton.java', 'AutomatonBuilder.java', 'DeterministicAutomaton.java', 'Enumerables.java', 'Matcher.java', 'Pattern.java', 'BuiltInMethod.java', 'AutomatonTest.java', 'DeterministicAutomatonTest.java', 'EnumerablesTest.java', 'ExtensionSqlParserTest.java', 'CalciteSuite.java', 'JdbcTest.java', 'RelBuilderTest.java', 'SqlToRelConverterTest.xml', 'match.iq', 'SqlTest.java', 'MemoryEnumerable.java', 'MemoryEnumerator.java', 'MemoryFactory.java', 'ModularInteger.java', 'ExpressionType.java', 'Expressions.java', 'ForEachStatement.java', 'VisitorImpl.java', 'MemoryEnumerableTest.java', 'ExpressionTest.java']"
f25734a2d27f304a454a310e656ab83a5fa85890,[CALCITE-3238] Support Time Zone suffix of DateTime types for SqlDataTypeSpec,['3abb974588194e2e531aa43daa79c4dfd18ef25f'],False,"['config.fmpp', 'Parser.jj', 'SqlBasicTypeNameSpec.java', 'SqlDataTypeSpec.java', 'SqlDialect.java', 'SqlJdbcDataTypeName.java', 'SqlRowTypeNameSpec.java', 'SqlTypeNameSpec.java', 'SqlUserDefinedTypeNameSpec.java', 'MysqlSqlDialect.java', 'OracleSqlDialect.java', 'PostgresqlSqlDialect.java', 'SqlJsonValueFunction.java', 'SqlTypeFactoryImpl.java', 'SqlTypeUtil.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'SqlValidatorTest.java', 'GeodeTable.java', 'history.md', 'reference.md']"
5c017135b6b923abbf1b465ac1962bcec7886dfd,"[CALCITE-3236] Handle issues found in static code analysis (DonnyZone)

close apache/calcite#1362",['f25734a2d27f304a454a310e656ab83a5fa85890'],False,"['SubstitutionVisitor.java', 'MutableTableFunctionScan.java', 'MutableRelTest.java']"
705be2771f284533a998e941c9dc3b285f1d7351,"[CALCITE-3250] Support nested collection type for  SqlDataTypeSpec

Changes:
* Add a new SqlTypeNameSpec SqlCollectionTypeNameSpec to describe nested
collections type
* Refactor SqlDataTypeSpec to only keep SqlTypeNameSpec, TimeZone and
nullble.
* Add a new method SqlTypeNameSpec#deriveType(SqlValidator) to support
derive type for UDT(throws exception when we can't deduce any type).",['7625938f1faa37fe34540d3a7a2257ec7eae5704'],False,"['Parser.jj', 'SqlBasicTypeNameSpec.java', 'SqlCollectionTypeNameSpec.java', 'SqlDataTypeSpec.java', 'SqlRowTypeNameSpec.java', 'SqlTypeNameSpec.java', 'SqlUserDefinedTypeNameSpec.java', 'SqlParserTest.java', 'SqlValidatorTest.java', 'Fixture.java', 'MockCatalogReaderExtended.java', 'reference.md']"
6b600e4bd13d130a4ea48ab9b8451d81ed095da0,"[CALCITE-3267] Remove method SqlDataTypeSpec#deriveType(RelDataTypefactory)

Changes:
* Remove method SqlDataTypeSpec#deriveType(RelDataTypefactory);
* Add a SqlValidator subType ContextSqlValidator used to derive type during DDL
nodes execution;
* Support create table with user defined type and add test case.",['6400a509501419beef0d34e1deccdc2beadfbb30'],False,"['ContextSqlValidator.java', 'SqlBasicTypeNameSpec.java', 'SqlCollectionTypeNameSpec.java', 'SqlDataTypeSpec.java', 'SqlRowTypeNameSpec.java', 'SqlTypeNameSpec.java', 'SqlUserDefinedTypeNameSpec.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'SqlCreateTable.java', 'SqlCreateTable.java', 'SqlCreateType.java', 'SqlDdlNodes.java', 'ServerParserTest.java', 'ServerTest.java']"
11116f6d03bca7cd97d151033c5d82f24394e229,"[CALCITE-3111] Add RelBuilder.correlate method, and allow custom implementations of Correlate in RelDecorrelator (Juhwan Kim)

In RelDecorrelator, refactor all Logical rels into corresponding
abstract rels, and use given RelBuilder when creating a new rel.
Add abstract rel visitors in CorelMapBuilder, and change access
levels to allow extending RelDecorrelator.

Close apache/calcite#1334",['a71def51dbf3dc18af2e73418ed30e0f2e6addde'],False,"['RelOptUtil.java', 'RelDecorrelator.java', 'RelBuilder.java', 'RelBuilderTest.java', 'RelOptRulesTest.java', 'SqlToRelTestBase.java', 'algebra.md', 'history.md']"
ab97af39bd9438420cb5b212b95b23d9cb798f0d,"[CALCITE-3257] RelMetadataQuery cache is not invalidated when log trace is enabled (Xiening Dai)

Based on current design, RelMetadataQuery.map needs to be cleared between each
rule firing. This is achieved through RelOptCluster.invalidateMetadataQuery()
by VolcanoRuleCall.transformTo(). But when trace is enabled, the dump process
would actually rebuild the meta data cache from previous rel tree. Then the
subsequent rule firing doesn't get a chance to update rel node cost as it's
been in the cache.

A simple fix will just add a call to RelOptCluster.invalidateMetadataQuery()
after dumping rel nodes.

Close #1385",['1e62d3d64fc217d14016702237b4f8d56b3683f2'],False,['RuleQueue.java']
22577e488e04d4056e15af96bac4246fd810f0fa,[CALCITE-3228] Error while applying rule ProjectScanRule: interpreter,['729446005617059c0ce9fef4068087e4ca9ca139'],False,"['Bindables.java', 'Project.java', 'ProjectTableScanRule.java', 'RelBuilderTest.java', 'FrameworksTest.java']"
77e7808fc0aa4e089a992535bc890047724fd900,"[CALCITE-3283] RelSubset does not contain its best RelNode (Xiening Dai)

In VolcanoPlanner.rename(), the given relnode will be removed when we find
there's an equivalent rel after rename. But if the node to be removed happens
to be the best relnode of its subset, the RelSubSet.best will not able to get
updated under two scenarios:
1. If equivalent rel is in the same set as the original rel, currently we do
nothing. So RelSubSet.best is not updated and points to a node that's removed
after rename.
2. If we end up merging two sub set and equivalent rel cost is same as original
rel cost, we won't update RelSubSet.best either.

Fix the issue by udpdating the RelSubSet.best if best is the RelNode that's
supposed to be removed. Enable isValid() check only under debug log level or
finer until calcite-2018 is fixed.

Close #1403",['e863294ccfbed9dd520c999f75ed0bbe03f9fb1d'],False,['VolcanoPlanner.java']
be678e3dc65f5933f85927e53b2811738d124f11,"[CALCITE-3260] Add Expressions.evaluate(Node), a public API for evaluating linq4j expressions (Wang Yanlin)

And a couple of cosmetic changes.

Close apache/calcite#1387",['77e7808fc0aa4e089a992535bc890047724fd900'],False,"['RelToSqlConverterStructsTest.java', 'Expressions.java', 'ExpressionTest.java', 'SqlCreateTable.java']"
8a3fde56e6931ca8c5a12d22489c6ce0eae4a8bc,"In SqlFunctionsTest, replace assertEquals and assertNull with assertThat",['be678e3dc65f5933f85927e53b2811738d124f11'],False,['SqlFunctionsTest.java']
e5ae1796e8016b0a5e943f458bf31a7e7e8aa75a,"[CALCITE-3122] Convert Pig Latin scripts into Calcite relational algebra and Calcite SQL (Khai Tran)

Remove SqlNode.toSqlString and replace it with SqlNode.unparse.

Mute pig parser log in piglet tests.

Refactor DynamicTupleRecordType.

Remove dependency on core/PigRelBuilder from LogicalPigRelBuilder and
rename LogicalPigRelBuilder to PigRelBuilder.

Fix RAT report on Travis on unapproved license files.

Close apache/calcite#1265",['b039b152d8d2e91ab2ca0232ebddfc998f3bb331'],False,"['EnumUtils.java', 'RelOptCluster.java', 'RelOptTableImpl.java', 'Uncollect.java', 'ToLogicalConverter.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'SqlFunctions.java', 'ScalarFunctionImpl.java', 'SqlBasicTypeNameSpec.java', 'SqlLateralOperator.java', 'SqlNode.java', 'SqlUnnestOperator.java', 'SqlValidatorImpl.java', 'PigRelBuilder.java', 'RelBuilder.java', 'ToLogicalConverterTest.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'Matchers.java', 'pom.xml', 'pom.xml', 'DynamicTupleRecordType.java', 'PigConverter.java', 'PigRelBuilder.java', 'PigRelExVisitor.java', 'PigRelExWalker.java', 'PigRelOpInnerVisitor.java', 'PigRelOpVisitor.java', 'PigRelOpWalker.java', 'PigRelSqlUdfs.java', 'PigRelToSqlConverter.java', 'PigRelUdfConverter.java', 'PigTable.java', 'PigToSqlAggregateRule.java', 'PigTypes.java', 'PigUdfFinder.java', 'PigUdfs.java', 'PigUserDefinedFunction.java', 'CalciteHandler.java', 'PigRelExTest.java', 'PigRelOpTest.java', 'PigRelTestBase.java', 'PigScriptTest.java', 'log4j.properties', 'testPig.pig', 'history.md']"
cc169aec313c19bd7749c448c1e8eca014997b77,Following [CALCITE-3122] Fix getFamilitTypes typo,['e5ae1796e8016b0a5e943f458bf31a7e7e8aa75a'],False,['PigRelSqlUdfs.java']
01477c42ded991aaa7b14cf72a6e4ea1a20edf5e,"[CALCITE-2302] Implicit type cast support

Changes:
* Support full implicit type coercion for SQL contexts:
Set operation, binary arithmetic exprs, binary equality
exprs, binary comparison exprs, case when(COALESCE),
IN operation, builtin functions, user defined function(UDF);
* The SqlValidator now takes a component named `TypeCoercion`
responsible for the coercion work, you can turn off the coercion with
`SqlValidator#setEnableTypeCoercion(false)`;
* We follow PostgreSQL and SQL-SERVER conversion style for two integers division,
i.e. `'9'/2` returns INTEGER 4.",['97d68952d467540cddddbe8350f706028001dfbf'],False,"['RexToLixTranslator.java', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'JavaTypeFactoryImpl.java', 'CalciteSqlValidator.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeSystem.java', 'SqlFunction.java', 'SqlKind.java', 'SqlOperator.java', 'SqlUtil.java', 'SqlCaseOperator.java', 'SqlInOperator.java', 'AssignableOperandTypeChecker.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'FamilyOperandTypeChecker.java', 'ImplicitCastOperandTypeChecker.java', 'JavaToSqlTypeConversionRules.java', 'ReturnTypes.java', 'SameOperandTypeChecker.java', 'SameOperandTypeExceptLastOperandChecker.java', 'SetopOperandTypeChecker.java', 'SqlTypeAssignmentRules.java', 'SqlTypeFactoryImpl.java', 'SqlTypeFamily.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'AbstractTypeCoercion.java', 'TypeCoercion.java', 'TypeCoercionImpl.java', 'TypeCoercions.java', 'package-info.java', 'AbstractSqlTester.java', 'SqlOperatorBaseTest.java', 'SqlTestFactory.java', 'SqlTester.java', 'CalciteSuite.java', 'ExceptionMessageTest.java', 'ReflectiveSchemaTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'TableFunctionTest.java', 'TypeCoercionConverterTest.java', 'TypeCoercionTest.java', 'UdfTest.java', 'Smalls.java', 'RelOptRulesTest.xml', 'TypeCoercionConverterTest.xml', 'GeodeZipsTest.java', 'BinaryExpression.java']"
48086a76578b96ac961c833075357710bd624d3e,"[CALCITE-3315] Multiple failures in Druid IT tests due to implicit casts

1. Update stale tests in DruidAdapterIT and DruidAdapter2IT following the implementation of implicit casts in CALCITE-2302.
2. Refactor common druidChecker code in DruidAdapterIT and DruidAdapter2IT in a separate class.

Co-authored-by: yuzhao.cyz <yuzhao.cyz@alibaba-inc.com>",['55cc3abfbcb906935a703a5cf77b1b0359fca734'],False,"['DruidAdapter2IT.java', 'DruidAdapterIT.java', 'DruidChecker.java']"
5c25c386dd70172f98d870ce72455fab897eb70a,"Remove the useless JdbcConvention out in descriptionPrefix for JdbcToEnumerableConverterRule (Wenhui Tang)

Close apache/calcite#1435",['955d4ea7b30b85519529c1c77662fa04141bfa89'],False,['JdbcToEnumerableConverterRule.java']
8c941e03d8443d1e0dae12cb740e7eea09d56ab2,"Cosmetic code changes

Improve documentation of JDBC adapter (Shuming Li)

Copy-edit SQL reference",['6fabfd609800824d84fb13703f4d70ac1798c9aa'],False,"['EnumerableHashJoin.java', 'TypeCoercion.java', 'TypeCoercionImpl.java', 'SqlToRelConverter.java', 'RelWriterTest.java', 'EnumerablesTest.java', 'Smalls.java', 'adapter.md', 'reference.md']"
034bd7942c35d5b6c948dc6863a9a086fb82386c,"Improve 1.21.0 release note

Change passive to active voice.
Add backticks around Java types and SQL keywords.
Fix release date.",['799802822cc99ef4e0f9ee16e8b4fb0718baa81b'],False,['history.md']
d3c718328d4c83fb24007c8349b31b420dddd187,"[CALCITE-3331] Support implicit type cast for operators that use single operand family checker

* Add doc to SqlSingleOperandTypeChecker#checkSingleOperandType to note
that we should not support implicit type coercion for it's
implementation;
* Tweak the operands checking logic for SqlJsonRemoveFunction,
SqlRegexpReplaceFunction and SqlSubstringFunction to support implicit
type coercion, also add the test cases in SqlValidatorTest;
* Some cosmetic comments fix.",['f6aa7a927feaa88bd4076f9098203346b89ae80d'],False,"['SqlDatePartFunction.java', 'SqlDotOperator.java', 'SqlJsonRemoveFunction.java', 'SqlRegexpReplaceFunction.java', 'SqlSubstringFunction.java', 'SqlSingleOperandTypeChecker.java', 'TypeCoercion.java', 'TypeCoercionImpl.java', 'package-info.java', 'SqlValidatorTest.java']"
ce8ca6742bf1296af421c8e61f9918734db74cf3,"[CALCITE-3319] AssertionError when reducing decimals (Wang Yanlin)

There exist code that throws AssertionError every time it was ran to,
remove this part of code and add test for new code path",['d3c718328d4c83fb24007c8349b31b420dddd187'],False,"['ReduceDecimalsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
f95f74a13a20413bb0074f0a3c94901a7a88305c,"[CALCITE-2166] Cumulative cost of RelSubset.best RelNode is increased after calling RelSubset.propagateCostImprovements() for input RelNodes (Xiening Dai)

It's possible that Subset's best cost increases when input subset's best is
changed. In those cases, although input subset's cost is reduced, the row count
can increase which causes the increase of non-cumulative cost of parent rel. As
a result, the cost of parent rel can increase. If the parent rel happens to be
the best rel of a given subset, we currently do nothing. And this would lead to
the inconsistency of the rel node cost.

Fixing this by updating the best rel node cost if it's increased. Although this
approach won't garantee an optimal plan, at least it makes sure the memo is
consistent.

More details, please refer to JIRA -
https://issues.apache.org/jira/browse/CALCITE-2166

Close #1440",['507d383a0f8db339691bb126d66c58875fd47ef8'],False,"['RelSubset.java', 'VolcanoPlanner.java', 'ScannableTableTest.java']"
f3758a6fa301cbd910ceabeca9075a3772ee4e8b,"[CALCITE-3282] In JDBC adapter, when generating SQL for Hive, generate INTEGER type as INT (huangfeng)

This is necessary because Hive 1.x only supports INT, not INTEGER.

Fix-up (by Danny):
* Add issue link to the test case;
* Fix some doc typos.

close apache/calcite#1443",['f95f74a13a20413bb0074f0a3c94901a7a88305c'],False,"['SqlDialect.java', 'HiveSqlDialect.java', 'RelToSqlConverterTest.java']"
883e19170a45e0badffa5b8fba04cd536e0f2eb2,"[CALCITE-3360] SqlValidator throws NPE for unregistered function without implicit type coercion

SqlValidator should report the function signature for unregistered UDFs
when implicit type coercion is turned off.

We also change SqlTypeNameSpec constructor to public so that any other
engine can extend it and implement their custom data type.(Because it is
too small change, i just merge it into this one)",['67fd318ed755ef975cf31262c96c982f0922a975'],False,"['SqlFunction.java', 'SqlTypeNameSpec.java', 'SqlValidatorTest.java']"
0115bd102fdbab66a2a7447b96b9f7bf49f14308,[CALCITE-3348] AssertionError while determining distribution of Calc (Wang Yanlin),['9693817df9421fda9a727d03b225f686f5393def'],False,"['RelMdDistribution.java', 'RexProgram.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
64068d69ceee8450e56c4705d26b7a2f944909b9,"[CALCITE-1178] Allow SqlBetweenOperator to compare DATE and TIMESTAMP

* Add implicit type coercion rules for BETWEEN operator and add test
cases
* For comparison of NUMERIC and CHARACTER, we coerce the CHARACTER to
NUMERIC type which is breaking change.(Before this patch, CHARACTER would
be coerced to INT during sql-to-rel conversion)
* For ""DATETIME and CHARACTER"" comparison and equality, add coercion rules during sql
node validation, before this patch, the coercion happens during sql-to-rel conversion
* Some code refactoring for TypeCoercionConverterTest",['0115bd102fdbab66a2a7447b96b9f7bf49f14308'],False,"['ComparableOperandTypeChecker.java', 'AbstractTypeCoercion.java', 'TypeCoercion.java', 'TypeCoercionImpl.java', 'TypeCoercionConverterTest.java', 'TypeCoercionTest.java', 'TypeCoercionConverterTest.xml', 'misc.iq']"
ed692fd4f2f00261348ecac779cb1a6d544d052e,"[CALCITE-3323] Add mode to SqlValidator that treats statements as valid if they contain unknown functions (Ryan Fu)

The mode is controlled by new method SqlValidator.isLenientOperatorLookup().

If it encounters an unknown function, or a known function with invalid
number or types of arguments, the validator now creates a
SqlUnresolvedFunction. The return type is inferred to be UNKNOWN, so
that an enclosing function call can be validated.

Removed .factorypath files and updated gitignore files to reject these.

Close apache/calcite#1471",['0c8cbacd0f30b5df15b7cb93c0ab2be5d0324372'],False,"['.gitignore', 'SqlFunction.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'AbstractSqlTester.java', 'SqlTestFactory.java', 'SqlTester.java', 'SqlValidatorTest.java']"
2dc97e6723e1b5bf762540f87ffffb5cd1a848a1,[CALCITE-3374] Error format check result for explain plan as json (Wang Yanlin),['c9adf94b0e07f2e9108ef4d1f2ee28c3e42063b3'],False,"['SqlExplain.java', 'SqlParserTest.java']"
3498026cd9819c52198a89e0d06f564b83ba4a8a,"[CALCITE-3347] IndexOutOfBoundsException in FixNullabilityShuttle when using FilterIntoJoinRule (Wang Yanlin, Shuming Li)",['c09f293b4666b38e41a0724aab73565f8c61dbac'],False,"['FilterJoinRule.java', 'JdbcTest.java']"
64c395754d66e9a2ba6cd14e7ee0cb1eb5075c2c,Fix typos (Wang Yanlin),['3498026cd9819c52198a89e0d06f564b83ba4a8a'],False,"['JdbcConvention.java', 'Driver.java', 'ConventionTraitDef.java', 'ClassDeclarationFinder.java']"
a47492bf8a0a310b49379b45ad2c15243393e094,Javadoc fixes for JDK 13,['64c395754d66e9a2ba6cd14e7ee0cb1eb5075c2c'],False,"['RelTrait.java', 'IntersectToDistinctRule.java', 'SqlJdbcFunctionCall.java', 'SelectScope.java', 'package-info.java', 'Static.java', 'Util.java', 'CalciteTrace.java', 'package-info.java', 'Enumerator.java', 'Extensions.java']"
35c5f57d7db2b4745086178602ca69195ffb858e,"[CALCITE-3361] Add 'lenientOperatorLookup' connection property

Add a test (redshift.iq) that parses and validates a SQL statement with
every built-in Redshift function, per the Redshift documentation.

The test uses lenientOperatorLookup so that unknown functions do not
cause validation errors (as long as they have ordinary function syntax).
Test cases are commented out if the feature is not supported (e.g. the
APPROXIMATE keyword). If a function is built into Redshift but not
known to Calcite, its test will use '!explain-validated-on' rather than
'!ok'.

In parser, increase the lookahead for JoinType() so that we can parse
LEFT SEMI JOIN. This allows us to enable BabelQuidemTest, which was
previously disabled.",['a47492bf8a0a310b49379b45ad2c15243393e094'],False,"['BabelQuidemTest.java', 'BabelTest.java', 'redshift.iq', 'select.iq', 'Parser.jj', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'SqlFunction.java', 'SqlValidatorImpl.java']"
3f54108b7dcd4d2b89fc42faab145e2f82883791,"[CALCITE-3386] CyclicMetadataException singleton instance causes confusion when debugging (Zuozhi Wang)

Fix misleading stack trace of Calcite's cyclic meta exception. Previously, a
singleton instance of CyclicMetadataException is reused. However it will lead
to wrong stack trace.
See https://stackoverflow.com/questions/15090664

Close #1484",['abf36e4da4884f2c22435384aa55d68f968a784e'],False,"['CyclicMetadataException.java', 'JaninoRelMetadataProvider.java', 'ReflectiveRelMetadataProvider.java']"
062c41391170db7f76e1596db72d6ef26694a08f,Site: Change GitHub avatar links to https,['3f54108b7dcd4d2b89fc42faab145e2f82883791'],False,"['news_item.html', 'news_item.html', 'index.md']"
e43595482617b1bb991407800c068a0c727e5c17,"[CALCITE-3330] Use breadth first approach for propagating cost improvements

Current implementation uses depth first approach for propagating cost
improvements to parent rel nodes. This could lead to stack overflow if the rel
node hierarchy is very deep. Fix this by using breath first approach for cost
propagation.

Close #1445",['b841a6c7a815d5bc82ce8393e31e2da754efb261'],False,"['RelSubset.java', 'MongoAdapterTest.java']"
812bc3bce4eabac6f09fbe02726da1d59bec061e,Following [CALCITE-3330] Fix style issue,['e43595482617b1bb991407800c068a0c727e5c17'],False,['MongoAdapterTest.java']
f7ff1c906212b34a41599c5009527639ad2e8718,"[CALCITE-3397] AssertionError for interpretering multiset value (Wang Yanlin)

close apache/calcite#1494",['4be2d08e2116234a7df982014f8ae5bc79a7e0bf'],False,"['CollectNode.java', 'Nodes.java', 'InterpreterTest.java']"
79f6aeb980fe900a33d94e9bb42993f2b2e4e7b1,"[CALCITE-3382] Hard-wire the TUMBLE grouping function into SQL parser (Rui Wang)

Rename the grouping function to ""$TUMBLE"", since it is no longer
resolved by name. This will allow us to later add a TUMBLE table UDF.

Close apache/calcite#1481",['c7ab64688f611f599d3b0d07340680e968c7ccf8'],False,"['config.fmpp', 'Parser.jj', 'SqlGroupedWindowFunction.java', 'SqlStdOperatorTable.java', 'SqlCreateTable.java', 'reference.md']"
2ac44153c4a521694c4dc975dd37b097184fc998,"[CALCITE-3420] NullPointerException throws for implicit type coercion of nested SET operations

We should update the nested SET operator node type when implicit type
coercion happens.

This bug fires when the non-first nested SET node triggers the
implicit type coercion.",['3cbbafa941128dc5097c2a26711f5751f764e12d'],False,"['AbstractTypeCoercion.java', 'TypeCoercionImpl.java', 'TypeCoercionTest.java']"
2217420fb22a79e3430fde912f0b88650414ae6f,"[CALCITE-2792] Stackoverflow while evaluating filter with large number of OR conditions

SqlCall AND, OR require exactly 2 operands, instead of creating left-deep
binary tree, which may cause stack overflow for large number of OR operands,
we create balanced binary tree to reduce the recursive call depth.",['ec9947ad8403b6b2d476b3b379f8f52776ebacc4'],False,"['SqlImplementor.java', 'RelToSqlConverterTest.java', 'JdbcAdapterTest.java']"
dd9bc946483ce1d41d0552528098ae3a25500fec,"Fix SQL example in comment

Close apache/calcite#1515",['2217420fb22a79e3430fde912f0b88650414ae6f'],False,['SubQueryRemoveRule.java']
0d1d4915f6b2ce56a6d4b570d352432f1cb3fe1d,"[CALCITE-3393] RelStructuredTypeFlattener: improve support for functions with struct input (Igor Guzenko)

* Implemented flattening for LogicalAggregate rel nodes
* Fixed functions which accept struct column as input
* Improved usability of test Fixture, now there is no need to search
type field initialization indside constructor after jumping to type
field

close apache/calcite#1511",['cd24cae77072e56e4333d10114bf380be79709f1'],False,"['RelStructuredTypeFlattener.java', 'SqlToRelConverterTest.java', 'Fixture.java', 'SqlToRelConverterTest.xml']"
9c5b2d97531d3b2fd8a44d13c0632e381e8c13be,Fix wrong usage of SqlTypeAssignmentRules.canCastFrom in AbstractTypeCoercion.needToCast,['0d1d4915f6b2ce56a6d4b570d352432f1cb3fe1d'],False,['AbstractTypeCoercion.java']
8ba2d8512b8f195bb0866af12308beef2b3eed9f,"[CALCITE-3424] AssertionError thrown for user-defined table function with array argument (Igor Guzenko)

close apache/calcite#1519",['b5ffef1c05bfc35dba349ffe4874de61aa15ae0e'],False,"['JavaTypeFactoryImpl.java', 'TableFunctionTest.java', 'Smalls.java']"
1745f752561be04ae34d1fa08593c2d3ba4470e8,"Cosmetic

Improve fix for [CALCITE-3259]; the previous fix generated spurious
newlines in XML reference files such as SqlToRelConverterTest.xml.

Add newlines into some SQL queries added recently in
SqlToRelConverterTest.

Re-generate SqlToRelConverterTest, putting tests into quasi-alphabetical
order, to prevent merge conflicts, and re-generate ""sql"" resources
without whitespace at end of lines.",['f9103e6079f75e3d6b3419d01690447ff0a14265'],False,"['InitializerContext.java', 'XmlOutput.java', 'SqlToRelConverterTest.java', 'Fixture.java', 'SqlToRelConverterTest.xml']"
d287b0551a189fd1bf1f8a1ae3afb1b446823350,"[CALCITE-3441] Remove SqlTypeExplicitPrecedenceList.COMPACT_NUMERIC_TYPES because the NULL delimiters are useless

We do not need the ""null"" value as delimiter for the equivalence class
because method Util.skip already did that.

This also tweak the ""needToCast"" check for implicit type coercion:
change the ""canCast"" check into an assert, that means, we should not
swallow the cast when the coercion is not allowed in the type coercion matrix.",['1745f752561be04ae34d1fa08593c2d3ba4470e8'],False,"['SqlTypeExplicitPrecedenceList.java', 'AbstractTypeCoercion.java']"
2c6ccd50ec90e14c1320c8f049a08c4b5de515fa,"[CALCITE-3436] In CalciteConnectionConfigImpl, add isSet and unset methods (Ryan Fu)

The 'isSet' method allows Planner to set ""conformance"" and ""caseSensitive""
connection properties based on the parser configuration only if they
have not been explicitly set in the connection properties.

In PlannerImpl, store 'costFactory' and no longer store
'frameworkConfig'; it might prevent memory leaks.

Close apache/calcite#1528",['8fd8fcca02240b04b21fa76a8ca8e147dd227ed3'],False,"['CalciteConnectionConfigImpl.java', 'PlannerImpl.java', 'FrameworksTest.java']"
293059c190d5347438f5bc77a4f844f86ce60226,"[CALCITE-3444] Upgrade SQLLine to 1.9.0, and solve ""Class path contains multiple SLF4J bindings"" problem

Calcite's sqlline script generates target/fullclasspath.txt with two
jar files that contain slf4j bindings. The solution is to remove
slf4j-log4j12 from the generated classpath.

This does not solve the problem on Windows, because sqlline.bat builds
its classpath in a different way.",['dfd6a0cdc51b61e88787fcae92839119e868df0e'],False,"['pom.xml', 'sqlline', 'sqlline.bat']"
08dfd170ae91162ffb082f48c4186952955a73d2,Cosmetic changes,['a02155a70a1fe98c8930a0060dc043902ebbd88f'],False,"['ColumnStrategy.java', 'SqlBasicTypeNameSpec.java', 'SqlCollectionTypeNameSpec.java', 'SqlRowTypeNameSpec.java', 'SqlTypeNameSpec.java', 'SqlUserDefinedTypeNameSpec.java', 'SqlUtil.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'AbstractTypeCoercion.java', 'TypeCoercion.java', 'TypeCoercionImpl.java', 'TypeCoercionTest.java']"
977ea0d96f1f8e4225b6e27f02d86d0ea5aebb9a,"[CALCITE-3446] Make RelMetadataQuery extensible

* Add interface RelOptCluster.setMetadataQuery to let user set the
customized RelMetadataQuery instance
* Add a base metadata query class named RelMetadataQueryBase, it
holds the common parts that a metadata query requires, also add doc
about how to add a new RelMetadataQuery sub-class
* In RelMetadataQuery, make constructor RelMetadataQuery(boolean) and
RelMetadataQuery(JaninoRelMetadataProvider, RelMetadataQuery) private,
add a new constrcutor RelMetadataQuery() for sub-class
* Add test cases in RelMetadataTest
* Refactor out assertEquals within RelMetadataTest
* Make RelMetadataQueryBase#THREAD_PROVIDERS default to be a empty
instance, we always initialize it now in RelOptCluster",['1ef2821695ca6e10fbad7b8efe7246c4a20143af'],False,"['RelOptCluster.java', 'RelOptRuleCall.java', 'RelMdUtil.java', 'RelMetadataQuery.java', 'RelMetadataQueryBase.java', 'RelMetadataTest.java']"
e0d869ab8e540dec71b9278f5a3202df4a2dfb5c,"[CALCITE-2018] Queries failed with AssertionError: rel has lower cost than best cost of subset

* Replaced Map usage by Table for query metadata caching. It allows finding cached metadata query for concrete RelNode instance more easily.
* Made changes to use single RelMetadataQuery instance during planning between the first call of RelOptCluster.getMetadataQuery() and RelOptCluster.invalidateMetadataQuery() call.
* Cached metadata values are removed for current RelSubset and all parent RelNodes when RelSubset.propagateCostImprovements() is called and best rel node was changed.
* Made changes in RelSet.mergeWith() method to call RelSubset.propagateCostImprovements() when resulting best is known instead of just assigning RelSubset.best.

close apache/calcite#552",['977ea0d96f1f8e4225b6e27f02d86d0ea5aebb9a'],False,"['HepPlanner.java', 'RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'JaninoRelMetadataProvider.java', 'ReflectiveRelMetadataProvider.java', 'RelMdUtil.java', 'RelMetadataQueryBase.java']"
d3b1d857380972b7ca7fa5b70f9903977054594c,"[CALCITE-2018] Complete work of calcite-2018 (Xiening Dai)

The change completes the fix of CALCITE-2018. Below are a few key additions -

1. When a Rel is renamed and it is subset's best RelNode, we need to propagate change improvement since the subset's best cost could be changed.
2. Add codes to handle CyclicMetadataException. Right now we just ignore it. We will revisit once we have figured out a better way to handle CyclicMetadataException.
3. Enable isValid() check under assert. Also check validation after RelSet merge.",['e0d869ab8e540dec71b9278f5a3202df4a2dfb5c'],False,"['RelSubset.java', 'VolcanoPlanner.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'RelMetadataQuery.java', 'AbstractMaterializedViewRule.java']"
d51f76c19b4dca8e55d04409ed4af103ac7eca25,"[CALCITE-3454] Support Exchange in RelMdMaxRowCount,RelMdMinRowCount,RelMdRowCount (xy2953396112)

Close #1542",['ad9058999bdea1329dba2267604512d8e199919f'],False,"['RelMdMaxRowCount.java', 'RelMdMinRowCount.java', 'RelMdRowCount.java', 'RelMetadataTest.java']"
464d520148f7106fe580eec9419373276865564e,"[CALCITE-3376] VolcanoPlanner CannotPlanException: best rel is null even though there is an option with non-infinite cost
Problem solved via CALCITE-2018, just add a unit test for this specific scenario",['d51f76c19b4dca8e55d04409ed4af103ac7eca25'],False,['PlannerTest.java']
65043f290a7be45a668cf941ab48ee3c30efbe4e,"[CALCITE-3433] EQUALS operator between date/timestamp types returns false if the type is nullable (DonnyZone)

When checking equals or not-equals on two primitive boxing classes
(i.e. Long x, Long y), we should fall back to call `SqlFunctions.eq(x, y)`
and `SqlFunctions.ne(x, y)`, rather than `x == y`.

close apache/calcite#1540",['a5c63c954f91e3502e0eea489fb2f7dab0930aac'],False,"['RexImpTable.java', 'JdbcTest.java']"
cae7afbf8e18f839de295ff492cf2cbc4abe1e93,"[CALCITE-3434] ElasticSearch schema with pathPrefix (Jeffery Zhang)

We can use ""pathPrefix"" in ""operand"" to set up ElasticSearch rest
client.
i.e.
""operand"": {
""coordinates"": ""{'localhost': 80}"",
""pathPrefix"":""test"",
""index"":""xxx""
}

close apache/calcite#1518",['2ed1d8891bab4d162ff3e0f3385005fff110e194'],False,"['ElasticsearchSchemaFactory.java', 'elasticsearch_adapter.md']"
4c779b0b89219630869aaacd57716bd54faf71da,"[CALCITE-3457] RexSimplify incorrectly simplifies IS NOT NULL operator with ITEM call

* Skip IS NULL(IS NOT NULL) simplification for ITEM operator
* Add strong policy validation for IS NULL(IS NOT NULL)
simplification, so we fire the bug early for other operators

close apache/calcite#1551",['cae7afbf8e18f839de295ff492cf2cbc4abe1e93'],False,"['RexSimplify.java', 'RelOptRulesTest.java', 'RexProgramTest.java', 'RelOptRulesTest.xml']"
9dd4e124adb20b4d073afb6902ac4bb3bfc3ed09,"[CALCITE-3254] Exception while deserializing with interval type or with empty partition/order key for RexOver (Wang Yanlin)

 Changes:
  add check for INTERVAL_TYPES
  add check for the empty case of partition key or order key when deserialize RexOver",['4c779b0b89219630869aaacd57716bd54faf71da'],False,"['RelJson.java', 'RelWriterTest.java']"
9c04f8733ec8723e641f39a0f036f485d681bec5,"[CALCITE-3456] AssertionError throws for aggregation with same digest IN subqueries in same scope

* Change RelToSqlConverter#subQueryList from LinkedHashSet to ArrayList
* Compare SubQuery by it's node reference, this ensures we get the node
from exact the scope where it belongs
* For SqlToRelConverter#getRootField, returns null if there is no field
matching the passed in input ref, because the input is not always a join
node; also remove the useless check for input row type null check",['be5238492285ca061d4ddd82262448d3a6cedc5d'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
be571b5ae723cf8699094558a3034e7c22ed9abb,"[CALCITE-3435] Enable decimal modulus operation to allow numeric with non-zero scale (DonnyZone)

Decimal modulus return type inference:
e1[s1, p1] % e2[s2, p2]

s = max(s1, s2)
p = min(p1-s1, p2-s2) + max(s1, s2)

Fix up(by Danny):
* Move the RelDataTypeSystemImpl#deriveDecimalModType impl to its parent interface as a
default
* Fix some typos

close apache/calcite#1563",['9c04f8733ec8723e641f39a0f036f485d681bec5'],False,"['RelDataTypeSystem.java', 'SqlFunctions.java', 'RelDataTypeSystemTest.java', 'JdbcTest.java']"
2ab44bff3a086acae7b38dcff264060544860147,"[CALCITE-3479] Stack overflow error thrown when running join queryi (Xiening Dai)

With fix of CALCITE-2166, we recalculate the RelNode cost within a subset when
its best cost is increased, in order to find the new best RelNode. But this
could lead to cyclic reference between best RelNodes and then fail to generate
a plan.

In this change, we remove the recalcuation part to mitigate this problem.

Close #1567",['be571b5ae723cf8699094558a3034e7c22ed9abb'],False,"['RelSubset.java', 'ScannableTableTest.java']"
da2b2efa437d0d7d33f99797ffa1f566781f9fa8,"[CALCITE-3476] ParameterScope should override resolveColumn interface (Jark Wu)

The SqlValidator#validateParameterizedExpression is a useful method to
validate a sql expression given the name to type mapping. Although it is
not used internal for Calcite, we better to fix it in order that other
systems can use it.

close apache/calcite#1570",['ed5cfb0bee5b548ae385e936fd222e6075d3fb6a'],False,"['ParameterScope.java', 'SqlValidatorTest.java']"
3853118b4d1d48f7d3970b5488baf7ca78d5028e,"[CALCITE-3448] AggregateOnCalcToAggUnifyRule may ignore Project incorrectly (Jin Xing)

CALCITE-3087 fixed AggregateOnProjectToAggregateUnifyRule when mapping under
Aggregate breaks ordering. But it fails when there's missing grouping in query
compared with target.

Below matching fails:
 MV:
 select empid, deptno, name, count(*) from emps
 group by empid, deptno, name

 Query:
 select name, empid, count(*) from emps group by name, empid

Note that -- comparing groupings in MV (empid, deptno, name) and groupings in
query (name, empid), deptno is missed and ordering is broken

Close #1532",['fab877bb447a9949fac37b0661acf61ab9f7c6fb'],False,"['SubstitutionVisitor.java', 'Mappings.java', 'MaterializationTest.java']"
73417080f317fb925cf3978d40af6ba97129e3c8,"[CALCITE-3503] NPE at VolcanoPlanner#isValid when DEBUG is enabled (Xiening Dai)

When planner root is null, we should skip the validation since the memo is
empty at that moment.",['472523c4e0eb694f62c1da974d256553e2f33ce2'],False,['VolcanoPlanner.java']
ce0118b4149eb303813d0af2537a7185e9945115,"[CALCITE-3486] In JDBC adapter, when generating ROW value expression, generates the ROW keyword only if the dialect allows it (quxiucheng)

In JDBC adapter, unparse the ROW keyword for ROW value expression only
if the SQL dialect allows it.

Fix-up (by Danny):
* Simplify the logic for ROW value expression in SqlDialect#unparseCall
* Add test cases in RelToSqlConverterTest
* Fix SqlParserTest, there is no need to introduce new kind of SQL
dialect

close apache/calcite#1568",['301bbe9e132346f60587e8c21c474f7c51b236c3'],False,"['SqlDialect.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java']"
08bde847c8b0749c7686e66751b4d248cd7c5cb5,[CALCITE-3457] Ignore fuzzer tests due to known unsolved issue,['ce0118b4149eb303813d0af2537a7185e9945115'],False,['RexProgramFuzzyTest.java']
94e6272d57478a5913cb51e7df5c25e67511229a,"[CALCITE-2905] Add hydromatic-resource as plain source file

See https://issues.apache.org/jira/browse/CALCITE-2905?focusedCommentId=16851698&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16851698",['08bde847c8b0749c7686e66751b4d248cd7c5cb5'],False,['Resources.java']
1ef6a0614cbb048d0c98e46b24662c56688f137f,[CALCITE-2905] Fix Maven build,['27055fbc674b22d5d2307c2488b31996c2113485'],False,"['pom.xml', 'pom.xml', 'pom.xml']"
0aab80cf5e1af8615acae2dac92943776839ddaf,"[CALCITE-3519] Use List instead of BitSet to keep inheritPath in RelHint (Shuo Cheng)

* Use List instead of BitSet, because the BitSet would just eliminate
the tailing zeros from the original path integers
* Fix the inheritPath order to be from root node to leaf node
* Refactor the SqlHintsConverterTest

close apache/calcite#1595",['c23abbe90e6142cac9cc93d1a54e4dd30bab0a93'],False,"['RelHint.java', 'SqlToRelConverter.java', 'SqlHintsConverterTest.java', 'SqlHintsConverterTest.xml', 'TypeCoercionConverterTest.xml']"
69a4c12746c42942b8155784c5f3b1658fc8a552,"Silence warnings on dependency issues in ubenchmark module

Make jmhCompileClasspath configuration resolvable.
It is not used as it is deprecated, however Gradle (and IDEs)
might still try to resolve it.",['0aab80cf5e1af8615acae2dac92943776839ddaf'],False,"['build.gradle.kts', 'build.gradle.kts']"
7a2ca26ea2e28ef9d29d01ccb35794142f59eafd,Skip GitHub Actions for changes in site/**,['1badb69dfe7332a66ec12bb21024e81b3072d691'],False,['main.yml']
620ca17d4e283d58b3ab4c573b911702fd4127c7,"[CALCITE-3245] CompileException in Janino when a query contains a division between a Double and a BigDecimal (DonnyZone)

Fix the JavaType precision/scale as the system max value when infer the
return type of Division with JavaType decimals.

close apache/calcite#1381",['cacc82ce99258abee0fad636d800814a6dcb1b77'],False,"['RelDataTypeFactoryImpl.java', 'ReflectiveSchemaTest.java']"
cba623512f675001dd07d1b4a22fad202a053394,"[CALCITE-3527] Enrich tests for SQL hints in SqlHintsConverterTest (Shuo Cheng)

* Add tests for more query levels
* Add test for decorrelation
* Fix some doc typo

close apache/calcite#1600",['620ca17d4e283d58b3ab4c573b911702fd4127c7'],False,"['NodeTypeHintStrategy.java', 'SqlHint.java', 'SqlHintsConverterTest.java', 'SqlHintsConverterTest.xml']"
a3c8a1b3c70f3aee0fbfe7de0997743d997877bd,"[CALCITE-3454] Support Exchange, SetOp and TableModify for builtin
metadata query (xy2953396112)

close apache/calcite#1552",['f2f25b3a567ee7ec1c6e8f9f00f581b2dacc3dae'],False,"['RelMdAllPredicates.java', 'RelMdCollation.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdDistinctRowCount.java', 'RelMdDistribution.java', 'RelMdExpressionLineage.java', 'RelMdMaxRowCount.java', 'RelMdMinRowCount.java', 'RelMdNodeTypes.java', 'RelMdPopulationSize.java', 'RelMdPredicates.java', 'RelMdRowCount.java', 'RelMdSelectivity.java', 'RelMdSize.java', 'RelMdTableReferences.java', 'RelMdUniqueKeys.java', 'RelMetadataTest.java']"
6ad3f9a97b2c68ad9b08e9f6099ce9c5e1fd9a80,"[CALCITE-3140] Multiple failures when executing slow tests

1. Handle errors in SqlOperatorBaseTest#testArgumentBounds skipping problematic calls with appropriate explanation.
2. Introduce Bug#CALCITE_3243 related with failures in SqlOperatorBaseTest#testArgumentBounds.
3. Errors and exceptions in SqlOperatorBaseTest#testArgumentBounds are not that different so log everything instead of rethrowing errors.
4. Improve the error messages in SqlOperatorBaseTest#testArgumentBounds by trying to find the most descriptive cause for the failure.
5. Use logger instead of System.out in SqlOperatorBaseTest#testArgumentBounds for printing messages.
6. Skip queries 2 and 7 of TpchTest due to CALCITE-2223 and infinite planning bug.
7. Increase the timeout by 2 in FoodmartTest to avoid (marginal) failures (i.e., queries 2420, 5894) in slower machines.
8. Update stale plan in TpcdsTest#testQuery17Plan.",['07c1efbb2b42a0e27f9d01968d357d9c1e17cd51'],False,"['Bug.java', 'CalciteTrace.java', 'SqlOperatorBaseTest.java', 'FoodmartTest.java', 'TpcdsTest.java', 'TpchTest.java']"
bb18888c43a3943f5c1265bab5d87830633c465b,"[CALCITE-3353] ProjectJoinTransposeRule caused AssertionError when creating a new Join (Wenhui Tang)

* Change ProjectJoinTransposeRule.INSTANCE to match only logical nodes.
* User can use the constructor directly to make the rule instance if
  they want to match convention nodes.

close apache/calcite#1462",['ca27fe99b5d1367c2d7ceb20a02ad80c6a2fce63'],False,"['RelOptUtil.java', 'ProjectJoinTransposeRule.java', 'RelOptRulesTest.java']"
7f4899bff3f07566d2039fcf437bb7cfe3659fda,"GitHub Actions: actions/checkout@master -> v1.1.0 to avoid unexpected failures

See https://github.com/actions/checkout/issues/84",['ab136b5f76a4cb951e847fcba6b414c5e80dbbe6'],False,['main.yml']
f063c40a73566e2cdfe0e1b734e409735c26db2b,"Build script: instantiate sqllineClasspath only when buildSqllineClasspath is used

buildSqllineClasspath is not used during regular build operations,
so we want to save time on the dependency resolution.",['7f4899bff3f07566d2039fcf437bb7cfe3659fda'],False,"['build.gradle.kts', 'build.gradle.kts']"
963ab743866ee5f934f65d9c8b3ef2bcb27911bc,[CALCITE-2457] JUnit 4 -> 5: less trivial changes,['60d27ee3162acead99f2510e36d7591add78e5a6'],False,"['CalciteRemoteDriverTest.java', 'JavaTypeFactoryTest.java', 'SqlAdvisorTest.java', 'SqlTypeNameTest.java', 'LexCaseSensitiveTest.java', 'CalciteAssert.java', 'RexProgramTest.java', 'StreamTest.java', 'RexProgramFuzzyTest.java', 'SourceTest.java', 'TestUtilTest.java', 'UtilTest.java', 'DirectedGraphTest.java', 'ElasticsearchChecker.java', 'FileReaderTest.java', 'SqlTest.java', 'BlockBuilderTest.java']"
ecc68aca85f756bb2b29b56dba4322c342f5d693,"[CALCITE-3548] unlock ./gradlew :ubenchmark:jmh to run benchmarks

The proper location of the benchmark sources should be
ubenchmark/src/jmh/java
rather than
ubenchmark/src/main/jmh

Gradle convention is {module}/src/{sourceSetName}/{language}

fixes #1617",['0e16fe375f797e498c0039fc7cffecfd0dc9bc3d'],False,"['CodeGenerationBenchmark.java', 'AbstractRelNodeGetRelTypeNameBenchmark.java', 'FlightRecorderProfiler.java', 'ParserBenchmark.java', 'PreconditionTest.java', 'StatementTest.java', 'StringConstructBenchmark.java', 'package-info.java']"
691108662e61c9561ca1f2372dd7b28e1b8846a7,"Align auto-configured IDEA copyright template with the project style

The build script configures IDEA copyright profile, and there was a slight
difference in wording. This change updates the configuration, and fixes the warnings.",['67ed322370472dc4403eed485d0b61fe5a40f84f'],False,"['build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'gradle.properties', 'settings.gradle.kts', 'fmpp.gradle.kts', 'FmppPlugin.kt', 'FmppTask.kt', 'javacc.gradle.kts', 'JavaCCPlugin.kt', 'JavaCCTask.kt', 'build.gradle.kts', 'gradle.properties', 'license.header.java', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'gradle.properties', 'gradle-wrapper.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'build.gradle.kts', 'settings.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'gradle.properties']"
ff44204dc2899e0c34e94f70c2e0c301170daca3,"[CALCITE-3429] AssertionError for user-defined table function with map argument (Wang Yanlin)

1. Add map info from Java Map class to SqlTypeName.Map
2. SqlTypeName.Map is not a basic type, should not be used in factory method ""createSqlType"", just like SqlTypeName.Array
3. Add coerce rule for SqlTypeName.MAP

Fix-up(by Danny):
* Fix GeodeTable#query field type inference;
* Fix GeodeUtils#convert for nested PdxInstance because in
JavaTypeFactoryExtImpl#createPdxType, the nested PdxInstance is inferred
as Map type(we can not describe nested JavaType correctly now).

close apache/calcite#1521",['9e80eb6ed90b3f053cdbae2431e96dc09cf81211'],False,"['JavaTypeFactoryImpl.java', 'RelDataTypeFactoryImpl.java', 'JavaToSqlTypeConversionRules.java', 'SqlTypeAssignmentRule.java', 'SqlTypeFactoryImpl.java', 'SqlTypeFactoryTest.java', 'TableFunctionTest.java', 'Smalls.java', 'GeodeTable.java', 'GeodeUtils.java']"
3f340bf9642b19e34be384a4f2b53f8cd4940a67,"[CALCITE-3547] SqlValidatorException because Planner cannot find UDFs added to schema (Chenxiao Mao)

* Fix PlannerImpl#validate and PlannerImpl#expandView

close apache/calcite#1615",['3a5234b14af3503fc1ec17836383264cbb77cb86'],False,"['PlannerImpl.java', 'PlannerTest.java']"
4f70978983d664629bb74abf5ac8826ff765ee6c,"[CALCITE-3540] FoodmartTest produces many warnings due to incorrect use of CalciteAssert.pooled()

1. CalciteAssert.pooled() creates new AssertThat object (thus a new connection pool) in each call. To use the same pool for all FoodMart queries we have to keep and reuse the AssertThat object that was created after calling the pooled() method.
2. Shorten and include FoodmartQuery id in the output of FoodmartTest.

Close apache/calcite#1638",['d934d121077f271331810827ce9cf7ccb5d4768e'],False,"['FoodMartQuerySet.java', 'FoodmartTest.java']"
8e9261dc14f1e50563b259dcdb42cd4415065078,[CALCITE-3599] Override toString() of RexRangeRef to avoid null string,['28d5f6f4ad770cd505ba0e5506b7559879600b4e'],False,['RexRangeRef.java']
41b9c96a4409f505bae5b17a7c46204b367935a9,[CALCITE-3559] Fix Checkstyle 8 findings,['9512d73d6652cf663a554ad1636b8f7058e36bab'],False,"['CassandraRules.java', 'EnumerableRepeatUnionRule.java', 'EnumerableTableFunctionScan.java', 'RexToLixTranslator.java', 'SubstitutionVisitor.java', 'RelMdCollation.java', 'FilterMultiJoinMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'SqlSimpleParser.java', 'NameSet.java', 'SqlHintsConverterTest.java', 'DruidDateTimeUtils.java', 'DruidRules.java', 'ElasticsearchRules.java', 'EmbeddedElasticsearchNode.java', 'CsvStreamReader.java', 'package-info.java']"
52a57078ba081b24b9d086ed363c715485d1a519,[CALCITE-3559] Fix broken CALCITE-... links,['753ce4ad35b95cc91ad62f96b2bf3ce743f66d1c'],False,"['build.gradle.kts', 'JdbcTest.java', 'ReflectiveSchemaTest.java', 'ScannableTableTest.java', 'PlannerTest.java']"
2e23e2616a2567844100d79d974a0f79680bec73,Following [CALCITE-3552] fix style issue,['1ddc1c3a0c6185c31bdf5fadde81ce6316b86fd9'],False,['SqlXmlFunctionsTest.java']
5f112a42a1aa62442a9e9306ac4700ed2152ac12,Fix regexp that detects // End ... trailers,['2e23e2616a2567844100d79d974a0f79680bec73'],False,"['build.gradle.kts', 'XmlFunctions.java', 'SqlXmlFunctionsTest.java']"
0c7c1ec088497c4d21d402ffa2eb6219d777dd73,"[CALCITE-3590] Support SQL hints for Aggregate (Shuo Cheng)

In CALCITE-482, hints are only supported for Project, Join and
TableScan. It's also necessary to support hints for Aggregate so as to
enable fine grained Aggregate configuration, i.e., two-phase
aggregation.

SELECT /*+ AGG_STRATEGY(TWO_PHASE) */
dep_id,
grade,
avg(annual_salary),
min(annual_salary),
max(annual_salary)
FROM T
GROUP BY dep_id, grade;

Fix-up (by Danny):
* Some refactoring for RelOptUtil#copyRelHints;
* Add document for RelHintPropagateShuttle#visitHintable;
* Make RelHintPropagateShuttle and ResetHintsShuttle extend RelHomogeneousShuttle
so that we do not need to match specific relational expressions.

close apache/calcite#1669",['5f112a42a1aa62442a9e9306ac4700ed2152ac12'],False,"['RelOptUtil.java', 'RelRoot.java', 'Aggregate.java', 'CompositeHintStrategy.java', 'HintStrategies.java', 'HintStrategyTable.java', 'NodeTypeHintStrategy.java', 'LogicalAggregate.java', 'SqlSelect.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'SqlHintsConverterTest.java', 'SqlHintsConverterTest.xml']"
d616a080af2b86feeb3a0b526bb59bef94f94523,"[CALCITE-3608] Promote RelOptUtil.createCastRel to not create new projection if the input rel is already a project

There is no need to create another projection if the input
relational expression is already a project(in order to change field name
or nullability).",['a289a75830ff864137777bb809f76fd291902142'],False,"['RelOptUtil.java', 'RelOptUtilTest.java']"
a9b23c736b357a5ea796ff148c221f8120ebb975,"[CALCITE-3604] Fixing SqlXmlFunctionsTest locale (ritesh-kapoor)

* Removing exception from xml function's error messages;
* Renaming exception method to invalid input for ExtractValue.

close apache/calcite#1666",['edc386d960b12642cdca40abb692beab6f75ce72'],False,"['CalciteResource.java', 'XmlFunctions.java', 'CalciteResource.properties', 'SqlOperatorBaseTest.java', 'SqlXmlFunctionsTest.java']"
c4d18de778713850f7d00f2ed418dca6922a0bff,"[CALCITE-3387] Query with GROUP BY and JOIN ... USING wrongly fails with ""Column DEPTNO is ambiguous"" error",['4d4afc6edcee93cbe2d15a82e0b2b947ff5b22a2'],False,"['SqlAdvisorValidator.java', 'SqlValidatorImpl.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
b808886328e99737471e7d1ed2702127e5969461,"[CALCITE-3620] Remove implicit lateral operator for temporal table join

* Remove the SqlLateralOperator instantiation for temporal table join;
* Remove SNAPSHOT node match for SqlLateralOperator;
* In SqlValidatorImpl, fix the scope of SNAPSHOT node.",['c4d18de778713850f7d00f2ed418dca6922a0bff'],False,"['Parser.jj', 'SqlLateralOperator.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'SqlParserTest.java', 'SqlValidatorTest.java']"
a69d24951794f6d3ff67f40b0d117fd0df9a919b,Following [CALCITE-3525] Fix slow tests expected plan,['1f3b7105fcc5cca45e5cdbb73d59fb51c410d08f'],False,['MaterializationTest.java']
5f10de3cd042120d18cb5f3ea7749243d537332d,"[CALCITE-2905] Publish calcite-core-...tests.jar to Nexus

See https://issues.apache.org/jira/browse/CALCITE-2905?focusedCommentId=17002741&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17002741",['a69d24951794f6d3ff67f40b0d117fd0df9a919b'],False,['build.gradle.kts']
fe0a2fe7dde4a4a342cfc50f2f9da983cc60c479,"[CALCITE-3621] Push down sort to DB, SQL of Sort rel contains explicit field name instead of * (Lei Jiang)

Generates explicit column names instead of start(*) for order by for
JDBC query to avoid ambiguity.

close apache/calcite#1680",['87f8e34dcedd806a6ef64117caebb5a55f99e3d2'],False,"['JdbcRules.java', 'RelToSqlConverter.java', 'JdbcAdapterTest.java']"
5e4d3967fc2f1c14ccf59c521054cfd4fe1e5b54,"[CALCITE-3672] Support implicit type coercion for insert and update

* Add implicit type coercion to insert and update validaiton
* Change the plan according to the change
* Remove useless methods in AbstractTypeCoercion
* Modify AbstractTypeCoercion#needToCast to allow implicit type coercion
for two types with same type name but different precision/scale(exclude
CHARACTER types).",['bfc0005d0bbaa6a01a3c5810259b97905b563b55'],False,"['RelToSqlConverter.java', 'SqlTypeUtil.java', 'SqlValidatorImpl.java', 'AbstractTypeCoercion.java', 'TypeCoercion.java', 'TypeCoercionImpl.java', 'RelToSqlConverterTest.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'TypeCoercionConverterTest.java', 'TypeCoercionTest.java', 'PlannerTest.java', 'SqlToRelConverterTest.xml', 'TypeCoercionConverterTest.xml']"
4e7f92557a240de58cd950dce6ab478c1bc11604,"Add gradle task 'aggregateJavadocIncludingTests' that builds javadoc for both main and test

It will allow CI to spot javadoc errors, for example broken links, in test code.",['8658804e0a1b5c2fe9c78fa8e40655db06531ac8'],False,['build.gradle.kts']
61da868ea50fa9fd1584eaafd3fcb0c644e9c953,"Contribute class Resources to ASF, and change its header

Minor refactorings, such as converting anonymous classes to lambdas.",['8a49c9fda80c6d81721f0cf1044c83feed57f589'],False,['Resources.java']
68eacfc57da7492377797e39ee3e2778be1b1aa4,"Javadoc warning

Also cosmetic changes",['61da868ea50fa9fd1584eaafd3fcb0c644e9c953'],False,"['Resources.java', 'SqlOperatorBaseTest.java', 'RexProgramTest.java', 'SqlToRelConverterTest.java', 'EnumerableCalcTest.java', 'RexProgramFuzzyTest.java', 'PredicateAnalyzer.java', 'MatchTest.java', 'TpchTest.java']"
c416c31fc376868bdd672afd84ec06dc75d56575,"[CALCITE-3526] SqlPrettyWriter should have options to fold/chop long lines, print leading commas

Move SqlPrettyWriter.Config to top-level class SqlWriterConfig, and
make it an interface implemented via ImmutableBeans; fixes
  [CALCITE-1585] SqlPrettyWriter doesn't respect alwaysUseParentheses
because config is now held in an immutable object rather than the
SqlPrettyWriter.

Add option SqlWriterConfig.withLeadingComma, to generate

  SELECT x
      , y
  FROM t

rather than

  SELECT x,
      y
  FROM t

Add option SqlWriterConfig.fromLength, which controls when lines are
considered long enough to chop or fold. Unlike lineLength(), which is
absolute, it is relative to the current sub-query.

Refactor: add SqlNodeList.SINGLETON_STAR.

Add lots of options including selectFolding(), fromFolding(),
clauseEndsList().

Extend SqlParserTest to test randomly-configured SqlPrettyWriter.",['e88809e7288db9b7d33be8a67840e02a71327675'],False,"['BabelQuidemTest.java', 'select.iq', 'CassandraSchema.java', 'JdbcTable.java', 'RelToSqlConverter.java', 'SqlAsOperator.java', 'SqlJoin.java', 'SqlMatchRecognize.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlOperator.java', 'SqlOrderBy.java', 'SqlSelectOperator.java', 'SqlWithinGroupOperator.java', 'SqlWriter.java', 'SqlWriterConfig.java', 'SqlCaseOperator.java', 'SqlStdOperatorTable.java', 'SqlPrettyWriter.java', 'IntervalSqlType.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'SqlPrettyWriterTest.java', 'JdbcAdapterTest.java', 'SqlPrettyWriterTest.xml', 'PigConverter.java', 'PigRelOpTest.java', 'SqlDdlNodes.java']"
1c84234201fe2f69bf8e9d495c2b6177069a069f,"[CALCITE-3587] RexBuilder may lose decimal fraction for creating literal with DECIMAL type (Wang Yanlin)

DECIMAL is fixed point type, Float or Double is inexact,
throw exception for creating DECIMAL type with Float or Double",['40f5a0faaa4c5d974b0815ea2216d91551755e7b'],False,"['RexBuilder.java', 'RexBuilderTest.java']"
397f4b3c435e9311ea82f66af90df6d29c28bf17,Add doc for type coercion and SQL hints change,['54a6e3a78489e419477f5ca079bb1539ac284d6c'],False,['reference.md']
2282b952e553a04c1f051e1bc42cd5910eb25f45,"[CALCITE-3677] Add assertion to EnumerableTableScan constructor to validate if the table is suitable for enumerable scan

This is a workaround for CALCITE-3673.
TransientTable can only be implemented with interpreter,
so EnumerableTableScan should not be created for those tables.",['5cbe435eea5ec0ba8cbc7ddf8c2808936aea476c'],False,"['EnumerableRelImplementor.java', 'EnumerableTableScan.java', 'EnumerableTableScanRule.java', 'CalciteSystemProperty.java', 'RelOptTableImpl.java', 'TraitPropagationTest.java', 'LexEscapeTest.java', 'ScannableTableTest.java']"
5297b83aa7e1fa6de8ee5745c823d8b501f8414d,"[CALCITE-3719] Add hint option checker to customize the option
validation

* Add interface HintOptionChecker to let user validate each hint's
options
* Add customizable hint error handler",['2282b952e553a04c1f051e1bc42cd5910eb25f45'],False,"['build.gradle.kts', 'RelOptTable.java', 'ViewExpanders.java', 'HintOptionChecker.java', 'HintStrategyTable.java', 'package-info.java', 'SqlUtil.java', 'SqlHintsConverterTest.java']"
3092159056280ab1f3c284394ed99ae8211b3f6d,"Refine ColumnUniqueness for Subset(input=Sort)

It fixes StackOverflowError in FoodmartTest.test query id=5871
The optimizer generated dummy Project(Aggregate(Sort(Project(Aggregate(Sort(...
chains, and it was not able to see that extra aggregation adds nothing.

Now it figures out that columns already are unique, so it sees
that an extra Aggregate adds nothing.",['1e9b4da0573ec73d332d4e65fb7fd30491b4318d'],False,['RelMdColumnUniqueness.java']
9f67604c60d6ca99fc1cc8eb2182823e8f0a0c08,"Refine RuleQueue#addMatch: skip the match if it is not required for the phase

The net result is the same, however, it avoids inflating matchList.names set,
so the change slightly reduces the memory consumption and improves performance.",['bbb37fc071ea51d9127aea69a260235ed14f2879'],False,['RuleQueue.java']
536d5032c8a8a749601d5ff4664e6a2e0b8b7c94,[CALCITE-3675] SQL to Rel conversion is broken for coalesce on nullable field (DonnyZone),['e387deddb0cce39f5827de8744645286b2cb1d7f'],False,"['RexCallBinding.java', 'SqlCaseOperator.java', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml']"
5cfd8c31cea1bf5411e503b15714cab5fc1c0d0a,"[CALCITE-3723] Following the change to add hints to RelNode, deprecate the old constructors

Constructors for `Project`, `TableScan`, `Calc`, `Aggregate` and `Join`
introduce new parameter named ""hints"" which is a breaking change.",['536d5032c8a8a749601d5ff4664e6a2e0b8b7c94'],False,"['CassandraProject.java', 'CassandraTableScan.java', 'EnumerableAggregate.java', 'EnumerableBatchNestedLoopJoin.java', 'EnumerableCalc.java', 'EnumerableHashJoin.java', 'EnumerableMergeJoin.java', 'EnumerableNestedLoopJoin.java', 'EnumerableProject.java', 'EnumerableTableScan.java', 'JdbcRules.java', 'JdbcTableScan.java', 'Bindables.java', 'Aggregate.java', 'Calc.java', 'EquiJoin.java', 'Join.java', 'Project.java', 'TableScan.java', 'Hintable.java', 'LogicalAggregate.java', 'LogicalCalc.java', 'LogicalJoin.java', 'LogicalProject.java', 'LogicalTableScan.java', 'ProjectWindowTransposeRule.java', 'StarTable.java', 'TraitPropagationTest.java', 'RelOptRulesTest.java', 'PlannerTest.java', 'ElasticsearchAggregate.java', 'ElasticsearchProject.java', 'ElasticsearchTableScan.java', 'CsvTableScan.java', 'FileTableScan.java', 'GeodeAggregate.java', 'GeodeProject.java', 'GeodeTableScan.java', 'MongoAggregate.java', 'MongoProject.java', 'MongoTableScan.java', 'PigAggregate.java', 'PigJoin.java', 'PigProject.java', 'PigTableScan.java', 'history.md', 'SplunkTableScan.java']"
8fb5ca9898dc2c39a3b708a29f95a8904423c871,Cosmetic changes,['7e57379c0536e60e88164c98642484d2e328541c'],False,"['CompositeHintStrategy.java', 'ExplicitHintStrategy.java', 'HintStrategy.java', 'HintStrategyTable.java', 'NodeTypeHintStrategy.java', 'package-info.java']"
0196bb67a5255b7b0f9e297c74742c4d7203403d,"[CALCITE-3744] Duplicate rule matches when RelSet gets merged

Some times RelSet can get merged. e.g.

Each number represet Rel id, and they are in different RelSet.

 1            4
   \         /
     2      /
       \   /
         3
Assume in the rulequeue, we have rule match with name of 12, 23, 43. For
simplicity, omit the rule name, first digit represent the parent RelNode,
second represent the child.

If after some rule, we merged the set of 3 into the set of 2, and RelNode 4's
input is replaced by RelSubset of 2. We will retrigger rules and try to add
rulematch 12, 42, 43 into rule queue.

12 will be filtered out, because there is duplicate in the RuleMatch names set.
But for 43, it now has different rulematch digest with previous match, because
RelNode #4's input RelSubset changed, its digest also changed. So we can't
detect the duplication and will re-apply rulematch 43 twice.",['34e4a4ff9010b0a25c0a1546f012184a1a72e2e3'],False,"['RuleQueue.java', 'VolcanoRuleMatch.java']"
0b97f45752f111b56aa499b037077d27db82ec47,"[CALCITE-3756] RelSubset should not match operand(RelNode.class)

Even RelSubset is a subclass of RelNode, but they are quite different. RelNode
already fires these rules, it is not necessary to fire for RelSubset. More
importantly, it never worked due to CALCITE-3755.  In addition, it will waste
time to try to iterate class operands of RelSubset and try to match pattern
operand(RelNode), given that it never matches when ascending.

Also fixed https://issues.apache.org/jira/browse/CALCITE-3755",['bfd23dbdcdf43f95ef5597244320e5a3c7db582c'],False,"['AbstractRelOptPlanner.java', 'VolcanoRuleCall.java', 'JdbcAdapterTest.java']"
3c9e156aea4a246318e1fa9ea299adfc9479e20e,"[CALCITE-3751] JDBC adapter generates SQL with wrong aliases in GROUP BY ... ORDER BY query

In this particular query, RelToSqlConverter would generate something like

  SELECT x, SUM(y) FROM (
    SELECT x, SUM(y)
    FROM t
    GROUP BY x)
  ORDER BY 2

Note that 'SUM(y)' in the outer query is invalid; we should have
generated an alias for the 'SUM(y)' in the inner query, and
referred to that.

The problem was a 'ordinalMap', that maps columns called
'EXPR$n' to corresponding SqlNode. This map was global to the
RelToSqlConverter, so sometimes expressions would be used in
the wrong context.

I removed 'ordinalMap' and added a flag 'anon' which says whether
a consumer (e.g. INSERT or UNION or an enclosing SELECT) cares
about column names. If not, we remove trivial aliases like 'EXPR$0',
to make the SQL less noisy.",['78b3d979d1a7ae37f88c0b04484723fb03ec7f18'],False,"['RelToSqlConverter.java', 'SqlImplementor.java', 'SqlUtil.java', 'RelToSqlConverterTest.java', 'JdbcAdapterTest.java']"
792fbbf51bf576b5530081edebcad5c53ee07f3d,"Update Gradle: 6.1 -> 6.1.1

See https://docs.gradle.org/6.1.1/release-notes.html#fixed-issues",['cf755f27dce1fb9aa902f41528f48a326e31c51a'],False,['gradle-wrapper.properties']
d6fa25cd11625ad7b4b74dafbd0211c701b38d49,"[CALCITE-3765] Returns early when there is an existing operand when assigning operands solve order

* No tests there because the change is straight-forward
* Some cosmetic changes for the code",['c086877a8b7f7b47526d55e9e18dcb3576cdbaab'],False,"['RelOptRule.java', 'VolcanoPlanner.java', 'VolcanoPlannerPhaseRuleMappingInitializer.java', 'VolcanoRuleCall.java']"
ea21f7540f58e679cf148848972a441cf06f12e0,"[CALCITE-3768] VolcanoPlanner.changeTraitsUsingConverters() has parameter that's never used

Remove unused parameter and also remove a commented out if statement",['1baee8524a8daa9c67f08f83080e269fc5938bc5'],False,['VolcanoPlanner.java']
dac238c1f0617305ab83f0ce0145f92883c7cae9,"Color test results in Gradle output

The coloring is enabled by default except on Windows.
It can be configured via `-Pnocolor`, `-Pnocolor=true|false`.

Colors:
* red: errors > 0
* blue: skipped > 0 or totalTests == 0
* bold: test duration exceeds slowTestLogThreshold (2000 by default)",['6ea2fd03cbc366b673ac0adfcd246b2e3e7321dc'],False,"['build.gradle.kts', 'gradle.properties']"
15fe43421f8139cf8d8c305ebc2f1b859f7b657b,"Site: Update IntelliJ instructions with suggested and problematic versions

The majority of users who tried to build Calcite using Gradle and IntelliJ 2018.X encountered problems.",['e89e18d110df1859dd28d03262fe39e040b31b68'],False,['howto.md']
a09923ff8dcb707c5573b37e182308f90dfb52fe,"[CALCITE-3785] HepPlanner.belongToDag() doesn't have to use mapDigestToVertex (Xiening Dai)

To test whether or not a vertex belongs to DAG, we can simply do
graph.vertexSet().contains(vertex). There's no need to look up in
mapDigestToVertex map, which incurs overhead of creating the map key. This
problem was amplified by CALCITE-3713.

Close #1799",['10a5b8a89d319e6fed563e7e49518cfc960b93d6'],False,['HepPlanner.java']
dfdb3354c5f4bca1fe5a53a1aecff6ca4bc1a0c2,"[CALCITE-3792] Remove the generic type declaration of method

* The type inference of Scala code 'val mq = cluster.getMetadataQuery'
is failed if we have that generic type declaration for the Java method
* After this change, we need a explicit cast for RelMetadataQuery
sub-class
* Fix the RelMetadataTest to reset the RelMetadataQuery instance as
default after a test
* Also rename RelOptCluster#withHintStrategies to setHintStrategies
because it does not really return a new copy",['9b2a5592f3852a39225ec0b41b1768f533c825d0'],False,"['RelOptCluster.java', 'RelOptRuleCall.java', 'SqlToRelConverter.java', 'RelMetadataTest.java']"
8a890281761d4cf3073566ba1a7fcb483af4c5b0,"[CALCITE-3793] AssertionError throws for planner digest cache key when the rel type is not struct

Apache Flink and Apache Druid all the customize type for rel node which
is not a strict type.",['dfdb3354c5f4bca1fe5a53a1aecff6ca4bc1a0c2'],False,"['AbstractRelOptPlanner.java', 'HepPlanner.java', 'VolcanoPlanner.java']"
6a322f9fff51362744b326246e49590f850449bb,"[CALCITE-3769] Deprecate TableScanRule

* Deprecate TableScanRule and always invoke RelOptTable#toRel for
RelBuilder#scan
* RelOptTableImpl#toRel does not translate to EnumerableTableScan
anymore, the EnumerableTableScan conversion logic has been moved to
EnumerableTableScanRule
* Remove the BindableTableScanRule from the default prepare ruleset, we
only add it where we really need that
* Fix the plan change",['c5d43fe57a0998564343e1f8480f8e85cd788bdf'],False,"['EnumerableTableScanRule.java', 'RelOptAbstractTable.java', 'RelOptRules.java', 'RelOptTable.java', 'RelOptUtil.java', 'ViewExpanders.java', 'Prepare.java', 'RelOptTableImpl.java', 'RelFactories.java', 'TableScanRule.java', 'Programs.java', 'RelRunners.java', 'JdbcTest.java', 'RelBuilderTest.java', 'RelOptRulesTest.java', 'EnumerableJoinTest.java', 'EnumerableRepeatUnionHierarchyTest.java', 'EnumerableRepeatUnionTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'MatchTest.java']"
56d427a3e5dd7acd8eaf256fb3c77b0196f79b24,"[CALCITE-3799] Following CALCITE-3769, fix the slow tests

* Fix the RelOptMaterialization to always expand the StartTable
* Simplify the logic in EnumerableTableScanRule
* Also fix the plan diff introduced by other patches",['6a322f9fff51362744b326246e49590f850449bb'],False,"['EnumerableTableScanRule.java', 'RelOptMaterialization.java', 'LatticeTest.java']"
21c816829e71f2b72ff0f2bf3b130c835678d1e6,"[CALCITE-3794] RexSimplify should return early if there is no pulled up predicate when simplifying using predicates

Also some cosmetic changes.",['da1a2dd81a3f681e932039aa0c8569661573e1e5'],False,['RexSimplify.java']
8cf7b448e5e0fcc45d88f96379ac95b611f38bca,"Following [CALCITE-3763] Fix slow test failure (DonnyZone)

close apache/calcite#1806",['668792554cf7097d668bf794ef2ba5b1fd4956ee'],False,['LatticeTest.java']
5fa41609cb0fe310a0a11d86319d861423850a36,"[CALCITE-3771] TRIM Support for HIVE/SPARK Dialect (Dhirenda Gautam)

Fix-up (by Danny):
* Move all the common logic for Hive and Spark TRIM unparsing to
RelToSqlConverterUtil
* Refactor the tests to split Hive and Spark from BigQuery for some TRIM
cases

close apache/calcite#1785",['2ffd74abb665f4119ff30926f3944070d8a9d0ac'],False,"['HiveSqlDialect.java', 'SparkSqlDialect.java', 'RelToSqlConverterUtil.java', 'RelToSqlConverterTest.java']"
e1e5898f8975f2478862973c19799c8be45b8d83,"[CALCITE-3807] checkForSatisfiedConverters() is unnecessary

When VolcanoPlanner registers an abstract converter, it adds the converter into set.abstractConverters list, then calls checkSatisfiedConverter() to see if any converter is satisfied and can be remove from the list. But for every abstract converter, it always satisfies itself (changeTraitsUsingConverters() returns itself). Basically the converter would be removed from the list right after it's added. So this check is completely unnecessary and it slows down the planner.",['5fa41609cb0fe310a0a11d86319d861423850a36'],False,"['RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java']"
2515e9ff12a588a590f408b3660a96c3fa76cc01,"[CALCITE-3812] Refactor HintStrategy to HintPredicate

The HintStrategy was introduced in commit
https://github.com/apache/calcite/commit/52bc246d5e07510689635f407f4d9dc494b0af4d,
at that moment, we can only define the hint match rules for propagation,
and the class name is okey.

But with more components added to the HintStrategyTable(i.e. the
HintOptionChecker, the error hander, the excluded rules), i found the
""HintStrategy"" is mis-leading.

So i propose to rename HintStrategy to HintPredicate and
HintStrategyTable.Entry to HintStrategy.",['e1e5898f8975f2478862973c19799c8be45b8d83'],False,"['CompositeHintPredicate.java', 'ExplicitHintMatcher.java', 'ExplicitHintPredicate.java', 'HintPredicate.java', 'HintPredicates.java', 'HintStrategies.java', 'HintStrategyTable.java', 'NodeTypeHintPredicate.java', 'package-info.java', 'SqlHintsConverterTest.java']"
e96bf560c685b2bc8d916de42fe908906f43e2ee,"Following CALCITE-3769: Add BindableTableScanRule into the default ruleset

* Add BindableTableScanRule into the default ruleset, so there are 2
table implementations, the planner would choose the one with cheaper
cost
* Fix the cost estimation of BindableTableScan if there are no pushings
* Allows the Scannable table to have the EnumerableTableScan as impl
* For CsvTable and JsonTable in the example module, decoupling the logic
of runtime from Table#getRowType, so that these tables can implement as
ENUMERABLE convention(when there are no pushings)

(cherry picked from commit 2f1b4a911f15ce178374b605a2291a4336648dde)",['926478ee7d997a06a63fd6e9926436aafa42ac9f'],False,"['EnumerableTableScan.java', 'EnumerableTableScanRule.java', 'Bindables.java', 'RelOptUtil.java', 'StreamTest.java', 'EnumerableRepeatUnionHierarchyTest.java', 'EnumerableRepeatUnionTest.java', 'CsvFilterableTable.java', 'CsvScannableTable.java', 'CsvStreamScannableTable.java', 'CsvTable.java', 'CsvTranslatableTable.java', 'JsonEnumerator.java', 'JsonScannableTable.java', 'JsonTable.java', 'CsvTest.java']"
643f9b589877d557a2a1fd570e037200d078c83e,"Stop building zip archives when building using gradle

(cherry picked from commit a549342294062eba9aa3196e7e6d4bda36fa8291)",['e96bf560c685b2bc8d916de42fe908906f43e2ee'],False,['build.gradle.kts']
9b7b6316eaceec12762b209acec915262bda37eb,"[CALCITE-3825] Split AbstractMaterializedViewRule into multiple classes (addendum)

* Fix LatticeTest > testDistinctCount2()

Close apache/calcite#1836",['50cd53845e13f870f245bf9b77bb996b6b8d825c'],False,['LatticeTest.java']
ebc5070e27caa2cbe1cf3e3b78f6f93edfc4c6ce,Site: Fix links to javadoc,['4bd13283dbef1718af7a43f3162c588505ca744a'],False,"['README.md', '_config.yml', 'docs.yml', 'api.md', 'testapi.md', 'section_nav.html', 'docker-compose.yml']"
0f7dcfbffdf2e2405c835d22af78dac7124a728f,"[CALCITE-3819] Prune parent RelNode when merging child RelSet with parent RelSet

Suppose we have 2 RelSets:
RelSet A: rel1
RelSet B: rel2

rel1 is the parent of rel2.

If there is a transformation rule that transform rel1 to rel2, we will merge
RelSet A and B. During merge process, we can safely prune rel1 to avoid further
rule apply on rel1 and reduce search space, more importantly, avoid cyclic
reference.",['200a136dd3b2ca04a1d1283eb5a03a04388b1947'],False,"['RelSet.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java']"
91f5bb5589ca5b7c08b09969ad21c5e9bd18d293,"[CALCITE-3412] FLOOR(timestamp TO WEEK) gives wrong result

Upgrade to avatica-1.16.0, getting fix for [CALCITE-3199]
""DateTimeUtils.unixDateCeil should not return the same value as
unixDateFloor"".

Implement ""FLOOR(date TO timeUnit)"" for QUARTER, WEEK, and fix bugs in
YEAR, MONTH.",['b632152f5c159334c76245b8816c721edca84fd5'],False,"['RexImpTable.java', 'SqlOperatorBaseTest.java', 'JdbcTest.java', 'operator.iq']"
80e6b023d4b92b2b25908c52e10f50792787cef8,"[CALCITE-3753] Remove rule queue importance

Since we are going to execute all the rules anyway, sorting the rule matches
will do more harm than good.

Also removed ambitious and impatient mode. User could override checkCancel and
throw VolcanoTimeoutException when appropriate (i.e. exceed 60 seconds, exceed
1000 ticks etc.) so that the VolcanoPlanner will stop exhaustive searching and
return the best plan so far.

Close #1840",['4208d0ba6f2a749692fe64181a1373af07d55db5'],False,"['JdbcRules.java', 'AbstractRelOptPlanner.java', 'RelSet.java', 'RelSubset.java', 'RuleQueue.java', 'VolcanoPlanner.java', 'VolcanoRuleMatch.java', 'VolcanoTimeoutException.java', 'AggregateRemoveRule.java', 'FilterProjectTransposeRule.java', 'VolcanoPlannerTest.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MaterializationTest.java', 'ScannableTableTest.java', 'EnumerableCorrelateTest.java', 'EnumerableJoinTest.java', 'misc.iq', 'sub-query.iq', 'winagg.iq', 'GeodeSort.java', 'MongoAdapterTest.java', 'SparkAdapterTest.java']"
ebbba566fbdbdd0923adda596467090d708cc14b,"[CALCITE-3871] Remove dependency of org.apiguardian:apiguardian-api

Also fix the pigunit version to 0.16.0.",['989fc124976a5e701cce06b2f62988c8ccbb5988'],False,"['build.gradle.kts', 'build.gradle.kts', 'RelWriter.java', 'RexNode.java', 'RexUtil.java', 'Hook.java', 'SqlKind.java', 'gradle.properties', 'build.gradle.kts', 'API.java', 'EnumerableDefaults.java']"
56c4c4258132d1f56214a5b608391a3511cc9d5e,"[CALCITE-3885] Restore trace logging for rules queue and Volcano planner's internal state (Roman Kondakov)

After fixing CALCITE-3753 the opportunity of tracing the rules queue and
VolcanoPlanner search space state is disappeared: i.e. RuleQueue.dump() method
was removed. We should restore this opportunity because it affects planner's
debugging capabilities.

Close #1886",['7d4c96981d9ef6fa25289af99505e5a15ba51f69'],False,['RuleQueue.java']
a0ef3c9912d25d95f91fb6cf188abcc5b572c8c1,"[CALCITE-3660] Disable flaky test PigRelBuilderStyleTest

As described in CALCITE-1751, CALCITE-3660, all the tests in
PigRelBuilderStyleTest fail too often with exception 'Unable to open iterator
for alias t', which causes a lot of noise. Disable it until we fix it.",['56c4c4258132d1f56214a5b608391a3511cc9d5e'],False,['PigRelBuilderStyleTest.java']
0be29613612a377faab729e40b49962d9e822769,Site: Fix links to javadoc,['4a8e105933a7638bb672afca07ac6da380671edc'],False,['adapter.md']
8849b62e7baff84dcd4262f47809e87a38be7b10,"[CALCITE-3880] Add SortExchange support to RelFieldTrimmer (Krisztian Kasa)

Close #1879",['b4ad630d1d5674ae3dfc9c85615ffe991797c563'],False,"['RelDistributions.java', 'RelFieldTrimmer.java', 'RelFieldTrimmerTest.java']"
df3e3c652e3499ec03a224468fb2918752bae461,"[CALCITE-3876] RelToSqlConverter should not merge a Project that contains a window function that references a window function in input Project

Main fix is to RelToSqlConverter, to force a new sub-query to be created.

The problem in this case was not with ProjectMergeRule or with
RelBuilder.project, but I fixed those also.",['d0180d160120e5d775b000549b7edac30250a353'],False,"['RelOptUtil.java', 'SqlImplementor.java', 'RexOver.java', 'RelToSqlConverterTest.java', 'RelBuilderTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
4eaed593c9aee8df6ffe1f4bb7ec3d33a7cd0325,[CALCITE-3835] Overloaded table functions fail with an assertion error if param types differ,['15152b629c784bf7b82efe5bcbe5931ee18682c7'],False,"['SqlUtil.java', 'JdbcTest.java', 'Smalls.java']"
4e9870078fcaa7da9e475c94f43309cc3244fa22,"[CALCITE-3900] Add Config for SqlValidator

The SqlValidator now has 7 setXXX methods for all kinds of control flags,
which is hard for code evolving.

There is also no way to config these things through the FrameworkConfig.

Add a SqlValidator.Config to solve these problems.",['16c9c36f319b06ebcf1338f0e40e9de2ee912adf'],False,"['CalciteConnectionImpl.java', 'CalcitePrepareImpl.java', 'CalciteSqlValidator.java', 'PlannerImpl.java', 'SqlCallBinding.java', 'SqlFunction.java', 'SqlOperator.java', 'SqlWindow.java', 'SqlAdvisorValidator.java', 'SqlCaseOperator.java', 'SqlInOperator.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'FamilyOperandTypeChecker.java', 'SameOperandTypeExceptLastOperandChecker.java', 'SetopOperandTypeChecker.java', 'IdentifierNamespace.java', 'OrderByScope.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'FrameworkConfig.java', 'Frameworks.java', 'ImmutableBeans.java', 'ToLogicalConverterTest.java', 'SqlAdvisorTest.java', 'SqlTestFactory.java', 'SqlTestGen.java', 'SqlToRelTestBase.java', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java']"
f17367e6ae4814c035e234568e212ba23080e9dd,"[CALCITE-2970] Add AbstractConverter only between derived and required traitset

Before this patch, the VolcanoPlanner couldn't distinguish traitset derived
from child operators and traitset required by parent operators.
AbstractConverters are added between all of these traitsets no matter it is
derived or required, which causes the explosion of search space. e.g.

SELECT a,b,c,max(d) FROM foo GROUP BY a,b,c;
Aggregate
 +-- TableScan

For distributed system, suppose the Aggregate operator may require the
following traitsets from TableScan with exact match:
- Singleton distribution
- Hash distribution on a
- Hash distribution on b
- Hash distribution on c
- Hash distribution on a,b
- Hash distribution on b,c
- Hash distribution on a,c
- Hash distribution on a,b,c

VolcanoPlanner would add 7*7+8 = 57 abstract converters into the RelSet, e.g.
abstractConverter between [a] and [b,c], even if the satisfying match is
allowed, e.g. distribution on [a] statisfy distribution on [a,b,c], there are
still lots of abstract converters. But we only need 8.

This patch fixes above issue by adding state to RelSubset indicating whether
the added traitset is required or derived. The traitset can be both required
and derived. Only abstract converter from derived traitset to required traitset
is added.

By default, when adding a new RelNode to RelSet, we treat its traitset as
derived, when calling changeTraits, the traitset will be treated as required.
Unfortunately, almost all the RelNodes except AbstractConverter are added
through rule transformation, when the AbstractConverter is transformed to a
enforcing operator, e.g. PhysicalSort, the planner will still treat its
traitset as derived, which will trigger the creation of AbstractConverter
between this RelSubset and remaining RelSubsets in the RelSet. To avoid this
issue, though not clean but work, enforcing operator and AbstactConverter
should override isEnforcer() method to indicate the RelNode is added due to
the desired traitset is not satisfied. The user needs to judge by his/her own
whether to mark enforcing operator.

Close #1860",['ee1a9d2cacb67da4c5d7e8f0441c94a40dc69d66'],False,"['EnumerableConvention.java', 'Convention.java', 'AbstractConverter.java', 'RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java', 'AbstractRelNode.java', 'RelNode.java', 'Sort.java', 'RelMdCollation.java', 'JdbcTest.java', 'StreamTest.java', 'EnumerableCorrelateTest.java', 'EnumerableHashJoinTest.java', 'misc.iq', 'SqlTest.java', 'PigAdapterTest.java']"
e7095a23cf6e082077c887588216df3e3862c20d,"[CALCITE-3865] RelCollationTraitDef.canConvert should always return true

CALCITE-1148 introduced changes to RelCollationTraitDef to fix RelTrait
conversion bug, but it is just hiding the underlying issue and adding redundant
and unnecessary check to planner.

The root cause is that logical operators, especially LogicalSort can have
traits, which is a bad design decision, and AggregateReduceFunctionsRule and
RelBuilder fail to adjust the column mapping in RelTraitSet. The newly created
LogicalProject has collation on column 5 (it just copies its input's
RelTraitSet), but it only has 2 columns.

The ideal way is to add {{ apply(Mapping) }} method to RelTrait interface and
RelTraitSet, so that we have unified way to apply column mappings. But it will
be a breaking change, I am reluctant to do it now.

Close #1863",['f17367e6ae4814c035e234568e212ba23080e9dd'],False,"['RelTraitDef.java', 'RelSet.java', 'RelCollationTraitDef.java', 'RelBuilder.java']"
8639729ba186e824f4f44846671cdef4c663b363,"Add AvoidStarImport Checkstyle rule

It was removed by mistake in f2b437a337498ac6daece994645f0998f41aea26",['e7095a23cf6e082077c887588216df3e3862c20d'],False,['checker.xml']
b45799967e0cddf846849af508ccafc3e31e9ca2,"[CALCITE-2593] [CALCITE-2010] Plan error when transforming multiple collations to single collation

Just add test cases for JIRA CALCITE-2593 and CALCITE-2010, which is actually
fixed by f17367e (PR #1860). But if we turn off abstract converter for
EnumerableConvention, these problems still exist. The root cause is that
EnumerableAggregate and EnumerableUnion make collation request to its children,
but actually they don't require any collation. The fundamental change is fixing
RelCompositeTrait, but that is a long never end discussion.

Close #1914",['8639729ba186e824f4f44846671cdef4c663b363'],False,"['EnumerableAggregateRule.java', 'EnumerableUnionRule.java', 'JdbcTest.java']"
43261e4094a37ce23eb181a6a8f653dabc4db599,"[CALCITE-3881] SqlFunctions#addMonths yields incorrect results in some corner case (Zhenghua Gao)

SqlFunctions#addMonths use DateTimeUtils#ymdToUnixDate to calculate the
JDN(julian day number). But in some corner cases it yields incorrent
results. The root cause is: the algorithm of DateTimeUtils#ymdToUnixDate
requires reasonable month(1 to 12)[1], but SqlFunctions#addMonths may
pass in a month out of the reasonable range. This PR will fix it.

close apache/calcite#1890",['f1857aa305c99dca40ee3c940ee689d77f27eaee'],False,"['SqlFunctions.java', 'SqlOperatorBaseTest.java', 'SqlFunctionsTest.java']"
dfb842e55e1fa7037c8a731341010ed1c0cfb6f7,"[CALCITE-3924] Fix flakey test to handle TIMESTAMP and TIMESTAMP(0) correctly (neoReMinD)

The whole if block should be removed. Not only the DATETIME_TYPES has
this problem, all the types that allows precision could have such a
problem, the root cause is that BasicSqlType#toString and digest has different
handling of printing non specified precision.

One way to solve is to not fire caching of types without precision and
with default precision.

close apache/calcite#1916",['43261e4094a37ce23eb181a6a8f653dabc4db599'],False,"['BasicSqlType.java', 'SqlTypeFactoryTest.java']"
2798d90a8082adb294c3aadbad6d22d9228abf3e,"[CALCITE-3894] SET operation between DATE and TIMESTAMP returns a wrong result

The RelDataTypeFactory#leastRestrictive finds the common type for IN,
CASE and SET operations. For common type with DATE and TIMESTAMP, it
returns DATE. The root cause is that rules in SqlTypeAssignmentRule
decide that DATE is assignable from TIMESTAMP, which is actually wrong.
Although in Java, this assignment makes sense but that
does not mean it's true in SQL, because DATE and TIMESTAMP have
different time unit.

Fix the rules in SqlTypeAssignmentRule and let the implicit type
coercion rule get involved.",['dfb842e55e1fa7037c8a731341010ed1c0cfb6f7'],False,"['SqlTypeAssignmentRule.java', 'JdbcTest.java', 'TypeCoercionConverterTest.java', 'TypeCoercionTest.java', 'TypeCoercionConverterTest.xml']"
826c1cdd4b2aad0cd39576aaeedbf2053d196770,Avoid failures in SourceTest when filesystem does not support unicode paths,['fbfb58ebf68c07e15eb5e99b425d113fd3daa451'],False,['SourceTest.java']
33daf827b3b8cfa255dc7018d7fcfc9384a13542,Disable SourceTest#testAbsoluteFileToUrl until we really fix that,['826c1cdd4b2aad0cd39576aaeedbf2053d196770'],False,['SourceTest.java']
238cf037ebcd0e0e6f121f2304fa46a61c90632b,"[CALCITE-3934] Allow type-coercion in CONCAT operator

Such as CONCAT(123, 'abc', DATE '2020-04-17') yields '123abc2020-04-17'.

This change actually enables implicit type coercion for
all the operators with repeat type families.",['33daf827b3b8cfa255dc7018d7fcfc9384a13542'],False,"['CompositeOperandTypeChecker.java', 'AbstractTypeCoercion.java', 'TypeCoercionImpl.java', 'SqlValidatorTest.java']"
a136dc4884677bca7496a783c854220834440058,"[CALCITE-3939] Change UnionEliminatorRule and ProjectRemoveRule to auto pruning SubstitutionRule (Botong Huang)

UnionEliminatorRule and ProjectRemoveRule are both pruning rules for a RelNode.
They can also become SubstitutionRule with autoprune enabled.

Close #1927",['21777f13d39b112cf226a75334ca9f5bae9303c5'],False,"['ProjectRemoveRule.java', 'UnionEliminatorRule.java']"
789a2ae7f4de582c6de16c2bcec747372f941b44,"[CALCITE-3915] Add rule listener to report rule attempts and time at DEBUG log level (Xiening Dai)

1. Fix current VolcanoPlanner's rule listener to use MulticastRelOptListener so
multiple listeners can be added at the same time.
2. Create a RuleAttemptsListener that records attempts of each rule and the
time of rule firing. The listener is only added when logger is at DEBUG level,
or finer level.

Close #1910",['d3286ad4725fa97aae35c70f73ab768fabd409d8'],False,"['AbstractRelOptPlanner.java', 'HepPlanner.java', 'RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'CalciteTrace.java']"
21290006dd392e0ca1a45e952624abb0e0e66df7,"[CALCITE-3954] Always compare types using equals

Current interning of types use weak references.
Change from MUST intern to SHOULD intern, and always
compare types using equals.

We clearly want to do some interning, especially within a query, so that
there aren't hundreds of copies of the same record type all over the
place. But if people don't intern, or intern in different query-specific
caches, then the logic will still work.

If equals is written using the standard template
```java
return this == o
  || o instanceof TheType && field1 == o.field1 && field2 == o.field2
```
(that is, avoiding deep comparison if possible) then the performance
will be pretty much the same.",['f62d6b9a2f3dd877d4e2e5cbd2ff5d0d5f0efff1'],False,"['RelOptUtil.java', 'RelDataTypeImpl.java', 'RexLocalRef.java', 'RexUtil.java', 'SqlTypeUtil.java']"
e44beba286ea9049c5fd00c3a3b0e4a4f1c03356,"[CALCITE-3789] Supports Presto style unnest with items alias (Will Yu)

This patch also add a new PRESTO conformance.

Fix-up (by Danny):
- Fix SqlTypeUtil#flattenRecordType to not append field index if
  there are no duplicates
- Rename SqlConformance#allowAliasUnnestColumns to
  SqlConformance#allowAliasUnnestItems
- Fix RelStructuredTypeFlattener to not generate flattenned
  field based on struct field
- Promote SqlToRelConverter#convertFrom to allow specify field
  aliases
- Add comment to RelBuilder#uncollect

close apache/calcite#1811",['21290006dd392e0ca1a45e952624abb0e0e66df7'],False,"['EnumerableUncollect.java', 'Uncollect.java', 'ToLogicalConverter.java', 'MutableRels.java', 'SqlUnnestOperator.java', 'SqlTypeUtil.java', 'SqlAbstractConformance.java', 'SqlConformance.java', 'SqlConformanceEnum.java', 'SqlDelegatingConformance.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'SqlAdvisorTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'Fixture.java', 'MockCatalogReaderSimple.java', 'SqlToRelConverterTest.xml', 'PigRelBuilder.java']"
650ce466abf63309dcc0452d35a71dc497fb5f3c,"[CALCITE-3878] Create ArrayList with initial capacity when size is known (Xu Zhang)

Close #1876",['11c8868d6a0924c12a0d5c0df0ec4db4dadc3e0a'],False,"['CalciteMetaImpl.java', 'CalcitePrepareImpl.java', 'Prepare.java', 'RelRoot.java', 'TableScan.java', 'MutableRels.java', 'RelToSqlConverter.java']"
0e00d65532251aacc8fdcde703bc1d8ddf8dff16,"[CALCITE-3827] Reduce the time complexity of finding in-edges of a vertex in the graph (Liya Fan)

Add benchmark to measure performance difference;
Place inward & outward edges in VertexInfo;
Switch algorithms when removing vertices.

Based on benchmarking, change threshold to 35%, and convert
collection to HashSet; add benchmarking README. (Julian Hyde)",['650ce466abf63309dcc0452d35a71dc497fb5f3c'],False,"['AttributedDirectedGraph.java', 'DefaultDirectedGraph.java', 'DirectedGraph.java', 'README.md', 'DefaultDirectedGraphBenchmark.java']"
f1c0756f33b79904ca3a429bbff79ebf0103ece9,"[CALCITE-3962] Make JSON_VALUE operands varadic

Current JSON_VALUE always has 7 operands after parsing, the operands are
patched with defaults when creating the call.

This has some drawbacks:
- With a hard code operator there, it is impossible for
downstream project to override this operator;
- The operands are patched with defaults and JSON_VALUE is always
written to JSON_VALUE_ANY after sql-to-rel conversion, this makes
the RexCall and plan hard to understand, the JDBC SQL was also affected;
- The JSON_VALUE to JSON_VALUE_ANY re-written is problemic, because it
is hard to do a ANY type to other type conversion, both for Calcite and
downstream project.

Make these changes to solve the problems:
- Keep the operands as it is during the whole planning phrase, but only
transform the operands during runtime;
- Do not make JSON_VALUE to JSON_VALUE_ANY re-written anymore, the
explicit return type specification is used directly as the rex call
return type, remove JSON_VALUE_ANY because it is useless now;
- Promote the JSON_VALUE and JSON_EXISTS function signature prompt.",['9adf4a485c99edbb2c65f2662e47a92551b78f6c'],False,"['Parser.jj', 'RexImpTable.java', 'JsonFunctions.java', 'SqlInfixOperator.java', 'SqlJsonEmptyOrError.java', 'SqlJsonExistsErrorBehavior.java', 'SqlJsonValueEmptyOrErrorBehavior.java', 'SqlJsonValueReturning.java', 'Symbolizable.java', 'SqlDatetimePlusOperator.java', 'SqlDatetimeSubtractionOperator.java', 'SqlJsonExistsFunction.java', 'SqlJsonValueFunction.java', 'SqlRowOperator.java', 'SqlStdOperatorTable.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'RelToSqlConverterTest.java', 'SqlParserTest.java', 'SqlOperatorBaseTest.java', 'SqlJsonFunctionsTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
22bfcf05a74d26efa73594aa3a30bf596bebe8bb,Site: Change affiliation of Stamatis Zampetakis,['0c1f1e8db34953cb494d38552b9a4878bec2264b'],False,['contributors.yml']
e455734d2eea628e802a463ef18cd107ddb57874,"Fix rawclass issues

Fix up several raw classes in DiffRepository",['cecfece459b0f5f155c0498811985e083813aa20'],False,['DiffRepository.java']
022016611091fdc021686aaf1a44f5217b4b3d30,"[CALCITE-3965] Avoid DiffRepository lock contention

When many test cases using the same DiffRepository instances are running
on multiple threads, it causes lots of contention because all methods
are synchronized. One of the most used method is
DiffRepository#expand(String, String) which do not alter the state of
the tree in most cases.

As the method content itself is thread-safe, remove the synchronized
keyword as it does not bring any extra safety and just increase
artificially the contention around the lock.",['e455734d2eea628e802a463ef18cd107ddb57874'],False,['DiffRepository.java']
e081c5b4227a57defe47246d8ff3e6f7cce838e4,"[CALCITE-3866] ""numeric field overflow"" when running the generated SQL in PostgreSQL (Wenhui Tang)",['92eaf5654d4582399d901719be3c2977b279334c'],False,"['RelDataTypeSystemImpl.java', 'SqlSplittableAggFunction.java', 'RelToSqlConverterTest.java', 'SqlOperatorBaseTest.java', 'agg.iq']"
09b13cf6c61739d3ea15adf80b9dc0bc2b1ad0a0,"[CALCITE-3980] Redis-adapter redis connection is not reused when RedisTable is created (Xu Zhang)

When creating RedisTable via ModelHandler, it relies on an instance method
RedisEnumerator#deduceRowType to extract field type map, redis connection will
be established and closed every time a table is created, which is unnecessary
and redundant, so simply make the method a static one will solve the problem
and make it more performant. CsvTable implementation works the right way.

Close #1965",['2a4779f478fea75c1a7b075b8da50b20b6fda9bb'],False,"['RedisEnumerator.java', 'RedisTable.java']"
9c31d9e83dc718800a36f7719534f9f74633c8a7,"[CALCITE-3896] Top down trait request

1. Top-down trait request
2. Bottom-up trait derivation
3. Trait enforcement without AbstractConverter

How to use?

1. Enable top-down optimization by setting {VolcanoPlanner#setTopDownOpt(boolean)}
or add 'calcite.planner.topdown.opt=true' to saffron.properties config file.

2. Let your convention's rel interface extends {PhysicalNode}, see
{EnumerableRel} as an example.

3. Each physical operator overrides any one of the two methods:
{PhysicalNode#passThrough(RelTraitSet)} or
{PhysicalNode#passThroughTraits(RelTraitSet)} depending on your needs.

4. Choose derive mode for each physical operator by overriding
{PhysicalNode#getDeriveMode()}.

5. If the derive mode is {DeriveMode#OMAKASE}, override method
{PhysicalNode#derive(List)} in the physical operator, otherwise, override
{PhysicalNode#derive(RelTraitSet, int)} or
{PhysicalNode#deriveTraits(RelTraitSet, int)}.

6. Mark your enforcer operator by overriding {RelNode#isEnforcer()}, see
{Sort#isEnforcer()} as an example. This is important, because it can help
{VolcanoPlanner} avoid unnecessary trait propagation and derivation, therefore
improve optimization efficiency.

7. Implement {Convention#enforce(RelNode, RelTraitSet)} in your convention,
which generates appropriate physical enforcer. See
{EnumerableConvention#enforce(RelNode, RelTraitSet)} as example. Simply return
null if you don't want physical trait enforcement.

How does it work?

Let S# denote the seed physical operator in a RelSet after logical and physical
rules transformation, P# denote the physical operator generated by passing down
parent trait requirements, D# denote the physical operator generated by
deriving from child delivered traitSets.

The initial rel list state in a RelSet is as follows:
    cursor
      |
      V
     S1, S2

When we create a task for RelSubset1, the task will immediately pass the
subset's traitSet to seed operators, S1 and S2, now we have:
    cursor
      |
      V
     S1, S2, P1, P2

The subset task will create a optimization task for the relnode pointed by
cursor, and move cursor to next available physical operator S2. In the task for
S1, it will continue optimize its child nodes, which are RelSubsets. After
child inputs optimization is finished, S1 will derive new relnodes from
delivered subsets in input RelSet. Once task for S1 is completed, we have:
        cursor
          |
          V
     S1, S2, P1, P2, D1

The subset task continues scheduling task for S2, P1... until there is no more
relnode created for the RelSet, then we have:
                                cursor
                                  |
                                  V
     S1, S2, P1, P2, D1, D2, D3, null

When a task for another RelSubset2 is created, the task will try to pass down
the subset's traitSet to seed operator S1 and S2, now the RelSet looks like:
                                cursor
                                  |
                                  V
     S1, S2, P1, P2, D1, D2, D3, P3, P4

The process continues till there is no more subsets or relnodes created for the
RelSet.

See https://t.ly/MmaF for discussion.

Close #1953",['09b13cf6c61739d3ea15adf80b9dc0bc2b1ad0a0'],False,"['EnumerableConvention.java', 'EnumerableMergeJoin.java', 'EnumerableRel.java', 'EnumerableRules.java', 'EnumerableSortedAggregate.java', 'EnumerableSortedAggregateRule.java', 'CalciteSystemProperty.java', 'Convention.java', 'DeriveMode.java', 'OptimizeTask.java', 'RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java', 'PhysicalNode.java', 'RelCollations.java', 'CalciteTrace.java', 'CollationConversionTest.java', 'PlannerTests.java', 'TraitConversionTest.java', 'RelOptTestBase.java', 'TopDownOptTest.java', 'PlannerTest.java', 'TopDownOptTest.xml', 'saffron.properties', 'TpcdsTest.java']"
2730b4b696fcf1651acfa63e088f9c60c9369386,[CALCITE-3984] Support exchange operator in RelFieldTrimmer (Xu Zhaohui),['916f1e76da4ef5ee2de80384b4aaa61e5129b3a8'],False,"['RelFieldTrimmer.java', 'RelFieldTrimmerTest.java']"
ffa22f7e8b94fce1e7c297404453d13f959fd646,"[CALCITE-3979] Simplification might have removed CAST expression(s) incorrectly

ReduceExpressionsRule might have removed cast expressions and inadvertly changed the type of some subexpressions.
In case the rewriting have at some point arrived at: CAST(CAST(X,T),T) AND <(CAST(X,T),N)",['2e30293af7373b6c5fbcc5fa6505b49df2fba000'],False,"['ReduceExpressionsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
7be30db36d449e0a7fcc76b7d4647e141f4bc72d,"[CALCITE-3997] Logical rules matched with physical operators but failed to handle traits

Logical transformation rule, only logical operator can be rule operand, and
only generate logical alternatives. It is only visible to VolcanoPlanner,
HepPlanner will ignore this interface. That means, in HepPlanner, the rule that
implements TransformationRule can still match with physical operator of
PhysicalNode and generate physical alternatives.  But in VolcanoPlanner,
TransformationRule doesn't match with physical operator that implements
PhysicalNode. It is NOT allowed to generate physical operators in
TransformationRule, unless you are using it in HepPlanner.

This will also fix issue CALCITE-3968.

Close #1976",['ffa22f7e8b94fce1e7c297404453d13f959fd646'],False,"['RuleQueue.java', 'VolcanoPlanner.java', 'VolcanoRuleCall.java', 'AbstractJoinExtractFilterRule.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExtractProjectRule.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinJoinRemoveRule.java', 'AggregateJoinRemoveRule.java', 'AggregateJoinTransposeRule.java', 'AggregateMergeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'AggregateValuesRule.java', 'CalcMergeRule.java', 'CalcRemoveRule.java', 'CalcSplitRule.java', 'CoerceInputsRule.java', 'DateRangeRules.java', 'ExchangeRemoveConstantKeysRule.java', 'FilterAggregateTransposeRule.java', 'FilterCalcMergeRule.java', 'FilterCorrelateRule.java', 'FilterJoinRule.java', 'FilterMergeRule.java', 'FilterMultiJoinMergeRule.java', 'FilterProjectTransposeRule.java', 'FilterRemoveIsNotDistinctFromRule.java', 'FilterSetOpTransposeRule.java', 'FilterTableFunctionTransposeRule.java', 'FilterToCalcRule.java', 'IntersectToDistinctRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinAssociateRule.java', 'JoinCommuteRule.java', 'JoinProjectTransposeRule.java', 'JoinPushExpressionsRule.java', 'JoinPushThroughJoinRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToCorrelateRule.java', 'JoinToMultiJoinRule.java', 'JoinUnionTransposeRule.java', 'LoptOptimizeJoinRule.java', 'MatchRule.java', 'MaterializedViewFilterScanRule.java', 'MultiJoinOptimizeBushyRule.java', 'ProjectCalcMergeRule.java', 'ProjectCorrelateTransposeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinJoinRemoveRule.java', 'ProjectJoinRemoveRule.java', 'ProjectJoinTransposeRule.java', 'ProjectMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'ProjectRemoveRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectSortTransposeRule.java', 'ProjectToCalcRule.java', 'ProjectToWindowRule.java', 'ProjectWindowTransposeRule.java', 'PruneEmptyRules.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinFilterTransposeRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SemiJoinRemoveRule.java', 'SemiJoinRule.java', 'SortJoinCopyRule.java', 'SortJoinTransposeRule.java', 'SortProjectTransposeRule.java', 'SortRemoveConstantKeysRule.java', 'SortRemoveRule.java', 'SortUnionTransposeRule.java', 'SubQueryRemoveRule.java', 'SubstitutionRule.java', 'TableScanRule.java', 'TransformationRule.java', 'UnionEliminatorRule.java', 'UnionMergeRule.java', 'UnionPullUpConstantsRule.java', 'UnionToDistinctRule.java', 'ValuesReduceRule.java', 'StreamRules.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
4fbb930491283f2e68b91f69597958c2d33b2b18,"[CALCITE-3478] Restructure tests for materialized views (Jin Xing)

Motivation

Currently there are two strategies for materialized view matching:
Strategy-1. Substitution based (SubstitutionVisitor.java) [1]
Strategy-2. Plan structural information based (AbstractMaterializedViewRule.java) [2]
The two strategies are controlled by a single connection config of
""materializationsEnabled"". Calcite will apply strategy-1 firstly and then
strategy-2.

The two strategies are tested in a single integration test called
MaterializationTest.java, As a result we cannot run tests separately for a
single strategy, which leads to:

1. When some new matching patterns are supported by strategy-1, we might need to
update the old result plan, which was previously matched and generated by
stragegy-2, e.g. [3], and corresponding testing pattern for stragegy-2 will be
lost.
2. Some test failures are even hidden, e.g.
MaterializationTest#testJoinMaterialization2 should but failed to be supported
by stragegy-2. However strategy-1 lets the test passed.
3. Hard to test internals for SubstutionVisitor.java, e.g. [4] has to struggle
and create a unit test Of course we can add more system config or connection
config just for testing and circle around some of the dilemmas I mentioned
above. But it will make the code messy. Materialized view matching strategies
are so important and worth a through unit test and to be kept clean.

Additionally, this PR targets to clean the code of MaterializationTest.java. As
more and more fixes get applied, this Java file tends to be messy:

1. Helping methods and testing methods are mixed without good order.
2. Lots of methods called checkMaterialize. We need to sort it out if there's
need to add more params, e.g. [5]
3. Some tests are not concise enough, e.g. testJoinMaterialization9

Approach

1. Create unit test MaterializedViewSubstitutionVisitorTest to test strategy-1
2. Create unit test MaterializedViewRelOptRulesTest to test strategy-2
3. Move tests from MaterializationTest to unit tests correspondingly, and keep
MaterializationTest for integration tests.

[1] https://calcite.apache.org/docs/materialized_views.html#substitution-via-rules-transformation
[2] https://calcite.apache.org/docs/materialized_views.html#rewriting-using-plan-structural-information
[3] https://github.com/apache/calcite/pull/1451/files#diff-d7e9e44fcb5fb1b98198415a3f78f167R1831
[4] https://github.com/apache/calcite/pull/1555
[5] https://github.com/apache/calcite/pull/1504

Close #1560",['258f791eff12b4bac0fc11b4025aa5d99dcbbed1'],False,"['AbstractMaterializedViewTest.java', 'MaterializationTest.java', 'MaterializedViewRelOptRulesTest.java', 'MaterializedViewSubstitutionVisitorTest.java']"
b166b9a0c4a4420adf2d50933e8b32726566a7ff,"[CALCITE-4004] Show RelOptRuleOperand description in debugger to facilitate debugging

To facilitate IDE shows the operand description in the debugger, override
Object.toString() in RelOptRuleOperand, return the root operand description,
but highlight current operand's matches class with '*' in the description.

e.g. The following are examples of rule operand description for the operands
that match with LogicalFilter.

- SemiJoinRule:project: Project(Join(*RelNode*, Aggregate))
- ProjectFilterTransposeRule: LogicalProject(*LogicalFilter*)
- FilterProjectTransposeRule: *Filter*(Project)
- ReduceExpressionsRule(Filter): *LogicalFilter*
- PruneEmptyJoin(right): Join(*RelNode*, Values)

Close #1978",['2b1254bdec18f9e869f3287fb8ab471903e97829'],False,['RelOptRuleOperand.java']
ada6cc4309dd79e09abcbd67570b786d80340018,"[CALCITE-3972] Allow RelBuilder to create RelNode with convention (Xiening Dai)

1. Provide Convention.transformRelBuilder() to transform an existing RelBuilder
into one with specific convention.
2. RelBuilder provides withRelFactories() method to allow caller swap the
underlying RelFactories and create a new builder.
We can avoid ~1/3 of total rule firings in a N way join case with this change.

Close #1884",['b166b9a0c4a4420adf2d50933e8b32726566a7ff'],False,"['EnumerableConvention.java', 'EnumerableRelFactories.java', 'AbstractRelOptPlanner.java', 'Convention.java', 'JoinPushThroughJoinRule.java', 'RelBuilder.java', 'RelBuilderTest.java', 'algebra.md']"
0af3fd17a293d37125c7cca58257e5f6cbc1a76c,"[CALCITE-4011] Support trait propagation for EnumerableProject and EnumerableFilter (Rui Wang)

Trait propgation includes trait passthrough and trait derivation.

Trait passthrough could happen when Project satisfies the ordering
requirement that is defined by collations. Project will not satisfy the
ordering requirement when a requested collation is defined on a
non-trivial expression. Usually a RexCall is considered as non-trivial,
unless it is a CAST that perserves monotonicity,

Here is an example to demonstrate why trait cannot pass through when
collations are defined on non-trival expr:

select a, b*-1 as b
from foo
order by a, b;

which generates the logical plan:
LogicalSort
  LogicalProject
     LogicalTableScan

We cannot move the top sort down through the project. Because b*-1 will
change ordering to the opposite. The sort has to remain on top of
project for correness.

Trait derivaiton does something simlar to trait pass through, except for
one difference:
trait derivation can return parital collations that are derived from
child. For example, if [a, b, c, d] is derived from child, and if c is
defined on a non-trival expr, then [a, b] will be returned cause it
might be useful for parents.

Another example to show why trait derivation could be useful to reutrn
partial collations:

select a, b
from (
 select a, b, c*-1, d
 from foo
 order by a, b, c, d
)
order by a, b;

In this example, even though the inner project does not preserve the
total ordering for inner sort, but the outer sort only want to sort on
[a, b], thus if inner project can derive [a, b], the outer project will
not need the top sort or enforce a sort for its input.

After top-down optimization is enabled, trait propagation for EnumerableProject
and EnumerableFilter is supposed to replace ProjectSortTransposeRule and
SortProjectTransposeRule.

Close #1985",['abe772018a6adb5007429e0c1c83b6e7d83a1c71'],False,"['EnumerableConvention.java', 'EnumerableFilter.java', 'EnumerableMergeJoin.java', 'EnumerableProject.java', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'CalciteSystemProperty.java', 'OptimizeTask.java', 'CalcitePrepareImpl.java', 'TopDownOptTest.java', 'PlannerTest.java', 'TopDownOptTest.xml', 'saffron.properties', 'TpcdsTest.java']"
61bba252075abad42f4b239636367acead838144,"[CALCITE-4031] Remove code to be removed before 1.24

* Remove code to be removed before 1.24;
* Make sure that any code labelled @Deprecated is followed by a comment
'to be removed before x.x';
* Fix some code which uses Bug.upgrade();
* Some cosmetic changes.",['af976e9d4caa9588db8e413a58468760f3c1c0d6'],False,"['CalciteConnectionProperty.java', 'Bindables.java', 'ContextSqlValidator.java', 'AbstractRelOptPlanner.java', 'RelOptPlanner.java', 'RelTraitDef.java', 'VolcanoPlanner.java', 'HintOptionChecker.java', 'HintStrategy.java', 'HintStrategyTable.java', 'RelHint.java', 'DateRangeRules.java', 'RexUtil.java', 'Hook.java', 'SqlFunctions.java', 'SqlAdvisor.java', 'SqlSimpleParser.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'AbstractTypeCoercion.java', 'TypeCoercion.java', 'ImmutableIntList.java', 'AbstractMaterializedViewTest.java', 'CalciteAssert.java', 'Functions.java', 'FunctionTest.java']"
6273b92d95c7cd7116e57e267507760b3445a5f0,"Oops!

Fix bad HTML in javadoc.",['2fb963c139abc7f655e237c78157f2e4983c4709'],False,['AbstractMaterializedViewTest.java']
8daba770396193f91d967d0e649d42f1057e0d95,"[CALCITE-3946] Add parser support for MULTISET/SET and VOLATILE modifiers in CREATE TABLE statements (Drew Schmitt)

The syntax for these statements is:

  CREATE TABLE [SET|MULTISET] [VOLATILE] <table_name> [IF NOT EXISTS] (<column_name> <data_type>, ...);

Support is added by extending the Babel parser.

Rename 'isVolatile' to 'volatile_' (the 'is' prefix is for
methods, not fields; the '_' suffix is necessary because
'volatile' is a Java keyword) and and 'SetType' to
'TableCollectionType'.

Close apache/calcite#1938",['c0f102d2013a8f4d2903ec259449f5bd668eec30'],False,"['config.fmpp', 'parserImpls.ftl', 'Babel.java', 'SqlBabelCreateTable.java', 'TableCollectionType.java', 'BabelParserTest.java', 'SqlCreateTable.java']"
3fa29e171d5ba4a23558b2bc6574fee359e24ff0,"[CALCITE-2997] In SqlToRelConverter and RelBuilder, add option to avoid pushing down join condition

Add options SqlToRelConverter.Config.isPushDownJoinCondition(),
default true, and RelBuilder.Config.pushJoinCondition(),
default false. Default behavior for both classes is unchanged.

Refactor SqlToRelConverter to create joins using RelBuilder.
This means that join conditions are now simplified; to
compensate, we turn off simplification in a few tests.",['0d5e4bc556bb4e0cec6f376f395337ccfdf9c91c'],False,"['SqlToRelConverter.java', 'RelBuilder.java', 'RelToSqlConverterTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RexTransformerTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml']"
df5f4470e4257e8e7057664d4af3af3f37b6559b,"[CALCITE-3981] Volcano.register should not return stale subset (Botong Huang)

When a subset is registered, registerImpl() and registerSubset() currently
simply returns the subset itself. The problem is that subset can become stale
when relSets get merged (for example in ensureRegistered() and registerSubset()
""merge(set, subset.set)""). As a result, a stale subset might be returned from
registerImpl, and the newly registering subtree might get registered
recursively on top of the stale subset (see AbstractRelNode.onRegister()). This
is a leak because once a relSet is merged into others and becomes stale, it
should not be used to connect new relNodes.

With CALCITE-3755, subsets can now be directly matched by rules. This opens
another source of stale subset leak: (1) An active subset gets matched, the
RuleMatch gets queued in RuleQueue. (2) The subset becomes stale due to relSet
merge. (3) The rule match in (1) is popped from queue and fired. (4) In OnMatch
the rule gets the stale subset, builds new rels on top of it and regsiter the
new rels. In this case, the entire new rel subtree will be registered on top of
the stale subset as is.

Close #1966",['29f798fb6919f24d95776658b7e659af179a8b15'],False,['VolcanoPlanner.java']
feae6fbc328e3a7c87693951d1623f8b47ccea59,"[CALCITE-4030] Reinstate assertion check for trait derivation in OptimizeTask

In addition, use min value between seed size and set rels size. Because some
logical operators, like LogicalProject, LogicalFilter, may induce trait from
input during creation, which cause the newly created logical operator without
any trait can't find equiv classes in MEMO. After all the logical and physical
rules applied, during trait propagation, after a new operator with new traitset
is derived, it may find that the same operator already exists in other RelSet,
causing the RelSet merge, so the rel size may be different with seed size. This
is wrong and extremely bad practice, I would not encourage doing this.",['721ac8c21fb3a33dc85e677434ec7d716f9aa509'],False,['OptimizeTask.java']
dcc76cede53c7971bc9c3755d9261e766aa63b66,"[CALCITE-4007] MergeJoin collation check should not be limited to join key's order

Given MergeJoin on foo.a=bar.a and foo.b=bar.b,
The collation check on MergeJoin always require it is sorted by (a,b), but
after 1.23.0 calcite can generate MergeJoin on collation of (b,a), or even
(a,b,c), (b,a,c), which are all legit. We should relax the check condition.

This also fixed CALCITE-4050.

Close #2010",['eedd40bea825e0a00f5e463dd1f10c94eb233750'],False,"['EnumerableMergeJoin.java', 'RelCollation.java', 'RelCollations.java', 'RelMdCollation.java', 'ImmutableIntList.java', 'RelCollationTest.java', 'SqlHintsConverterTest.java', 'SqlHintsConverterTest.xml']"
8dec7ba9a7c4969eb2e376c6f80f529e52f884e3,"Following CALCITE-4031, some code style promotion

* Remove useless code in SqlValidatorImpl and SqlToRelConverter
* Mark SqlValidator#setValidatedNodeType interval instead of deprecated
* Implement Symbolizable where possible
* Some cosmetic changes",['d98f6c7b1fb2d71133b606b2f178ee80f39525b4'],False,"['RelOptNode.java', 'JoinConditionType.java', 'JoinType.java', 'SqlExplain.java', 'SqlExplainFormat.java', 'SqlExplainLevel.java', 'SqlInsertKeyword.java', 'SqlJdbcDataTypeName.java', 'SqlMatchRecognize.java', 'SqlSelectKeyword.java', 'SqlWindow.java', 'SqlTrimFunction.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'AbstractTypeCoercion.java', 'SqlToRelConverter.java']"
f577b7e3d91191051cfdaade27e0a74f3603648a,"[CALCITE-3724] Presto dialect implementation

Fixup (by Danny):
- Add a new tool RelToSqlConverterUtil#specialOperatorByName and remove
ClickHouseSqlDialect.CLICKHOUSE_SUBSTRING
- Remove the common code in PrestoSqlDialect and reuse codes from other
dialect instances

close apache#calcite#1776",['ac51ce70b79f58e463c409f3b36f6ba2790b4369'],False,"['SqlDialect.java', 'SqlDialectFactoryImpl.java', 'ClickHouseSqlDialect.java', 'PrestoSqlDialect.java', 'RelToSqlConverterUtil.java', 'RelToSqlConverterTest.java']"
69f25863f5f4197c17927a39a82cbf1cffd12b80,"[CALCITE-3786] Add Digest interface to enable efficient hashCode(equals) for RexNode and RelNode

* Add class Digest used to identify the node;
* There is a pre-computed hashcode to speedup #hashCode and #equals;
* Change RexCall to use object#equals instead of pure string digest
comparison;
* We only support RexInputRef normalization which is the most common
case;
* Remove RexNode#toStringRaw because it makes the thing complicated,
RexNode can always be normalized(default true).",['978bb7ea44969351468d1b5e240e8f57af7e5770'],False,"['JdbcRules.java', 'AbstractRelOptPlanner.java', 'Digest.java', 'MaterializedViewSubstitutionVisitor.java', 'RelOptNode.java', 'RelOptUtil.java', 'HepPlanner.java', 'HepRelVertex.java', 'RelSubset.java', 'VolcanoPlanner.java', 'AbstractRelNode.java', 'RelNode.java', 'RelWriter.java', 'Match.java', 'Window.java', 'RelJsonWriter.java', 'RelWriterImpl.java', 'RelMdExpressionLineage.java', 'RelToSqlConverter.java', 'JoinProjectTransposeRule.java', 'ProjectWindowTransposeRule.java', 'MaterializedViewAggregateRule.java', 'MaterializedViewJoinRule.java', 'MaterializedViewRule.java', 'RexCall.java', 'RexNode.java', 'RexOver.java', 'RexSubQuery.java', 'SqlKind.java', 'SqlStdOperatorTable.java', 'LatticeSuggesterTest.java', 'RelOptUtilTest.java', 'TraitPropagationTest.java', 'VolcanoPlannerTest.java', 'DateRangeRulesTest.java', 'RexCallNormalizationTest.java', 'RexProgramTest.java', 'RexProgramTestBase.java', 'RexSqlStandardConvertletTableTest.java', 'HepPlannerTest.java', 'JdbcAdapterTest.java', 'LatticeTest.java', 'MaterializedViewRelOptRulesTest.java', 'MaterializedViewSubstitutionVisitorTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RexTransformerTest.java', 'SqlHintsConverterTest.java', 'EnumerableCorrelateTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'TopDownOptTest.xml', 'blank.iq', 'sub-query.iq', 'DruidRules.java', 'PigToSqlAggregateRule.java']"
c823343ef5ce1ffbef07a8c90cca8ed2e15678d9,"[CALCITE-4075] Mock table 'EMPNULLABLES' should allow nulls in all non-pk columns

The name of the table implies that all columns are nullable so to avoid confusion 'ENAME' is also made nullable.",['4389a9c4331edee945d71f8f7c00ec8236cdd0f2'],False,"['SqlValidatorTest.java', 'MockCatalogReaderSimple.java']"
af3bca328a40d2d6515ea00e2094974cc725d4c3,"[CALCITE-3786] Make digestEquals and digestHash available to be overridden

By default #digestEquals() and #digestHash() collect digest attributes from
compute hash code. This should work well for most cases. If the method is a
performance bottleneck for your project, or the default behavior can't handle
your scenario properly, you can choose to override #digestEquals() and
Only these operators are changed to override the default behavior, for
performance and demonstration purposes. All the other operators remain
unchanged.

Close #2044",['b0b435cae05d2d96326e3f7165bfaea4c2b28e52'],False,"['RelOptNode.java', 'HepRelVertex.java', 'AbstractRelNode.java', 'RelNode.java', 'Filter.java', 'Join.java', 'Project.java', 'LogicalFilter.java', 'LogicalJoin.java', 'LogicalProject.java', 'RelDataType.java']"
dae53ef7917c46f6d5593477b2ef81b16427c541,"[CALCITE-3224] New implementation of RexNode-to-Expression code generation

Fixes various issues where, due to common sub-expression
elimination, a guarded value would be accessed before the
condition had been evaluated. For example, division-by-zero
occurs if the quotient is computed before the zero check.

Issues fixed:
 * [CALCITE-3142] NullPointerException when rounding a
   nullable numeric
 * [CALCITE-3143] Dividing by NULLIF may cause
   ""ArithmeticException: Division by zero""
 * [CALCITE-3150] NullPointerException when UPPER is repeated
   and combined with LIKE
 * [CALCITE-3717] Dividing by nullable numeric throws
   ""ArithmeticException: Division by zero""

Restore type to RexCall.equals, necessary to distinguish CAST calls (a
bug introduced by [CALCITE-3786]).

Close apache/calcite#1347",['6f90acaaac962f666741dae8fa20170e1d9a71e4'],False,"['NullPolicy.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'RexCall.java', 'TableFunctionImpl.java', 'SqlOperatorBaseTest.java', 'JdbcTest.java', 'MaterializedViewRelOptRulesTest.java', 'ReflectiveSchemaTest.java', 'EnumerableCalcTest.java', 'misc.iq']"
2d6e57f00e6ade5ef534bb4404184a44c2f149f8,"[CALCITE-4033] Does not produce parenthesized table expressions for UNNEST (Rui Wang)

Before this change, Calcite parser produces ""(UNEST(...))"". However, Calcite parser fails to parse UNNEST as parenthesized table expressions: ""JOIN (SELECT * FROM ^(UNNEST(...))^)"". This change stops produces parenthesized table expressions for UNNEST to fix this problem.

close apache/calcite#2025",['3e7349f78d3edf6e6c7f2ca93aebed94f0f6aeb1'],False,"['SqlKind.java', 'SqlParserTest.java']"
640da7c6d85c3e83fe38fb45d7f23ef5e1000c4e,"[CALCITE-4097] Avoid requesting unnecessary trait request when deriving traits

If the child subset is used to derive new traits for current relnode, the
subset will be marked REQUIRED when registering the new derived relnode and
later will add enforcers between other delivered subsets.  e.g. a MergeJoin
request both inputs hash distributed by [a,b] sorted by [a,b]. If the left
input R1 happens to be distributed by [a], the MergeJoin can derive new traits
from this input and request both input to be distributed by [a] sorted by
[a,b]. In case there is a alternative R2 with ANY distribution in the left
input's RelSet, we end up with requesting hash distribution [a] on alternative
R2, which is unnecessary and waste, because we request distribution by [a]
because of R1 can deliver the exact same distribution and we don't need to
enforce properties on other subsets that can't satisfy the specific trait
requirement.",['2d6e57f00e6ade5ef534bb4404184a44c2f149f8'],False,"['OptimizeTask.java', 'RelSet.java', 'RelSubset.java']"
c2df42eff1615bfcd46ae3db5099c9785b04d420,"[CALCITE-4077] Exception when joined with built-in table functions

The scope of SqlWindowTableFunction is special because all its operands
(except the first) should have the fucntion's first operand's scope, the
first operand is always an explicit table reference.

While this is not the perfect solution, the more proper way is to
refactor the CURSOR constructor, and always uses its queries scope. The
current CURSOR has some problems:

* It always has a type with name SqlTypeName#CURSOR, in the table
function senario, it is hard to do an auxiliary fields type infernece;
* It finally translates as an invocation with format ""cast($0): CURSOR"", the '$0' means
the first input, which is a wrong translation;
* It does not belong to the SQL standard.

A 'TABLE' constructor may be a good substitution.",['640da7c6d85c3e83fe38fb45d7f23ef5e1000c4e'],False,"['SqlHopTableFunction.java', 'SqlTumbleTableFunction.java', 'SqlWindowTableFunction.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
113892eda6ffee97fd1249e3910cb9ecd62d4a1f,Site: Remove '(for Calcite committers)' suffix from headers in section dedicated to committers,['e7aca6914c65bd812a9b177c438f687b77e090af'],False,['howto.md']
f64cdcbb9f6535650f0227da19640e736496a9c3,[CALCITE-4104] Add automatically link to GitHub PR and 'pull-request-available' label to issues,['113892eda6ffee97fd1249e3910cb9ecd62d4a1f'],False,['.asf.yaml']
be9a4e177957ea07498e680269ceff126a170317,"[CALCITE-4115] Improve the prompt of using SQL keywords for sql parser

When the parser encounters a reserved-keyword and throws, change the
error message format to:

Incorrect syntax near the keyword '{keyword}' at line {line_number}, column {column_number}.

The new format indicates that the next token is a keyword clearly so
that user can choose to use a non-reserved keyword or quotes the keyword instead.",['3fb68f6c22a7bcbc4cb1fff114bc911b1e31c4de'],False,"['Parser.jj', 'SqlParser.java', 'SqlParserUtil.java', 'SqlParserTest.java', 'ExtensionSqlParserTest.java', 'SqlOperatorBaseTest.java', 'SqlValidatorTest.java']"
23b26b6287315cc2cd236e705bb651077488fc5c,"In preparation for [CALCITE-3923] and [CALCITE-4079], deprecate fields and methods that will be removed between 1.24 and 1.25

Also, in RelNode, change some methods from 'to removed before 2.0'
to 'to be removed before 1.25'. The methods are sDistinct(),
isKey(ImmutableBitSet), getQuery(), getRows(), getVariablesStopped(),
computeSelfCost(), isValid(boolean), getCollationList(), getChildExps().",['85263c864d910ecd171fcf59d9924ad647d0352a'],False,"['CassandraRules.java', 'CassandraTableScan.java', 'CassandraToEnumerableConverterRule.java', 'EnumerableBindable.java', 'EnumerableInterpreterRule.java', 'EnumerableRules.java', 'JdbcConvention.java', 'Bindables.java', 'Interpreter.java', 'NoneToBindableConverterRule.java', 'LatticeSuggester.java', 'RelOptMaterialization.java', 'RelOptMaterializations.java', 'RelOptRules.java', 'RelOptUtil.java', 'AbstractRelNode.java', 'RelNode.java', 'BuiltInMetadata.java', 'AbstractMaterializedViewRule.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinJoinRemoveRule.java', 'AggregateJoinRemoveRule.java', 'AggregateJoinTransposeRule.java', 'AggregateMergeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'AggregateValuesRule.java', 'CalcMergeRule.java', 'CalcRemoveRule.java', 'CalcSplitRule.java', 'CoreRules.java', 'ExchangeRemoveConstantKeysRule.java', 'FilterAggregateTransposeRule.java', 'FilterCalcMergeRule.java', 'FilterCorrelateRule.java', 'FilterJoinRule.java', 'FilterMergeRule.java', 'FilterMultiJoinMergeRule.java', 'FilterProjectTransposeRule.java', 'FilterRemoveIsNotDistinctFromRule.java', 'FilterSetOpTransposeRule.java', 'FilterTableFunctionTransposeRule.java', 'FilterTableScanRule.java', 'FilterToCalcRule.java', 'IntersectToDistinctRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinAssociateRule.java', 'JoinCommuteRule.java', 'JoinExtractFilterRule.java', 'JoinProjectTransposeRule.java', 'JoinPushExpressionsRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToCorrelateRule.java', 'JoinToMultiJoinRule.java', 'JoinUnionTransposeRule.java', 'LoptOptimizeJoinRule.java', 'MatchRule.java', 'MaterializedViewFilterScanRule.java', 'MultiJoinOptimizeBushyRule.java', 'ProjectCalcMergeRule.java', 'ProjectCorrelateTransposeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinJoinRemoveRule.java', 'ProjectJoinRemoveRule.java', 'ProjectJoinTransposeRule.java', 'ProjectMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'ProjectRemoveRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectTableScanRule.java', 'ProjectToCalcRule.java', 'ProjectToWindowRule.java', 'ProjectWindowTransposeRule.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinFilterTransposeRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SemiJoinRemoveRule.java', 'SemiJoinRule.java', 'SortJoinCopyRule.java', 'SortJoinTransposeRule.java', 'SortProjectTransposeRule.java', 'SortRemoveConstantKeysRule.java', 'SortRemoveRule.java', 'SortUnionTransposeRule.java', 'SubQueryRemoveRule.java', 'UnionEliminatorRule.java', 'UnionMergeRule.java', 'UnionPullUpConstantsRule.java', 'UnionToDistinctRule.java', 'ValuesReduceRule.java', 'MaterializedViewOnlyAggregateRule.java', 'MaterializedViewOnlyFilterRule.java', 'MaterializedViewOnlyJoinRule.java', 'MaterializedViewProjectAggregateRule.java', 'MaterializedViewProjectFilterRule.java', 'MaterializedViewProjectJoinRule.java', 'MaterializedViewRules.java', 'SqlDialect.java', 'Programs.java', 'TraitPropagationTest.java', 'VolcanoPlannerTest.java', 'ToLogicalConverterTest.java', 'RelToSqlConverterTest.java', 'SortRemoveRuleTest.java', 'RelFieldTrimmerTest.java', 'HepPlannerTest.java', 'InterpreterTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MaterializedViewSubstitutionVisitorTest.java', 'MutableRelTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RexShuttleTest.java', 'SqlHintsConverterTest.java', 'SqlToRelConverterTest.java', 'TopDownOptTest.java', 'EnumerableCorrelateTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'ElasticsearchTableScan.java', 'CsvProjectTableScanRule.java', 'CsvRules.java', 'CsvTableScan.java', 'PigTableScan.java', 'PigRelBuilderStyleTest.java', 'PigConverter.java', 'EnumerableToSparkConverterRule.java', 'SparkRules.java', 'CodeGenerationBenchmark.java']"
8f1fabb7e0b661e33a85038a51db9f771e74dd54,"Following [CALCITE-4115], add expected tokens to the error message

Add the expected tokens so that the non-identifier context error
messages does not become worse.",['7ab643565a695cd46b6013392874c250fc0cb5a0'],False,['Parser.jj']
8bfc3804ebcf08a9b4015be5f9b7dac92cdbe6fa,"[CALCITE-3936] JDBC adapter, when generating SQL, changes target of ambiguous HAVING clause with a Project on Filter on Aggregate

We achieve this with a significant change to SqlImplementor:
before you convert a RelNode to a SqlNode that represents a
SELECT, you now have to declare up-front which clauses you
are going to add. This gives SqlImplementor the information
to decide where to make the 'cut' between a query and a
sub-query, and therefore it knows what column aliases are
going to be in scope in a GROUP BY or HAVING clause.

Rename 'visitChild' method to 'visitInput';
deprecate varargs version of 'builder' method.

Close apache/calcite#2047",['76ec79728847427f27706da2c05c4e3c7ab29f95'],False,"['JdbcToEnumerableConverter.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'QuerySqlStatisticProvider.java', 'RelToSqlConverterTest.java', 'PigConverter.java', 'PigRelToSqlConverter.java', 'JdbcToSparkConverter.java']"
88d4de0f800b84ae10a7a5be8a6c96eeb30eedf7,"[CALCITE-4124] Stop invalidating metadata cache in VolcanoRuleCall

After CALCITE-2018, we don't need to invalidate metadata cache when a new
RelNode is generated during rule transformation.",['6bb7e2d0b65ec3c7a0d82c92ca0564f8caec4af5'],False,['VolcanoRuleCall.java']
a4fa05458840cfdd93fb5cba16d102b06197539d,"[CALCITE-4073] Add a new component RexNormalize for more effect rex nodes normalization (part1)

* Add a new component named RexNormalize
* By default, we only normalize the RexCalls during planning phrase, and
there is no way to normalize it when constructing the calls now
* Recover the plan diffs
* Changes the RexCall#equals to be semantic equivalent, which i think is
not a good design, we should promote to have a digest abstraction just
like RelNode",['9accb166b50417763a34a1d5664ab23ae12716fd'],False,"['RexCall.java', 'RexNode.java', 'RexNormalize.java', 'SqlKind.java', 'SqlOperator.java', 'SqlTypeUtil.java', 'RexCallNormalizationTest.java', 'RexNormalizeTest.java', 'JdbcAdapterTest.java', 'LatticeTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'EnumerableCorrelateTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'TopDownOptTest.xml', 'blank.iq', 'sub-query.iq']"
7a462f2b2f78aa12068b691c1e423ea4c8a825e4,Update history doc to add breaking changes,['7650466bc8de345d567e7a26f0cc4e43411bfbf8'],False,['history.md']
a412ac154db7e8ef952092bec3c42b9ccf2f928a,"[CALCITE-4114] Remove method CalciteAssert.forceDecorrelate (Jiatao Tao)

Remove because its name is misleading.

close apache/calcite#2073",['8a459d9b17a9403e4e1539ea1c3c8d8f39e30a12'],False,['CalciteAssert.java']
b306668d796a19ade127dce7b392f970cffd4b39,[CALCITE-2854] Codegen compile error when implementing unary minus function with data type BigDecimal (Qi Yu),['a412ac154db7e8ef952092bec3c42b9ccf2f928a'],False,"['RexImpTable.java', 'BuiltInMethod.java', 'ReflectiveSchemaTest.java']"
f03b4559f1d79ef1886cdf79bc50e039640c7f50,"Remove duplicate codes and fix typos (Auxten, Chunwei Lei)

Close apache/calcite#2066",['b306668d796a19ade127dce7b392f970cffd4b39'],False,"['SqlBinaryOperator.java', 'AbstractMaterializedViewTest.java']"
998cd83ebe2fcd7ff3ee565299fed6e199269715,"[CALCITE-3923] Refactor how planner rules are parameterized

Create operands using a builder interface, OperandBuilder, and
deprecate methods RelOptRule.operand etc.

The change is backwards compatible, in the sense that
existing rule constructors are deprecated but still work.
From now on, to create rules, call RelOptRule.Config.toRule()
(which calls the rule's (Config) constructor).

Sub-classes of ConverterRule are a little different.  They
don't need their own sub-class of Config.  You just need to
call Config.withRuleFactory to specify the constructor of the
sub-class of ConverterRule.

Move rule instances into holder classes such as CoreRules,
MaterializedViewRules. Deprecate existing rule INSTANCE fields
(to be removed in 1.25). Deprecate previous rule constructors
(to be removed in 2.0).

Describe how to write rules in howto and tutorial.

Remove rule instances marked 'deprecated, to be removed before
1.25'.

Close apache/calcite#2024",['b7aad0b9b6b090362b681bf47a11bfcbd56edb62'],False,"['CassandraRules.java', 'CassandraToEnumerableConverterRule.java', 'EnumerableAggregateRule.java', 'EnumerableBatchNestedLoopJoinRule.java', 'EnumerableBindable.java', 'EnumerableCalcRule.java', 'EnumerableCollectRule.java', 'EnumerableCorrelateRule.java', 'EnumerableFilterRule.java', 'EnumerableFilterToCalcRule.java', 'EnumerableInterpreterRule.java', 'EnumerableIntersectRule.java', 'EnumerableJoinRule.java', 'EnumerableLimitRule.java', 'EnumerableMatchRule.java', 'EnumerableMergeJoinRule.java', 'EnumerableMinusRule.java', 'EnumerableProjectRule.java', 'EnumerableProjectToCalcRule.java', 'EnumerableRepeatUnionRule.java', 'EnumerableRules.java', 'EnumerableSortRule.java', 'EnumerableSortedAggregateRule.java', 'EnumerableTableFunctionScanRule.java', 'EnumerableTableModifyRule.java', 'EnumerableTableScanRule.java', 'EnumerableTableSpoolRule.java', 'EnumerableUncollectRule.java', 'EnumerableUnionRule.java', 'EnumerableValuesRule.java', 'EnumerableWindowRule.java', 'JdbcRules.java', 'JdbcToEnumerableConverterRule.java', 'Bindables.java', 'NoneToBindableConverterRule.java', 'CommonRelSubExprRule.java', 'RelOptMaterialization.java', 'RelOptRule.java', 'RelOptRuleCall.java', 'RelOptRuleOperandChildren.java', 'RelOptUtil.java', 'RelRule.java', 'HepPlanner.java', 'HepProgramBuilder.java', 'HepRuleCall.java', 'AbstractConverter.java', 'VolcanoRuleCall.java', 'ConverterRule.java', 'TraitMatchingRule.java', 'Calc.java', 'Filter.java', 'Project.java', 'RelFactories.java', 'SqlImplementor.java', 'AbstractJoinExtractFilterRule.java', 'AbstractMaterializedViewRule.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExtractProjectRule.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinJoinRemoveRule.java', 'AggregateJoinRemoveRule.java', 'AggregateJoinTransposeRule.java', 'AggregateMergeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateProjectStarTableRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'AggregateValuesRule.java', 'CalcMergeRule.java', 'CalcRemoveRule.java', 'CalcSplitRule.java', 'CoerceInputsRule.java', 'CoreRules.java', 'DateRangeRules.java', 'ExchangeRemoveConstantKeysRule.java', 'FilterAggregateTransposeRule.java', 'FilterCalcMergeRule.java', 'FilterCorrelateRule.java', 'FilterJoinRule.java', 'FilterMergeRule.java', 'FilterMultiJoinMergeRule.java', 'FilterProjectTransposeRule.java', 'FilterRemoveIsNotDistinctFromRule.java', 'FilterSetOpTransposeRule.java', 'FilterTableFunctionTransposeRule.java', 'FilterTableScanRule.java', 'FilterToCalcRule.java', 'IntersectToDistinctRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinAssociateRule.java', 'JoinCommuteRule.java', 'JoinExtractFilterRule.java', 'JoinProjectTransposeRule.java', 'JoinPushExpressionsRule.java', 'JoinPushThroughJoinRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToCorrelateRule.java', 'JoinToMultiJoinRule.java', 'JoinUnionTransposeRule.java', 'LoptOptimizeJoinRule.java', 'MatchRule.java', 'MaterializedViewFilterScanRule.java', 'MultiJoinOptimizeBushyRule.java', 'MultiJoinProjectTransposeRule.java', 'ProjectCalcMergeRule.java', 'ProjectCorrelateTransposeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinJoinRemoveRule.java', 'ProjectJoinRemoveRule.java', 'ProjectJoinTransposeRule.java', 'ProjectMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'ProjectRemoveRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectSortTransposeRule.java', 'ProjectTableScanRule.java', 'ProjectToCalcRule.java', 'ProjectToWindowRule.java', 'ProjectWindowTransposeRule.java', 'PruneEmptyRules.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinFilterTransposeRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SemiJoinRemoveRule.java', 'SemiJoinRule.java', 'SortJoinCopyRule.java', 'SortJoinTransposeRule.java', 'SortProjectTransposeRule.java', 'SortRemoveConstantKeysRule.java', 'SortRemoveRule.java', 'SortUnionTransposeRule.java', 'SubQueryRemoveRule.java', 'TableScanRule.java', 'UnionEliminatorRule.java', 'UnionMergeRule.java', 'UnionPullUpConstantsRule.java', 'UnionToDistinctRule.java', 'ValuesReduceRule.java', 'MaterializedViewAggregateRule.java', 'MaterializedViewJoinRule.java', 'MaterializedViewOnlyAggregateRule.java', 'MaterializedViewOnlyFilterRule.java', 'MaterializedViewOnlyJoinRule.java', 'MaterializedViewProjectAggregateRule.java', 'MaterializedViewProjectFilterRule.java', 'MaterializedViewProjectJoinRule.java', 'MaterializedViewRule.java', 'MaterializedViewRules.java', 'StreamRules.java', 'ResultSetEnumerable.java', 'SqlDdlNodes.java', 'RelDecorrelator.java', 'Programs.java', 'RelOptUtilTest.java', 'CollationConversionTest.java', 'ComboRuleTest.java', 'PlannerTests.java', 'TraitConversionTest.java', 'TraitPropagationTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'RelToSqlConverterTest.java', 'SortRemoveRuleTest.java', 'HepPlannerTest.java', 'LatticeTest.java', 'MockRelOptPlanner.java', 'MutableRelTest.java', 'RelOptRulesTest.java', 'SqlHintsConverterTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'DruidRules.java', 'ElasticsearchRules.java', 'ElasticsearchToEnumerableConverterRule.java', 'CsvProjectTableScanRule.java', 'CsvRules.java', 'GeodeRules.java', 'GeodeToEnumerableConverterRule.java', 'MongoRules.java', 'MongoToEnumerableConverterRule.java', 'PigRules.java', 'PigToEnumerableConverterRule.java', 'PigRelBuilderStyleTest.java', 'PigConverter.java', 'PigToSqlAggregateRule.java', 'howto.md', 'tutorial.md', 'EnumerableToSparkConverterRule.java', 'JdbcToSparkConverterRule.java', 'SparkRules.java', 'SplunkPushDownRule.java']"
e17a5c9f640be399b1afeaccfbc660482e5de187,"In SqlReturnType, add methods orElse and andThen

Given `SqlReturnType rule`, `rule.andThen(transform)` is shorthand for
`ReturnTypes.cascade(rule, transform)` and `rule.orElse(rule2)` is
shorthand for `ReturnTypes.chain(rule, rule2)`.

Refactor existing code to use these new methods. There are no
changes in functionality.",['04314987373f0d7dd84b7b4e8df3243eef7f8f68'],False,"['SqlCoalesceFunction.java', 'SqlJsonDepthFunction.java', 'SqlJsonExistsFunction.java', 'SqlJsonKeysFunction.java', 'SqlJsonLengthFunction.java', 'SqlJsonPrettyFunction.java', 'SqlJsonQueryFunction.java', 'SqlJsonRemoveFunction.java', 'SqlJsonStorageSizeFunction.java', 'SqlJsonTypeFunction.java', 'SqlJsonValueExpressionOperator.java', 'SqlLeadLagAggFunction.java', 'SqlLibraryOperators.java', 'SqlRegexpReplaceFunction.java', 'SqlTrimFunction.java', 'ReturnTypes.java', 'SqlReturnTypeInference.java', 'SqlReturnTypeInferenceChain.java', 'SqlTypeTransformCascade.java']"
19edf52c76c6a1507721f5bd37f2a33497aa0c4c,"[CALCITE-2569] UDFs that are table functions must implement SqlTableFunction and have CURSOR as their return type

Validate that table functions are not used in contexts that require
scalar functions, such as the SELECT clause.

Change operand type ANY to mean 'scalar expression of any type (but
not a cursor)', and add operand type IGNORE to mean skip validation -
for an operand that is not an expression. TABLE is one of the few
operators that accepts a CURSOR operand.

Add SqlKind.INTERVAL_QUALIFIER.",['9b678f1d7ffe030711d86f475c3a9e9e95bacb8f'],False,"['EnumUtils.java', 'ModelHandler.java', 'RelFactories.java', 'CalciteResource.java', 'ReflectiveFunctionBase.java', 'ScalarFunctionImpl.java', 'SqlAsOperator.java', 'SqlCallBinding.java', 'SqlIntervalQualifier.java', 'SqlKind.java', 'SqlLiteral.java', 'SqlOperatorBinding.java', 'SqlOverOperator.java', 'SqlTableFunction.java', 'SqlUtil.java', 'SqlWindowTableFunction.java', 'SqlWithinGroupOperator.java', 'SqlArgumentAssignmentOperator.java', 'SqlCollectionTableOperator.java', 'FamilyOperandTypeChecker.java', 'OperandTypes.java', 'SqlTypeFamily.java', 'AggVisitor.java', 'ProcedureNamespace.java', 'SqlUserDefinedTableFunction.java', 'SqlUserDefinedTableMacro.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'CalciteResource.properties', 'MockSqlOperatorTable.java', 'SqlOperatorBindingTest.java', 'SqlValidatorTest.java', 'TableFunctionTest.java', 'ExampleFunctionTest.java']"
885a3da76cfd59171624dc569e83e93a5bdaffe3,"[CALCITE-2160] Spatial: Add functions ST_MakeGrid and ST_MakeGridPoints

These will be the foundations of a spatial grid index, to accelerate
polygon-to-polygon spatial joins.

Add ""states"" and ""parks"" data sets.

Fix lateral references to fields.",['19edf52c76c6a1507721f5bd37f2a33497aa0c4c'],False,"['CalciteCatalogReader.java', 'GeoFunctions.java', 'SqlGeoFunctions.java', 'SqlLibraryOperatorTableFactory.java', 'CalciteAssert.java', 'StatesTableFunction.java', 'spatial.iq', 'states.json', 'reference.md']"
553a2565a7bf372e4cb7d69b8838ad6e3ff337e9,Site: update howto.md and revise the wrong issue link,['ce2ae649c9ec072ceb8462b2783f8c6bba989241'],False,"['history.md', 'howto.md', '2020-07-24-release-1.24.0.md']"
630b23ec508a6f6b50f6edd3cb1e4a473a83c3da,Site: Fix wrong syntax in tutorial.md,['553a2565a7bf372e4cb7d69b8838ad6e3ff337e9'],False,['tutorial.md']
63c1667459d594cf4761e794b5f882a49a9ae197,[CALCITE-4081] Round-tripping a DECIMAL literal throws validation error,['2088488ac8327b19512a76a122cae2961fc551c3'],False,"['RexBuilder.java', 'SqlTypeUtil.java', 'RelToSqlConverterTest.java', 'RexBuilderTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'misc.iq']"
f813298b67923e665fffee7bf4d388dcad994cb1,"[CALCITE-4150] JDBC adapter throws UnsupportedOperationException when generating SQL for untyped NULL literal (Anton Haidai)

Fix handling of the NULL type in RelToSqlConverter and
SqlTypeUtil. For null literal with null type, we now generate
NULL rather than CAST(NULL AS NULL).

This can be overridden in the dialect if desired. (Julian Hyde)

Close apache/calcite#2093",['63c1667459d594cf4761e794b5f882a49a9ae197'],False,"['RelToSqlConverter.java', 'SqlDialect.java', 'SqlTypeUtil.java', 'AbstractTypeCoercion.java', 'RelToSqlConverterTest.java', 'SqlTypeUtilTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
0aec07444f829104a0c2e1a5167d9200ba773dd4,[CALCITE-4156] ReflectiveRelMetadataProvider constructor should throw an exception (instead of assertion) when called with an empty map,['f813298b67923e665fffee7bf4d388dcad994cb1'],False,['ReflectiveRelMetadataProvider.java']
c1f8f7534aa2d27eef86cdf7522067c19f02db6a,"[CALCITE-4167] Group by COALESCE IN throws NullPointerException

The root cause is that the COALESCE operand type was wrongly replaced by
`SqlToRelConverter#adjustInputRef`, actually, for an agg as bb root, there
is no need to do such adjust. Because the nullability does not change and
the agg type is not same with the bb's scope.

Tweak the `#adjustInputRef` to only fix type nullability, if there
are cases that the type name also changes, just return the original node
and let the subsequent conversion work flow throw.",['68b02dfd4af15bc94a91a0cd2a30655d04439555'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
e84f635020a6c3653b4f1456d64edb86efb2fea8,"[CALCITE-4171] Support named parameters for table window functions

* Changes SqlArgumentAssignmentOperator to allow non-scala query as operand
* In SqlCallBinding, matches the permuted operand by name with name matcher
* Refactor SqlWindowTableFunction and its sub-class to reuse same logic
* Do not patch up the SqlWindowTableFunction with DEFAULTs when sql validation",['c1f8f7534aa2d27eef86cdf7522067c19f02db6a'],False,"['EnumUtils.java', 'CalciteResource.java', 'SqlCallBinding.java', 'SqlHopTableFunction.java', 'SqlSessionTableFunction.java', 'SqlTumbleTableFunction.java', 'SqlWindowTableFunction.java', 'SqlArgumentAssignmentOperator.java', 'SqlValidatorImpl.java', 'CalciteResource.properties', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'stream.iq', 'reference.md']"
c17dacabe8effe8d644070d5aceb902776f8e23b,"[CALCITE-4168] Configure Gradle local build cache

This commit configures local build cache, and it delegates
Gradle execution to burrunan/gradle-cache-action.

It unlocks fine-grained remote build cache with GitHub Actions backend
(=faster builds), and it adds error markers
(e.g. compilation errors right in the commit diffs)

See https://github.com/burrunan/gradle-cache-action#gradle-cache-action",['e84f635020a6c3653b4f1456d64edb86efb2fea8'],False,"['main.yml', 'build.gradle.kts', 'gradle.properties', 'settings.gradle.kts']"
6968f0af4aa4d0ec6cdc86dfb8372fe8652de7b9,"Add assertion that relnode after pass through traits has the same convention

Change-Id: I5dbb39899809055340fe14fa1c09bc25835dd5be",['c17dacabe8effe8d644070d5aceb902776f8e23b'],False,['TopDownRuleDriver.java']
dc7bcc550caa5232b51200640c208769fb22787c,"Refactor

In RexProgramTest, construct literals when needed, rather than caching in variables.

The word 'comparison' is mis-spelled in a few places.

Deprecate RelReferentialConstraint.getNumColumns().

Change TableFunctionScanFactory argument from RexNode to RexCall.",['6968f0af4aa4d0ec6cdc86dfb8372fe8652de7b9'],False,"['RelReferentialConstraint.java', 'RelReferentialConstraintImpl.java', 'RelFactories.java', 'MaterializedViewRule.java', 'SqlKind.java', 'TypeCoercionImpl.java', 'RelBuilder.java', 'RexProgramBuilderBase.java', 'RexProgramTest.java']"
9ca61f020d134032dac8167b83bf431f078e33c5,"[CALCITE-4159] Simplify always-true expressions (such as LIKE '%') to TRUE

RexSimplify needs to recognize that the following expressions
can be simplified to TRUE:

* c < 0 OR c >= 0 OR c IS NULL
* c < 2 OR c > 0 OR c IS NULL
* c LIKE '%' OR c IS NULL

To enable this fix, we pull 'IS NULL' terms to the front of a list of
OR-terms, so that by the time the subsequent terms are reached they
know that the term's value is not NULL.

Close apache/calcite#2105",['ca6c590718599e0b3420757b775994e1075843cc'],False,"['RelOptPredicateList.java', 'RexSimplify.java', 'Util.java', 'RexProgramBuilderBase.java', 'RexProgramTest.java', 'UtilTest.java']"
2db42f8c86207285a20c63b21fe25fe0e2474893,"[CALCITE-4185] Remove dependency between checkstyle and compilation tasks

See https://github.com/gradle/gradle/issues/14227",['6cc8aa1a9782d429e823641cb62b5ce34495e7da'],False,['build.gradle.kts']
39cf82b8bf94b9240fe4592706d8eeb2952712f0,"[CALCITE-2082] Do not store types or type factories inside operators

Rationale: A SqlOperator has a lifetime that spans several
statements; but a type factory is only for one statement, and
each type belongs to that factory. We want to share
SqlOperator instances across statements and connections,
therefore we need to create them before there is a type
factory.

In particular:
* Remove (deprecate) method
  `List<RelDataType> SqlOperator.getParamTypes()`;
* Remove `RelDataTypeFactory` argument from
  `SqlUserDefinedAggFunction` constructor, and remove its
  `typeFactory` field.
* Add `interface SqlOperandMetadata extends
  SqlOperatorTypeChecker`, which has new methods
  `List<RelDataType>> paramTypes(RelDataTypeFactory)`
  and `List<String> paramNames()`.

The `SqlOperandMetadata` interface will typically be
implemented only for user-defined functions. Unlike SQL
built-in functions, UDFs have a fixed set of parameters
(although some of them may be optional), and the parameters
have names.

In `interface SqlOperandTypeChecker`, add method `boolean
isFixedParameters()`. Will typically return true for UDFs,
false for built-in functions. Returns false for table window
functions (e.g. HOP), even though these have named parameters
(which tends to make them look a bit like UDFs).

Following [CALCITE-4171], change `instanceof SqlWindowTableFunction`
to `checker.isFixedParameters()`, because it is less specific.

Add `SqlKind` argument to UDF constructors; we will populate it
using Java annotations in [CALCITE-1861].",['314f5f6fc73b9e99abfdd4227413e4cf44e40741'],False,"['CalciteCatalogReader.java', 'SqlAggFunction.java', 'SqlCallBinding.java', 'SqlFunction.java', 'SqlHopTableFunction.java', 'SqlOperator.java', 'SqlSessionTableFunction.java', 'SqlTumbleTableFunction.java', 'SqlUtil.java', 'SqlWindowTableFunction.java', 'ExplicitOperandTypeChecker.java', 'OperandMetadataImpl.java', 'OperandTypes.java', 'SqlOperandMetadata.java', 'SqlOperandTypeChecker.java', 'SqlUserDefinedAggFunction.java', 'SqlUserDefinedFunction.java', 'SqlUserDefinedTableFunction.java', 'SqlUserDefinedTableMacro.java', 'TypeCoercionImpl.java', 'MockSqlOperatorTable.java', 'PigRelSqlUdfs.java', 'PigUserDefinedFunction.java']"
368e579fdc6bd83acf303055a59e2f6672fc48aa,"Update Checkstyle from 8.27 to 8.28 to support package-info files with imports

see https://github.com/checkstyle/checkstyle/issues/7117",['425f170a9b0589cb7f693e93cbcd044e9ab98c75'],False,['gradle.properties']
88d18185e6177c9df587bdd23dd4049f59adc2e4,"[CALCITE-4015] Pass through parent collation request on subset or superset of join keys for EnumerableMergeJoin.

Collations can pass through even when required collations are subset or superset on join keys.

For subset case, collations must be extended to make sure join keys are all sorted. Collations must be the prefix of sort keys.

For superset case, collations must be either all defined on left join input, or right join input. Collations must be prefix of join keys. All collations can be pushed down to the side on which collations are fully defiend. Only collations that are defined on join keys can be pushed down to another side.",['f0aff98b92f0c681820829f839fc3f181763e49a'],False,"['EnumerableMergeJoin.java', 'RelCollations.java', 'ImmutableIntList.java', 'RelCollationTest.java', 'TopDownOptTest.java', 'TopDownOptTest.xml']"
175851b033bc94d3df0e883839b4be6ed8405d19,"Use merge=union strategy to avoid false merge conflicts on CalciteResource.properties

merge=union avoid merge conflicts by selecting the union of the lines.
It might result in duplicate lines if different commits edit the same
line, however, it is unlikely case for CalciteResources.",['88d18185e6177c9df587bdd23dd4049f59adc2e4'],False,['.gitattributes']
e0480a9060dd62833b504072295bb3ac85e94251,"[CALCITE-3399] Field-pruning for set operators (except UNION ALL) changes query semantics (Jin Xing)

Any SET operations that have comparison between branches can not trim fields.

close apache/calcite#2125",['103c73f639443e84fae4a600aa5ab05a8139cf91'],False,"['RelFieldTrimmer.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
6842b70b52d556f2be973df6090e0cb69d5f565d,"[CALCITE-4206] RelDecorrelator outputs wrong plan for correlate sort with fetch limit

Can not decorrelate if the sort has per-correlate-key attributes like
offset or fetch limit, because these attributes scope would
change to global after decorrelation. They should take effect within
the scope of the correlation key actually.",['e0480a9060dd62833b504072295bb3ac85e94251'],False,"['RelDecorrelator.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
962d9a27ae2801fedbcd35a1f928cc9b73ca60c4,"Obsolete SqlToRelConverter.ConfigBuilder, and refactor SqlToRelConverterTest

SqlToRelConverter.Config now has a withXxx method for each
property, so there is no need for a builder. Implementation
is based upon ImmutableBeans.

Provide methods in TesterImpl and Sql to directly change the
configuration of SqlToRelConverter and RelBuilder. This makes
test fixtures more composable.",['850f0f4a04fc2399b8fd1c1fed532cd8e1e39514'],False,"['RelOptCluster.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'PlannerImpl.java', 'Prepare.java', 'SqlToRelConverter.java', 'Frameworks.java', 'RelBuilder.java', 'ToLogicalConverterTest.java', 'RelToSqlConverterTest.java', 'AbstractMaterializedViewTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'SqlHintsConverterTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'TopDownOptTest.java', 'TypeCoercionConverterTest.java']"
76f26b8319e66c30c6cbfdfba6d5b2839cdedfa2,"[CALCITE-4220] In SqlToRelConverter, use RelBuilder for creating Aggregate

Move the code added by ""[CALCITE-1824] GROUP_ID returns wrong result""
from SqlToRelConverter to RelBuilder. Now GROUP_ID is handled
correctly if created via RelBuilder.

Fix a bug where, in a query with multiple GROUPING SETS,
RelBuilder incorrectly simplifed an Aggregate to a Project.
That simplification is valid only with a single groupng set.",['962d9a27ae2801fedbcd35a1f928cc9b73ca60c4'],False,"['AggregatingSelectScope.java', 'SqlToRelConverter.java', 'PigRelBuilder.java', 'RelBuilder.java', 'RelBuilderTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlToRelConverterTest.xml', 'agg.iq', 'PigRelBuilder.java']"
fb2a02fb78f4e5b9b887645651b4b285ed68dacd,"Remove ArrayList allocation from Mappings#bijection, and add helpful message in case NPE is thrown

bijection requires all indices from [0..targets.size()-1) to be mapped
to non-null, and NPE was thrown if that is not the case.

The change adds extra message, so it is easier to see what aas the mapping.",['ad164ededa78a4b5383e636006e41ed98409ba7b'],False,['Mappings.java']
60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4,"[CALCITE-4237] Following [CALCITE-4173], fix assertion error when RexSimplify generates Sarg with single null only

Fix TpcdsTest expected output.

Add a test for IS NULL Sarg (Julian Hyde).

Close apache/calcite#2144
Close apache/calcite#2141",['eb4011bb4b9d962c2f8e6767cbee8c23435ef939'],False,"['RexSimplify.java', 'RexProgramTest.java', 'TpcdsTest.java']"
740444503fd26c7bc45d35b5e6d099d6954efecf,"[CALCITE-4200] ExceptionInInitializerError when initializing DruidRules

Refactor DruidRules to conform with the RelRule API guidelines to
resolve the initialization error and homogenize the code.

Create Config.DEFAULT in Druid specific configurations and use that for
instantiating the rules.

Use Config.DEFAULT instead of RelRule.config to create rule extensions
for Druid to cut out dependency in CoreRules holder class.",['60aa74f4e5b3b01ad90cb9ee9a4520483d45b2b4'],False,['DruidRules.java']
c09c08076bdab92c6a8b2ea62b2eeeada4471b2b,[CALCITE-4201] AssertionError when registering Druid rules due to conflict in description,['740444503fd26c7bc45d35b5e6d099d6954efecf'],False,['DruidRules.java']
fb8961528ff559e109612465cdef3e62eee852e2,"[CALCITE-4221] Update stale integration tests in Druid adapter

Update doc of DruidAdapterIT and DruidAdapter2IT to reflect the
new dockerized Druid setup.

The changes in the following tests are due to CALCITE-4202:

* testSelectDistinctWiki
* testSelectDistinctWikiNoColumns
* testSelectDistinctWikiNoTables
* testSelectDistinct
* testFilterUnionPlan
* testDistinctCount
* testPushComplexFilter
* testCountOnMetric
* testCountOnMetricRenamed
* testPushEqualsCastDimension
* testPushNotEqualsCastDimension
* testComplexExpressionsIsNull

The changes in the following tests are due to CALCITE-4212:

* testSelectTimestampColumnNoTables1
* testUnionPlan
* testProject
* testTimeExtractThatCannotBePushed
* testSubStringExpressionFilter

The changes in the following tests are due to both CALCITE-4212 and
CALCITE-4202:

* testUnionPlan
* testDistinctCountOnMetric
* testDistinctCountOnMetricRenamed
* testDistinctCountWhenApproxResultsNotAccepted
* testFilterClauseWithMetricRefAndAggregates

The rest of the changes are normal improvements of the optimizer.

Problematic tests are skipped with the appropriate JIRA references
describing the problem.",['c09c08076bdab92c6a8b2ea62b2eeeada4471b2b'],False,"['Bug.java', 'DruidAdapter2IT.java', 'DruidAdapterIT.java']"
ea2b32e11dc6a0744fc93b8d33d7dfa1da70e674,[CALCITE-4258] SqlToRelConverter: SELECT 1 IS [NOT] DISTINCT FROM NULL fails with AssertionError,['8250798e4107c639dad122baf868137b35032001'],False,"['RelOptPredicateList.java', 'misc.iq']"
0c5bb1a345f39cab3eaa3b95a77c1e8831e667e1,"Refactor SqlParserTest

Store StringAndPos rather than the SQL string in a test. This
makes it easier to write positive and negative tests on same
SQL string, because we don't have to keep the carets (that
indicate the error position) in the SQL string. If you want
real carets in a SQL string, you can now write ""^^"". Remove
the sansCarets() method, as it is no longer necessary.

Pass SqlDialect into negative and expression tests.

Add constants in SqlParserTest for common dialects.",['ea2b32e11dc6a0744fc93b8d33d7dfa1da70e674'],False,"['BabelParserTest.java', 'SqlParserUtil.java', 'SqlParserTest.java', 'SqlAdvisorTest.java']"
6a3a7e49f99f2bfb4b32222af00536bccbe19c53,"[CALCITE-4249] JDBC adapter cannot translate NOT LIKE in join condition

Fix bug translating Sarg to SQL, and add a test case for it.
(The test case only demonstrates the bug on [CALCITE-4262]
branch, where SqlToRelCovnerter uses RelBuilder.filter rather
than LogicalFilter.create, and therefore introduces a Sarg.)",['5419f12f48399b0311071aca8d89762d8dad4929'],False,"['SqlImplementor.java', 'SqlUtil.java', 'RelToSqlConverterTest.java']"
723e7e603e52f171adfeff45798d52115b5dbd7b,"Fix typos in the documentation of adapters

Close apache/calcite#2165",['81db26dd077c44242417d2dbd1cd9f78890a4a73'],False,['adapter.md']
27e7f19a75033f44895d1c83efc6adf4f0e64856,"[CALCITE-2833] In JDBC adapter for Hive and BigQuery, implement Values by generating SELECT without FROM (Stuti Gupta)

Since this PR was created, we fixed [CALCITE-3191], which
covers a lot of the original PR. The improvements for Hive
and BigQuery are still worthwhile, so I rebased and fixed up
the PR. (Julian Hyde)

Close apache/calcite#1052",['8ffedcce67af8af7f262e1b0668c3e8374fbbd41'],False,"['RelToSqlConverter.java', 'BigQuerySqlDialect.java', 'HiveSqlDialect.java', 'RelToSqlConverterTest.java']"
d701495640df77992b43093422e9331de103d9fd,"[CALCITE-4176] Key descriptor can be optional in SESSION table function

Fix style

Fix style

Adding tests to check time column for TUMBLE/HOP table function

Fix style",['27e7f19a75033f44895d1c83efc6adf4f0e64856'],False,"['SqlHopTableFunction.java', 'SqlSessionTableFunction.java', 'SqlTumbleTableFunction.java', 'SqlWindowTableFunction.java', 'SqlValidatorTest.java']"
1050b36cafbb0c487b7a2ade3efd12850609717e,"Add MaxMetaspaceSize=512m to avoid metaspace issues when building Calcite

Gradle defaults to 256m which seems to be too small",['0d520632dbac95686f6686c7c78dd25334e23fd3'],False,['gradle.properties']
efbf39973b010ec3c2154545e729307d57f08e3d,[CALCITE-3841] Change downloads page to use downloads.apache.org,['1050b36cafbb0c487b7a2ade3efd12850609717e'],False,['index.md']
84ac41900bc41fc38bc5238b3bb53f765b70349b,"[CALCITE-4259] Support JDK 15 and Guava version 29.0-jre

Calcite still supports JDK 8 and higher, and Guava 19.0 and higher.

Upgrade io.airlift.tpch-0.1 to io.prestosql.tpch-1.0.

In guava-29, RangeSet.toString() changed format. Change
Calcite's formatting of Sargs to match, and add wrappers so
that tests pass on all versions of Guava.

Remove log4j; disable checking for warnings in
SqlHintsConverterTest. Danny Chen has agreed to re-enable
shortly.

Switch CI from JDK 14 to 15

Throw if SQL strings in RelOptRulesTest have trailing spaces;
the spaces make reference logs brittle.

Simplify description of which JDKs we support.

Close apache/calcite#2153",['efbf39973b010ec3c2154545e729307d57f08e3d'],False,"['main.yml', '.travis.yml', 'build.gradle.kts', 'CassandraExtension.java', 'build.gradle.kts', 'RangeSets.java', 'DateRangeRulesTest.java', 'RexProgramTest.java', 'Matchers.java', 'MaterializedViewRelOptRulesTest.java', 'RelBuilderTest.java', 'RelOptTestBase.java', 'SqlHintsConverterTest.java', 'SqlToRelConverterTest.java', 'RangeSetTest.java', 'TestUtil.java', 'TestUtilTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'sort.iq', 'GeodeBookstoreTest.java', 'gradle.properties', 'build.gradle.kts', 'TpchSchema.java', 'TpchTest.java', 'history.md', 'SparkAdapterTest.java']"
00f2dbacb7675b65fa19fe7cfe6f446687f92f8f,[CALCITE-4289] Fix wrong signature message in SqlTumbleWindowFunction,['84ac41900bc41fc38bc5238b3bb53f765b70349b'],False,"['SqlTumbleTableFunction.java', 'SqlValidatorTest.java']"
67f3c5d40130c76ddf22a587cab1f2640028c1fa,Fix grammatical errors,['e0fa8ee3ad7ce65c851775cba10ee4649db44b4b'],False,"['algebra.md', 'druid_adapter.md', 'elasticsearch_adapter.md']"
2ab9a2bea3b22b3a7d15affa2fdd2c8133085212,"Fix adapter doc grammatical errors

Resolve review comments

Squash commits",['c84dd53414ddb20fcd0817dd1f064812546e6acc'],False,['file_adapter.md']
0b2dfb70dd9a97495283388a9edcbe2b12ddfec3,"[CALCITE-4238] Create a default parser configuration, to reduce redundant information in sub-parsers

With this change, we no longer require each sub-project
parser to have its own list of non-reserved keywords. For
example, ""HOP"" and ""TUMBLE"" had been added to core/main's
nonReservedKeywords but not core/test, server, babel; that
was probably a mistake.

Create default_config.fmpp, include it in derived parsers,
and remove properties from parsers' config.fmpp files if they
are the same as those in default_config.fmpp.

Close apache/calcite#2167",['2ab9a2bea3b22b3a7d15affa2fdd2c8133085212'],False,"['config.fmpp', 'FmppTask.kt', 'config.fmpp', 'default_config.fmpp', 'Parser.jj', 'config.fmpp', 'config.fmpp']"
43eeafcbac29d02c72bd520c003cdfc571de2d15,[CALCITE-4298] Avoid disabling hostname verification on HTTPS connections,['ab19f98172848fe303a18173946c2def0b0d0312'],False,['HttpUtils.java']
f704450de0c24faa106206d2da4981cdf385d45f,"Improve positions in SQL validator error messages

Move class StringAndPos to top-level from SqlParserUtil.

Add RelBuilder.aggregateCall(AggregateCall), to create a
RelBuilder.AggCall with the same contents as an AggregateCall.

Add ImmutableBitSet.toImmutableBitSet, Util.first(List),
Util.first(List, int), Pair.forEach(Iterable, BiConsumer).",['766f555c2091b2cb877ae3c70a59098e68503325'],False,"['BabelParserTest.java', 'Parser.jj', 'AggregateExtractProjectRule.java', 'SqlDataTypeSpec.java', 'SqlParserUtil.java', 'StringAndPos.java', 'RelFieldTrimmer.java', 'RelBuilder.java', 'ImmutableBitSet.java', 'Pair.java', 'Util.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlRuntimeTester.java', 'SqlTester.java', 'SqlTests.java', 'SqlAdvisorJdbcTest.java', 'SqlTestGen.java', 'SqlValidatorMatchTest.kt', 'SqlValidatorTest.java', 'SqlValidatorTestCase.java', 'ImmutableBitSetTest.java', 'UtilTest.java', 'PigRelBuilder.java']"
8a7e1be96faa1720de828748e5ed819f32dbcdb4,[CALCITE-4300] EnumerableBatchNestedLoopJoin dynamic code generation can lead to variable name issues if two EBNLJ are nested,['87e7338e82f9dfb1373cee87b99f4741dd556d95'],False,['EnumerableBatchNestedLoopJoin.java']
ec5b75a9f87d0380db8202d0201d5e5225206c84,[CALCITE-4215] Avoid NPE in RelOptTableImpl.getMonotonicity when collations is null,['92ea5a2f65f8a12f9c7a62986c5d1527f24e2e5b'],False,['RelOptTableImpl.java']
2f1d764297233a60fed85dd10f2954240da6663a,"[CALCITE-4215] Avoid NPE in RelMdCollation from ImmutableList.copyOf

Return null instead when metadata is not known",['97e4f0c11e18dbfde505e5b82143e0bd9512e0e4'],False,['RelMdCollation.java']
47871235177a3a0d398b1d890d1d2e947028e052,[CALCITE-4215] Avoid NPE in RelFieldTrimmer when collations is null,['2f1d764297233a60fed85dd10f2954240da6663a'],False,['RelFieldTrimmer.java']
58adcae950666bde29687eab401a0d4b479a2071,[CALCITE-4215] Avoid NPE when monotonicity returns null,['47871235177a3a0d398b1d890d1d2e947028e052'],False,"['SqlPrefixOperator.java', 'SqlExtractFunction.java', 'SqlFloorFunction.java', 'SqlMonotonicBinaryOperator.java', 'SqlValidatorUtil.java']"
1f57bd4614ee0160de4f37bf6f000345dc194f85,[CALCITE-4215] Avoid NPE when getReferentialConstraints() returns null,['58adcae950666bde29687eab401a0d4b479a2071'],False,"['ReflectiveSchema.java', 'MaterializedViewRule.java']"
092244135940e7e288d245904a37e550450a0ecd,[CALCITE-4215] Fix handing of null monotonicity in IdentifierNamespace,['1f57bd4614ee0160de4f37bf6f000345dc194f85'],False,['IdentifierNamespace.java']
7df9bba657924b37c5b55a480b13215ba0326707,[CALCITE-4215] Avoid NPE when monotonicity is null,['092244135940e7e288d245904a37e550450a0ecd'],False,"['SqlBinaryOperator.java', 'SqlSubstringFunction.java']"
36b31baa463679db871b15ada78e290d448c0443,"[CALCITE-4314] Add Error Prone code style verification

See https://errorprone.info/

It allows to capture errors like mising switch case branches,
missing override, non-static inner class, etc

The verification can be run locally via ./gradlew -PenableErrorprone classes
Note: Java 11+ is required",['2391c20bfb10760f770c5c7cd6fc488b8c5a4130'],False,"['main.yml', 'build.gradle.kts', 'gradle.properties', 'settings.gradle.kts', 'howto.md']"
b5a94de7d270ecd0defbb7475d797d0e48649955,"[CALCITE-4314] Remove unnecessary parentheses

See https://errorprone.info/bugpattern/UnnecessaryParentheses",['66caa54c5e272f8287ca132ca012733898a38768'],False,"['RelOptUtil.java', 'SubstitutionVisitor.java', 'VolcanoPlanner.java', 'RelMdUniqueKeys.java', 'MutableMatch.java', 'LoptSemiJoinOptimizer.java', 'MaterializedViewRule.java', 'RexToSqlNodeConverterImpl.java', 'SqlDialect.java', 'SqlIntervalQualifier.java', 'SqlWindow.java', 'SetopNamespace.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'PartiallyOrderedSet.java', 'Util.java', 'JsonEnumerator.java', 'BlockBuilder.java']"
d84bb710aed90adbaeae3c65ed3c95c5f68ce749,"[CALCITE-4314] Make abstract class constructors protected rather than public

See https://errorprone.info/bugpattern/UnusedNestedClass",['b5a94de7d270ecd0defbb7475d797d0e48649955'],False,"['JavaRelImplementor.java', 'AggAddContextImpl.java', 'AggResetContextImpl.java', 'WinAggAddContextImpl.java', 'WinAggResultContextImpl.java', 'CalciteSchema.java', 'CommonRelSubExprRule.java', 'RelOptRule.java', 'RelRule.java', 'SubstitutionVisitor.java', 'Prepare.java', 'AbstractRelNode.java', 'BiRel.java', 'ConverterRule.java', 'Correlate.java', 'EquiJoin.java', 'Exchange.java', 'Intersect.java', 'Minus.java', 'Sort.java', 'SortExchange.java', 'Values.java', 'Window.java', 'CalcRelSplitter.java', 'EquiJoin.java', 'Resources.java', 'AbstractTableQueryable.java', 'ReflectiveFunctionBase.java', 'SqlAlter.java', 'SqlCall.java', 'SqlCreate.java', 'SqlDdl.java', 'SqlDrop.java', 'SqlTypeNameSpec.java', 'DelegatingSqlValidatorCatalogReader.java', 'DelegatingSqlValidatorTable.java', 'ListScope.java', 'Frameworks.java', 'AbstractSourceMapping.java', 'AbstractTargetMapping.java', 'GeodeSimpleEnumerator.java', 'BaseQueryable.java', 'QueryProviderImpl.java', 'TransformedEnumerator.java', 'SparkRel.java']"
69b12e0bdf85654e2267bb494ad408bd11f8124c,"[CALCITE-4314] Suppress HidingField warnings

Type type field hides the same field in the superclass.
For now the warning is suppressed to avoid making incompatible changes.

see https://errorprone.info/bugpattern/HidingField",['d84bb710aed90adbaeae3c65ed3c95c5f68ce749'],False,"['ReflectiveSchema.java', 'MultiJoin.java', 'ParameterNamespace.java', 'NewExpression.java', 'TypeBinaryExpression.java']"
1b94f37e888cf2d186362473529e6c147afe0f6e,"[CALCITE-4314] Add missing default branches to switch statement

Note: the changes are mechanical.
The intention is to keep the previous behavior and prevent adding new
non exchaustive switch statements in the future.

See https://errorprone.info/bugpattern/MissingCasesInEnumSwitch",['69b12e0bdf85654e2267bb494ad408bd11f8124c'],False,"['ColumnLoader.java', 'EnumUtils.java', 'EnumerableMatch.java', 'EnumerableRelImplementor.java', 'EnumerableTableScan.java', 'PhysTypeImpl.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'JdbcSchema.java', 'JdbcToEnumerableConverter.java', 'JdbcUtils.java', 'JoinNode.java', 'SetOpNode.java', 'Driver.java', 'JavaTypeFactoryImpl.java', 'Lattice.java', 'ModelHandler.java', 'RelOptUtil.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'VolcanoRuleCall.java', 'PlannerImpl.java', 'RelOptTableImpl.java', 'RelDotWriter.java', 'RelJson.java', 'RelWriterImpl.java', 'RelMdCollation.java', 'RelMdPredicates.java', 'RelMdSize.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AggregateJoinTransposeRule.java', 'DateRangeRules.java', 'ProjectAggregateMergeRule.java', 'ReduceExpressionsRule.java', 'SubQueryRemoveRule.java', 'RelRecordType.java', 'LogicVisitor.java', 'RexBuilder.java', 'RexCallBinding.java', 'RexInterpreter.java', 'RexLiteral.java', 'RexSimplify.java', 'RexUtil.java', 'Resources.java', 'ScalarFunctionImpl.java', 'SqlDialect.java', 'SqlDialectFactoryImpl.java', 'SqlExplain.java', 'SqlLiteral.java', 'SqlOverOperator.java', 'SqlUtil.java', 'SqlSimpleParser.java', 'BigQuerySqlDialect.java', 'ClickHouseSqlDialect.java', 'HiveSqlDialect.java', 'JethroDataSqlDialect.java', 'MysqlSqlDialect.java', 'PrestoSqlDialect.java', 'SqlConvertFunction.java', 'SqlOverlayFunction.java', 'SqlRollupOperator.java', 'SqlPrettyWriter.java', 'FamilyOperandTypeChecker.java', 'SqlTypeName.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'ReflectiveSqlOperatorTable.java', 'AggChecker.java', 'DelegatingScope.java', 'JoinNamespace.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'RelBuilder.java', 'BitString.java', 'ImmutableBeans.java', 'Util.java', 'XmlOutput.java', 'DruidConnectionImpl.java', 'DruidDateTimeUtils.java', 'DruidJsonFilter.java', 'ElasticsearchMapping.java', 'PredicateAnalyzer.java', 'Maze.java', 'EnumerableDefaults.java', 'Expressions.java', 'OptimizeShuttle.java', 'UnaryExpression.java', 'MongoSchemaFactory.java', 'MongoSort.java', 'Handler.java', 'FilesTableFunction.java', 'SqlShell.java', 'SplunkPushDownRule.java', 'ParserBenchmark.java']"
edbd35acf76dbd44cc148f036d0d02cbe2105c81,"[CALCITE-4314] Avoid mutable enum fields

See https://errorprone.info/bugpattern/ImmutableEnumChecker",['1b94f37e888cf2d186362473529e6c147afe0f6e'],False,"['CassandraMethod.java', 'CalciteConnectionProperty.java', 'Lex.java', 'NodeTypeHintPredicate.java', 'RexSimplify.java', 'Hook.java', 'Resources.java', 'SqlDialect.java', 'SqlFunctionCategory.java', 'MapSqlStatisticProvider.java', 'BuiltInMethod.java', 'ElasticsearchMethod.java', 'Primitive.java', 'MongoMethod.java', 'PigDataType.java', 'RedisDataFormat.java', 'RedisDataType.java', 'SparkMethod.java']"
11d75942a76d859738afaf9d8be4b90c9c9a5d4e,"[CALCITE-4314] Remove unused fields, methods, and variables

See
https://errorprone.info/bugpattern/UnusedMethod
https://errorprone.info/bugpattern/UnusedVariable",['edbd35acf76dbd44cc148f036d0d02cbe2105c81'],False,"['CassandraProject.java', 'CassandraRules.java', 'ColumnLoader.java', 'EnumerableMatch.java', 'EnumerableTableFunctionScan.java', 'EnumerableWindow.java', 'RexImpTable.java', 'Interpreter.java', 'CalciteMetaImpl.java', 'Step.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'VolcanoRuleCall.java', 'CalcitePrepareImpl.java', 'PlannerImpl.java', 'ProfilerImpl.java', 'AbstractRelNode.java', 'RelFactories.java', 'RelJson.java', 'RelJsonReader.java', 'RelJsonWriter.java', 'RelMdCollation.java', 'RelMdUniqueKeys.java', 'RelMetadataQuery.java', 'RelToSqlConverter.java', 'AggregateReduceFunctionsRule.java', 'JoinAssociateRule.java', 'JoinToMultiJoinRule.java', 'ReduceExpressionsRule.java', 'MaterializedViewAggregateRule.java', 'RexInterpreter.java', 'RexProgramBuilder.java', 'RexSimplify.java', 'Like.java', 'Matcher.java', 'SqlFunctions.java', 'SqlDialectFactoryImpl.java', 'SqlIntervalQualifier.java', 'SqlStateCodes.java', 'SqlWindow.java', 'SqlSimpleParser.java', 'SqlMultisetSetOperator.java', 'SqlPrettyWriter.java', 'CollectScope.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'ChunkList.java', 'PartiallyOrderedSet.java', 'Util.java', 'XmlOutput.java', 'DruidConnectionImpl.java', 'DruidJsonFilter.java', 'DruidRules.java', 'ElasticsearchEnumerators.java', 'ElasticsearchTable.java', 'PredicateAnalyzer.java', 'QueryBuilders.java', 'FileReader.java', 'FileRowConverter.java', 'GeodeFilter.java', 'GeodeRules.java', 'GeodeSimpleEnumerator.java', 'GeodeSimpleSchema.java', 'EnumerableDefaults.java', 'Functions.java', 'Expressions.java', 'Types.java', 'VisitorImpl.java', 'MongoToEnumerableConverter.java', 'SqlShell.java', 'VmstatTableFunction.java', 'MutableArrayTable.java', 'EnumerableToSparkConverter.java', 'SparkRules.java', 'SplunkDriver.java', 'SplunkPushDownRule.java']"
5628311e506e13a567f1bd41e1cfba27a8719d22,"[CALCITE-4314] Avoid escaping HTML entities in JavaDoc code blocks

See https://errorprone.info/bugpattern/EscapedEntity",['11d75942a76d859738afaf9d8be4b90c9c9a5d4e'],False,"['RexToLixTranslator.java', 'SubstitutionVisitor.java', 'Sarg.java', 'Extensions.java', 'ExpressionType.java', 'Primitive.java']"
1435ed51c6764708b6c9952dca0af9374bf1f329,"[CALCITE-4314] Avoid returning mutable and non-mutable lists from the same method

See https://errorprone.info/bugpattern/MixedMutabilityReturnType",['5628311e506e13a567f1bd41e1cfba27a8719d22'],False,"['SubstitutionVisitor.java', 'CalciteCatalogReader.java', 'RelJsonReader.java', 'RelMdUniqueKeys.java', 'SqlAdvisor.java', 'PartiallyOrderedSet.java', 'Functions.java', 'Expressions.java', 'PigRelOpVisitor.java']"
04f8a078589f78aa421e137f6cb8d06ff0c3d458,"[CALCITE-4314] Avoid long = int + int in EnumerableDefaults.orderBy

See https://errorprone.info/bugpattern/IntLongMath",['1435ed51c6764708b6c9952dca0af9374bf1f329'],False,['EnumerableDefaults.java']
0cdb485ee8d5edfcbf9a2daaf4e09b2c89cd11c8,"[CALCITE-4314] Use exact parameter names in JavaDoc

See https://errorprone.info/bugpattern/InvalidParam",['04f8a078589f78aa421e137f6cb8d06ff0c3d458'],False,['EnumerableDefaults.java']
b88bae9905048a777ccccce5eb7819b1b9bf51f5,"[CALCITE-4314] Avoid Collection.equals(...) usage as its behavior is not specified

See https://errorprone.info/bugpattern/UndefinedEquals",['0cdb485ee8d5edfcbf9a2daaf4e09b2c89cd11c8'],False,['GroupingImpl.java']
c528771e5c4c9ab6e15e7d4ee5536fdff6fb2019,"[CALCITE-4314] Replace SortedSet with NavigableSet

SortedSet was replaced by NavigableSet in Java 6.

See https://errorprone.info/bugpattern/JdkObsolete",['b88bae9905048a777ccccce5eb7819b1b9bf51f5'],False,"['CassandraProject.java', 'CassandraRules.java', 'Lattice.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'ProfilerImpl.java', 'SimpleProfiler.java', 'Match.java', 'RelMdCollation.java', 'RelMdPredicates.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateJoinTransposeRule.java', 'SqlAbstractParserImpl.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'BitSets.java', 'EquivalenceSet.java', 'ImmutableBitSet.java', 'ImmutableNullableMap.java', 'SerializableCharset.java', 'UtilTest.java', 'EnumerableDefaults.java']"
2cbb0c4fef8d72224db5a33659fad898a9f0e849,"[CALCITE-4314] Replace protected methods in final classes with package-private

See https://errorprone.info/bugpattern/ProtectedMembersInFinalClass",['c528771e5c4c9ab6e15e7d4ee5536fdff6fb2019'],False,"['RelTraitSet.java', 'DruidType.java']"
995b90bdee997d879f69020de06fe4f6e24f49eb,"[CALCITE-4314] Suppress warnings on Guava's @Beta API usage

@Beta APIs should not be used in library code as they are subject to change

See https://github.com/google/guava/wiki/PhilosophyExplained#beta-apis",['2cbb0c4fef8d72224db5a33659fad898a9f0e849'],False,"['RelTraitDef.java', 'SqlImplementor.java', 'DateRangeRules.java', 'RelDataTypeFactoryImpl.java', 'RexAnalyzer.java', 'RexBuilder.java', 'RexSimplify.java', 'RexUtil.java', 'SqlUtil.java', 'RangeSets.java', 'Sarg.java', 'DruidDateTimeUtils.java', 'DruidRules.java']"
042802fc6f78244ca2b5759b9727c77676bed8ae,"[CALCITE-4314] Make inner classes static when possible

See https://errorprone.info/bugpattern/ClassCanBeStatic",['995b90bdee997d879f69020de06fe4f6e24f49eb'],False,"['AbstractRelOptPlanner.java', 'MutableRel.java', 'JoinToMultiJoinRule.java', 'PushProjector.java', 'RexProgramBuilder.java', 'SqlSpecialOperator.java', 'SqlAdvisor.java', 'SqlToRelConverter.java', 'FileRowConverter.java', 'PigRelBuilder.java']"
4dd81e98b13b5ff0336bf49330d602cbfde0edc6,[CALCITE-4314] Avoid MissingCasesInEnumSwitch,['042802fc6f78244ca2b5759b9727c77676bed8ae'],False,['RexSimplify.java']
cff3695264797e292d08302786c074ebe1d1c43c,"[CALCITE-4314] Replace LinkedList with ArrayList, ArrayDeque, HashSet

It is very rare for LinkedList to out-perform ArrayList or ArrayDeque

See https://errorprone.info/bugpattern/JdkObsolete",['4dd81e98b13b5ff0336bf49330d602cbfde0edc6'],False,"['HepPlanner.java', 'IterativeRuleQueue.java', 'TopDownRuleQueue.java', 'RelMdUniqueKeys.java', 'JsonFunctions.java', 'SqlFunctions.java', 'RelBuilder.java', 'KafkaMessageEnumerator.java', 'PigRelOpVisitor.java', 'SplunkPushDownRule.java', 'StringUtils.java']"
3fa4bf1ef5b83fb0a3e1be451fba1677d19f52e2,"[CALCITE-4314] Suppress JdkObsolete warning for Date usage when used in converters

The new code should not use java.util.Date class, however,
converter classes can't avoid it.",['cff3695264797e292d08302786c074ebe1d1c43c'],False,"['CassandraEnumerator.java', 'RelMdPredicates.java', 'SqlFunctions.java', 'BitSets.java', 'SaffronProperties.java', 'Unsafe.java', 'Util.java', 'DruidConnectionImpl.java', 'ElasticsearchEnumerators.java', 'CsvEnumerator.java', 'FileRowConverter.java', 'GeodeUtils.java', 'MongoEnumerator.java', 'HttpServer.java']"
6917193bd142830461ff15dfe24923369208e148,"[CALCITE-4314] Suppress MutablePublicArray in Cassandra and Mongo adapters

See https://errorprone.info/bugpattern/MutablePublicArray",['3fa4bf1ef5b83fb0a3e1be451fba1677d19f52e2'],False,"['CassandraRules.java', 'MongoRules.java']"
e53724630af60566784e8aa7d8f56fe2932b12cc,"[CALCITE-4314] Suppress JdkObsolete for Stack usage

It should be replaced with Deque",['6917193bd142830461ff15dfe24923369208e148'],False,"['TopDownRuleDriver.java', 'Pattern.java']"
122db544ca7b2488dadc88f1eaba54447e4af4b2,"[CALCITE-4314] Use canonical class references

See https://errorprone.info/bugpattern/NonCanonicalType",['5be8a9aefcd7219cfe336729d4b1010f3d2c886a'],False,"['MetadataSchema.java', 'Prepare.java', 'MaterializedViewJoinRule.java', 'MaterializedViewOnlyJoinRule.java', 'MaterializedViewProjectFilterRule.java', 'MaterializedViewProjectJoinRule.java']"
cafe7ec3ac54a8b0aa0a145a1e2928e33f1c59e4,[CALCITE-4314] Resolve ProtectedMembersInFinalClass,['122db544ca7b2488dadc88f1eaba54447e4af4b2'],False,"['AggregateExpandDistinctAggregatesRule.java', 'FilterRemoveIsNotDistinctFromRule.java', 'JoinExtractFilterRule.java', 'RelDecorrelator.java']"
fe7c1f5808fa1894e7c1b4a7a2239b188c7c56b4,"[CALCITE-4314] Avoid importing of common names

See https://errorprone.info/bugpattern/BadImport",['cafe7ec3ac54a8b0aa0a145a1e2928e33f1c59e4'],False,"['RelOptUtil.java', 'MaterializedViewRule.java', 'SqlFunctions.java', 'SqlToRelConverter.java']"
c0ee886cc028c1baa40f14f04590f99451920b18,[CALCITE-4314] Avoid misleading fall through,['179ccca2833e919844723ff84ab3a449300b123e'],False,['SqlToRelConverter.java']
0024fdbed652bdd007d7eb1d5b9770b559e909bc,[CALCITE-4314] Avoid Map modification in forEcah loop,['be6fc6f34688d309903af4d76c92fb51eda10350'],False,"['RelDecorrelator.java', 'RelStructuredTypeFlattener.java']"
50920958af56217b49d3209a39017574688a8783,[CALCITE-4314] Avoid excessive lambdas in SemiJoinRule,['0024fdbed652bdd007d7eb1d5b9770b559e909bc'],False,['SemiJoinRule.java']
155276591288615c4d02d55fb7d77eceb2e24b2d,"[CALCITE-4314] Suppress the current CatchAndPrintStackTrace, MissingSummary, etc",['5bf678e2af3cae0f67a3c6e79cadf420f0325926'],False,"['EnumerableTableScan.java', 'JdbcImplementor.java', 'Bindables.java', 'Interpreter.java', 'CachingLatticeStatisticProvider.java', 'RelMdPredicates.java', 'RelMdRowCount.java', 'FlatLists.java', 'Hook.java', 'SqlFunctions.java', 'TrustAllSslSocketFactory.java', 'SqlNode.java', 'SqlParseException.java', 'SqlTypeUtil.java', 'RelDecorrelator.java', 'ControlFlowException.java', 'Util.java', 'DruidJsonFilter.java', 'DruidQuery.java', 'DruidType.java', 'ElasticsearchTransport.java', 'PredicateAnalyzer.java', 'GeodeAggregate.java', 'GeodeTable.java', 'GeodeUtils.java', 'SqlShell.java', 'SplunkDriver.java', 'SplunkConnectionImpl.java']"
69e812ff23b6f23a3737abeea5a8978a02bc2b5d,Site: change 1.25.0 release date to 2020-08-22,['155276591288615c4d02d55fb7d77eceb2e24b2d'],False,"['history.md', '2020-08-22-release-1.25.0.md']"
4c3ebf8a4dc04221fc13a53cf09b6da478e08aae,"Refactor ResultSetEnumerable to avoid nested lambdas

This reduces the likelihood of javac issues.

See https://github.com/policeman-tools/forbidden-apis/issues/173",['532f903fe495d741053619c13a51537e57dcd619'],False,['ResultSetEnumerable.java']
836202c3f5aa04d56fa2fd2debc3c2024f92357e,[CALCITE-4316] Avoid NPE when nulls are used in divide call,['4c3ebf8a4dc04221fc13a53cf09b6da478e08aae'],False,"['SqlBinaryOperator.java', 'SqlValidatorTest.java']"
8df4df024128da846ccb404487628b413747a2c5,"[CALCITE-4324] Avoid sqlline classpath caching by default, add sqlline and sqlsh tests

The classpath caching can be enabled with CACHE_SQLLINE_CLASSPATH=Y environment variable",['5ae3c16153fd81fdf28f8493eb3c0178b860f269'],False,"['main.yml', '.ratignore', 'build.gradle.kts', 'build.gradle.kts', 'sqlline', 'sqlline.bat', 'smoke_test.sql', 'sqlline', 'sqlline.bat', 'sqlsh', 'sqlsh.bat']"
fcca91431003879e25d5191146b08683d22b0ccb,"Doc: typo fix

Close #2193",['3957f2a0e2389a78427953bf49c4448a34526655'],False,"['geode_adapter.md', 'howto.md', 'kafka_adapter.md', 'lattice.md', 'materialized_views.md', 'model.md']"
c7fdae22fb0e6b220152f05a7343ce5569283a83,"[CALCITE-4302] Improve cost propagation in volcano to avoid re-propagation (Botong Huang)

CALCITE-3330 changed the cost propagation in volcano from DFS to BFS.
However, there is still room for improvement. A subset can be updated
more than once in a cost propagation process. For instance, A -> D, A ->
B -> C -> D. When subset A has an update, using BFS subset D (and thus
all subsets above/after D) can be updated twice, first via A -> D and
then C -> D. We can further improve the BFS by always popping the
relNode with the smallest cost from the queue, similar to the Dijkstra
algorithm. So that whenever a relNode is popped from the queue, its
current best cannot be further deceased any more. As a result, all
subsets will only be propagated at most once.

close apache/calcite#2187",['ebefe52f577da5c744ea863480ed3c98b7ef2e99'],False,"['RelSet.java', 'RelSubset.java', 'VolcanoPlanner.java', 'DruidAdapter2IT.java', 'DruidAdapterIT.java']"
ee5c78444558117c71cc7058a79bc920a52cad59,"[CALCITE-4325] RexSimplify incorrectly simplifies complex expressions that contain Sarg and IS NULL

Improve how class Sarg handles IS NULL and IS NOT NULL
conditions. They are now handled symmetrically, using fields
nullCount and notNullCount, whereas previously we used
containsNull, which could handle IS NULL only in certain
circumstances and IS NOT NULL not at all.

In CalciteAssert, correct rounding floating point rounding
errors before comparing SQL column values. For example,
'236.55000000000007' becomes '236.55'. This fixes some
intermittent Druid test failures.",['16b22b105dfcb3d95cc7af8eb54105f231d18cc9'],False,"['RexSimplify.java', 'Sarg.java', 'RexProgramTest.java', 'RelBuilderTest.java', 'sub-query.iq', 'TpcdsTest.java']"
ffc1e3b05e7f920d95c48f7c75fd48372684b8e7,"Make progress on [CALCITE-4204] Intermittent precision in Druid results when using aggregation functions over columns of type DOUBLE

If a query returns a column value that has at least four
zeros or nines after the decimal point (indicating that
rounding has occurred) clean up the rounding. For example,
'12.3449999962' becomes '12.345'. Most queries have a result
that is decimal exact to a small number of decimal places;
such queries are re-enabled in this change, because they are
now deterministic. There are still a few queries whose
decimal does not terminate (perhaps it is a rational number)
and therefore [CALCITE-4204] remains open.",['ee5c78444558117c71cc7058a79bc920a52cad59'],False,"['TimeString.java', 'TimeWithTimeZoneString.java', 'TimestampString.java', 'TimestampWithTimeZoneString.java', 'Util.java', 'SqlParserTest.java', 'CalciteAssert.java', 'SqlValidatorTest.java', 'TestUtil.java', 'TestUtilTest.java', 'DruidAdapter2IT.java', 'DruidAdapterIT.java']"
cd922deff8ae3f25546b1d77fb147c3098eb177b,"Site: fix aggregate function doc

Method result() now returns an int value, as required by the method signature
(Alexander Trushev)",['538f6ae70d82c23f4afb72fbea5bc8b49a81fe52'],False,['adapter.md']
fbef7c8fd90e59f6ba2043fe37045eb2590abc8f,Make buildSrc jars reproducible for better caching,['cd922deff8ae3f25546b1d77fb147c3098eb177b'],False,['build.gradle.kts']
9f1332585b86be18ececdf15b3f103c9b069c25d,"Remove files that change often from Travis cache, remove broken files automatically

The cache itself is useful, however, there might be two problems:
* Corrupted files might get cached, so the subsequent builds would fail
* Too large cache might slowdown the build

cleanup-gradle-cache solves both issues.

The cache itself is still re-uploaded on every build (see ""store build cache""),
so it might need more investigations.",['fbef7c8fd90e59f6ba2043fe37045eb2590abc8f'],False,['.travis.yml']
bda7fb188b01c0334a7bf1662101e259321893a4,"[CALCITE-4321] JDBC adapter omits FILTER (WHERE ...) expressions when generating SQL (Jeremiah Rhoads Hall)

Working fix and simple test case for FILTER-WHERE conditions
not being added to aggregate calls during SQL implementation
in class SqlImplementor.

Add `supportsAggregateFunctionFilter()` to SqlDialect. If a
dialect does not support FILTER-WHERE, SqlImplementor instead
generates an aggregate function with CASE. (This works for
all aggregate functions where NULL values are ignored.)

Extend the CASE rewrite to support COUNT with zero, one or
more arguments (Julian Hyde).

Close apache/calcite#2204",['9f1332585b86be18ececdf15b3f103c9b069c25d'],False,"['JdbcRules.java', 'SqlImplementor.java', 'SqlDialect.java', 'BigQuerySqlDialect.java', 'HsqldbSqlDialect.java', 'RelToSqlConverterTest.java', 'agg.iq']"
3c7e2e3f3edbf60d93ebf7c8946d1177a02d3e87,"[CALCITE-4225] Make RelDecorrelator pluggable

* Change all the members of RelDecorrelator as protected scope
* Add RelDecorrelator.getVisitor to override the dispatcher visitor
* Add RelDecorrelator.getPostDecorrelateRules for post decorrelation
  optimisation",['c2527ccf440f7750bfbabd2063c402440c5b32a0'],False,['RelDecorrelator.java']
f9d23a62145e8c490492214836ce9cd7d1dcc35e,[CALCITE-4332] Improve error when planning rule produces a relational expression with wrong row type,['3c7e2e3f3edbf60d93ebf7c8946d1177a02d3e87'],False,"['RelOptUtil.java', 'VolcanoPlanner.java', 'RelOptUtilTest.java', 'PlannerTests.java', 'VolcanoPlannerTest.java']"
c70845687337ac65d00d3680d551549b9bda2b56,"[CALCITE-4345] AggregateCaseToFilterRule throws NullPointerException when converting CASE without ELSE (Jiatao Tao)

For example, 'SUM(CASE WHEN b THEN 1 END)' is equivalent to
'SUM(CASE WHEN b THEN 1 ELSE NULL END)', and both should be
converted to 'SUM(1) FILTER (WHERE b)', but before this bug
was fixed the former would throw NullPointerException.

Close apache/calcite#2225",['add837afd15e1816e6415387559f51bd04996ef9'],False,"['AggregateCaseToFilterRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'agg.iq']"
fdcb195b829fdc4f52d777ae09630ee65eb0a977,Fix grammatical errors in TopDownRuleDriver/TopDownRuleQueue/RuleDriver/VolcanoPlanner,['2e9edae7fc57ab9c9c7c097008724ac99a1791a3'],False,"['RuleDriver.java', 'TopDownRuleDriver.java', 'TopDownRuleQueue.java', 'VolcanoPlanner.java']"
59a195f1a566e6724acc8bda246faf2f4ad89dae,Fix grammatical errors in documentation (Geetha Rangaswamaiah),['d226a9456a8cfdb108a50744d702e915b46c7ffa'],False,['adapter.md']
6f94db067fd7b481f8969edbe5698685719e287a,"[CALCITE-4380] Make class SqlNodeList implement List<SqlNode>

Remove most uses of SqlNodeList.getList().

Add convenient method SqlIdentifier.simpleNames.

Make name list optional in SqlToRelConverter.convertFrom.

Add method RelBuilder.let, which runs a given lambda in the
context of the current RelBuilder, and returns its result.
For example, to perform conditional logic without breaking
the pipeline, use 'let' with a lambda that returns the
RelBuilder.",['0ce7685477d33374ddf0fe7f32b5a2d04040b47c'],False,"['Parser.jj', 'SqlCallBinding.java', 'SqlHint.java', 'SqlIdentifier.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlOperator.java', 'SqlPivot.java', 'SqlWindowTableFunction.java', 'SqlCreateFunction.java', 'SqlCase.java', 'SqlCaseOperator.java', 'Span.java', 'SqlParserUtil.java', 'SqlShuttle.java', 'AggFinder.java', 'AliasNamespace.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'WithItemNamespace.java', 'WithNamespace.java', 'AbstractTypeCoercion.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'RelBuilder.java', 'SqlNodeTest.java', 'SqlParserTest.java', 'SqlCreateTable.java', 'SqlTypeUtilTest.java', 'RelBuilderTest.java', 'PigRelToSqlConverter.java', 'ServerDdlExecutor.java']"
e819b4611e883c54708a75f6856300462c92b8ae,"[CALCITE-4394] When generating code for a function call, take the inferred types of the operands into account

Refactor SqlOperatorBaseTest.testConcatFunc for the various
variants of CONCAT in PostgreSQL, MySQL, Oracle dialects.

Fix code generation that uses built-in functions with
varargs. In particular, SqlFunctions has
concat(String, String) and concat(String...). The fix for
[CALCITE-3563] changed the information used by the
implementor from Method to Class + methodName, which has a
couple of problems: it is lossy if the method is overloaded,
and does not allow us to see whether the method has varargs
parameters. In this commit, we change it back, and add
different code path for varargs methods. We now require
varargs methods to have different names to non-vargs methods.",['54a7bfaf84a2845e8668b62d1be69747e21f4e88'],False,"['EnumUtils.java', 'RexImpTable.java', 'SqlFunctions.java', 'SqlKind.java', 'SqlOperator.java', 'SqlJsonObjectFunction.java', 'SqlLibraryOperators.java', 'SqlStdOperatorTable.java', 'CompositeOperandTypeChecker.java', 'SqlOperandTypeChecker.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'EnumUtilsTest.java', 'SqlOperatorBaseTest.java']"
3ccad7b2bcc962d48c1dee1c9604fd085d82c608,"Following [CALCITE-4364], fix the plan diff of TpcdsTest",['ff4c16d1ea2192435e543fc9572ae3a44decbf79'],False,['TpcdsTest.java']
fbe69824ffb13f847d1db6e26f0030ddec7b0e8c,[CALCITE-4393] ExceptionInInitializerError due to NPE in SqlCallBinding caused by circular dependency,['99251a51842483bc80688364195a159b740bd53f'],False,['SqlCallBinding.java']
b7e90e1aeead1406855030023c7dc1934f821cc6,"[CALCITE-4251] Avoid NPE in LoptMultiJoin when mq.getColumnOrigin(left, i) returns null",['d3cf48514d2f7a93092b2d2a8151d9cf99cca10c'],False,['LoptMultiJoin.java']
2c28b5b09865bd48313d07c1f37cf6f6ebc701a4,"Add regression warning to prevent users from upgrading to 1.26.0

Sample regressions:",['3d13846a13398a1ba6c1fa84a7d0c0cc543f23d4'],False,['2020-10-06-release-1.26.0.md']
0327135376246eb58e1703fc13d555efaf389ada,"[CALCITE-4408] Implement Oracle SUBSTR function (James Starr)

Add an operand type checker for the Oracle SUBSTR. Becauses
semantics are different to standard SUBSTRING, implement by
translating to SUBSTRING with a CASE expression to handle the
differences.

The implementation assumes that SUBSTRING is consistent with
BigQuery, not ISO Standard SQL, and may need rework when
  [CALCITE-4427] Make SUBSTRING operator comply with ISO
  standard SQL
is fixed.

Rework so that it gives the right result for very negative
start; add tests for MySQL and PostgreSQL variants of SUBSTR
(Julian Hyde).

Close apache/calcite#2271",['d9b55b4300eb2959c4ed55e9b692ffb9f12dd1ef'],False,"['OracleSqlDialect.java', 'OracleSqlOperatorTable.java', 'SqlLibraryOperators.java', 'OperandTypes.java', 'StandardConvertletTable.java', 'SqlOperatorBaseTest.java']"
404f968f6079360621896e6ee20ec12488a40bc2,"[CALCITE-4422] Add MethodCanBeStatic check via ErrorProne

private and final methods can be made static, so it is clear they do not access instance fields",['0327135376246eb58e1703fc13d555efaf389ada'],False,"['build.gradle.kts', 'CassandraRules.java', 'ColumnLoader.java', 'EnumUtils.java', 'EnumerableLimitSort.java', 'EnumerableMatch.java', 'EnumerableMergeJoin.java', 'EnumerableRelImplementor.java', 'EnumerableTableFunctionScan.java', 'EnumerableTableScan.java', 'EnumerableWindow.java', 'ReflectiveCallNotNullImplementor.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'StrictAggImplementor.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcToEnumerableConverter.java', 'AggregateNode.java', 'Interpreter.java', 'SortNode.java', 'CalciteMetaImpl.java', 'CalciteResultSet.java', 'JavaTypeFactoryImpl.java', 'Lattice.java', 'LatticeSuggester.java', 'MaterializationService.java', 'SqlLatticeStatisticProvider.java', 'Step.java', 'ConventionTraitDef.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'HepPlanner.java', 'IterativeRuleQueue.java', 'VolcanoPlanner.java', 'CalciteCatalogReader.java', 'CalcitePrepareImpl.java', 'Prepare.java', 'RelDotWriter.java', 'RelJson.java', 'RelMdAllPredicates.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdPredicates.java', 'RelMdSize.java', 'RelMdUniqueKeys.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateJoinTransposeRule.java', 'AggregateMergeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'CalcRelSplitter.java', 'DateRangeRules.java', 'FilterAggregateTransposeRule.java', 'FilterJoinRule.java', 'JoinPushThroughJoinRule.java', 'JoinToMultiJoinRule.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MultiJoinOptimizeBushyRule.java', 'ProjectToWindowRule.java', 'ProjectWindowTransposeRule.java', 'PushProjector.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SubQueryRemoveRule.java', 'RexBuilder.java', 'RexInterpreter.java', 'RexSimplify.java', 'RexSqlStandardConvertletTable.java', 'RexTransformer.java', 'RexUtil.java', 'Resources.java', 'ResultSetEnumerable.java', 'SqlBasicTypeNameSpec.java', 'SqlCallBinding.java', 'SqlDialect.java', 'SqlDialectFactoryImpl.java', 'SqlFunction.java', 'SqlIntervalQualifier.java', 'SqlJdbcFunctionCall.java', 'SqlOperator.java', 'SqlUnnestOperator.java', 'SqlWindow.java', 'SqlAdvisor.java', 'SqlSimpleParser.java', 'BigQuerySqlDialect.java', 'ClickHouseSqlDialect.java', 'JethroDataSqlDialect.java', 'MssqlSqlDialect.java', 'MysqlSqlDialect.java', 'PrestoSqlDialect.java', 'SqlCaseOperator.java', 'SqlDotOperator.java', 'SqlItemOperator.java', 'SqlJsonArrayFunction.java', 'SqlJsonObjectFunction.java', 'SqlJsonQueryFunction.java', 'SqlLibraryOperatorTableFactory.java', 'SqlLiteralChainOperator.java', 'SqlMapValueConstructor.java', 'SqlMultisetQueryConstructor.java', 'SqlRollupOperator.java', 'SqlPrettyWriter.java', 'CompositeOperandTypeChecker.java', 'SqlTypeFactoryImpl.java', 'SqlTypeName.java', 'AliasNamespace.java', 'DelegatingScope.java', 'ListScope.java', 'SetopNamespace.java', 'SqlNameMatchers.java', 'SqlValidatorImpl.java', 'AbstractTypeCoercion.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'MapSqlStatisticProvider.java', 'QuerySqlStatisticProvider.java', 'RelBuilder.java', 'JsonBuilder.java', 'PartiallyOrderedSet.java', 'Permutation.java', 'PrecedenceClimbingParser.java', 'ComplexMetric.java', 'DruidConnectionImpl.java', 'DruidJsonFilter.java', 'DruidQuery.java', 'DruidRules.java', 'DruidTable.java', 'ElasticsearchAggregate.java', 'PredicateAnalyzer.java', 'QueryBuilders.java', 'CsvFilterableTable.java', 'CsvProjectTableScanRule.java', 'CsvProjectTableScanRule.java', 'FileReader.java', 'FileSchema.java', 'GeodeAggregate.java', 'GeodeFilter.java', 'GeodeRules.java', 'GeodeSort.java', 'IndexCondition.java', 'InnodbEnumerator.java', 'InnodbFilterTranslator.java', 'BinaryExpression.java', 'BlockBuilder.java', 'DeterministicCodeOptimizer.java', 'OptimizeShuttle.java', 'MongoAggregate.java', 'MongoFilter.java', 'MongoRules.java', 'MongoSchemaFactory.java', 'MongoSort.java', 'PigAggregate.java', 'PigFilter.java', 'PigConverter.java', 'PigRelExVisitor.java', 'PigToSqlAggregateRule.java', 'PreferredAlbumsTableFactory.java', 'PreferredGenresTableFactory.java', 'SplunkPushDownRule.java', 'FlightRecorderProfiler.java']"
79006252a81353880c06f688d9d92c0cdc57026d,"Make sure compileJava is reexecuted in case of the minor javac version changes

The change workarounds https://github.com/gradle/gradle/issues/15464",['404f968f6079360621896e6ee20ec12488a40bc2'],False,['build.gradle.kts']
3311d45bdf95eecac9659443b350080d0b5f4eee,"Require Java 1.8.0u202 or later for the build

Java versions prior to 1.8.0u202 have known issues that cause
invalid bytecode in certain patterns of annotation usage.",['79006252a81353880c06f688d9d92c0cdc57026d'],False,['build.gradle.kts']
d3d157fcf99686d341a104b4763d0424544b904a,"Test case for [CALCITE-1382] ClassCastException in JDBC Adapter

The bug was probably fixed a long time ago; the test will
allow us to mark it fixed.",['ad6d1d907b913bab36d66879d656ae3115aa220e'],False,['JdbcAdapterTest.java']
56a86a032ac05ed522846910eea6f884b31820e3,Refactor: Change return type of RelBuilder.literal from RexNode to RexLiteral,['d3d157fcf99686d341a104b4763d0424544b904a'],False,"['RelJson.java', 'SqlImplementor.java', 'AggregateValuesRule.java', 'SubQueryRemoveRule.java', 'RexBuilder.java', 'StandardConvertletTable.java', 'RelBuilder.java', 'RexBuilderTest.java', 'RexProgramBuilderBase.java', 'RexProgramTest.java', 'RelBuilderTest.java', 'RelOptRulesTest.java', 'RexFuzzer.java', 'Handler.java', 'PigRelBuilder.java']"
1dd27f7ee6eaabd44ecda148bff7db9926dbf201,"[CALCITE-4434] Cannot implement 'CASE row WHEN row ...'

Fix by expanding
  ROW (x0, x1, ...) = ROW (y0, y1, ...)
inside a CASE expression to
  x0 = y0 AND x1 = y1 AND ...

Close apache/calcite#2309",['80c4ebc17af928e2f4ee3a475abf9c62bf528faa'],False,"['StandardConvertletTable.java', 'struct.iq']"
28d1c097e28dbc17f62ac1311755673d65337217,"Cosmetic changes

Code and comment formatting in RelToSqlConverterTest.",['1dd27f7ee6eaabd44ecda148bff7db9926dbf201'],False,['RelToSqlConverterTest.java']
5ddd016024eb74fbf769422ea320938a6e3a4cde,Add ErrorProne and the Checker Framework verifications to Travis CI,['8b9618fdd42daa14524e8baa69124982f409937a'],False,['.travis.yml']
2bb92274ef5835a81d0ce7dca2a167b5b91c0eab,"Bump Gradle 6.7 -> 6.8.1

See https://docs.gradle.org/6.8.1/release-notes.html

- Faster Kotlin DSL script compilation
- Vendor selection for Java toolchains
- Task execution in composite builds
- Consistent dependency resolution",['801f33de8050ab7529b8597e2091d07fc5d81f27'],False,"['build.gradle.kts', 'gradle-wrapper.properties']"
6dace36e7cd0bd85d0bb02d1df6988b542dd6e49,"Bump checkerframework 3.7 -> 3.9.1

See https://checkerframework.org/changelog.txt",['2bb92274ef5835a81d0ce7dca2a167b5b91c0eab'],False,"['CalciteSystemProperty.java', 'CompositeOperandTypeChecker.java', 'gradle.properties', 'Iterables.astub']"
12a484a5c364c36e9551e59f4dc33bfb219ecf07,"[CALCITE-4431] Use requireNonNull(var, ""var"") instead of requireNonNull(var) for better error messages

This makes it easier to understand the reason for the failure, especially
when multiple requireNonNull lines go side-by-side.

The added AutoStyle configuration ensures the label does not go out-of-sync",['6dace36e7cd0bd85d0bb02d1df6988b542dd6e49'],False,"['build.gradle.kts', 'RexToLixTranslator.java', 'JdbcCatalogSchema.java', 'JdbcTable.java', 'JdbcTableScan.java', 'Lex.java', 'Bindables.java', 'Interpreter.java', 'CalciteConnectionImpl.java', 'CalciteMetaImpl.java', 'CalciteSchema.java', 'JavaRecordType.java', 'JavaTypeFactoryImpl.java', 'Lattice.java', 'LatticeSpace.java', 'LatticeSuggester.java', 'LatticeTable.java', 'MaterializationActor.java', 'MutableNode.java', 'ProfilerLatticeStatisticProvider.java', 'SqlLatticeStatisticProvider.java', 'Step.java', 'AbstractRelOptPlanner.java', 'Contexts.java', 'RelCompositeTrait.java', 'RelOptCluster.java', 'RelOptMaterialization.java', 'RelOptPredicateList.java', 'RelOptRule.java', 'RelOptRuleOperand.java', 'RelRule.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'HepProgramBuilder.java', 'CalciteCatalogReader.java', 'Prepare.java', 'RelOptTableImpl.java', 'RelDistributions.java', 'RelFieldCollation.java', 'RelRoot.java', 'Aggregate.java', 'AggregateCall.java', 'Correlate.java', 'EquiJoin.java', 'Exchange.java', 'Join.java', 'JoinInfo.java', 'Match.java', 'RelFactories.java', 'Snapshot.java', 'Sort.java', 'SortExchange.java', 'Spool.java', 'TableModify.java', 'TableSpool.java', 'Window.java', 'HintStrategy.java', 'HintStrategyTable.java', 'Hintable.java', 'RelHint.java', 'LogicalFilter.java', 'LogicalJoin.java', 'CachingRelMetadataProvider.java', 'ReflectiveRelMetadataProvider.java', 'RelMetadataQuery.java', 'MutableRel.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AggregateReduceFunctionsRule.java', 'DateRangeRules.java', 'LoptJoinTree.java', 'MultiJoinOptimizeBushyRule.java', 'PushProjector.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelRecordType.java', 'RexBuilder.java', 'RexCall.java', 'RexCorrelVariable.java', 'RexLiteral.java', 'RexOver.java', 'RexProgramBuilder.java', 'RexSimplify.java', 'RexUtil.java', 'RexVariable.java', 'RexWindow.java', 'Automaton.java', 'AutomatonBuilder.java', 'DeterministicAutomaton.java', 'Enumerables.java', 'GeoFunctions.java', 'Geometries.java', 'Matcher.java', 'Pattern.java', 'Schemas.java', 'AggregateFunctionImpl.java', 'StarTable.java', 'SqlAbstractDateTimeLiteral.java', 'SqlAggFunction.java', 'SqlBasicCall.java', 'SqlBinaryOperator.java', 'SqlCollectionTypeNameSpec.java', 'SqlDdl.java', 'SqlDescribeTable.java', 'SqlDialect.java', 'SqlFunction.java', 'SqlJdbcFunctionCall.java', 'SqlJoin.java', 'SqlLiteral.java', 'SqlMatchRecognize.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlPivot.java', 'SqlRowTypeNameSpec.java', 'SqlSetOption.java', 'SqlSnapshot.java', 'SqlUnpivot.java', 'SqlUtil.java', 'SqlAdvisor.java', 'SqlCreateForeignSchema.java', 'SqlCreateFunction.java', 'SqlCreateMaterializedView.java', 'SqlCreateSchema.java', 'SqlCreateTable.java', 'SqlCreateType.java', 'SqlCreateView.java', 'JethroDataSqlDialect.java', 'SqlBasicAggFunction.java', 'SqlJsonArrayAggAggFunction.java', 'SqlJsonObjectAggAggFunction.java', 'SqlLibrary.java', 'SqlQuantifyOperator.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'AbstractSqlType.java', 'ArraySqlType.java', 'BasicSqlType.java', 'ComparableOperandTypeChecker.java', 'CompositeOperandTypeChecker.java', 'ExplicitOperandTypeChecker.java', 'IntervalSqlType.java', 'OperandMetadataImpl.java', 'SqlTypeMappingRule.java', 'SqlTypeTransformCascade.java', 'SqlTypeTransforms.java', 'IdPair.java', 'AggVisitor.java', 'IdentifierNamespace.java', 'ListScope.java', 'SchemaNamespace.java', 'SqlIdentifierMoniker.java', 'SqlMonikerImpl.java', 'SqlValidatorImpl.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'TableScope.java', 'AbstractTypeCoercion.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'QuerySqlStatisticProvider.java', 'Frameworks.java', 'Hoist.java', 'RelBuilder.java', 'BitString.java', 'CancelFlag.java', 'EquivalenceSet.java', 'ImmutableBeans.java', 'ImmutableNullableSet.java', 'NlsString.java', 'Pair.java', 'PrecedenceClimbingParser.java', 'Sarg.java', 'SourceStringReader.java', 'Sources.java', 'UnmodifiableArrayList.java', 'Util.java', 'DefaultEdge.java', 'ProfilerTest.java', 'RexProgramTestBase.java', 'SqlParserTest.java', 'SqlCreateTable.java', 'AbstractSqlTester.java', 'SqlPrettyWriterTest.java', 'CalciteAssert.java', 'DiffRepository.java', 'RelOptTestBase.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorTestCase.java', 'PartiallyOrderedSetTest.java', 'DefaultDimensionSpec.java', 'DruidConnectionImpl.java', 'DruidJsonFilter.java', 'DruidQuery.java', 'DruidSchema.java', 'DruidTable.java', 'ExtractionDimensionSpec.java', 'Granularities.java', 'NaryOperatorConverter.java', 'VirtualColumn.java', 'GeodeSchema.java', 'IndexCondition.java', 'InnodbFilter.java', 'EnumerableDefaults.java', 'GroupingImpl.java', 'ArrayLengthRecordField.java', 'Expressions.java', 'ForEachStatement.java', 'FunctionExpression.java', 'GotoStatement.java', 'TryStatement.java', 'Ast.java', 'SqlShell.java', 'MutableArrayTable.java', 'ServerDdlExecutor.java']"
a16a47351aa25caf538c1955edd171ec871569f7,[CALCITE-4474] fix SqlSimpleParser inner Tokenizer should not recognize the sql of TokenType.ID or some keywords in some case (wangjie),['12a484a5c364c36e9551e59f4dc33bfb219ecf07'],False,"['SqlSimpleParser.java', 'SqlAdvisorTest.java']"
126aa842a6fcd04c411348b4b286b22eeee64d36,"Use Sonatype OSSRH repository instead of JCenter in build plugins

jcenter() will stop working on May 1, 2021
See https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/",['85f939f922b50aca054e19f21a3c0a55afd4b929'],False,['build.gradle.kts']
99aa01a215587a6121f5d0e4dc4c698eb6db6598,Make sure FmppTask re-executes in case default_config.fmpp changes,['d21d540fafce8225b12b032900a8087f8ac33a91'],False,['FmppTask.kt']
8178367ad64f6ed0e7f667122aa9b5d26e7a35f6,Refactor: Change RexBuilder.addAggCall() to use a nullability predicate rather than type,['b3aaaa8f3eb09a5f6a00ccb4ead6daaaf800faa0'],False,"['RelNode.java', 'AggregateCall.java', 'AggregateReduceFunctionsRule.java', 'RexBuilder.java', 'SqlToRelConverter.java']"
f1da65504e598928cf77aa6a7244552692ae2529,"[CALCITE-4483] WITHIN DISTINCT clause for aggregate functions (experimental)

The WITHIN DISTINCT feature is experimental and subject to
change/removal without notice.

To represent WITHIN DISTINCT in relational algebra, add
method RelBuilder.AggCall.unique() and field
AggregateCall.distinctKeys.

To represent WITHIN DISTINCT in the SQL AST, add
WITHIN_DISTINCT SQL operator.

Add a planner rule, AggregateExpandWithinDistinctRule, that
implements WITHIN DISTINCT by pre-aggregating the rows that
will go into each aggregate function.

There are two variants of the rule; one that throws a runtime
error if the operand is not functionally-dependent on the
WITHIN DISTINCT key, and one that takes the minimum. The former
is enabled by default.

The rule handles DISTINCT aggregate calls by converting them
to WITHIN DISTINCT (because the latter is a generalization of
the former).

Add an internal $THROW_UNLESS function (invoked when operands
are not functionally dependent).

Further work is required to complete the feature:
 * support FILTER clause in combination with WITHIN DISTINCT;
 * support WITHIN DISTINCT clause in GROUPING SETS queries;
 * duplicate detection fails for aggregate functions that
   respect nulls.

Regarding nulls. Luckily most aggregate functions ignore
nulls by default, but exceptions include ARRAY_AGG. If the
input to ARRAY_AGG for a given WITHIN-DISTINCT-key value is
[null, 1, null], MIN and MAX will both be 1, so we cannot
determine that all of the values were not the same.

Close apache/calcite#2339",['7b338c043fb76350be518cc71812b83dc089bcca'],False,"['Parser.jj', 'EnumerableAggregate.java', 'RexImpTable.java', 'JdbcRules.java', 'Bindables.java', 'RelOptRules.java', 'RelOptUtil.java', 'SubstitutionVisitor.java', 'AggregateCall.java', 'Window.java', 'RelJsonReader.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateFilterTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'CoreRules.java', 'ProjectAggregateMergeRule.java', 'CalciteResource.java', 'SqlFunctions.java', 'SqlAggFunction.java', 'SqlFilterOperator.java', 'SqlKind.java', 'SqlSplittableAggFunction.java', 'SqlWithinDistinctOperator.java', 'SqlWithinGroupOperator.java', 'SqlInternalOperators.java', 'SqlStdOperatorTable.java', 'AggChecker.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'BuiltInMethod.java', 'ImmutableBitSet.java', 'CalciteResource.properties', 'NormalizationTrimFieldTest.java', 'RelWriterTest.java', 'TraitPropagationTest.java', 'SqlParserTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'within-distinct.iq', 'DruidRules.java', 'algebra.md', 'reference.md']"
207bc8a0d731fa40e84309dfea3f8189b383e117,"[CALCITE-4265] Improve error message when CAST to unknown type (Louis
Kuang)

If SqlNode is an Identifier node whose type can not be derived, throws
a validation error instead of an UnsupportedOperationException to improve
error message.

close apache/calcite#2326",['d815dc1209c3cc0728941e9fc81fce7d9e44c79b'],False,"['SqlValidatorImpl.java', 'SqlValidatorTest.java']"
48d77026e1f05298e09f0a85a43364f49cc4a4ea,"Bump checkerframework 3.9.1 -> 3.10.0, errorprone 2.4.0 -> 2.5.1",['207bc8a0d731fa40e84309dfea3f8189b383e117'],False,"['build.gradle.kts', 'SqlIntervalQualifier.java', 'AbstractNamespace.java', 'gradle.properties']"
03e356c656c2bc98b1a273352475033545e0928d,"Cleanup code after errorprone upgrade: IdentityHashMapUsage, JdkObsolete -> JavaUtilDate

See http://errorprone.info/bugpattern/IdentityHashMapUsage",['48d77026e1f05298e09f0a85a43364f49cc4a4ea'],False,"['EnumerableRelImplementor.java', 'Lattice.java', 'LatticeSuggester.java', 'RelJsonWriter.java', 'LogicalWindow.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateUnionTransposeRule.java', 'PruneEmptyRules.java', 'SqlFunctions.java', 'SqlValidatorImpl.java', 'PartiallyOrderedSet.java', 'Util.java', 'DruidConnectionImpl.java', 'ElasticsearchEnumerators.java', 'CsvEnumerator.java', 'FileRowConverter.java', 'GeodeUtils.java', 'BlockBuilder.java', 'DeterministicCodeOptimizer.java', 'MongoEnumerator.java']"
0fb14d553764f2a993ec56db4a36de2713ac1206,"[CALCITE-4276] MaterializedViewOnlyAggregateRule performs invalid rewrite on query that contains join and time-rollup function (FLOOR) (Justin Swett)

Without the fix, MaterializedViewOnlyAggregateRule gets a
field ordinal wrong, which manifests as a type mismatch
something like this:

  java.lang.AssertionError: type mismatch:
      ref: TIMESTAMP(3)
      input: INTEGER NOT NULL
    at org.apache.calcite.util.Litmus$1.fail(Litmus.java:32)
    at org.apache.calcite.plan.RelOptUtil.eq(RelOptUtil.java:2207)
    at org.apache.calcite.rex.RexChecker.visitInputRef(RexChecker.java:129)

It's difficult to see among all the refactoring, but the fix
is just two lines; in MaterializedViewOnlyAggregateRule, change

  final int k = find(topViewProject, r);

to

   final int j = find(viewNode, r);
   final int k = find(topViewProject, j);

and the problem goes away.",['00d1086c7003115a9ed9dcc874051f515b7b5aae'],False,"['MaterializedViewAggregateRule.java', 'RelBuilder.java', 'JdbcTest.java', 'MaterializationTest.java', 'MaterializedViewRelOptRulesTest.java']"
b49693d31964657bf5058bd9387e505992cebd51,"Update dependency declarations: adjust api vs implementation, remove unused ones

This change brings dependency analysis plugin:

  ./gradlew buildHealth --no-parallel --no-daemon

Most of the times the suggestions are good, however, there are still issues,
so don't blindly follow the recommendations.

See https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin",['0fb14d553764f2a993ec56db4a36de2713ac1206'],False,"['build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'gradle.properties', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'settings.gradle.kts', 'build.gradle.kts', 'build.gradle.kts']"
008930a5a0a4310d642ae902365a883208d097cb,[CALCITE-4533] Fix handling of REPLACE and IF NOT EXISTS keywords for CREATE TABLE/SCHEMA commands (Vladimir Ozerov),['963ef2798990c06c835c28945ff811ec3cbfa7a6'],False,"['ServerDdlExecutor.java', 'ServerTest.java']"
93a2263f7af23be34171a6a1e4f5864a85691650,"[CALCITE-4524] Make some fields non-nullable (SqlSelect.selectList, DataContext.getTypeFactory)

In order to make SqlSelect.selectList non-nullable, we had to
change the flow in RelToSqlConverter, where selectList was
initially null; now we set it to SqlNodeList.SINGLETON_STAR.

Add class DataContexts, with a few useful implementations of
interface DataContext. Phase out Schemas.createDataContext.

Resolve some other TODOs relating to nullability.",['008930a5a0a4310d642ae902365a883208d097cb'],False,"['DataContext.java', 'DataContexts.java', 'EnumerableWindow.java', 'JdbcTable.java', 'Interpreter.java', 'TableScanNode.java', 'CalciteConnectionImpl.java', 'MaterializationService.java', 'ProfilerLatticeStatisticProvider.java', 'SqlLatticeStatisticProvider.java', 'ModelHandler.java', 'VolcanoPlanner.java', 'TableScan.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'DateRangeRules.java', 'FilterJoinRule.java', 'ReduceExpressionsRule.java', 'RexUtil.java', 'Schemas.java', 'SqlSelect.java', 'SqlSelectOperator.java', 'SqlInternalOperators.java', 'AggChecker.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'RelToSqlConverterTest.java', 'RexExecutorTest.java', 'RexProgramBuilderBase.java', 'AbstractMaterializedViewTest.java', 'InterpreterTest.java', 'LinqFrontJdbcBackTest.java', 'MockRelOptPlanner.java', 'RexImplicationCheckerTest.java', 'CsvFilterableTable.java', 'CsvScannableTable.java', 'CsvStreamScannableTable.java', 'CsvTranslatableTable.java', 'CsvTranslatableTable.java', 'JsonScannableTable.java', 'FilesTableFunction.java', 'PsTableFunction.java', 'VmstatTableFunction.java']"
fc6d56f1ac6d590b8a332cb0931a71ecd2367969,"[CALCITE-4418] Allow Interpreter to read from JDBC input

The main changes concern whether we shift the time zone of
DATE, TIME and TIMESTAMP values when we convert them from
JDBC types (java.sql.Date, Time and Timestamp) to internal
types (int, int, long) and back again.",['93a2263f7af23be34171a6a1e4f5864a85691650'],False,"['ColumnLoader.java', 'EnumUtils.java', 'JdbcTable.java', 'JdbcUtils.java', 'CalciteAssert.java', 'InterpreterTest.java']"
084d608c6adbbb82bcbdc2778439dfbeb6d6afdd,"[CALCITE-4477] In Interpreter, support table-valued functions

Fix RexCallBinding, so that we can access constant arguments
to table function scans when created via RelBuilder.

Add Fibonacci table function, as a test.",['ca9f0053611f54d92852a5c85e369a98bd3f91e7'],False,"['Nodes.java', 'TableFunctionScanNode.java', 'TableFunctionImpl.java', 'SqlCallBinding.java', 'SqlOperatorBinding.java', 'InterpreterTest.java', 'MockSqlOperatorTable.java', 'RelBuilderTest.java', 'TableFunctionTest.java', 'Smalls.java']"
4bc916619fd286b2c0cc4d5c653c96a68801d74e,"Add Matcher#matches to ForbiddenApis to avoid its accidental use

Matcher#matches is only needed when implementing new Matcher implementations
which is very rare.

The common test pitfall is
assertThat(contains(actual).matches(expected), is(true))

It should better be written as
assertThat(actual, contains(expected))",['084d608c6adbbb82bcbdc2778439dfbeb6d6afdd'],False,"['build.gradle.kts', 'NormalizationTrimFieldTest.java', 'AbstractMaterializedViewTest.java', 'Matchers.java', 'Unsafe.java', 'UtilTest.java', 'build.gradle.kts', 'signatures.txt']"
029969719980dd0707c9ca51087891b691593b14,"[CALCITE-4570] Always validate preconditions in Filter/Correlate/Snapshot expressions when assertions are enabled

Validate preconditions in the constructor of Filter, Correlate, and
Snapshot regardless if CalciteSystemProperty.DEBUG is enabled or not.
To avoid the performance overhead in production the assertions can be
disabled as it usually happens.",['8581f0a3fe9a4f079cb4d36f02121ae22118714c'],False,"['Correlate.java', 'Filter.java', 'Snapshot.java', 'LogicalCorrelate.java', 'LogicalFilter.java']"
31bdc5a7c4b66a37162511045215ebb27dc95712,"Copy-paste error in Mappings.multiply

Close apache/calcite#2383",['029969719980dd0707c9ca51087891b691593b14'],False,"['MappingType.java', 'Mappings.java']"
7e3abc5d67e907acd4d99f61380b521c8c1f5856,"[CALCITE-4587] Set ""spark.driver.bindAddress"" explicitly to avoid ""BindException"" thrown by Spark (Jiatao Tao)",['8169246a4ed1f207f62e252a34aff7589754f531'],False,['SparkHandlerImpl.java']
9c870eef69ff2a0066125517c635f25857106607,"[CALCITE-4585] Improve error message from RelRunner (NobiGo)

If a query is executed via RelRunner.prepare(RelNode) and
fails, the exception should report the RelNode plan.
Currently it reports the SQL, and for this kind of query,
there is no SQL.

Close apache/calcite#2402",['df95257f357e67eac330ba4c6d6bc749851e99fb'],False,"['CalciteConnectionImpl.java', 'ExceptionMessageTest.java']"
d7b3c83e06e4a63e5cb97c6f93b66795556d53db,"[CALCITE-4560] Wrong plan when decorrelating EXISTS subquery with COALESCE in the predicate

1. Add plan transformations before starting the core RelDecorrelator logic
to bring the plan into an equivalent but more convenient form that can be
decorrelated into more efficient and correct plans.

2. Based on the changes above many plans with subqueries become more
efficient since the value generator is no longer necessary and it is dropped.

3. Add test cases in SqlToRelConverter, subquery.iq reproducing the
problem (bad plan/query results) and update existing tests based on the
changes.

Close apache/calcite#2406",['8c2228eaf8ccc05ae58778276e760092557f78cc'],False,"['FilterFlattenCorrelatedConditionRule.java', 'CorrelateProjectExtractor.java', 'RelDecorrelator.java', 'RelToSqlConverterTest.java', 'CorrelateProjectExtractorTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'misc.iq', 'sub-query.iq']"
dfb934aba5ca830066a0d683c888070165283de6,"[CALCITE-4593] DiffRepository tests should fail if new XML resources are not in alphabetical order

If a test uses a resource that occurs out of order,
DiffRepository writes out the log file in sorted order, then
fails the test, indicating that the problem can be fixed by
copying the log file over the reference file.

If a test has a different output (say, a plan has changed),
DiffRepository writes out the actual results to the log file,
as today. Files are always written in sorted order.

This commit sorts all existing resource files, and converts
the XML indentation to 2. This destroys history, and will
probably make it impossible to merge existing PRs, but we
only need to do this once.

Close apache/calcite#2409",['350802b59fa68ef1ee074b78af17bf1b2c435e13'],False,"['.editorconfig', 'DiffRepository.java', 'TestUtil.java', 'TestUtilTest.java', 'SqlPrettyWriterTest.xml', 'HepPlannerTest.xml', 'RelOptRulesTest.xml', 'SqlHintsConverterTest.xml', 'SqlLimitsTest.xml', 'SqlToRelConverterTest.xml', 'TopDownOptTest.xml', 'TypeCoercionConverterTest.xml']"
e193b18ac23cde8bdac41e3864219ff1e9d6e0c5,"DiffRepository should write a test's resource file only when it is modified

Before this change, DiffRepository writes the resource file
(to xxx_actual.xml) for every test case, regardless of whether
its resources (e.g. SQL or plan) have changed. For large tests
with lots of test cases and large resource files, such as
RelOptRulesTest, that is a considerable CPU and IO cost.

After this change, DiffRepository only writes the resource
file if the resources change. So if RelOptRulesTest has 3
failures out of 500 tests, DiffRepository will write
RelOptRulesTest_actual.xml 3 times. As a result, such tests
run ~10x faster.

There are a few test methods in SqlToRelConverter test that
run 2 or 3 SQL statements that all produce the same plan.
DiffRepository regards each SQL statement as a resource, and
marks the resource file 'dirty' even though the final result
is always the same. We should fix this, but it's only a minor
impact on performance.",['dfb934aba5ca830066a0d683c888070165283de6'],False,"['Util.java', 'DiffRepository.java']"
f7e029fa3548d015f6a9ac3bc5da2a9af6357db6,"[CALCITE-4576] Release process should not overwrite LICENSE file

The LICENSE file is already the same as the one generated
during release, so the only change is to add a note to
remind release managers to check. (When we made this same
change to Avatica, we had to commit a modified LICENSE
file.)",['f27875f60fc70d5de022835fb26c63068360f8b4'],False,['howto.md']
aedb42e041faff73bfb2d88de95563d04871cfbd,[CALCITE-4601] Fix wrong example CSV adapter apidocs URL in SchemaFactory,['f7e029fa3548d015f6a9ac3bc5da2a9af6357db6'],False,['SchemaFactory.java']
204b5ab42d9e365c55636cd0aca9f750f4d50e5d,[CALCITE-4610] Join on range causes AssertionError in RelToSqlConverter,['c96d85ccad32cbdc9b52b5e2488887ed14a1b5ec'],False,"['SqlImplementor.java', 'RelToSqlConverterTest.java']"
fd6ffc901ef28bf8408cca28b57eba9f8a204749,"[CALCITE-4613] OWASP dependency-check tasks fail due to missing resources

Update org.owasp.dependencycheck.version to 6.1.6 to resolve the
problem with the obsolete resource URL.

Update com.github.burrunan.s3-build-cache.version to 1.2 to avoid
jackson dependency conflict.",['204b5ab42d9e365c55636cd0aca9f750f4d50e5d'],False,['gradle.properties']
cac28e95762532538cd3d0dce9e933ef9e4d5228,[CALCITE-4621] SemiJoinRule throws AssertionError on ANTI join,['2741cc5ab39f148917a2b53f023acd34975bb9a2'],False,"['SemiJoinRule.java', 'RelOptRulesTest.java']"
af5444ffdfd9e836b052ee58abec9430d55d4139,"[CALCITE-4620] Join on CASE causes AssertionError in RelToSqlConverter

The fix is to remove the logic that generates ON conditions
and instead use the logic that is used for all other
expressions. This logic is more widely used, and therefore
already handles cases such as CASE. (Previous bugs such as
[CALCITE-3207] LIKE, [CALCITE-4610] Sarg, and
[CALCITE-1422] IS NULL have been caused by this unnecessary
split.)

We have retained the logic that reverses 't1.id = t0.id' to
't0.id = t1.id' if 't0' is from the left side of the join.

We have reverted one test case, which was accidentally
seeing 'mandatoryColumn IS NULL' simplified to 'FALSE',
because the simplification was not the point of the test.",['6a9832c14e7c7c02a0176920b87d15dab474300a'],False,"['RelToSqlConverter.java', 'SqlImplementor.java', 'RelToSqlConverterTest.java']"
f2c33a60e1e696cbfa25a2d80caf7ee81bba9769,"Bump commons-codec from 1.12 to 1.13 (Jaromir Hamala)

Apache Commons Codec 1.12 has this (potential) security issue:
https://issues.apache.org/jira/browse/CODEC-134

Apache Calcite does not use Base32 impl from Commons Codec,
but merely the presence of the JAR means some security scanners freaks out.

Close apache/calcite#2399",['241b6db49c3ca88c9cdf25ddd2c0c8457734a130'],False,['gradle.properties']
e9443ed0332707a84097549ecdb97790c4faadd4,"[CALCITE-4312] Improve content of prepareVote draft email

1. Remove broken links.
2. Remove docker build instructions (there is no docker-compose file for Calcite).
3. Use GitHub URL to preview release notes.
4. Add subject template.",['7f5e9b8b7e6b4afd8e4f21524aa3c4ce8b7ddb61'],False,['build.gradle.kts']
85953ceb99e07b95129f4934797760a88709fcf6,"[CALCITE-4644] Add PERCENTILE_CONT and PERCENTILE_DISC functions (Rafay)

In this change, we can parse and validate those functions,
but execution will be [CALCITE-4666].

Validation is based on new method SqlAggFunction.isPercentile()
(experimental and subject to change without notice).

There are connections between the RANGE clause in windowed
aggregate functions and interpolation used by PERCENTILE_CONT.
Therefore use the same logic to determine whether ""x"" is a
valid type in OVER (ORDER BY x RANGE r)"" and
""PERCENTILE_CONT(f) WITHIN GROUP (ORER BY x)""

Close apache/calcite#2444",['f928e073c384010c294370b63ffb748c15caab8a'],False,"['Parser.jj', 'CalciteResource.java', 'SqlAggFunction.java', 'SqlKind.java', 'SqlWindow.java', 'SqlBasicAggFunction.java', 'SqlStdOperatorTable.java', 'OperandTypes.java', 'SqlTypeFamily.java', 'SqlValidatorImpl.java', 'CalciteResource.properties', 'AbstractSqlTester.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'reference.md']"
d46137a197a2840ea5ff9f3b38bb86d423c9af11,"RelOptRulesTest improvements:
- Provide relFn pattern mechanism to test a RelNode function instead of a sql string
- Refactor several tests to use relFn
- Refactor similar tests by using common auxiliary methods
- Correct auxiliary methods names (use ""check"" prefix instead of ""test"" prefix)",['a59693e0342f52fd9eeb48bf55e7f4d02913fa79'],False,"['RelOptRulesTest.java', 'RelOptTestBase.java', 'TopDownOptTest.java', 'RelOptRulesTest.xml']"
4066a34b12d1619c1dcb9199988f758a6fc08082,"[CALCITE-4675] Error executing query with SUM and multiplication via JdbcAdapter

Use EXPR$ prefix for naming columns when pushing projections
to avoid creating aliases with weird symbols such as '*'.
Such aliases may create problems in some DBMS such as Redshift
when the plan is converted to SQL via RelToSqlConverter.",['d7290e723a30862da5e69d3b7cc558e22d58b661'],False,"['PushProjector.java', 'RelToSqlConverterTest.java', 'RelOptRulesTest.xml']"
1da412aa26fe374714bdac29f5d51adf400c8f72,"[CALCITE-4690] Error when executing query with CHARACTER SET in Redshift

Close apache/calcite#2457",['c700e379e093ba0b9c411a478d419cbacd123822'],False,"['RedshiftSqlDialect.java', 'RelToSqlConverterTest.java']"
8346167252bcb90cd64ced9e3a5c893de28f88ed,"[CALCITE-4485] JDBC adapter generates invalid SQL when one of the joins is ""INNER JOIN ... ON TRUE""

If the join tree is a mixture of cross-joins and outer joins,
RelToSqlConverter wrongly generates comma-join syntax.
Consider the (pseudo) RelNode tree

    CrossJoin(a, LeftJoin(b, CrossJoin(c, d)))

Before this bug was fixed, RelToSqlConvert would generate

    FROM a, b LEFT JOIN c, d

Because LEFT JOIN has higher precedence than ',', this is parsed to

    LeftJoin(CrossJoin(a, b), CrossJoin(c, d))

which is incorrect. The fix is to only generate comma-join syntax
if all joins are cross-joins. In this case, we will generate
(pseudo SQL)

  FROM a CROSS JOIN b LEFT JOIN c CROSS JOIN d

which is safe.",['96cbd709caff1084ca190ec45c76f2092c33a52b'],False,"['RelToSqlConverter.java', 'RelToSqlConverterTest.java']"
d64fd60477b7c9a15473d89b350fc80c2151ee6e,"[CALCITE-4724] In JDBC adapter for ClickHouse, implement Values by generating SELECT without FROM (Liu Enze)

Fix by making SqlDialect.supportsAliasedValues return false
in the ClickHouse dialect, similar to MySQL.

Close apache/calcite#2480",['dff28d1ce49871a451c7ff3e740259441da7c72a'],False,"['ClickHouseSqlDialect.java', 'RelToSqlConverterTest.java']"
94e2f98d9769ea17b9e8a6a478802f78a745e3f0,[CALCITE-4741] AbstractRelNode#getId can overflow into a negative value causing CompileException in certain Enumerable implement methods,['d64fd60477b7c9a15473d89b350fc80c2151ee6e'],False,"['EnumerableBatchNestedLoopJoin.java', 'EnumerableMergeUnion.java']"
48d4cfadd4f521716a7e9a03175e52cd3972e737,"[CALCITE-4760] RelBuilder creation fails with error 'No suitable driver found for jdbc:calcite:' in shaded Calcite

This commit does not add tests; it's not easy to reproduce
issues caused by jar-packaging/shading.",['8c4629974815a5e919618375aa380c985047d256'],False,['Frameworks.java']
f3baf348598fcc6bc4f97a0abee3f99309e5bf76,Site is not published due to bad yaml file suffix,['d7e20baf3920b9e8cd1e2171b98209ef57368216'],False,"['.asf.yaml', '_config.yml']"
8ddb3f82e997d1a10619fc37ff7900823c7c0b91,"[CALCITE-4784] Ensure Correlate#requiredColumns is subset of columns in left relation

Enforce the implicit class invariant (see Correlate#getRequiredColumns)
via assertion to prevent construction of invalid plans and fail fast.",['a36f5a21f006ee717e7949269a99fa48a65f6abe'],False,['Correlate.java']
4b1e9ed1a513eae0c873a660b755bb4f27b39da9,"[CALCITE-4789] Build is broken on Guava versions < 21

Fix build for Guava 19.0.

In Travis, test oldest and newest supported Guava versions.
(Previously we were only testing against the default Guava
version, 29.0-jre, and that's why we didn't notice the build
breakage.) Enable ErrorProne only on the newest Guava
version (because sometimes we use APIs that are marked Beta
in early versions and the Beta is removed in later versions).

Allow Guava version up to 30.1.1-jre. Lowest Guava version
is still 19.0. Default version is still 29.0-jre.",['d66f4c50737ad3a95a89f49712fc3ff69a1413ee'],False,"['.travis.yml', 'JdbcTable.java', 'PredicateImpl.java', 'Frameworks.java', 'RexProgramTest.java', 'SqlToRelTestBase.java', 'gradle.properties', 'history.md']"
5a2df228523e7459f742c7e0115948c9e32fc941,[CALCITE-4656] Broken CI links on develop web page,['f4db84c3dd1674b929fede53bbd563b9e7101c71'],False,['index.md']
3f84d080e6562ad9214305760b992b8003b5f35c,"Site: Remove vote email from release instructions, and minor improvements

A draft email with the same content is printed by Gradle `prepareVote`
task so we can remove it from the site to avoid maintaining both
versions.",['a80054607969ba1870528ff31bc0c63c27ddc74a'],False,['howto.md']
5b8ce9c477dcf6ea4848b14982a11bd2e6ebe556,"[CALCITE-4805] Calcite should convert a small IN-list as if the user had written OR, even if the IN-list contains NULL

Since [CALCITE-373], Calcite has converted ""x IN (1, 2)"" to
""x = 1 OR x = 2"" but it still converts ""x IN (1, NULL)"" to
""x IN (VALUES 1, NULL)"". Now that some bugs have been fixed,
there's no longer any reason to treat lists with NULL any
differently.

Close apache/calcite#2545",['d6a2d69d33c466f7cb7d164f3db4e54771d31371'],False,"['SqlToRelConverter.java', 'sub-query.iq']"
511eecdf5a0c68632f99c6b3e07ebbdd964c281d,"[CALCITE-4787] Replace ImmutableBeans with Immutables in core module

- Move core rules to use Immutables instead of ImmutableBeans
- Update ImmutableBeans to ignore default property return values used
  by Immutables
- Adjust EnumerableProjectToCalcRule so it doesn't try to use proxy
  behavior with non-empty config
- Update MaterializedViewProjectAggregateRule.DEFAULT so it sets
  fastBailout config property
- Update SqlValidator, SqlWriter, SqlParser, SqlToRelConverter,
  RelDecorrelator, Hoist and RelBuilder to use Immutables for
  configuration
- Switch gradle to use G1 Garbage collector to improve GC performance
- Update ConverterRule to have default properties since properties
  were declared required but had no default values.
- Update gradle build to automatically generate annotation source on
  Intellij and Eclipse sync operations
- Add travis_wait to jdk11 checkerframework build to avoid premature
  termination due to core compile time.
- Make ExchangeRemoveConstantKeysRule and ValuesReduceRule consistent
  with SubqueryRemoveRule by making MatchHandler type parameter concrete.

Co-authored-by: Vladimir Sitnikov <sitnikov.vladimir@gmail.com>",['5b8ce9c477dcf6ea4848b14982a11bd2e6ebe556'],False,"['.travis.yml', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'CalciteImmutable.java', 'EnumerableProjectToCalcRule.java', 'package-info.java', 'RelRule.java', 'ConverterRule.java', 'TraitMatchingRule.java', 'RelDotWriter.java', 'AbstractJoinExtractFilterRule.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateExtractProjectRule.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinJoinRemoveRule.java', 'AggregateJoinRemoveRule.java', 'AggregateJoinTransposeRule.java', 'AggregateMergeRule.java', 'AggregateProjectMergeRule.java', 'AggregateProjectPullUpConstantsRule.java', 'AggregateProjectStarTableRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionAggregateRule.java', 'AggregateUnionTransposeRule.java', 'AggregateValuesRule.java', 'CalcMergeRule.java', 'CalcRemoveRule.java', 'CalcSplitRule.java', 'CoerceInputsRule.java', 'DateRangeRules.java', 'ExchangeRemoveConstantKeysRule.java', 'FilterAggregateTransposeRule.java', 'FilterCalcMergeRule.java', 'FilterCorrelateRule.java', 'FilterFlattenCorrelatedConditionRule.java', 'FilterJoinRule.java', 'FilterMergeRule.java', 'FilterMultiJoinMergeRule.java', 'FilterProjectTransposeRule.java', 'FilterRemoveIsNotDistinctFromRule.java', 'FilterSetOpTransposeRule.java', 'FilterTableFunctionTransposeRule.java', 'FilterTableScanRule.java', 'FilterToCalcRule.java', 'IntersectToDistinctRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinAssociateRule.java', 'JoinCommuteRule.java', 'JoinExtractFilterRule.java', 'JoinProjectTransposeRule.java', 'JoinPushExpressionsRule.java', 'JoinPushThroughJoinRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToCorrelateRule.java', 'JoinToMultiJoinRule.java', 'JoinUnionTransposeRule.java', 'LoptOptimizeJoinRule.java', 'MatchRule.java', 'MaterializedViewFilterScanRule.java', 'MultiJoinOptimizeBushyRule.java', 'MultiJoinProjectTransposeRule.java', 'ProjectAggregateMergeRule.java', 'ProjectCalcMergeRule.java', 'ProjectCorrelateTransposeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinJoinRemoveRule.java', 'ProjectJoinRemoveRule.java', 'ProjectJoinTransposeRule.java', 'ProjectMergeRule.java', 'ProjectMultiJoinMergeRule.java', 'ProjectRemoveRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectTableScanRule.java', 'ProjectToCalcRule.java', 'ProjectToWindowRule.java', 'ProjectWindowTransposeRule.java', 'PruneEmptyRules.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinFilterTransposeRule.java', 'SemiJoinJoinTransposeRule.java', 'SemiJoinProjectTransposeRule.java', 'SemiJoinRemoveRule.java', 'SemiJoinRule.java', 'SortJoinCopyRule.java', 'SortJoinTransposeRule.java', 'SortProjectTransposeRule.java', 'SortRemoveConstantKeysRule.java', 'SortRemoveRule.java', 'SortUnionTransposeRule.java', 'SpatialRules.java', 'SubQueryRemoveRule.java', 'TableScanRule.java', 'UnionEliminatorRule.java', 'UnionMergeRule.java', 'UnionPullUpConstantsRule.java', 'UnionToDistinctRule.java', 'ValuesReduceRule.java', 'MaterializedViewAggregateRule.java', 'MaterializedViewOnlyAggregateRule.java', 'MaterializedViewOnlyFilterRule.java', 'MaterializedViewOnlyJoinRule.java', 'MaterializedViewProjectAggregateRule.java', 'MaterializedViewProjectFilterRule.java', 'MaterializedViewProjectJoinRule.java', 'SqlWriterConfig.java', 'SqlParser.java', 'SqlPrettyWriter.java', 'SqlValidator.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'Hoist.java', 'RelBuilder.java', 'ImmutableBeans.java', 'ImmutableBeanTest.java', 'gradle.properties']"
49c1a6d8b01bdc8b2230cee1f0dc2d6749782dd4,Skip EqualsHashCode verification in ErrorProne: it is already verified with Checkstyle,['b4d7d48316881e1e419f32dbc419678a16402927'],False,['build.gradle.kts']
1667b5197a69b818225180028874bb726c776e4b,Fix ErrorProne violations in testkit,['a8a8a6bb3545d74757b5e36412b138d902adc3e1'],False,"['JdbcTest.java', 'LatticeTest.java', 'TpchTest.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'SqlTests.java', 'CalciteAssert.java', 'ConnectionSpec.java', 'DiffTestCase.java', 'Matchers.java', 'QuidemTest.java', 'SqlValidatorTestCase.java', 'CatchallSchema.java', 'Smalls.java']"
21cbdf82b98130d1a8a6b9ff56a5dfd2cbfb025a,Fix string reference to HrSchema in MaterializationTest with HrSchema.class.getName(),['a8a6569e6ba75efe9d5725c49338a7f181d3ab5c'],False,['MaterializationTest.java']
fbbdf465df46b4e6f9863d7d1dfdcb19a43f2032,"[CALCITE-4546] Change metadata dispatch to avoid registration of all RelNode subtypes (James Starr)

Close apache/calcite#2538",['5824c54bbaa7cf527dd20ba85fb3b180219249e6'],False,"['HepRelVertex.java', 'VolcanoPlanner.java', 'DelegatingMetadataRel.java', 'JaninoRelMetadataProvider.java', 'RelMdColumnUniqueness.java', 'RelMdDistribution.java', 'RelMdExpressionLineage.java', 'RelMdNodeTypes.java', 'RelMdPredicates.java', 'RelMdTableReferences.java', 'CodeGeneratorUtil.java', 'DispatchGenerator.java', 'package-info.java', 'RelMetadataTest.java']"
3fffc31f8d9ff3cb1a4c5e8b19699750cca04240,"[CALCITE-4798] Gradle build fails due to deprecated metadata APIs

Using fully qualified path for deprecated class instead of import to
fix the build. Apparently the problem appears only in certain JDKs
most likely those without:
https://bugs.openjdk.java.net/browse/JDK-8032211

Close apache/calcite#2540",['74e97780add051cb71a122075e5bcbceb40e889c'],False,['PlannerImpl.java']
3170c3f21687cf75045572844dcd51e19f41d40a,"[CALCITE-4830] Remove remaining uses of ImmutableBeans and deprecate

- Supersede and deprecate two-level nested Config classes to ensure all immutables are hidden
  and carry consistene style.
- Remove the use of @Value.Style in non-test code to ensure consistent styling.
- Add annotation processing to all modules implementing new RelRule.Config subclasses
- Deprecate public methods and interfaces of ImmutableBeans
- Deprecate RelRule.Config.EMPTY
- Update javadocs for ImmutableBeans, RelRule, RelRule.CONFIG
- Add annotation processing to the core/test module
- Add compilation dependency on jsr305 to work around an Immutables bug when compiling against old Guava versions.

Note that during the development of this patch, kapt was evaluated extensively and ultimately ruled
out for use. The reasons included:
- Kapt is not compatible with JDK17: https://youtrack.jetbrains.com/issue/KT-45545
- Kapt causes deadlocks: https://youtrack.jetbrains.com/issue/KT-47853

Workarounds to those issues could not be made reliable.",['50dbd12f14f330f57a321a2402a7dcb8124f5112'],False,"['build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'CassandraRules.java', 'build.gradle.kts', 'CalciteImmutable.java', 'EnumerableBatchNestedLoopJoinRule.java', 'RelRule.java', 'ConverterRule.java', 'TraitMatchingRule.java', 'RelDotWriter.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateJoinTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'CoerceInputsRule.java', 'CoreRules.java', 'DateRangeRules.java', 'ExchangeRemoveConstantKeysRule.java', 'FilterJoinRule.java', 'FilterProjectTransposeRule.java', 'JoinAssociateRule.java', 'JoinCommuteRule.java', 'JoinProjectTransposeRule.java', 'JoinPushThroughJoinRule.java', 'ProjectCorrelateTransposeRule.java', 'ProjectFilterTransposeRule.java', 'ProjectJoinTransposeRule.java', 'ProjectMergeRule.java', 'ProjectSetOpTransposeRule.java', 'ProjectToWindowRule.java', 'PruneEmptyRules.java', 'ReduceExpressionsRule.java', 'SemiJoinRule.java', 'SortUnionTransposeRule.java', 'SpatialRules.java', 'SubQueryRemoveRule.java', 'TableScanRule.java', 'ValuesReduceRule.java', 'MaterializedViewAggregateRule.java', 'MaterializedViewRule.java', 'StreamRules.java', 'SqlWriterConfig.java', 'SqlParser.java', 'RelDecorrelator.java', 'ImmutableBeans.java', 'CollationConversionTest.java', 'ComboRuleTest.java', 'PlannerTests.java', 'TraitConversionTest.java', 'TraitPropagationTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'AbstractMaterializedViewTest.java', 'RelOptRulesTest.java', 'SqlHintsConverterTest.java', 'PlannerTest.java', 'ImmutableBeanTest.java', 'build.gradle.kts', 'DruidRules.java', 'build.gradle.kts', 'CsvProjectTableScanRule.java', 'build.gradle.kts', 'CsvProjectTableScanRule.java', 'build.gradle.kts', 'GeodeRules.java', 'gradle.properties', 'build.gradle.kts', 'InnodbRules.java', 'PigRelBuilderStyleTest.java', 'build.gradle.kts', 'PigToSqlAggregateRule.java', 'build.gradle.kts', 'SplunkPushDownRule.java']"
9c0e3130e6692d1960a34a680dc13d11083ff1c8,"[CALCITE-3745] CompileException in UnitCompiler when using multiple class loaders

Janino is not able to determine the correct compiler for loading a
given class thus it fails with CompileException.

1. Use the class loader of the calling class instead of the default.
2. Upgrade Janino to 3.1.6 version which contains the fix for
https://github.com/janino-compiler/janino/pull/150 necessary for
passing correctly the class loader to the underlying methods.
3. Add/Update CheckerFramework .astub files for setParentClassLoader
method based on the changes in the Janino APIs. Methods have moved in
the new version so it is necessary to reflect the changes in the stub
files.
4. Enforce class loader is not null before calling
CompilerFactoryFactory#getDefaultCompilerFactory method. The parameter
does not have a nullability annotation so by default CheckerFramework
considers it as not-null. Indeed, if null is given as parameter a NPE
will be raised from within that method.

Close apache/calcite#2449",['460de048042a4062bebbc08f27199a14ba7503d2'],False,"['EnumerableInterpretable.java', 'JaninoRexCompiler.java', 'JaninoRelMetadataProvider.java', 'JaninoCompiler.java', 'gradle.properties', 'ClassBodyEvaluator.astub', 'IClassBodyEvaluator.astub', 'ISimpleCompiler.astub', 'CodeGenerationBenchmark.java']"
2916b83712b517430e71c1c22042e484ee900589,[CALCITE-3583] Exchange operator deserialize fail when the RexInput has no RelCollcation (Xzh),['9c0e3130e6692d1960a34a680dc13d11083ff1c8'],False,"['Exchange.java', 'RelWriterTest.java']"
62a1a14f42bb2764267c8d887f9c297320d6055e,[CALCITE-3338] Error with executeBatch and preparedStatement when using RemoteMeta (Xzh & Jin Xing),['53e09688c71b85817a9c382edd573dbcc7e48aa5'],False,"['CalciteConnectionImpl.java', 'CalciteMetaImpl.java', 'CalciteRemoteDriverTest.java']"
d0837f171c783180cb1e44aa1bafd99e568d2f3e,"[CALCITE-4762] Upgrade Calcite to Avatica 1.19

(Following this commit are a few commits that add test cases
in Calcite for functionality that was fixed in Avatica 1.19.)

Close apache/calcite#2578",['62a1a14f42bb2764267c8d887f9c297320d6055e'],False,['gradle.properties']
95b3ab6abd7b0272fff977472633926fde9b9495,"[CALCITE-4600] ClassCastException retrieving from an ARRAY that has DATE, TIME or TIMESTAMP elements

Now that we have upgraded Calcite to Avatica 1.19, which
fixes [CALCITE-4600], we can add this test case to Calcite.

Close apache/calcite#2548",['d0837f171c783180cb1e44aa1bafd99e568d2f3e'],False,['JdbcTest.java']
c3f3decd39c29d85bd5ec659ebcec853e2f337ff,"[CALCITE-4602] ClassCastException retrieving from ARRAY that has mixed INTEGER and DECIMAL elements

Now that we have upgraded Calcite to Avatica 1.19, which
fixes [CALCITE-4602], we can add this test case to Calcite.
The fix is not perfect: the ClassCastException has gone, but
the resulting BigDecimal value is wrong; [CALCITE-4850] is
logged for that.

Close apache/calcite#2547",['95b3ab6abd7b0272fff977472633926fde9b9495'],False,['JdbcTest.java']
a7728d79878a6e4c063e7646cd4e6f4f1ce9c2ea,"[CALCITE-4757] In Avatica, support columns of type ""NULL"" in query results

The bug was fixed in Avatica, and here we add tests to
Calcite now that we have upgraded to Avatica 1.19.

Close apache/calcite#2507",['c3f3decd39c29d85bd5ec659ebcec853e2f337ff'],False,['JdbcTest.java']
342aeba1087857df48891655cf0de41d5f3479c7,"[CALCITE-4628] If SqlImplementor fails, include the RelNode in the exception

Add a test case for a bug that was fixed by ""[CALCITE-4524]
Make some fields non-nullable (SqlSelect.selectList,
DataContext.getTypeFactory)"".",['a7728d79878a6e4c063e7646cd4e6f4f1ce9c2ea'],False,"['SqlImplementor.java', 'RelToSqlConverterTest.java']"
a250ab0de827f221eb0bec780f5454f33cd7e782,"[CALCITE-4795] In class SqlBasicCall, make the ""operands"" field private (part 1)

In class SqlBasicCall, the operands field is currently a
public array. This gives too much freedom for clients to do
crazy things, and creates unexpected behavior because the
array is not copied when a SqlBasicCall is cloned. We would
like to make the first private, but that would be a breaking
change, so we must do it over two releases.

This is part 1: deprecate the ""operands"" field; after 1.28,
part 2 will make the ""operands"" field private, and also
change it from an array to an immutable List. You will still
be able to call SqlCall.setOperand, but the whole new List
will be created.",['342aeba1087857df48891655cf0de41d5f3479c7'],False,"['SqlImplementor.java', 'SqlBasicCall.java', 'SqlNullTreatmentOperator.java', 'SqlOperator.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java']"
8a0de7a7cd2d8d4179f9786b57ede04dd12a9279,Refactor: Introduce field SqlUtil.GENERATED_EXPR_ALIAS_PREFIX,['948127710f7fb44b795b25dfb4d9c2214c1392c7'],False,"['RelToSqlConverter.java', 'SqlImplementor.java', 'SqlUtil.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'RelBuilderTest.java']"
82dd78a14f6aef2eeec2f9c94978d04b4acc5359,"[CALCITE-2736] ReduceExpressionsRule never reduces dynamic expressions but this should be configurable (Yingyu Wang)

1. Add new config option treatDynamicCallsAsConstant.
2. Update ReducibleExprLocator.analyzeCall() method to also rely on
   treatDynamicCallsAsnConstant option when determining whether to
   reduce a dynamic function.

Fixup following ""[CALCITE-4830] Immutables"" (Julian Hyde).

Close apache/calcite#2502",['e20f8819e8017e9bde7317a43f2c56cb39bdab8d'],False,"['ReduceExpressionsRule.java', 'ValuesReduceRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
9330b305918ded1ed865d0b1db4d773ee521975c,"[CALCITE-4853] Gradle could not determine the dependencies of task ':syncPreviewSiteRepo'

Upgrade vlsi-release-plugins to version 1.74 which has a workaround
for this error that comes from the upgrade to Gradle 7.0",['46fb2632ea4457e5c0f87d42536ae2d5cdf5f07d'],False,['gradle.properties']
c6a9599ceabb6e1f703d3c0018b8daf778ae46f8,"Add news item for release 1.28.0

Jacques' description of breaking changes is rather too long
for the release notes, so I added it to the news item, and
referenced it from the release notes.

Make other fixes to the release notes, such as the poorly
escaped '<>' in one commit message.

Add permanent anchors (qualified by release name) to the
release notes, so that #fixes for one release doesn't become
that.

Prepare for next development iteration by changing version
in gradle.properties.

Close apache/calcite#2584",['dec167ac18272c0cd8be477d6b162d7a31a62114'],False,"['gradle.properties', 'history.md', '2021-06-04-release-1.27.0.md', '2021-10-19-release-1.28.0.md']"
0390069a533a679d0bdd51ad6b2da662299ab9fe,"[CALCITE-4639] Broken links on download page

Close apache/calcite#2583",['c6a9599ceabb6e1f703d3c0018b8daf778ae46f8'],False,"['2014-06-27-release-0.8.0-incubating.md', '2019-03-26-release-1.20.0.md', 'index.md']"
2280879f38c8347801749998f2801aaf7364c6f0,"[CALCITE-4858] Use Log4j2 instead of unsupported Log4j (1.x) in tests

1. Replace slf4j-log4j12 dependency (using Log4j 1.x)  with
log4j-slf4j-impl (using Log4j 2.x) when possible. Cannot remove
Log4j 1.x from Pig/Piglet modules due to compilation dependency of the
latter directly to log4j.
2. Use XML syntax instead of property syntax for Log4j configuration. A
Log4j configuration is hierarchical by nature so formats with natural
support for nesting (such as XML) are easier to use.
3. Exclude slf4j-log4j12 when it comes transitively from other
dependencies. It gets in conflict with log4j-slf4j-impl and it may also
appear transitively in projects using Calcite.
4. Add log4j-slf4j-impl in modules (kafka, mongodb, plus, example) to
silence error messages due to missing logger implementation.
5. Always use testRuntimeOnly annotation for dependencies on SLF4J
logger implementation. Calcite shouldn't enforce a specific logger
implementation so they should never appear as compile or runtime
dependencies. A concrete implementation is only needed when we want to
log messages for testing purposes.
6. Bump Cassandra version to 3.11.3 to use Log4j2 in tests. Previous
versions did not allow the use of any custom logger implementation
(only logback). This was resolved CASSANDRA-13396 so now we can use
Log4j2 as the rest of the tests.
7. Unify display pattern in elasticsearch log4j2.xml with the rest of
tests.
8. Add/Modify Log4j2 configuration (log4j2-test.xml) to silence errors
and not display logging messages in tests. Instead of globally turning
off logs, specific logger entries were set in the configuration files:
(i) to avoid hiding by accident important problems;
(ii) to faciliate switching log levels during debugging in the future.

Close apache/calcite#2587",['87f60d2519dbb636d34687cbea5194ce0e8ef540'],False,"['build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'log4j2-test.xml', 'build.gradle.kts', 'log4j.properties', 'log4j2-test.xml', 'build.gradle.kts', 'log4j.properties', 'log4j2-test.xml', 'log4j2-test.xml', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'build.gradle.kts', 'log4j.properties', 'log4j2-test.xml', 'gradle.properties', 'build.gradle.kts', 'log4j2-test.xml', 'build.gradle.kts', 'log4j2-test.xml', 'build.gradle.kts', 'log4j.properties', 'log4j2-test.xml', 'build.gradle.kts', 'log4j2-test.xml', 'build.gradle.kts', 'log4j2-test.xml', 'build.gradle.kts', 'log4j2-test.xml', 'build.gradle.kts', 'log4j.properties', 'log4j2-test.xml', 'build.gradle.kts', 'log4j.properties', 'log4j2-test.xml']"
5bec337baad02a8cbf62df6b1260f52326d59eef,"Fix typo in reference.md

Close apache/calcite#2589",['3af1d78f7e60588c2497f8e0095d715ab179149a'],False,['reference.md']
2c17f7afec58b79f5e715cae5b43f9ca8da39cf4,"[CALCITE-4551] Reusing Immutable metadata cache keys

* Changing RelMetadataQueryBase.map generic from Table<Object, List, Object>
to Table<Object, Object, Object> to support more efficient cache keys.
* Adding regression test generated RelMetdata code.
* Adding api status internal to DescriptiveCacheKey.
* Splitting code generation out of JaninoRelMetadataHandler to
  RelMetadataHandlerGenerator.
* Moving DispatchGenerator to be packaged scoped.
* In DispatchGenerator, sorting RelNode class by name so the dispatch orders
  is repeatable.

Close apache/calcite#2585",['f61541d633cfde53a4b0de0c23a010250c93274e'],False,"['JaninoRelMetadataProvider.java', 'RelMetadataQueryBase.java', 'CacheGeneratorUtil.java', 'CacheUtil.java', 'DescriptiveCacheKey.java', 'DispatchGenerator.java', 'RelMetadataHandlerGeneratorUtil.java', 'RelMetadataHandlerGeneratorUtilTest.java', 'GeneratedMetadata_AllPredicatesHandler.java', 'GeneratedMetadata_CollationHandler.java', 'GeneratedMetadata_ColumnOriginHandler.java', 'GeneratedMetadata_ColumnUniquenessHandler.java', 'GeneratedMetadata_CumulativeCostHandler.java', 'GeneratedMetadata_DistinctRowCountHandler.java', 'GeneratedMetadata_DistributionHandler.java', 'GeneratedMetadata_ExplainVisibilityHandler.java', 'GeneratedMetadata_ExpressionLineageHandler.java', 'GeneratedMetadata_LowerBoundCostHandler.java', 'GeneratedMetadata_MaxRowCountHandler.java', 'GeneratedMetadata_MemoryHandler.java', 'GeneratedMetadata_MinRowCountHandler.java', 'GeneratedMetadata_NodeTypesHandler.java', 'GeneratedMetadata_NonCumulativeCostHandler.java', 'GeneratedMetadata_ParallelismHandler.java', 'GeneratedMetadata_PercentageOriginalRowsHandler.java', 'GeneratedMetadata_PopulationSizeHandler.java', 'GeneratedMetadata_PredicatesHandler.java', 'GeneratedMetadata_RowCountHandler.java', 'GeneratedMetadata_SelectivityHandler.java', 'GeneratedMetadata_SizeHandler.java', 'GeneratedMetadata_TableReferencesHandler.java', 'GeneratedMetadata_UniqueKeysHandler.java']"
7e878334c9cedaf7d6a6b205bd1460c51e51ecef,"Bump com.github.vlsi.vlsi-release-plugins to 1.76

It resolves some of Gradle 7 warnings, and it hides some stacktraces (e.g. code style violations, compilation failure)",['f1db79fb876ac9ba3c405283e99bb0438e4e97be'],False,['gradle.properties']
d9f946b3f2417da3e2524fb044cb2545518d7255,[CALCITE-4883] The traitset of Exchange operator losses the distribution when externalizing Exchange operator from JSON,['8a266e63804b18883a039a038e428727de119e29'],False,"['Exchange.java', 'RelWriterTest.java']"
8373d4ccb116725f4a174f4084363c03732e2e31,"Use GitHub Action concurrency feature to cancel stale CI executions

See https://stackoverflow.com/a/68422069/253468",['fd3c1d0bdf907d192d42c18b3aff5306eec650e7'],False,"['buildcache.yml', 'cancel-duplicates.yml', 'main.yml']"
264636e803f6b971112d826e268e309e3ed1e513,"[CALCITE-4927] Remove deprecated RelBuilder#groupKey(ImmutableBitSet, ImmutableList) clashing with new replacement API

Keeping the deprecated API creates ambiguity and requires everybody to
upcast to Iterable if they want to use the new API.

Removing it on the other hand does not seem to affect much backward
compatibility (new API does not allow nulls) since callers will
automatically use the new API with no changes required in their code.

Close apache/calcite#2635",['86dce8ac04ccd7f29f6b60c5b33ef6d14d8dbc58'],False,"['ToLogicalConverter.java', 'MutableRels.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateJoinTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateUnionTransposeRule.java', 'ProjectAggregateMergeRule.java', 'RelFieldTrimmer.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'RelToSqlConverterTest.java', 'RelBuilderTest.java', 'PigRelOpVisitor.java', 'PigToSqlAggregateRule.java']"
8b62f889cd6879af5c123b3a9a496b833aaca570,"[CALCITE-4894] MV rewriting fails for conjunctive top expressions in SELECT clause

1. Remove conjuction decomposition in getExpressionLineage causing the
problem in the first place. Based on other unit tests in
RelMetadataTest the new behavior is the correct one.
2. Turn assertions into exceptions.
3. Improve error message for (possibly remaining) unhandled cases
where a single expression can have multiple lineages.
4. Add unit tests covering ""complex"" expressions in both views and
queries (highlighting the limitation).

Close apache/calcite#2613",['422599cf3f98c270d60973a7f4cc5d4783be08af'],False,"['RelMdExpressionLineage.java', 'MaterializedViewJoinRule.java', 'MaterializedViewRule.java', 'MaterializedViewRelOptRulesTest.java', 'RelMetadataTest.java']"
c9861565c385e55bb2d0e7629cc3eadfa9e23821,"[CALCITE-4937] Upgrade Calcite to Avatica 1.20

Fixes CVE-2021-44228.",['4ff5fa89c180ebc30d8fb324c2a50b0e9797b9ca'],False,['gradle.properties']
f5a652693368ec35388b71f7c8e32ecdebd1558d,"[CALCITE-4939] Upgrade log4j2 version to 2.16.0

The 2.16.0 release has two additional fixes related to CVE-2021-4422 for
hardening security.",['2ee53f257b0b5ccffbed01706c81820c3fb7dd01'],False,['gradle.properties']
96f4a734417d044552a94d8969fd368b57ff9e8b,"Improve debug message in IterativeRuleDriver

Remove PLANNER logging from the message and better formulate at which
point during the rule matching the cost is printed.

The original message is misleading cause it is not the planner that is
printed but the queue. Moreover, IterativeRuleDriver#toString just
prints the class name and hashcode of the instance which is useless.
Class name might be useful but can be obtained by changing the logger
configuration (pattern layout).",['f5a652693368ec35388b71f7c8e32ecdebd1558d'],False,['IterativeRuleDriver.java']
ce2531148f0c9990792068b12000deac827fc831,"[CALCITE-4737] Add RelOptPlanner visualizer for debugging (Zuozhi Wang, Thomas Rebele)",['d6a36fc08715eba31d1d6bc26ef1ff5558d04b8d'],False,"['InputExcludedRelWriter.java', 'NodeUpdateHelper.java', 'RuleMatchVisualizer.java', 'StepInfo.java', 'package-info.java', 'viz-template.html', 'RelOptTestBase.java', 'RuleMatchVisualizerTest.java', 'RuleMatchVisualizerTest.xml']"
6208196d1239d77e2f30329e58b9ac13b4b199be,"Finishing up [CALCITE-4937], remove workarounds for [CALCITE-4877]",['607c45b7a57b66e50f0a4826b5a80df043199f79'],False,"['Bug.java', 'schema.iq', 'QuidemTest.java']"
0d1796570fdc91269eaf0c3ed7f8a0c9bdba6df9,"[CALCITE-4950] Upgrade log4j2 version to 2.17.0

The 2.17.0 release fixes a new security vulnerability CVE-2021-45105.",['e42b85a45bd16dd58db1546736e653deda5463fe'],False,['gradle.properties']
f6d51ff6ddc11781a1dab42bc8fec2063a36a22a,"Set timeout for running Druid tests in GitHub CI

When tests run successfully they don't take more than a few minutes.
Sometimes though they get stuck and run forever (till the max GitHub
timeout of 6h) so set a timeout to 10minutes to avoid wasting resources
and fail-fast.",['0d1796570fdc91269eaf0c3ed7f8a0c9bdba6df9'],False,['main.yml']
3303e4b596f7a1094d4adb2f5f366572997b9bc1,"Revise release notes

Fix SHA in release news item and downloads page.

Add ""[CALCITE-4547] Support Java 16 and 17"" to list of bugs fixed in 1.29.",['fb2e28ae17d28657f86cd78503edc402464a8da7'],False,"['history.md', '2021-12-26-release-1.29.0.md']"
fc87380c2d7e4fe08947aed036b0d1d02724d974,"Site: Use openjdk-17 to generate javadoc with docker

Use fixed docker image to avoid spurious changes during the website
generaion.

Close apache/calcite#2663",['f79624a07feabee16376b519283cf375b76b8b9f'],False,['docker-compose.yml']
df35274e41d9a12e3b98010125e8248435673aa9,"[CALCITE-4952] Introduce a simplistic RelMetadataQuery option

- Introduce new ProxyingMetadataHandlerProvider that avoids code compilation
- Update RelMetadataTest to factor out metadata handling from tests
- Introduce tests for both Janino and the proxying/simplistic path.
- A simple microbenchmark for metadata
- Minor version bump to JMH
- Enable clearing of static cache within JaninoRelMetadataProvider
- Update RelMetadataTest to be parameterized
- Add test to confirm cyclic exception",['fc87380c2d7e4fe08947aed036b0d1d02724d974'],False,"['JaninoRelMetadataProvider.java', 'ProxyingMetadataHandlerProvider.java', 'RelMetadataTest.java', 'gradle.properties', 'build.gradle.kts', 'MetadataBenchmark.java']"
184c57a2bbf00fa5b794553878991d061502b78a,Site: Change the javadoc title to Apache Calcite API,['df35274e41d9a12e3b98010125e8248435673aa9'],False,['build.gradle.kts']
8983e7e82ef65c3a72f06305a676cc2998bf72d6,"[CALCITE-4963] Make it easier to implement interface SqlDialectFactory

To create a SqlDialect, you need an instance of
SqlDialect.Context, but the code to create this was until
now locked in class SqlDialectFactoryImpl. This change moves
that code into a public method
SqlDialects.createContext(DatabaseMetaData). It is now
easier to sub-class SqlDialectFactoryImpl or to directly
implement SqlDialectFactory.

Close apache/calcite#2658",['cc40a48cb8ca16f91bfdc66eaed6151805355d4b'],False,"['SqlDialectFactoryImpl.java', 'SqlDialects.java', 'SqlDialectsTest.java']"
cdf9d700183d926780f4e5b57d6211a85a548506,"[CALCITE-4960] Enable unit tests in Elasticsearch Adapter

1. Increase SocketTimeout and ConnectionTimeout for RestClient to avoid
CI failures.
2. Disable/Skip test cases with appropriate JIRA references.

Close apache/calcite#2659",['b2baf2dfd590b369ad41067a5a9280782d84ef17'],False,"['Bug.java', 'AggregationTest.java', 'BooleanLogicTest.java', 'ElasticSearchAdapterTest.java', 'EmbeddedElasticsearchPolicy.java', 'MatchTest.java', 'ProjectionTest.java', 'ScrollingTest.java']"
58fb52ca7bb229e483d41ab7d25aa7da7015b5c5,"[CALCITE-4973] Upgrade log4j2 version to 2.17.1

The 2.17.1 contains a fix for CVE-2021-44832 (security vulnerability)
and other minor improvements.",['cdf9d700183d926780f4e5b57d6211a85a548506'],False,['gradle.properties']
77d3dd40a059aea4d10c573468277126269d3c9e,Site: Fix typo in howto.md,['cbda134d8e75a8a5c63a1aa9bcddab6fc6756021'],False,['howto.md']
0065d7c179b98698f018f83b0af0845a6698fc54,"[CALCITE-4986] Make HepProgram thread-safe

Before this change, HepProgram used mutable fields for its
working state and was therefore not thread-safe. If two
threads were planning queries simultaneously and are using
the same HepProgram instances they might conflict.

This change moves the mutable state out of HepProgram, so
that HepProgram is fully immutable and therefore thread-safe.
We make other fields final and not-nullable where possible.

Before using a HepProgram, you now need to call the new
HepProgram.prepare() method to create an instance of class
HepState (which contains the state for any program
instruction, including the whole program), then call the
method HepState.execute().

Close apache/calcite#2691",['18f5e9a1a3c9a47ae18357c0cb8e35efc40276df'],False,"['HepInstruction.java', 'HepPlanner.java', 'HepProgram.java', 'HepProgramBuilder.java', 'HepState.java', 'Nullness.java']"
bf56743554ea27d250d41db2eb83806f9e626b55,"[CALCITE-4885] Fluent test fixtures so that dependent projects can write parser, validator and rules tests

The goal is to be able to write tests from both inside and outside of
Calcite, and without deriving from a particular test class.

We achieve that goal by creating *fixture* objects for each kind of
test. Test configuration (e.g. what SQL query to test) belongs in that
fixture, and is set using wither methods.

Inside the fixture is a *factory* that creates the objects necessary
to run the test (parser, validator, and so forth). The factory
necssarily contains the config for the parser, validator, etc. Tests
configure the factory by calling methods in their fixture.

Also inside a fixture is a *tester* that orchestrates the lifecycle
(parse, validate, SQL-to-rel, check results). The tester is stateless
(necessary state is provided by parameters to its methods, which often
include a `SqlTestFactory`). There is one main implementation of the
tester, but it can be substituted with an radically different
implementations (say one that no-ops, or dumps all SQL expressions to
a file).

Tests that compare actual results with expected results may have a
`DiffRepository` attached to their fixture.

There follows descriptions of other refactorings included in this
change.

The code was deprecated in [CALCITE-4591], [CALCITE-4593],
[CALCITE-4446] to be removed before release 1.28.

Move classes `DiffRepository`, `MockRelOptPlanner`,
`SqlToRelTestBase`, `RelOptTestBase`, `SqlRuntimeTester`,
`SqlOperatorTest` (renaming to `CoreSqlOperatorTest`),
`SqlOperatorBaseTest` (renaming to `SqlOperatorTest`).

Class `Fixtures` is a single place to obtain fixtures to tests of the
parser, validator, operators, planner rules, and more. These fixtures
can be used within Calcite but also by any project that uses Calcite
(the project just needs to use the `testkit` module).

`class FixtureTest` tests `Fixtures` and contains examples.

Add `fixture()` methods, to create fixtures without SQL, to many test
classes including `RelToSqlConverterTest`, `InterpreterTest`,
`SqlParserTest`, `SqlValidatorTest`, `DruidAdapter2IT`,
`DruidAdapterIT`. (Previously many tests would write `sql(""?"")` to
create tests with dummy SQL.

In `class CalciteAssert`, move method `withRel` from `AssertQuery` to
`AssertThat`, so that tests can provide a `RelNode` without first
providing dummy SQL. Also make the list of hooks (used heavily by
`AssertQuery`) immutable.

In `SqlTester`, remove methods `checkFieldOrigin`, `checkResultType`,
`checkCollation`, `checkCharset`, `checkIntervalConv`,
`checkMonotonic`; all can now be implemented in terms of a new method
`validateAndThen`, and similar methods `validateAndApply` and
`forEachQueryValidateAndThen`.

Obsolete `interface SqlToRelTestBase.Tester`; `SqlToRelFixture` now
uses `SqlTester`.

Move inner `class MockViewExpander` from `SqlToRelTestBase` to
`SqlTestFactory`.

Method `SqlToRelTestBase.assertValid` becomes `Matchers.relIsValid`.

Refactor/rename a few methods, and change 'query' field to 'expression'.

State is now in the fixture (`class SqlParserFixture`) or
`SqlTestFactory`.

Create a fixture (`class SqlParserListFixture`) for list-based parser
tests.

Remove fixture's `transform` field; config is now transformed
immediately, not deferred.

Remove field `LINUXIFY` (thread-local state).

Fields `SqlToRelFixture.expression` and `SqlValidatorFixture.expression`
were each previously called `query` and had the opposite sense;
both are now consistent with `SqlParserFixture.expression`.

Rename method `sql` to `withSql`, `config` to `withConfig`, etc.

Rename method `withDecorrelation` to `withDecorrelate`,
`withLateDecorrelation` to `withLateDecorrelate`
`with(RelOptPlanner)` to `withPlanner`,
`with(HepProgram)` to `withProgram`.

`MaterializedViewTester` is now a utility class for materialized view
tests but is no longer required to be a base class.

Move `interface AbstractMaterializedViewTest.Sql` to top-level
`class MaterializedViewFixture`.

In `class MaterializedViewSubstitutionVisitorTest`, create a fixture
for satisfiability tests.

`RelSupplier` was previously an inner class of `class RelOptTestBase`.

It is used in metadata tests (`RelMetadataFixture`) and planner rule
tests (`RelOptFixture`) but could be used in other tests too.

Add `class RelSuppliers` with utilities and implementations for
`RelSupplier`.

Move `assertXxx` methods into a fixture, `class
SqlAdvisorTest.Fixture`.

Remove inner `class LexConfiguration`; it relied on a mutable tester
in each `SqlValidatorTest` instance, which is no longer there.

Implement methods `toString`, `equals`, `hashCode`.

Move inner `class Sql` to top-level `class SqlPrettyWriterFixture`.

Add `class ConnectionFactories`, utilities for `ConnectionFactory` and
`CalciteAssert.ConnectionPostProcessor`.

Enumerates all possible 'xxx' in JDBC `ResultSet.getXxx` and
`PreparedStatement.setXxx` methods.

Utilities for `interface SqlTester.ResultChecker`.

Move `interface SqlOperatorTest.Fixture` to `SqlOperatorFixture`.

In `class SqlOperatorFixture`, remove `double delta` arguments from
methods that test floating-point values; instead use a `ResultChecker`
created using a `ResultCheckers` method such as `isWithin` or
`isExactly`.

Remove method `withLibrary2`.

Move `class SqlToRelConverterTest.RelValidityChecker` to top-level.

In class `SqlLimitsTest`, move method `checkTypes` to
`class SqlTests`.

In a few cases we would built complex transforms (instances of
`UnaryOperator`) that were applied just before the test ran. Now we
try to apply transforms early, storing a transformed config rather
than a chained transform. It's easier to understand and debug.

Remove method `RelDataTypeSystemImpl.allowExtendedTrim`, which was
added in [CALCITE-2571] but was never used.

Remove some uses of `assert` in `TypeCoercionTest`. (Never use
`assert` in tests!)

Use `Assertions.assertEquals`, `Objects.requireNonNull` via static import.

In `class SqlValidator.Config`, rename method `sqlConformance()` to
`conformance()`, to be consistent with conformance properties
elsewhere.

In `class TryThreadLocal`, add methods `letIn(T, Supplier)` and
`letIn(T, Runnable)`.

Close apache/calcite#2685",['864268c600bb5bd6077092f1c6605ddd59a4969e'],False,"['BabelParserTest.java', 'BabelTest.java', 'package-info.java', 'CalciteConnectionImpl.java', 'RelOptUtil.java', 'CalcitePrepareImpl.java', 'PlannerImpl.java', 'RelValidityChecker.java', 'RelDataTypeSystemImpl.java', 'SqlDialect.java', 'SqlUnnestOperator.java', 'StringAndPos.java', 'OrderByScope.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'RelRunner.java', 'JdbcType.java', 'JdbcTypeImpl.java', 'Sarg.java', 'TryThreadLocal.java', 'CalciteRemoteDriverTest.java', 'RelWriterTest.java', 'MultipleTraitConversionTest.java', 'VolcanoPlannerTest.java', 'RelMetadataHandlerGeneratorUtilTest.java', 'RelToSqlConverterTest.java', 'SqlUnParserTest.java', 'ExtensionSqlParserTest.java', 'DocumentationTest.java', 'SqlAdvisorTest.java', 'SqlOperatorBaseTest.java', 'SqlPrettyWriterFixture.java', 'SqlPrettyWriterTest.java', 'SqlTypeUtilTest.java', 'SqlValidatorUtilTest.java', 'CalciteSqlOperatorTest.java', 'CoreSqlOperatorTest.java', 'HepPlannerTest.java', 'InterpreterTest.java', 'JdbcAdapterTest.java', 'JdbcTest.java', 'MaterializedViewFixture.java', 'MaterializedViewRelOptRulesTest.java', 'MaterializedViewSubstitutionVisitorTest.java', 'MaterializedViewTester.java', 'MutableRelTest.java', 'ProxyingRelMetadataTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RelOptTestBase.java', 'RexTransformerTest.java', 'RuleMatchVisualizerTest.java', 'ScannableTableTest.java', 'SqlHintsConverterTest.java', 'SqlLimitsTest.java', 'SqlTestGen.java', 'SqlToRelConverterTest.java', 'SqlToRelTestBase.java', 'SqlValidatorDynamicTest.kt', 'SqlValidatorFeatureTest.java', 'SqlValidatorTest.java', 'TCatalogReader.java', 'TopDownOptTest.java', 'TypeCoercionConverterTest.java', 'TypeCoercionTest.java', 'EnumerableBatchNestedLoopJoinTest.java', 'EnumerableCalcTest.java', 'EnumerableCorrelateTest.java', 'EnumerableHashJoinTest.java', 'EnumerableJoinTest.java', 'EnumerableRepeatUnionHierarchyTest.java', 'EnumerableRepeatUnionTest.java', 'EnumerableStringComparisonTest.java', 'PlannerTest.java', 'UtilTest.java', 'log4j2-test.xml', 'RelOptRulesTest.xml', 'SqlHintsConverterTest.xml', 'SqlToRelConverterTest.xml', 'DruidAdapter2IT.java', 'DruidAdapterIT.java', 'AggregationTest.java', 'BooleanLogicTest.java', 'ElasticSearchAdapterTest.java', 'MatchTest.java', 'Projection2Test.java', 'ProjectionTest.java', 'ScrollingTest.java', 'GeodeAllDataTypesTest.java', 'GeodeBookstoreTest.java', 'GeodeZipsTest.java', 'ServerParserTest.java', 'ServerTest.java', 'ServerUnParserTest.java', 'build.gradle.kts', 'SqlParserFixture.java', 'SqlParserListFixture.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'ResultCheckers.java', 'SqlOperatorFixture.java', 'SqlTestFactory.java', 'SqlTester.java', 'SqlTests.java', 'SqlValidatorTester.java', 'CalciteAssert.java', 'ConnectionFactories.java', 'ConnectionFactory.java', 'DiffRepository.java', 'Fixtures.java', 'Matchers.java', 'MockRelOptPlanner.java', 'RelMetadataFixture.java', 'RelOptFixture.java', 'RelOptTestBase.java', 'RelSupplier.java', 'SqlOperatorFixtureImpl.java', 'SqlOperatorTest.java', 'SqlRuntimeTester.java', 'SqlToRelFixture.java', 'SqlToRelTestBase.java', 'SqlValidatorFixture.java', 'SqlValidatorTestCase.java', 'MockCatalogReader.java', 'MockCatalogReaderDynamic.java', 'MockCatalogReaderExtended.java', 'MockCatalogReaderSimple.java', 'FixtureTest.java', 'FixtureTest.xml']"
e6f7cac6a2fc4cd4ddf9dc6f29723947cbf99afe,"[CALCITE-4994] SQL-to-RelNode conversion is slow if table contains hundreds of fields

If a table contains hundreds or thousands of fields,
SQL-to-RelNode conversion is slow because the operation to
lookup a field within a record type is O(n) in the number of
fields and is called O(n) times. This manifests in the method
SqlToRelConverter.Blackboard.lookupExp.

The solution we adopted is to add a map in RelRecordType
from field names (case-sensitive) to fields (Julian Hyde).

We hope that this map will improve performance in other
parts of the planning process besides SQL-to-RelNode (e.g.
validation and rewrite rules).

If the record has 20 (RelRecordType.THRESHOLD) or fewer
fields, the map is not populated. We believe that this saves
memory and effort for the common case, small to medium-sized
records.

In SqlToRelConverter.Blackboard, change the contract of
method lookupExp. It would previously return null if a field
was not found, whereupon the caller would throw; now the
method throws, and is declared not-nullable. The method
previously returned a Map from field names to field ordinals,
and now returns a Function that can convert a field name to
an expression accessing that field; the new contract is
easier to implement efficiently with available knowledge.

Add a benchmark, RelNodeConversionBenchmark, that
demonstrates improvement for tables with 100 and 1,000
fields (Jay Narale).

Close apache/calcite#2701

Co-authored-by: Julian Hyde <jhyde@apache.org>",['8570cf2b293e9acab9525fbe76709d970b9f7104'],False,"['RelDataTypeFieldImpl.java', 'RelDataTypeImpl.java', 'RelRecordType.java', 'SqlToRelConverter.java', 'README.md', 'RelNodeConversionBenchmark.java']"
1d4f1b394bfdba03c5538017e12ab2431b137ca9,"[CALCITE-4702] Error when executing query with GROUP BY constant via JDBC adapter

Add new method in SqlDialect controlling whether GROUP BY using
literals is supported. Note that the whole Postgres family returns
false by precaution; some literals may be supported by Postgres or some
derivation of it. We agreed the extra complexity needed handle those
special cases was not worth it so we decided to return false for all
kinds of literals.

Introduce a new rule to rewrite the GROUP BY using an inner join with a
dummy table for those dialects that do not support literals.

Add a rule based transformation step at the beginning of the rel to SQL
conversion and ensure callers are passing from there. This allows to
keep the aggregate constant transformation in a single place.

Add tests with GROUP BY and different types of literals.

Close apache/calcite#2482",['e6f7cac6a2fc4cd4ddf9dc6f29723947cbf99afe'],False,"['JdbcToEnumerableConverter.java', 'SqlImplementor.java', 'AggregateProjectConstantToDummyJoinRule.java', 'SqlDialect.java', 'InformixSqlDialect.java', 'PostgresqlSqlDialect.java', 'RedshiftSqlDialect.java', 'RelToSqlConverterTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'JdbcToSparkConverter.java']"
c668e3bb54a9385b147f492f191e1fb278e8162c,"[CALCITE-4872] Add UNKNOWN value to enum SqlTypeName, distinct from the NULL type

Before this change, the UNKNOWN type would become the NULL type
when switching nullability.

Close apache/calcite#2595",['1d4f1b394bfdba03c5538017e12ab2431b137ca9'],False,"['SqlImplementor.java', 'BasicSqlType.java', 'SqlTypeFactoryImpl.java', 'SqlTypeMappingRule.java', 'SqlTypeName.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'SqlTypeFactoryTest.java', 'SqlTypeFixture.java', 'SqlTypeUtilTest.java', 'reference.md']"
812e3e98eae518cf85cd1b6b7f055fb96784a423,"[CALCITE-4996] In RelJson, add a readExpression method that can convert JSON to a RexNode expression

Previously `RelJson` was only able to deserialize `RexNode`
expressions that are part of a `RelNode` such as `Project`,
`Filter` or `Join`; references to input fields would always
be converted to a `RexInputRef`, referencing a field of the
input `RelNode`'s output row type.

But if the expression is not part of a `RelNode`, there is no
input `RelNode`. So this change adds `interface
InputTranslator` to specify how references to input fields
are to be translated.

In RuleMatchVisualizer, make method static, to appease lint.

Close apache/calcite#2709",['c668e3bb54a9385b147f492f191e1fb278e8162c'],False,"['RuleMatchVisualizer.java', 'RelJson.java', 'RelWriterTest.java']"
89b7091c983e3aed0ed85830b91a3764740e9d07,"[CALCITE-5006] Gradle tasks for launching JDBC integration tests are not working

1. Resolve the problem by removing the custom set of testClassesDirs
2. Set correctly the classpath to include JDBC drivers from a custom
configuration.
3. Add a bit of documentation around the JDBC tasks and configs.

Close apache/calcite#2716",['5b2de4ef5c9447bc9f7aff98dd049bd32af5c53d'],False,['build.gradle.kts']
5111f0f1bd2e63a947fd8524fa79517eb4c00052,"[CALCITE-5007] Upgrade H2 database version to 2.1.210

The 1.4.197 version suffers from multiple CVEs such as:
https://nvd.nist.gov/vuln/detail/CVE-2018-14335
https://nvd.nist.gov/vuln/detail/CVE-2018-10054
https://nvd.nist.gov/vuln/detail/CVE-2021-42392
https://nvd.nist.gov/vuln/detail/CVE-2022-23221

In the project, we use H2 only for testing purposes thus the H2
binaries are not present in the runtime classpath thus these CVEs do
not pose a problem for Calcite or its users.

Close apache/calcite#2717",['89b7091c983e3aed0ed85830b91a3764740e9d07'],False,['gradle.properties']
04029ff5a1918c373dced4c62750fa7093b311ab,[CALCITE-4995] AssertionError caused by RelFieldTrimmer on SEMI/ANTI join,['4a6e2228c2e2ccf46acb31a0342a1b7d4563e2f6'],False,"['RelFieldTrimmer.java', 'RelFieldTrimmerTest.java']"
f43e0797571a77c687971d7aafade4cc5b7b2ac5,Fix typo in filterable-model.yaml,['04029ff5a1918c373dced4c62750fa7093b311ab'],False,['filterable-model.yaml']
e81cd20bfbf3cdc8fa430663b8f971119193cc3e,"[CALCITE-5011] CassandraAdapterDataTypesTest fails with initialization error

Cache Cassandra sessions based on ""hostname, port, keyspace, username, password"" information.",['595da9b8b2d9f76b5bc46fbf8fb4d82efa47e9ee'],False,"['CassandraEnumerator.java', 'CassandraSchema.java', 'CassandraSchemaFactory.java']"
cbbe5701b7f61d7f8df12d314ba5aabf898c1cae,"[CALCITE-5008] Ignore synthetic and static methods in MetadataDef

According to https://www.jacoco.org/jacoco/trunk/doc/faq.html , Jacoco
adds a synthetic static method called $jacocoInit() during
instrumentation.

MetadataDef constructor breaks if it encounters such method on
the class given to it because it does not expect it. But it looks like
it simply should not consider synthetic methods (as well as static
methods) at all.

- extract code for finding handler methods
- reuse it in both places
- add tests concerning synthetic methods",['9c4f3bb540dd67a0ffefc09f4ebd98d2be65bb14'],False,"['build.gradle.kts', 'build.gradle.kts', 'MetadataDef.java', 'MetadataHandler.java', 'RelMetadataHandlerGeneratorUtil.java', 'MetadataDefTest.java', 'MetadataHandlerTest.java', 'MetadataHandlerWithStaticMethod.java', 'TestMetadata.java', 'TestMetadataHandlers.java', 'gradle.properties']"
20ca53c962b1642ac4cda32ffdf1294042e951a8,"[CALCITE-5025] Upgrade commons-io version from 2.4 to 2.11.0

commons-io versions before 2.7 suffer from CVE-2021-29425 which allows
to traverse into the parent directory.

Update to a more recent version to avoid the afforementioned security
vulnerability and benefit from the other improvements in this library.

Close apache/calcite#2734",['cbbe5701b7f61d7f8df12d314ba5aabf898c1cae'],False,['gradle.properties']
dcbc493bf699d961427952c5efc047b76d859096,[CALCITE-5019] Avoid multiple scans when table is ProjectableFilterableTable and projections and filters act on different columns,['6a3eea213732028e424f01b01f6f93d064348d41'],False,"['TableScanNode.java', 'ScannableTableTest.java']"
692b8f0886a25538e010d1a8ae5efe89f80d89e9,"[CALCITE-5040] SqlTypeFactoryTest.testUnknownCreateWithNullabilityTypeConsistency fails

[CALCITE-4872] added an UNKNOWN type that was implemented in some
places by class SqlTypeFactoryImpl.UnknownSqlType, but in others
by BasicSqlType. This would cause
SqlTypeFactoryTest.testUnknownCreateWithNullabilityTypeConsistency
to succeed or fail non-deterministically, depending on which of the
above had made it into the map of canonical type instances.

This commit solves the problem by removing class
SqlTypeFactoryImpl.UnknownSqlType and always using BasicSqlType.",['dcbc493bf699d961427952c5efc047b76d859096'],False,"['SqlTypeFactoryImpl.java', 'SqlTypeFactoryTest.java']"
8844146182c4220c0747e46dcfb745288df7e39c,"[CALCITE-4989] Nested JSON_OBJECT creation does not produce proper json

fix checkstyle

make jdk11 checker happy",['a6a1e2cef332893fd90286098869c56529e052c3'],False,"['RexImpTable.java', 'JsonFunctions.java', 'SqlKind.java', 'SqlJsonTypeOperator.java', 'SqlStdOperatorTable.java', 'SqlToRelConverter.java', 'SqlJsonFunctionsTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'agg.iq', 'SqlOperatorTest.java']"
f43a43141d4cd1e4d4b14799e7ec820d27298512,Site: Fix release announcement for 1.30.0,['970ba276e78f15e65382b6d881519a65d1a60d45'],False,['2022-03-20-release-1.30.0.md']
88cc385f98c551c1aca7ffab101934f1c34fdffd,Fix typo documenting rules for triggering a non-release website update,['f43a43141d4cd1e4d4b14799e7ec820d27298512'],False,['publish-non-release-website-updates.yml']
3e877d11ae4bf3ff6dbfc990b6a13914e7c30944,"Refactor RelWriterTest

(No changes in functionality.)",['ef2cc1df21a73ad0268ccb869c976b11eff319b4'],False,"['JsonBuilder.java', 'RelWriterTest.java']"
10a3b1a3f5399851bc31ff665a999411edffbcc8,"[CALCITE-4401] SqlJoin.toString throws RuntimeException, ""No list started""

To resolve the RuntimeException seen in SqlJoin#toString, add
a ""SELECT *"" wrap over SqlJoin in SqlJoin#toSqlString. This
prevents SqlJoin#unparse method from calling
SqlPrettyWriter#sep with a null frame, and is a less fragile
fix than to mutate internal frame state.

Extend SqlPrettyWriterFixture with a method
`checkTransformedNode(UnaryOperator<SqlNode> transform)`
that does do the same as `check()` but applies a transform
function that maps from the root to another node in the tree.

Close apache/calcite#2757",['d81c0e057b46969f0887c272b01ece60f23936a1'],False,"['SqlJoin.java', 'SqlPrettyWriterFixture.java', 'SqlPrettyWriterTest.java', 'SqlPrettyWriterTest.xml']"
4cc2d80b1fa96b18285cfc494869568e7576e54c,"[CALCITE-4992] Resource leak in Elasticsearch adapter

The Elasticsearch adapter was not calling 'close()' on
RestClient instances, which is considered a resource leak.
To solve, this change adds a Guava cache of RestClient
objects in ElasticsearchTransport (one per endpoint), and
the cache closes them after an hour.

Close apache/calcite#2698",['10a3b1a3f5399851bc31ff665a999411edffbcc8'],False,['ElasticsearchSchemaFactory.java']
5eb97411ecb5df1c0fdfa5d3568d93468bff0fa1,"[CALCITE-5048] Query with parameterized LIMIT and correlated sub-query throws AssertionError ""not a literal""",['c8d1cb5a1e1b1dd98966c29308bc6b1aed245501'],False,"['RelMdMaxRowCount.java', 'RelMdMinRowCount.java', 'RelMdUtil.java', 'RelDecorrelator.java', 'RelBuilder.java', 'RelMdUtilTest.java', 'JdbcTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java']"
857d8eb34e37a2c4512c5bf345048d39e0ce945a,Remove instructions for syncing site and master and fix formatting issue in howto,['e49f63c8d838a2306f53bbbd14bf4c79f37c6e7d'],False,['howto.md']
bfabec671a202f350f0982a50f28819688d88dac,"[CALCITE-5015] Fix typo in PartiallyOrderedSet

Close apache/calcite#2726",['169711bb85a8b40c1e5339f492d9d98ea22ff5ef'],False,['PartiallyOrderedSet.java']
1bce280a2957326dc5c249cfd079edfd2c54adf4,[CALCITE-5081] Group keys of Aggregate are wrongly changed during decorrelation,['86b34f7ba81cc85aec4589f8fa4dcbf503ad8677'],False,"['RelDecorrelator.java', 'RelDecorrelatorTest.java']"
4969b9690efe999c522daf1151c4a00a33be0eb0,"[CALCITE-5073] JoinConditionPushRule cannot infer 'LHS.C1 = LHS.C2' from 'LHS.C1 = RHS.C1 AND LHS.C2 = RHS.C1'

Cosmetic fix-ups by Chunwei Lei.

Close apache/calcite#2761",['52c9b7836bbed90038f28a933c0cb56d2d69cd28'],False,"['FilterJoinRule.java', 'RelToSqlConverterTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
a5af80642787e3f1d24671d3a6339568d0c6b201,[CALCITE-5170] Assertion error on range distribution creation,['f278efb0411ba29c7bd167f5d02e566bf542acb3'],False,"['RelDistributions.java', 'RelDistributionTest.java']"
63a15128a332af7a641b26a3224392960882170a,"[CALCITE-35] Support parsing parenthesized joins

Allow comma only at top level in FROM clause.
Add new join operator, COMMA-JOIN, with slightly lower
precedence than JOIN, to that unparsing works correctly.

Move test case from JdbcTest to join.iq.

Includes changes from PR #1204, authored by
Muhammad Gelbana <m.gelbana@gmail.com>

Close apache/calcite#1204
Close apache/calcite#2820

Co-authored-by: Muhammad Gelbana <m.gelbana@gmail.com>",['231008a16d8a3f13d0ef3601dd5a809f62a3803b'],False,"['Parser.jj', 'CalciteResource.java', 'SqlJoin.java', 'SqlSelectOperator.java', 'SqlAbstractParserImpl.java', 'CalciteResource.properties', 'JdbcTest.java', 'SqlValidatorTest.java', 'join.iq', 'set-op.iq', 'SqlParserTest.java']"
4659479a508461921c5b1e3e7c4d09cb745de33e,"[CALCITE-5147] Allow DATE, TIME, TIMESTAMP, INTERVAL literals in BigQuery dialect

Before this change, the expression

  DATE '2018-02-17'

fails to parse in BigQuery dialect because the parser
requires a <QUOTED_STRING> token and actually sees a
<BIG_QUERY_QUOTED_STRING> token. Similarly TIME, TIMESTAMP,
LITERAL literals. After this change, the above single-quoted
form succeeds, as does the double-quoted form like this:

  DATE ""2018-02-17""

In SqlParserUtil, the methods parseDateLiteral,
parseTimeLiteral, parseTimestampLiteral and
parseIntervalLiteral expected a quoted string as an argument
(e.g. ""'2018-02-17'"") and now expect just the value (e.g.
""2018-02-17'""). Callers should now call parseString on the
argument first.

Close apache/calcite#2823",['9d6838a3c636cb58366c45c8363dc7f6388bf589'],False,"['Parser.jj', 'CalciteResource.java', 'SqlParserUtil.java', 'CalciteResource.properties', 'SqlParserTest.java']"
c4cc0bf80be8a285a0f0ccc363f71a3bafba87b0,Fix typo in comments,['a9aea934dc29395ca8ee81df5dcf0d50ac823023'],False,"['MatchUtils.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'RexLiteral.java', 'RexSimplify.java', 'SqlThrowOperator.java', 'ReflectiveVisitor.java']"
e84a476d5dcbccab41e733fb3a61efaae5ab2c35,"[CALCITE-5179] In RelToSqlConverter, AssertionError for values with more than two items when SqlDialect#supportsAliasedValues is false",['c4cc0bf80be8a285a0f0ccc363f71a3bafba87b0'],False,"['RelToSqlConverter.java', 'RelToSqlConverterTest.java']"
75d064f659a038371d84f9fdba7847e1631d1f1d,"[CALCITE-5143] Allow custom time unit abbreviations in FLOOR, CEIL, EXTRACT, DATE_PART, DATEADD, DATEDIFF and similar functions

Time unit abbreviations are specified in
SqlParser.Config.timeUnitCodes().

Since [CALCITE-2496], EXTRACT supports MICROSECOND and
NANOSECOND by default but FLOOR and CEIL do not. With this
change, you could configure FLOOR and CEIL to also support
those units.

Close apache/calcite#2807",['e84a476d5dcbccab41e733fb3a61efaae5ab2c35'],False,"['BabelParserTest.java', 'Parser.jj', 'SqlAbstractParserImpl.java', 'SqlParser.java', 'SqlParserTest.java', 'SqlOperatorTest.java']"
515f3356a6a1ab4bd570c1c20bec9a7e5d4aca5f,"Refactor parser

This commit does not change functionality. Some method
signatures have changed, which might affect derived parsers.
We also fix a few lint warnings outside the parser.

Here are the major refactorings:

1. Remove unused imports and variables;
2. Make variables 'final' wherever possible;
2. Remove unused initializers;
4. Convert optional blocks to mandatory blocks. For example,

  [ e = X() ]

becomes

  ( e = X() | { e = null; } )

and now we can remove e's initializer and make it 'final'.

5. Deprecate the 'startList' method. Previously you would
use 'startList' to initialize the list when adding the
first element:

  List<SqlNode> list;
  ...
  list = startList(e)

Now you initialize the list when it is declared:

  final List<SqlNode> list = new ArrayList<SqlNode>();
  ...
  list.add(e);

This is a bit more work if the list is never used. But it
makes the code to add the first element the same as the code
to add subsequent elements.

6. If parser methods are used to build lists, this change
refactors them to pass the list as an argument. For
example,

  SqlNode OrderItem() : ...

  e = OrderItem() { list.add(e); }
  ( <COMMA> e = OrderItem() { list.add(e); } )*

is now

  void AddOrderItem(List<SqlNode> list) : ...

  AddOrderItem(list) ( <COMMA> AddOrderItem(list) )*

This change adds a 'Add' prefix to existing methods of this
style.

7. Remove an obsolete resource that used to be used by the
parser.",['85a6ecdd1d759e2f53e574b1a1b194d5af16aa75'],False,"['parserImpls.ftl', 'Parser.jj', 'RuleMatchVisualizer.java', 'StepInfo.java', 'FilterJoinRule.java', 'CalciteResource.java', 'SqlLiteral.java', 'MysqlSqlDialect.java', 'Span.java', 'SqlValidatorImpl.java', 'JsonBuilder.java', 'CalciteResource.properties', 'parserImpls.ftl', 'config.fmpp', 'parserImpls.ftl']"
9bdd26159110663c4a207e3e8c378d1c3d16e034,Site: Add Jing Zhang as committer,['8d8b0b10fd18c1d1b201c103c680b48114e2980c'],False,['contributors.yml']
ec903d69bb40470f59008667c3906d73bcf5f447,"Site: fixing checkstyle violation for Calcite 1.31 release note

Newline missing at the end of the file",['edda77acba7e2cbba757553030e5afac234d0e7c'],False,['2022-08-02-release-1.31.0.md']
257c81b5cac35e29598a246463356fea7e0b0336,Site: Fix 1.31.0 release date to 2022-08-22 (was 2022-08-22),['0e57722208d842a1192f38f28c2a379ae88dcdf0'],False,['history.md']
966ec175b8df77842bf00e8675c57ab2de6f901a,Site: Change sereda's role from Committer to PMC,['5990904913e2d2b1aae6ee07c83631687fe774cc'],False,['contributors.yml']
250d13c566913ba541ddd7ac4c4443a11a1a976b,"[CALCITE-4294] Use JTS and proj4j rather than ESRI as the underlying library for geospatial (ST_) functions

Prefix classes with SpatialType (ST) instead of Geo.

Adapt tests to JTS outputs. We now  round the floating point
values in geometries, because floating point values have
slightly different least-significant digits when run under
Java 8 and Java 11.

Add method TestUtil.roundGeom(String, int), to allow the
aforementioned rounding (Julian Hyde).

Unofficially add function ST_AsEWKT for use in tests; it
will be officially added (with tests and documentation)
in [CALCITE-5262].

Close apache/calcite#2879",['fe14559360f6b72aa8c427add63450ead20f037b'],False,"['build.gradle.kts', 'build.gradle.kts', 'RexToLixTranslator.java', 'JavaTypeFactoryImpl.java', 'SpatialRules.java', 'RexBuilder.java', 'RexLiteral.java', 'GeoFunctions.java', 'Geometries.java', 'ProjectionTransformer.java', 'SpatialTypeFunctions.java', 'SpatialTypeUtils.java', 'SqlSpatialTypeFunctions.java', 'JavaToSqlTypeConversionRules.java', 'SqlOperatorTables.java', 'BuiltInMethod.java', 'EnumUtilsTest.java', 'SpatialTypeUtilsTest.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'spatial.iq', 'GeodeSchemaFactory.java', 'gradle.properties', 'suppressions.xml', 'CalciteAssert.java', 'TestUtil.java', 'TestUtilTest.java']"
57aafa3551847da0a69696660bfe391e1d3a7a6c,Cosmetic changes to release notes,['262492527fbd450892df36cda38080d447fc6498'],False,['history.md']
e46dfc619c960bcfbfa46b311a34b4ec7f0685a2,"[CALCITE-5287] SQL reference page is missing from website

The newline at the beginning of reference.md page seems to be causing
a problem with Jekyll that ignores the .md file and fails to generate
the respective .html file.",['e41555f568510df04d3883516b2195393a93426d'],False,['reference.md']
a505b25eacc473c6ec0ef8abd40c1ccae86297b6,"[CALCITE-5269] Implement BigQuery TIME_TRUNC and TIMESTAMP_TRUNC functions

Make negative parser tests pass on Windows. (Previously, we
assumed that the error message would have Linux line
endings.)

Close apache/calcite#2913",['9795a778bad4d727e68f9c4f6820ec0be7443f07'],False,"['config.fmpp', 'big-query.iq', 'default_config.fmpp', 'Parser.jj', 'RexImpTable.java', 'SqlLibraryOperators.java', 'OperandTypes.java', 'RelToSqlConverterTest.java', 'reference.md', 'SqlParserTest.java', 'AbstractSqlTester.java', 'SqlOperatorTest.java']"
3a38ebf40f6dfc1170ba3d3acc5d8e1f234ed45c,"[CALCITE-5286] Join with parameterized LIMIT throws AssertionError ""not a literal""",['765bec45f8f311a72b846224fe37c9e836220a3a'],False,"['RelMdMaxRowCount.java', 'RelMdMinRowCount.java', 'RelMetadataTest.java']"
c2407f59c32d1690d16b641d556bb27f8f1783ac,"[CALCITE-1045][CALCITE-5127] Support correlation variables in project

To some extend correlation in project was already supported even before
this change. However, the fact that the correlation variables were not
explicitly present (and returned by the operator) creates problems
cause we cannot safely deduce if a column/field is used and thus we may
wrongly remove those fields when using the RelFieldTrimmer, when
merging projections, etc.; see queries and discussion under the
respective JIRAs.

The addition of correlation variables in project also aligns the code
with Filter, Join; the latter explicitly set correlation variables.

Co-authored-by: korlov42 <korlov@gridgain.com>

Close apache/calcite#2813
Close apache/calcite#2623",['3a38ebf40f6dfc1170ba3d3acc5d8e1f234ed45c'],False,"['CassandraProject.java', 'CassandraRules.java', 'EnumerableProject.java', 'EnumerableProjectRule.java', 'EnumerableRelFactories.java', 'JdbcRules.java', 'Bindables.java', 'RelOptUtil.java', 'LixToRelTranslator.java', 'QueryableRelBuilder.java', 'RelNode.java', 'RelRoot.java', 'Project.java', 'RelFactories.java', 'RelJson.java', 'LogicalProject.java', 'RelToSqlConverter.java', 'FilterProjectTransposeRule.java', 'ProjectWindowTransposeRule.java', 'StreamRules.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'TraitPropagationTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'agg.iq', 'sub-query.iq', 'DruidRules.java', 'ElasticsearchProject.java', 'ElasticsearchRules.java', 'GeodeProject.java', 'GeodeRules.java', 'InnodbProject.java', 'InnodbRules.java', 'MongoProject.java', 'MongoRules.java', 'PigProject.java', 'PigRules.java', 'SplunkPushDownRule.java', 'RelMetadataFixture.java', 'MockCatalogReader.java']"
ab296ac571aa7b4b6649893ddaff5b2835710f4e,[CALCITE-5253] NATURAL join and USING should fail if join columns are not unique - expression validation partially broken,['c2407f59c32d1690d16b641d556bb27f8f1783ac'],False,"['RelCrossType.java', 'RelDataTypeFactoryImpl.java', 'SqlValidatorImpl.java', 'SqlValidatorTest.java']"
21110741ff104cb019b0f9de034845bf47ca8717,"[CALCITE-5339] Use Method#getParameterCount rather than Method#getParameterTypes to get length

The issue with Method#getParameters is that each time it
creates a new array by calling clone. It does not make sense
for the cases when only knowledge about number of parameters
is required.

Close apache/calcite#2943",['27592e55764a0c3ef394a3c6a7ac45e28ca69604'],False,"['CacheGeneratorUtil.java', 'ReflectiveFunctionBase.java', 'SqlPrettyWriter.java', 'SqlTestGen.java', 'CalciteAssert.java']"
5d771d8c6d706fda2f6a36332717c64adc657f38,[MINOR][JAVADOC] Add default catalog link to test fixtures,['040e85a9219a65122f6ae5ecd8f988afe29e5180'],False,"['RelOptTestBase.java', 'SqlToRelTestBase.java', 'SqlValidatorTestCase.java']"
43db14cf8e08230c309eeb425a568e77db964a46,"[CALCITE-4982] Do not push 'cast to not null' through Join in ProjectJoinTransposeRule

We should not push down dangerous expressions through Join at last, see more in CALCITE-5315.
In this issue, we fixed this by stop pushing down 'cast to not null' through Join for a quick fix.

This closes 2686",['d3dbd3da4c76556421e64f7ba90a5d39c89d23cf'],False,"['ProjectJoinTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
b06ef8831c23b60f487c56de5b4872a3c0bcbe4a,"Refactor RexImpTable

Break up the constructor into a builder pattern, and make
RexImpTable immutable after construction.

The constructor was getting too long (approaching 400
lines), so this change introduces a private static class
Builder and moves initialization into chained populate()
and populate2() methods.

Usually we put inner classes towards the end of the file.
In this case, we put the Builder inner class after the
constructor, in order to reduce diff noise.",['4220487dffa944c3e315e568df3c9fc8d782cf0a'],False,"['RexImpTable.java', 'RuleMatchVisualizer.java', 'FilterJoinRule.java']"
d4817ba28c354c8512bd213d7c4524c622b12789,"[CALCITE-5348] When translating ORDER BY in OVER, use the session's default null collation (e.g. NULLS LAST)

This repeats the fix that was made in [CALCITE-2323] and
that I accidentally undid in [CALCITE-4497].

Deprecate method SqlToRelConverter.convertSortExpression;
makeOver now goes directly to RexNode rather than using an
intermediate RexFieldCollation.",['0ac64d680dffef4ef842176afb51698287cf2598'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
a0e119ea42def418957f214f539469f1aba76c18,"[CALCITE-5155] Custom time frames

Before this change, you can use the ISO SQL time units
(SECOND, HOUR, DAY, MONTH, YEAR, etc.) to perform datetime
arithmetic (FLOOR, CEIL, EXTRACT) and also when defining
materialized views and using them in queries. But
applications would like to be able to define their own time
frames, such as ""MINUTE15"" (a 15 minute period aligned with
the hour) or ""MONTH4"" (a 4 month period aligned with the
year), or ""WEEK(THURSDAY)"" (a 7 day week that starts on a
Thursday).

After this change, applications can define their own time
frames. We add a `class TimeFrameSet`, and in the
`interface RelDataTypeSystem` we add a method `TimeFrameSet
deriveTimeFrameSet(TimeFrameSet frameSet)`. This method is
called during query preparation, and the application has
the opportunity to define a set that contains custom and
existing time frames.

Time frames can be defined that are multiples of and multiply
to built-in time frames (as, for example, MINUTE is a
multiple of SECOND and MILLISECOND multiplies to SECOND).
You can also define that a time frame is aligned with
another (as, for example, DAY is aligned with MONTH even
though the multiplier is not constant).

The following functions allow time frame arguments:
 * DATEADD (Postgres, MSSql)
 * DATEDIFF (Postgres, MSSql)
 * DATEPART (MSSql)
 * DATE_PART (Postgres)
 * EXTRACT (Calcite built-in, also SQL standard)
 * CEIL (Calcite built-in)
 * FLOOR (Calcite built-in)
 * TIMESTAMPADD (Calcite built-in, also JDBC standard)
 * TIMESTAMPDIFF (Calcite-builtin, also JDBC standard)
 * TIMESTAMP_TRUNC (BigQuery)
 * TIME_TRUNC (BigQuery)

Calls to the above functions with invalid time units would
previously be a parse error and are now detected during
validation.

The SQL_TSI_xxx (e.g. SQL_TSI_HOUR) arguments are treated
as time frames, and the parser passes them as identifiers.
They are no longer reserved keywords.

Previously, NANOSECOND and MILLISECOND were allowed in
EXTRACT but no other functions. Now all functions that
accept time frames accept the same time frames (built-in
time intervals, identifiers for user-defined time frames,
and SQL_TSI_xxx which are defined in the JDBC standard but
are treated as identifiers until validation).

The representation of calls to the above functions has
changed. Previously the operand was a time unit, now it is
an identifier.

Deprecate SqlAbstractParserImpl.setTimeUnitCodes() and
SqlParser.Config.timeUnitCodes(), because you can now create
aliases for time units by creating custom time frames using
TimeFrameSet.Builder.alias().

Add commons-math3 as a dependency because TimeFrame uses
BigFraction.

Currently ISO_YEAR is not handled by DATEADD, TIMESTAMPADD,
DATEDIFF, TIMESTAMPDIFF, etc. Adding or subtracting an
ISO_YEAR will no-op. I don't know what the behavior should
be.

Close apache/calcite#2960",['cb5f1161ad37ba3839c4c83c80377735df027f94'],False,"['parserImpls.ftl', 'BabelParserTest.java', 'BabelTest.java', 'build.gradle.kts', 'build.gradle.kts', 'Parser.jj', 'DataContext.java', 'RexImpTable.java', 'CalciteConnectionImpl.java', 'DelegatingTypeSystem.java', 'RelDataTypeSystem.java', 'TimeFrame.java', 'TimeFrameSet.java', 'TimeFrames.java', 'RexBuilder.java', 'CalciteResource.java', 'SqlFunctions.java', 'SqlCallBinding.java', 'SqlDialect.java', 'SqlIntervalQualifier.java', 'SqlLiteral.java', 'SqlExtractFunction.java', 'SqlFloorFunction.java', 'SqlLibraryOperators.java', 'SqlTimestampAddFunction.java', 'SqlTimestampDiffFunction.java', 'SqlAbstractParserImpl.java', 'SqlParser.java', 'IntervalOperandTypeChecker.java', 'OperandTypes.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlNodeToRexConverterImpl.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'DateTimeStringUtils.java', 'NameMap.java', 'TimestampString.java', 'CalciteResource.properties', 'SqlValidatorTest.java', 'TimeFrameTest.java', 'gradle.properties', 'SqlParserTest.java', 'SqlOperatorTest.java']"
a0ce3275119f804959cda54d6e7a016ab893c359,"[CALCITE-5310] JSON_OBJECT in scalar sub-query throws AssertionError

Close #2929",['12e9ad4550caf3482b33895d2067ba50177bb8ba'],False,"['RexUtil.java', 'SqlTypeAssignmentRule.java', 'RelDecorrelator.java', 'sub-query.iq']"
725b71e5af13f2b8725a8da9762c21659c52e507,"[CALCITE-5391] JoinOnUniqueToSemiJoinRule should preserve field names, if possible

Why:
When rewriting the query for a semi join, the
`JoinOnUniqueToSemiJoinRule` pushes a new project via
`RelBuilder`. This project is *almost* a good copy of the original
`Project` -- it is just missing the field names.

How:
This change uses `RelDataType` of the `Project` to get the field names
for the new `Project` pushed on the `Relbuilder` stack. This is
similar to what is done in `SemiJoinRule#perform`",['ad77a20f286d4b25b26e940e92b40a15acb2e333'],False,"['SemiJoinRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
c89bd13cb209a0f4403dd7a82fdf24e2ee247988,"[CALCITE-5159] ARRAY string constructor, and implicit cast from string literal to array literal (enabled in Postgres conformance)

After this change, you can write an ARRAY constructor
followed by a string literal:

  ARRAY '{1,2,3}'

in a connection with Postgres conformance, and it is
equivalent to

  ARRAY [1,2,3]

Also, if you use a string literal in a context where an
array is needed, the string literal is treated as an array
literal. For example,

  SELECT ARRAY [1,2,3] = '{1,2,3}'

is equivalent to

  SELECT ARRAY [1,2,3] = ARRAY '{1,2,3}'

Close apache/calcite#2819",['9161a6f529775076eece3cb78bf4a898411e15ee'],False,"['config.fmpp', 'BabelDdlExecutor.java', 'BabelParserTest.java', 'BabelQuidemTest.java', 'postgresql.iq', 'default_config.fmpp', 'Parser.jj', 'CalciteResource.java', 'SqlAbstractParserImpl.java', 'SqlParserUtil.java', 'SqlTypeUtil.java', 'SqlAbstractConformance.java', 'SqlConformance.java', 'SqlConformanceEnum.java', 'SqlValidatorImpl.java', 'AbstractTypeCoercion.java', 'CalciteResource.properties', 'config.fmpp', 'parserImpls.ftl', 'ExtensionSqlCreateTable.java', 'ExtensionDdlExecutor.java', 'reference.md', 'SqlParserTest.java', 'MockDdlExecutor.java']"
814ae6ec09e72544ba010f2591e06020c55b162b,"Add class SqlBasicFunction

The goal is to reduce how often people need to write a
custom subclass of SqlFunction; rather than overriding a
method, they can change the value of a field.

There are one or two changes to tests because the
""MATCH_NUMBER"" function had been misspelled ""MATCH_NUMBER "".",['c89bd13cb209a0f4403dd7a82fdf24e2ee247988'],False,"['RelMdUtil.java', 'SqlBasicFunction.java', 'MssqlSqlDialect.java', 'MysqlSqlDialect.java', 'SparkSqlDialect.java', 'SqlLibraryOperators.java', 'SqlRandFunction.java', 'SqlRandIntegerFunction.java', 'SqlStdOperatorTable.java', 'RelToSqlConverterTest.java', 'RexProgramTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'reference.md', 'SqlParserTest.java']"
08f37e58bbc2f0189bab063e815e23f8cb79b2dc,"Refactor SqlOperatorTest

Add method SqlOperatorFixture.forEachLibrary, to make it
easier to test an operator in several libraries.",['814ae6ec09e72544ba010f2591e06020c55b162b'],False,"['SqlOperatorFixture.java', 'SqlOperatorTest.java']"
33ca193095fcd0db46b88a270bca8d8cd569b31a,[CALCITE-5410] Assertion error on PERCENT_REMAINDER operator with DECIMAL type,['687dec0afcfab781f905b16e422bc03bd6b9209e'],False,"['select.iq', 'SqlStdOperatorTable.java', 'SqlValidatorTest.java']"
1156efba972c90ab7a484e745d95bcecadf27ecc,"[CALCITE-5360] Add TIMESTAMP_ADD function (enabled in BigQuery library)

The JDBC and builtin functions already contain a TIMESTAMPADD
function with three arguments; this change adds a
TIMESTAMP_ADD function with two arguments, consistent with
BigQuery, and enabled if you have 'lib=bigquery' in your
connection options.

Close apache/calcite#2998",['ae7c37871659c7a151b02c88da68716cc6858b18'],False,"['big-query.iq', 'SqlLibraryOperators.java', 'StandardConvertletTable.java', 'Bug.java', 'reference.md', 'SqlOperatorTest.java']"
0a7d84270a0e23c1631a2732d41c1a0dd71527f2,"[CALCITE-5417] Upgrade Proj4J from 1.1.5 to 1.2.2, and restore it as an included dependency

In [CALCITE-5399] we removed Proj4J as a dependency due to
licensing issues with the EPSG data set. In this change we
upgrade Proj4J to version 1.2.2, which no longer includes
the EPSG data set and therefore can be distributed under the
Apache license.

This change mostly consists of a reversal of [CALCITE-5399],
but also upgrades Proj4J.",['cd76712fcd762bd71d233229afa55792ebd72f88'],False,"['build.gradle.kts', 'build.gradle.kts', 'CalciteResource.java', 'ProjectionTransformer.java', 'SpatialTypeFunctions.java', 'CalciteResource.properties', 'gradle.properties', 'howto.md', 'reference.md', 'spatial.md']"
013f034dee3e24083760b4695e2eacfbf592c2cb,"[CALCITE-5433] Druid tests hang/fail intermittently in CI

Run Druid tests using JDK 17 to overcome DriverManager deadlock
affecting JDK 8.

Close apache/calcite#3004",['0a7d84270a0e23c1631a2732d41c1a0dd71527f2'],False,['main.yml']
a7d34b89c615906b1dcbdd9fbc05d4f7c78c5a19,"[CALCITE-5452] Add LENGTH function (enabled in BigQuery library, equivalent to CHAR_LENGTH)

Add LENGTH() as a library function as an alias for the
standard CHAR_LENGTH(). Refactor some dependencies for
deprecated standard functions to avoid NullPointerException
due to circular dependencies.

Close apache/calcite#3011",['dd6158ad9ed718bd3c552331a93e61250bc78b4f'],False,"['big-query.iq', 'SqlLibraryOperators.java', 'SqlStdOperatorTable.java', 'StandardConvertletTable.java', 'reference.md', 'SqlOperatorTest.java']"
fe821caaa5db0050bfa6f01a8c0397a20973138f,"[CALCITE-5475] Improve test coverage accuracy by aggregating modules

Considering the modules in isolation leads to some modules
(e.g., testkit) reporting low coverage. The use of
jacoco-report-aggregation plugin alleviates the problem by aggregating
the coverage analysis from the individual modules into one unified
report.

While testing the changes there was one Jenkins job that got stuck
and kept running for almost ~24h. To prevent similar situation in the
future a 1h timeout is set in the code quality stage.

Close apache/calcite#3027",['9a07b1194bf82410c8583292f4eef7b0f289c594'],False,"['Jenkinsfile', 'build.gradle.kts']"
c4c0bf344b02cb7065a8d9539b4f6cda9a9e6f50,"[CALCITE-5491] Allow TIME and DATE to be args for TIMESTAMPDIFF

This fixes a regression introduced by [CALCITE-5423].

Close apache/calcite#3041",['ecb27b9f921bc6258da7a904bc2ecef1eaeaf501'],False,"['SqlStdOperatorTable.java', 'SqlOperatorTest.java']"
b623215e2f033a5303b3d4dc01be42ae9d942c8e,"Factor interval tests out of SqlParserTest and SqlValidatorTest and into new class IntervalTest

This change allows interval tests to be shared between the
parser and validator test without maintaining duplicate
test code.",['f03dbbebbec08a220404e13231af4600e98cc372'],False,"['SqlValidatorTest.java', 'SqlParserFixture.java', 'SqlParserTest.java', 'IntervalTest.java']"
7fb8578059b964981d333072895e51fcab3f5893,"[CALCITE-5450] Allow 'WEEK(weekday)' time frame as argument to functions such as EXTRACT, DATE_TRUNC

In OperandTypes, add strategies for matching DATE, TIME,
TIMESTAMP frames; DATE and TIMESTAMP frames include
ISOYEAR, WEEK(THURSDAY).

Enable tests for ISOYEAR, now that the upgrade to Avatica
1.23 has brought in the fix to [CALCITE-5369], ISOYEAR in
FLOOR and CEIL functions.",['b8ccac153a5be6db72fcbcbda983a83d40b7932b'],False,"['big-query.iq', 'Parser.jj', 'RexImpTable.java', 'TimeFrames.java', 'SqlLibraryOperators.java', 'IntervalOperandTypeChecker.java', 'OperandTypes.java', 'SqlValidatorTest.java', 'TimeFrameTest.java', 'reference.md', 'SqlParserTest.java', 'SqlOperatorTest.java']"
324bcb08334336b219d62957053fc0c1a5e7591d,"[CALCITE-5442] Tweak janino code generation in EnumerableInterpretable to allow debugging

Close apache/calcite#3045",['8291a0f04ba7d1670a7806ae9d777c0c8eb3995a'],False,['EnumerableInterpretable.java']
4fbcbf42443745988f2ba2555bf846372e17330d,"[CALCITE-5508] Add constructor functions for DATE, TIME, TIMESTAMP, DATETIME (enabled in BigQuery library)

New DATE functions such as DATE(int, int, int) needs to work
alongside the existing DATE(string) function; all are
validated usig the type operand checker, but after
validation DATE(string) is desugared to CAST(string AS DATE).

Following
  [CALCITE-5424] Customize handling of literals based on type system
which deferred validation of DATE, TIME, TIMESTAMP literals,
we now also allow DATETIME literal. (In BigQuery mode it is
mapped to a literal in Calcite's TIMESTAMP type.)

Also includes a fix for
  [CALCITE-5498] BigQuery TIMESTAMP() function short notation for
  timezone offsets isn’t supported in Java 8

In a few places I had to change test output. I removed ""UTC""
from test output and added TODO comments; these changes
should reverted when
  [CALCITE-5446] Support TIMESTAMP WITH LOCAL TIME ZONE type in JDBC driver
is fixed. And I manually added the offset to some TIMESTAMP
WITH LOCAL TIME ZONE LITERALS (which were written as TIMESTAMP
because big-query.iq uses BigQuery's type aliasing); these
changes can be reverted when
  [CALCITE-5496] Support time zones when parsing TIMESTAMP WITH LOCAL TIME ZONE
is fixed.

Close apache/calcite#3023",['3eaf13bdcdcd167bb8a05484e1e1af7a94bf194e'],False,"['config.fmpp', 'parserImpls.ftl', 'BabelQuidemTest.java', 'big-query.iq', 'default_config.fmpp', 'Parser.jj', 'RexImpTable.java', 'SqlFunctions.java', 'SqlLiteral.java', 'SqlDatetimePlusOperator.java', 'SqlLibraryOperators.java', 'SqlTimestampAddFunction.java', 'OperandTypes.java', 'ReturnTypes.java', 'SqlTypeName.java', 'SqlNodeToRexConverterImpl.java', 'StandardConvertletTable.java', 'InnodbEnumerator.java', 'reference.md', 'ConnectionFactories.java', 'SqlOperatorTest.java']"
7e8bc2dba49297c0fbe8f8f4cbcdb0a616871caf,"[CALCITE-3870] Change the default value of SqlToRelConverter.Config.expand from true to false

This is a breaking change. Clients should either call
Config.withExpand(true), to keep the old behavior, or ensure
that SubQueryRemoveRule is enabled during the planning phase.

We believe that the new behavior - expansion during the
planning phase rather than during sql-to-rel phase - is
superior because it handles ANY and ALL sub-queries and
complex correlated sub-queries.

Close apache/calcite#3065",['2d2839458d20b083762b5ffffef1d0b9dba4ef73'],False,"['Prepare.java', 'SqlToRelConverter.java', 'RelToSqlConverterTest.java', 'SortRemoveRuleTest.java', 'CoreQuidemTest.java', 'InterpreterTest.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'SqlHintsConverterTest.java', 'SqlToRelConverterTest.java', 'TopDownOptTest.java', 'misc.iq', 'some.iq', 'sub-query.iq', 'history.md', 'RelOptFixture.java']"
2af15496511c151b3e166f0300af386f38b459ef,"[CALCITE-5268] Add QUALIFY clause

Various fix ups: use RelBuilder methods rather than custom
logic, deprecate previous SqlSelect constructor, add newlines
in test SQL, re-order tests, remove 'public' from test
methods, lint (Julian Hyde).

Close apache/calcite#2953

Co-authored-by: Brandon Chong <brandon.chong@dremio.com>
Co-authored-by: Julian Hyde <jhyde@apache.org>",['7e8bc2dba49297c0fbe8f8f4cbcdb0a616871caf'],False,"['Parser.jj', 'JdbcTable.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'CalciteResource.java', 'SqlJoin.java', 'SqlProcedureCallOperator.java', 'SqlSelect.java', 'SqlSelectOperator.java', 'MysqlSqlDialect.java', 'GroupByScope.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'SqlToRelConverter.java', 'CalciteResource.properties', 'SqlAdvisorTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'match.iq', 'pivot.iq', 'qualify.iq', 'ServerDdlExecutor.java', 'reference.md', 'SqlParserTest.java', 'MockDdlExecutor.java']"
75d9ac042a827333ec314212d185b9bbc84d10b5,"[CALCITE-5531] COALESCE function throws ClassCastException

This was a regression caused by [CALCITE-5424]; the problem was that
SqlUnknownLiteral did not override the `clone(SqlParserPos)` method.",['2af15496511c151b3e166f0300af386f38b459ef'],False,"['SqlUnknownLiteral.java', 'operator.iq']"
39e2b22d298237f1f38051d20108bcea6f6f9dc5,"[CALCITE-5522] Babel parser cannot handle some overloads of the DATE_TRUNC function

This is a regression caused by [CALCITE-5447]. Adding support
for `DATE_TRUNC(expr, timeUnitName)` caused the parser to no
longer support `DATE_TRUNC(expr, expr)` such as
`DATE_TRUNC('month', orders.order_date)`. The parser saw an
identifier and wrongly concluded that it must be the name of
a custom time frame.

The solution is for the parser to treat `timeUnitName` as
just an expression (that happens to be a `SqlIdentifier`).
The validator can decide that it is a custom time frame and
convert it to a `SqlIntervalQualifier`.

Add interface SqlOperandHandler to allow SqlBasicFunction
to customize how it handles particular arguments, without
needing a new subclass of SqlFunction. The SqlOperandHandler
interface is similar to other strategies (e.g.
SqlReturnTypeInference, SqlOperandTypeChecker) and we think
that it will be useful in solving other problems in future.

In future work, we should remove from the parser specific
treatment of functions, such as TIMESTAMP_TRUNC, that have
one time frame argument.",['75d9ac042a827333ec314212d185b9bbc84d10b5'],False,"['redshift.iq', 'Parser.jj', 'SqlBasicFunction.java', 'SqlOperator.java', 'SqlLibraryOperators.java', 'OperandHandlers.java', 'SqlOperandHandler.java', 'SqlValidatorTest.java', 'SqlOperatorTest.java']"
3dae2519f8943d287688ddff8256d22f90ebaf67,"[CALCITE-5537] Slow test case failures in LatticeSuggesterTest

This was caused by [CALCITE-3870]. The SqlToRelConverter.Config.expand
isn't set to true explicitly in LatticeSuggesterTest when the default
value of SqlToRelConverter.Config.expand change from true to false.

Close apache/calcite#3080",['39e2b22d298237f1f38051d20108bcea6f6f9dc5'],False,['LatticeSuggesterTest.java']
0f1a40deefe377f3d315d101ce058cc80cda7afa,"Add tests for [CALCITE-2980] Implement the FORMAT clause of the CAST operator

Tests are based on Apache Impala's
tests/query_test/test_cast_with_format.py (as of the most
recent change, 2020/09/28), manually converted to Quidem
format.",['a990ecc4aee797f6d5a58cebcd18de38ae7a66cc'],False,['cast-with-format.iq']
cb97d299d2a04485a84916cff3f7be5497028b31,"[CALCITE-5469] Add DATETIME_ADD, DATETIME_DIFF, DATE_ADD, DATE_DIFF functions (enabled in BigQuery library)

Some of the *DIFF functions truncate both operands to the
start of the unit before subtracting. The rule seems to be:
 * standard TIMESTAMPDIFF does not truncate before subtracting;
 * BigQuery TIMESTAMP_DIFF, DATETIME_DIFF and DATE_DIFF
   functions truncate before subtracting when applied to date
   intervals (includes, for example, DAY, SQL_TSI_DAY, WEEK,
   ISOWEEK, WEEK(THURSDAY), MONTH, YEAR, CENTURY).

Change FLOOR, CEIL, DATETIME_TRUNC to no-op when the unit
is MICROSECOND or NANOSECOND. Previously they threw a
divide-by-zero exception.

Move the definitions of date, time, week intervals
from OperandTypes to become methods on SqlIntervalQualifier.
The methods now work correctly for ISOWEEK, WEEK(weekday),
SQL_TSI_* time frames.

Co-authored-by: Tanner Clary <tannerclary@google.com>
Co-authored-by: Julian Hyde <jhyde@apache.org>

Close apache/calcite#3079",['65a5efc0d681d989baa890184c435c6c8340718c'],False,"['config.fmpp', 'big-query.iq', 'default_config.fmpp', 'Parser.jj', 'RexImpTable.java', 'SqlIntervalQualifier.java', 'SqlKind.java', 'SqlLibraryOperators.java', 'OperandTypes.java', 'StandardConvertletTable.java', 'reference.md', 'SqlOperatorTest.java']"
2dba40e7a0a5651eac5a30d9e0a72f178bd9bff2,"[CALCITE-5546] Code style: Break long assignment expressions after '='

Specifically, we disallow lines that contain ' = ' and end
in '(' and ',', and break up the line by moving the
right-hand side of the assignment to the next line. For
example,

  int x = foo(
      bar());
  int y = baz(1,
      buzz());

becomes

  int x =
      foo(bar());
  int y =
      baz(1, buzz());

The rule looks for '(' or ',' at the end of lines that
contain '=' and do not contain '/' or '*' (which would
suggest a comment), '""' (which would suggest a string
literal), or '@' (which would suggest use in annotation
parameters).

Also remove spaces before '),' ');', ')),', etc.",['4f1452ecfba123ab7127ed25bb84ebd01b0e2bfb'],False,"['build.gradle.kts', 'CassandraEnumerator.java', 'CassandraSchema.java', 'CassandraSchemaFactory.java', 'CassandraTable.java', 'CassandraAdapterDataTypesTest.java', 'ColumnLoader.java', 'EnumUtils.java', 'EnumerableAggregate.java', 'EnumerableAggregateBase.java', 'EnumerableBatchNestedLoopJoin.java', 'EnumerableBindable.java', 'EnumerableCalc.java', 'EnumerableConvention.java', 'EnumerableCorrelate.java', 'EnumerableHashJoin.java', 'EnumerableInterpretable.java', 'EnumerableInterpreter.java', 'EnumerableLimit.java', 'EnumerableLimitRule.java', 'EnumerableLimitSort.java', 'EnumerableLimitSortRule.java', 'EnumerableMatch.java', 'EnumerableMergeJoin.java', 'EnumerableMergeJoinRule.java', 'EnumerableMergeUnion.java', 'EnumerableMergeUnionRule.java', 'EnumerableRelImplementor.java', 'EnumerableRepeatUnion.java', 'EnumerableRules.java', 'EnumerableSortedAggregate.java', 'EnumerableSortedAggregateRule.java', 'EnumerableTableFunctionScan.java', 'EnumerableTableModify.java', 'EnumerableTableScan.java', 'EnumerableTableSpool.java', 'EnumerableTraitsUtils.java', 'EnumerableUncollectRule.java', 'EnumerableUnionRule.java', 'EnumerableValuesRule.java', 'EnumerableWindow.java', 'JavaRowFormat.java', 'PhysTypeImpl.java', 'RexImpTable.java', 'RexToLixTranslator.java', 'StrictAggImplementor.java', 'ReflectiveSchema.java', 'JdbcCatalogSchema.java', 'JdbcRules.java', 'JdbcSchema.java', 'JdbcToEnumerableConverter.java', 'CalciteSystemProperty.java', 'AggregateNode.java', 'Interpreter.java', 'JaninoRexCompiler.java', 'JoinNode.java', 'ProjectNode.java', 'TableScanNode.java', 'CachingCalciteSchema.java', 'CalciteMetaImpl.java', 'JavaTypeFactoryImpl.java', 'SimpleCalciteSchema.java', 'CachingLatticeStatisticProvider.java', 'Lattice.java', 'LatticeSuggester.java', 'MaterializationService.java', 'MutableNode.java', 'ModelHandler.java', 'ConventionTraitDef.java', 'RelOptMaterialization.java', 'RelOptMaterializations.java', 'RelOptRules.java', 'RelOptUtil.java', 'RelTraitSet.java', 'SubstitutionVisitor.java', 'Dumpers.java', 'RelSet.java', 'TopDownRuleDriver.java', 'VolcanoPlanner.java', 'VolcanoRelMetadataProvider.java', 'VolcanoRuleCall.java', 'CalciteCatalogReader.java', 'CalciteMaterializer.java', 'CalcitePrepareImpl.java', 'PlannerImpl.java', 'Prepare.java', 'ProfilerImpl.java', 'SimpleProfiler.java', 'RelCollations.java', 'RelNodes.java', 'Collect.java', 'Match.java', 'Project.java', 'RelJson.java', 'RelJsonReader.java', 'HintStrategyTable.java', 'LogicalWindow.java', 'BuiltInMetadata.java', 'CachingRelMetadataProvider.java', 'ProxyingMetadataHandlerProvider.java', 'RelMdAllPredicates.java', 'RelMdColumnUniqueness.java', 'RelMdDistribution.java', 'RelMdExpressionLineage.java', 'RelMdPercentageOriginalRows.java', 'RelMdPredicates.java', 'RelMdTableReferences.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataQuery.java', 'MutableRels.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateFilterTransposeRule.java', 'AggregateJoinJoinRemoveRule.java', 'AggregateJoinRemoveRule.java', 'AggregateJoinTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'DateRangeRules.java', 'ExchangeRemoveConstantKeysRule.java', 'FilterMultiJoinMergeRule.java', 'FilterTableScanRule.java', 'JoinProjectTransposeRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToMultiJoinRule.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MatchRule.java', 'MaterializedViewFilterScanRule.java', 'ProjectCorrelateTransposeRule.java', 'ProjectJoinJoinRemoveRule.java', 'ProjectJoinRemoveRule.java', 'ProjectRemoveRule.java', 'ProjectTableScanRule.java', 'ProjectToWindowRule.java', 'ProjectWindowTransposeRule.java', 'ReduceDecimalsRule.java', 'ReduceExpressionsRule.java', 'SemiJoinRule.java', 'SortJoinCopyRule.java', 'SortJoinTransposeRule.java', 'SortUnionTransposeRule.java', 'SpatialRules.java', 'SubQueryRemoveRule.java', 'ValuesReduceRule.java', 'MaterializedViewAggregateRule.java', 'MaterializedViewJoinRule.java', 'MaterializedViewRule.java', 'StreamRules.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeHolder.java', 'RelDataTypeSystem.java', 'RelDataTypeSystemImpl.java', 'RexBuilder.java', 'RexExecutorImpl.java', 'RexLiteral.java', 'RexOver.java', 'RexProgram.java', 'RexProgramBuilder.java', 'RexSimplify.java', 'RexUtil.java', 'HttpUtils.java', 'JsonFunctions.java', 'Like.java', 'Matcher.java', 'ResultSetEnumerable.java', 'SpatialTypeFunctions.java', 'SqlFunctions.java', 'XmlFunctions.java', 'Schemas.java', 'AggregateFunctionImpl.java', 'MaterializedViewTable.java', 'ModifiableViewTable.java', 'TableFunctionImpl.java', 'ViewTable.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlFunction.java', 'SqlJdbcFunctionCall.java', 'SqlKind.java', 'SqlLateralOperator.java', 'SqlLiteral.java', 'SqlOperator.java', 'SqlSpatialTypeOperatorTable.java', 'SqlSplittableAggFunction.java', 'SqlAdvisor.java', 'SqlAdvisorGetHintsFunction.java', 'SqlAdvisorGetHintsFunction2.java', 'BigQuerySqlDialect.java', 'FireboltSqlDialect.java', 'HiveSqlDialect.java', 'HsqldbSqlDialect.java', 'JethroDataSqlDialect.java', 'MysqlSqlDialect.java', 'OracleSqlDialect.java', 'PostgresqlSqlDialect.java', 'SparkSqlDialect.java', 'SqlBetweenOperator.java', 'SqlCaseOperator.java', 'SqlDotOperator.java', 'SqlFloorFunction.java', 'SqlItemOperator.java', 'SqlJsonObjectAggAggFunction.java', 'SqlJsonObjectFunction.java', 'SqlJsonValueFunction.java', 'SqlLibrary.java', 'SqlLibraryOperatorTableFactory.java', 'SqlRowOperator.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'ReturnTypes.java', 'SetopOperandTypeChecker.java', 'SqlTypeUtil.java', 'AggregatingSelectScope.java', 'DelegatingScope.java', 'EmptyScope.java', 'SchemaNamespace.java', 'SelectNamespace.java', 'SelectScope.java', 'SetopNamespace.java', 'SqlMoniker.java', 'SqlNameMatchers.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'AbstractTypeCoercion.java', 'TypeCoercionImpl.java', 'DeduplicateCorrelateVariables.java', 'ReflectiveConvertletTable.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'Hoist.java', 'Programs.java', 'RelBuilder.java', 'BitSets.java', 'Bug.java', 'ChunkList.java', 'DateTimeStringUtils.java', 'DelegatingInvocationHandler.java', 'ImmutableNullableSet.java', 'JsonBuilder.java', 'ReflectUtil.java', 'RelToSqlConverterUtil.java', 'SaffronProperties.java', 'SerializableCharset.java', 'Sources.java', 'Util.java', 'XmlOutput.java', 'Graphs.java', 'TopologicalOrderIterator.java', 'JavaCompilerArgs.java', 'PhysTypeTest.java', 'TypeFinderTest.java', 'CalciteRemoteDriverTest.java', 'JavaTypeFactoryTest.java', 'NormalizationTrimFieldTest.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'ComboRuleTest.java', 'RelSetTest.java', 'TraitPropagationTest.java', 'VolcanoPlannerTest.java', 'ToLogicalConverterTest.java', 'MetadataHandlerTest.java', 'RelMetadataHandlerGeneratorUtilTest.java', 'RelToSqlConverterTest.java', 'DateRangeRulesTest.java', 'EnumerableLimitRuleTest.java', 'SortRemoveRuleTest.java', 'RexBuilderTest.java', 'RexExecutorTest.java', 'RexProgramBuilderBase.java', 'RexProgramTest.java', 'RexSqlStandardConvertletTableTest.java', 'EnumerablesTest.java', 'SqlSetOptionOperatorTest.java', 'SqlAdvisorTest.java', 'RelDataTypeSystemTest.java', 'SqlTypeFactoryTest.java', 'SqlTypeFixture.java', 'SqlValidatorUtilTest.java', 'HepPlannerTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MaterializedViewSubstitutionVisitorTest.java', 'MaterializedViewTester.java', 'ModelTest.java', 'MutableRelTest.java', 'ReflectiveSchemaTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RexImplicationCheckerTest.java', 'RexTransformerTest.java', 'RuleMatchVisualizerTest.java', 'ScannableTableTest.java', 'SqlHintsConverterTest.java', 'SqlOperatorBindingTest.java', 'SqlToRelConverterExtendedTest.java', 'SqlValidatorTest.java', 'TypeCoercionTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'PermutationTestCase.java', 'UtilTest.java', 'BinaryOperatorConversion.java', 'CeilOperatorConversion.java', 'DirectOperatorConversion.java', 'DruidExpressions.java', 'DruidJsonFilter.java', 'DruidQuery.java', 'DruidRules.java', 'DruidSchema.java', 'DruidSqlCastConverter.java', 'DruidTableFactory.java', 'FloorOperatorConversion.java', 'NaryOperatorConverter.java', 'SubstringOperatorConversion.java', 'TimeExtractionFunction.java', 'UnaryPrefixOperatorConversion.java', 'UnarySuffixOperatorConversion.java', 'DruidQueryFilterTest.java', 'DruidAdapter2IT.java', 'DruidDateRangeRulesTest.java', 'ElasticsearchAggregate.java', 'ElasticsearchJson.java', 'ElasticsearchMapping.java', 'ElasticsearchSchema.java', 'ElasticsearchSchemaFactory.java', 'ElasticsearchSearchResult.java', 'ElasticsearchTable.java', 'ElasticsearchToEnumerableConverter.java', 'ElasticsearchTransport.java', 'PredicateAnalyzer.java', 'Scrolling.java', 'AggregationTest.java', 'BooleanLogicTest.java', 'ElasticSearchAdapterTest.java', 'EmbeddedElasticsearchPolicy.java', 'MatchTest.java', 'Projection2Test.java', 'ProjectionTest.java', 'CsvTable.java', 'CsvTest.java', 'CsvEnumerator.java', 'CsvStreamReader.java', 'CsvTable.java', 'FileAdapterTest.java', 'GeodeAggregate.java', 'GeodeRules.java', 'GeodeTable.java', 'GeodeToEnumerableConverter.java', 'GeodeSimpleSchema.java', 'RelationalJdbcExample.java', 'InnodbEnumerator.java', 'InnodbFilterTranslator.java', 'InnodbTable.java', 'InnodbToEnumerableConverter.java', 'InnodbAdapterDataTypesTest.java', 'InnodbAdapterTest.java', 'KafkaTableFactory.java', 'EnumerableDefaults.java', 'LookupImpl.java', 'MergeUnionEnumerator.java', 'Nullness.java', 'BlockBuilder.java', 'BlockStatement.java', 'ClassDeclarationFinder.java', 'Expressions.java', 'FunctionExpression.java', 'IndexExpression.java', 'MethodCallExpression.java', 'NewExpression.java', 'OptimizeShuttle.java', 'BlockBuilderTest.java', 'DeterministicTest.java', 'ExpressionTest.java', 'InlinerTest.java', 'JoinPreserveOrderTest.java', 'LimitSortTest.java', 'Linq4jTest.java', 'LookupImplTest.java', 'PigTableScan.java', 'PigConverter.java', 'PigRelBuilder.java', 'PigRelExVisitor.java', 'PigRelOpInnerVisitor.java', 'PigRelOpVisitor.java', 'PigRelToSqlConverter.java', 'PigToSqlAggregateRule.java', 'PigScriptTest.java', 'GitCommitsTableFunction.java', 'ChinookAvaticaServer.java', 'OsAdapterTest.java', 'TpcdsTest.java', 'TpchTest.java', 'RedisEnumerator.java', 'RedisSchema.java', 'RedisTable.java', 'RedisAdapterCaseBase.java', 'SparkHandlerImpl.java', 'SparkRules.java', 'SplunkConnectionImpl.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'CalciteAssert.java', 'DiffRepository.java', 'RelMetadataFixture.java', 'RelOptFixture.java', 'RexImplicationCheckerFixtures.java', 'SqlOperatorTest.java', 'Fixture.java', 'MockCatalogReader.java', 'MockCatalogReaderDynamic.java', 'MockCatalogReaderExtended.java', 'MockCatalogReaderSimple.java', 'CodeGenerationBenchmark.java', 'MetadataBenchmark.java']"
4e195209629f1a0ebd1e6f547ea3f0e7587b309f,"[CALCITE-5545] Allow for overriding SqlValidator to enable custom SqlNode validation

Make methods in SqlValidatorFixture, RelOptFixture public to
enable testing.

In Driver, add createPrepare() and withPrepareFactory()
methods, and deprecate createPrepareFactory().

Change the type of the Driver.prepareFactory field from
Function0 (Guava) to Supplier (JDK). A few other places must
remain Function0 because of backwards compatibility.

Add tests for overriding createPrepareFactory, calling
withPrepareFactory, and overriding createPrepare.

Close apache/calcite#3084

Co-authored-by: Oliver Lee <oliverlee@google.com>
Co-authored-by: Julian Hyde <jhyde@apache.org>",['1e897714044ed755c7c3bae8b7b01292a8894e10'],False,"['CalciteConnectionImpl.java', 'CalciteStatement.java', 'Driver.java', 'CalcitePrepareImpl.java', 'CalciteSqlValidator.java', 'JdbcTest.java', 'RelOptFixture.java', 'SqlValidatorFixture.java']"
12b7193e4f005e72aee27290bf71f72badd5e7da,"[CALCITE-5571] Remove org.jetbrains.annotations from java source code

The project primarily uses checkerframework annotations (org
.checkerframework.checker.nullness.qual) for specifying nullability;
not org.jetbrains.annotations.

To keep things consistent and also avoid mixing up annotations from
different providers in the future, this commit removes the last
references to org.jetbrains.annotations and excludes the
org.jetbrains:annotations dependency from the build to avoid
accidentally using such annotations in the future.

Close apache/calcite#3102",['627e06718af60dc678f866c0dfe2b6c8ee1bf2b7'],False,"['build.gradle.kts', 'ScannableTableTest.java', 'UtilTest.java']"
ace7940731b76ac870f85a4052d9cd45767fd220,"[CALCITE-5574] Break `MockCatalogReaderSimple#init` into smaller methods

Close apache/calcite#3111",['e9fada6a1ec744ee91a00f966c97c7d3942754db'],False,['MockCatalogReaderSimple.java']
b9aaba14d56a7743eb5e22a0250f70d961532f3b,"Refactor: In tests, pass 'typeSystem' connection property value via a ThreadLocal

This is possible now that
  [CALCITE-5295] Read the values of plugins (such as connect string
  properties) from ThreadLocal fields
is fixed in Avatica 1.23; this replaces the previous test
implementation, used a custom subclass of RelDataTypeSystem that
dereferenced a ThreadLocal in its constructor.",['8d3b27796162aaa5562f91a25061b6c6120f8c08'],False,['SqlOperatorTest.java']
ba36004fb1e52b9bfb06623c7d869e6e01e25082,"[CALCITE-5557] Add SAFE_CAST function (enabled in BigQuery library)

SAFE_CAST is similar to CAST, except that it returns NULL
rather than throwing an error if conversion fails.

The Java code generation generates the same code as for CAST,
wraps it as a lambda, and converts the exception to Java null.

Add a wrapper around SqlOperatorFixture so that existing
tests for CAST can also test SAFE_CAST (Julian Hyde).

Close apache/calcite#3093

Co-authored-by: Oliver Lee <oliverlee@google.com>
Co-authored-by: Julian Hyde <jhyde@apache.org>",['d2ca97e79917a3ced509421509189e0358ba774e'],False,"['big-query.iq', 'Parser.jj', 'RexImpTable.java', 'RexToLixTranslator.java', 'AggregateProjectPullUpConstantsRule.java', 'ReduceExpressionsRule.java', 'UnionPullUpConstantsRule.java', 'ValuesReduceRule.java', 'RexBuilder.java', 'RexCallBinding.java', 'RexSimplify.java', 'RexUtil.java', 'SqlFunction.java', 'SqlKind.java', 'SqlSplittableAggFunction.java', 'SqlCastFunction.java', 'SqlLibraryOperators.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'RelOptUtilTest.java', 'RexProgramBuilderBase.java', 'RexProgramTest.java', 'SqlAdvisorTest.java', 'winagg.iq', 'PigRelBuilder.java', 'reference.md', 'SqlOperatorFixture.java', 'RexImplicationCheckerFixtures.java', 'SqlOperatorFixtures.java', 'SqlOperatorTest.java']"
96da5297db7695ade251356e8bc0833946624a01,"[CALCITE-5606] Add SqlLibrary.ALL

Functions that belong to ALL (denoted with the symbol `*` in
the SQL reference) will be included in all database-specific
libraries (`bigquery`, `calcite`, `oracle`, `mysql`, etc.)
but not in `standard` or `spatial`.

This gives us a convenient way to define functions that are
widely supported but are not in the SQL standard.

Change the library of `TANH`, `COSH`, `SINH` functions to
ALL.

Close apache/calcite#3128",['8a4f8d525b87c17f5aff5e86f1161b005f9d2997'],False,"['CalciteConnectionConfigImpl.java', 'SqlLibrary.java', 'SqlLibraryOperatorTableFactory.java', 'SqlLibraryOperators.java', 'DocumentationTest.java', 'UtilTest.java', 'reference.md', 'SqlOperatorFixture.java', 'SqlOperatorTest.java']"
b2917b33e8dda434d2866d8a327f8a48520afb48,"[CALCITE-111] Support CONVERT function, for changing character sets

This function is similar to the CONVERT as defined by the SQL
standard, and the same as the CONVERT function in MySQL.

It is different to MSSQL's CONVERT, which changes data types
(like CAST), added in [CALCITE-5548].

Close apache/calcite#2705",['e7375ae745ec18ce9df68b4945bb521ae49a053c'],False,"['Parser.jj', 'RexImpTable.java', 'CalciteResource.java', 'SqlFunctions.java', 'SqlKind.java', 'SqlConvertFunction.java', 'SqlStdOperatorTable.java', 'SqlValidatorImpl.java', 'StandardConvertletTable.java', 'BuiltInMethod.java', 'CalciteResource.properties', 'JdbcTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'functions.iq', 'reference.md', 'SqlParserTest.java', 'SqlOperatorTest.java']"
74524cf1df5112ec17aaa219d97121e9fa236169,"[CALCITE-5655] Wrong plan for multiple IN/SOME sub-queries with OR predicate

Below tests are not affacted by this bug, we added them to improve the test coverage:
RelOptRulesTest#testExpandProjectInWithTwoCorrelatedSubQueries
RelOptRulesTest#testExpandProjectInWithTwoSubQueries

Close apache/calcite#3159",['b2917b33e8dda434d2866d8a327f8a48520afb48'],False,"['SubQueryRemoveRule.java', 'SqlAdvisorTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'MockCatalogReaderSimple.java']"
28225187139551206ebddaecd2ab11c517c84c13,"Disable JIRA worklog notifications for GitHub PRs

Reduce noise and avoid receiving the same notification multiple times.

Currently we receive the notification from three places:
* jira@apache.org
* notifications@github.com
* commits@calcite.apache.org

After the changes the jira@apache.org goes away.

Full discussion here:
https://lists.apache.org/thread/k9lvps6x79sgcdgmrz5dcxkqmyc2b2gn

Close apache/calcite#3166",['1fe1ce88455f3bbae9ba9c032298695d9c6ffb2b'],False,['.asf.yaml']
cc3c5fed072dad2efc8d0961e66fea38ba8f3817,[CALCITE-5670] Assertion error in SemiJoinJoinTransposeRule when Semi-Join has keys from both tables of the bottom Join,['febd06b2cc7815895c4d6aafc3712a63fe1c335f'],False,"['SemiJoinJoinTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
a833bd626c5e781ccc27bd6fab1c636a3b944907,[CALCITE-5679] HepPlanner#buildFinalPlan: do not clear metadata cache if RelNode has not changed,['3326475c766267d521330006cc80730c4e456191'],False,['HepPlanner.java']
788a4404a8c3fe72983f865f2d5af51dce04aa72,"[CALCITE-5653] SELECT DISTINCT aggregate function with ORDER BY gives invalid validation error

For example, the query

  SELECT distinct sum(deptno + '1') FROM dept ORDER BY 1

throws

  Expression 'SUM(`DEPT`.`DEPTNO` + CAST('1' AS INTEGER))'
  is not in the select clause

The fix is for AggChecker to look in the expanded select list.

Close apache/calcite#3160",['9ea862478d88b6163e47c57521e222ea5e582e47'],False,"['AggChecker.java', 'SqlValidatorTest.java', 'agg.iq']"
5b73f3665a762006d41c3aac6a05437e2ccdded3,"In tests, don't allow multi-line strings as argument to CalciteAssert.returnsUnordered

`CalciteAssert` sorts the lines (for `returnsUnordered`, but
not for `returnsOrdered`) and joins them using '\n', so if
each 'line' is actually multiple lines the sort does not have
the desired effect.

The simplest solution is to require the 'lines' to be just
single lines, for both `returnsUnordered` and
`returnsOrdered`. If this breaks one of your tests, just
change the concatenated strings to a comma-separated list.",['74a2a18bcb87987e8cfc4e07df135ebae6f19b4c'],False,"['JdbcTest.java', 'ReflectiveSchemaTest.java', 'TableFunctionTest.java', 'EnumerableCalcTest.java', 'EnumerableJoinTest.java', 'EnumerableRepeatUnionTest.java', 'EnumerableStringComparisonTest.java', 'DruidAdapter2IT.java', 'DruidAdapterIT.java', 'SparkAdapterTest.java', 'CalciteAssert.java']"
f32289870be80e69dabc5b7e24bd6c777d4eb688,"[CALCITE-5705] Generalize RemoveEmptySingleRule to work with arbitrary relations and pruning configurations

1. Remove cast to `SingleRel` inside `RemoveEmptySingleRule#onMatch` to
allow the rule to transform arbitrary relations (such as `Correlate`)
to empty.

2. Change `RemoveEmptySingleRule` constructor to accept
`PruneEmptyRule.Config` instead of `RemoveEmptySingleRuleConfig` to
be able to instatiate the rule from any kind of pruning configuration
that aims to tranform a relation to empty.

3. Refactor `CorrelateLeftEmptyRuleConfig`, `ZeroMaxRowsRuleConfig` and
`SortFetchZeroRuleConfig` to use `RemoveEmptySingleRule` and remove
duplicate code.

Close apache/calcite#3205",['0d3cf2cbadd97410ba4c63d657a5309c5ac7dc9c'],False,['PruneEmptyRules.java']
b2f59d7b90deaca3575410437a6cc9c99bf2174d,[CALCITE-5697] RelBuilder.convert does not match nullability if top of stack is a Project,['7fc3e1b007fd9fd921c7929f27ac6cf3e75a15fd'],False,"['Project.java', 'RexUtil.java', 'RelDecorrelator.java', 'RelBuilderTest.java']"
ddb4200f8f52b02afb1b866abb0785218e2c5994,"Refactor: Add fields AggregateCall.rexList and RelBuilder.AggCall.preOperands

These changes are in preparation for [CALCITE-4334] LITERAL_AGG.

Also improve the fix for [CALCITE-5506].",['b2f59d7b90deaca3575410437a6cc9c99bf2174d'],False,"['RelOptUtil.java', 'SubstitutionVisitor.java', 'Aggregate.java', 'AggregateCall.java', 'Window.java', 'RelJsonReader.java', 'SqlImplementor.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateFilterTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'ProjectAggregateMergeRule.java', 'SqlOperatorBinding.java', 'SqlSplittableAggFunction.java', 'SqlBasicAggFunction.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'NormalizationTrimFieldTest.java', 'RelWriterTest.java', 'TraitPropagationTest.java', 'RelToSqlConverterTest.java', 'RelMetadataTest.java']"
de4631f62cc06b22199c1c14b687ea8a06ea06ec,"[CALCITE-4334] LITERAL_AGG, an internal aggregate function that returns a constant value

LITERAL_AGG is internal, so you cannot use it from SQL. A
call to LITERAL_AGG(true) is created implicitly when you
write

  SELECT deptno, SUM(sal), true
  FROM Emp
  GROUP BY deptno

Add RelBuilder.literalAgg.

RelBuilder.aggregate now adds an aggregate function to ensure
that there is at least one field. The aggregate function is
LITERAL_AGG; thus the pseudo-query

  SELECT /* no fields */
  FROM t
  GROUP BY ()

becomes the valid query

  SELECT TRUE AS dummy
  FROM t
  GROUP BY ().

Solves that problem that an Aggregate query that uses no
columns throws AssertionError in RelFieldTrimmer.trimFields.

Add an option RelBuilder.Config.preventEmptyFieldList to
turn off the behavior we just added.

Close apache/calcite#3209",['ddb4200f8f52b02afb1b866abb0785218e2c5994'],False,"['AggResultContext.java', 'PhysType.java', 'PhysTypeImpl.java', 'RexImpTable.java', 'AggResultContextImpl.java', 'RelMdPredicates.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AggregateRemoveRule.java', 'SubQueryRemoveRule.java', 'SqlKind.java', 'SqlSingletonAggFunction.java', 'SqlSplittableAggFunction.java', 'SqlStaticAggFunction.java', 'SqlUtil.java', 'SqlAnyValueAggFunction.java', 'SqlBasicAggFunction.java', 'SqlBitOpAggFunction.java', 'SqlCountAggFunction.java', 'SqlGroupingFunction.java', 'SqlInternalOperators.java', 'SqlLiteralAggFunction.java', 'SqlMinMaxAggFunction.java', 'SqlSingleValueAggFunction.java', 'SqlSumAggFunction.java', 'SqlSumEmptyIsZeroAggFunction.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'MappingType.java', 'RelToSqlConverterTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'agg.iq', 'blank.iq', 'sub-query.iq', 'algebra.md']"
0b819dfe83f19f9647e9b05da98332b53c189c7d,"[CALCITE-5726] Canonize use of Hamcrest matchers in test code

Use matchers for Object.toString(), Collection.size(), Map.size():
* assertThat(map.size(), is(n)) → assertThat(map, aMapWithSize(n));
* assertThat(list.size(), is(n)) → assertThat(map, IsCollectionWithSize.hasSize(n));
* assertThat(o.toString(), is(s)) → assertThat(o, hasToString(s));
* assertThat(o.toString(), equalTo(s)) → assertThat(o, hasToString(s));

If there are multiple equivalent methods in Hamcrest, use the
ones in CoreMatchers or Matchers:
* CoreMatchers.is rather than Is.is
* Matchers.hasToString rather than HasToString.hasToString
* Matchers.hasSize rather than IsCollectionWithSize.hasSize
* Matchers.aMapWithSize rather than IsMapWithSize.aMapWithSize

Require static import of methods in CoreMatchers and Matchers.
Autostyle now converts

  import org.hamcrest.CoreMatchers;
  import org.hamcrest.Matchers;

to

  import static org.hamcrest.CoreMatchers.anything;
  import static org.hamcrest.Matchers.allOf;

and hopefully the user will take the hint.",['379f41d3be465992328d5659ea62b8355e0399d1'],False,"['BabelParserTest.java', 'BabelTest.java', 'build.gradle.kts', 'CalciteRemoteDriverTest.java', 'LatticeSuggesterTest.java', 'RelOptUtilTest.java', 'RelWriterTest.java', 'ProfilerTest.java', 'MetadataHandlerTest.java', 'RelMdUtilTest.java', 'RelToSqlConverterTest.java', 'DateRangeRulesTest.java', 'EnumerableLimitRuleTest.java', 'RexBuilderTest.java', 'RexExecutorTest.java', 'RexNormalizeTest.java', 'RexProgramTest.java', 'RexProgramTestBase.java', 'AutomatonTest.java', 'DeterministicAutomatonTest.java', 'EnumerablesTest.java', 'SqlNodeTest.java', 'SqlSetOptionOperatorTest.java', 'SqlPrettyWriterTest.java', 'SqlTypeFactoryTest.java', 'LexCaseSensitiveTest.java', 'LexEscapeTest.java', 'SqlValidatorUtilTest.java', 'CalciteResourceTest.java', 'CollectionTypeTest.java', 'InduceGroupingTypeTest.java', 'InterpreterTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcTest.java', 'LatticeTest.java', 'MaterializedViewSubstitutionVisitorTest.java', 'ReflectiveSchemaTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RexImplicationCheckerTest.java', 'RexTransformerTest.java', 'ScannableTableTest.java', 'SqlFunctionsTest.java', 'SqlHintsConverterTest.java', 'SqlOperatorBindingTest.java', 'SqlStatisticProviderTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'TableFunctionTest.java', 'TimeFrameTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'BitSetsTest.java', 'ChunkListTest.java', 'FormatModelTest.java', 'ImmutableBitSetTest.java', 'PartiallyOrderedSetTest.java', 'PermutationTestCase.java', 'RangeSetTest.java', 'SourceTest.java', 'UtilTest.java', 'FormatElementEnumTest.java', 'DirectedGraphTest.java', 'MappingTest.java', 'DruidQueryFilterTest.java', 'DruidAdapter2IT.java', 'DruidAdapterIT.java', 'DruidChecker.java', 'DruidDateRangeRulesTest.java', 'ElasticsearchJsonTest.java', 'ExampleFunctionTest.java', 'MemoryEnumerableTest.java', 'ExpressionTest.java', 'InlinerTest.java', 'Linq4jTest.java', 'PrimitiveTest.java', 'PigRelExTest.java', 'OsAdapterTest.java', 'TpcdsLatticeSuggesterTest.java', 'ServerTest.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'SqlTests.java', 'Matchers.java', 'RelMetadataFixture.java', 'SqlOperatorFixtureImpl.java', 'SqlOperatorTest.java', 'SqlToRelFixture.java', 'SqlValidatorFixture.java', 'FixtureTest.java', 'TestUtilTest.java']"
6ffcb860528e9025398b7b756fd4819fbe781e31,"[CALCITE-5722] Sarg.isComplementedPoints fails with anti-points which are equal under `compareTo` but not `equals`

BigDecimal is a type that implements Comparable but whose
natural order is not consistent with equals. For example, if
x = BigDecimal(""1.0"") and and y = BigDecimal(""1""),
x.equals(y) returns false and x.compareTo(y) returns 0.
Guava RangeSet is OK with such types, and Sarg should be also.

Before this fix, Sarg could not deduce that
  z < 1 or 1.0 < z
is equivalent to
  z <> 1

Close apache/calcite#3224",['671f49d7d0ba09559a7d4977ebf250259a6fe526'],False,"['RangeSets.java', 'RexProgramTest.java', 'RangeSetTest.java', 'Matchers.java']"
abf05e39ee822bae2e5da6526aeb40bbbbe0ea2e,"Code style: Lint

Add an autostyle rule, and fix its one violation.

Fix lint violations detected by [CALCITE-5765] LintTest (to follow).",['ac4920bb0ab52a25c3b2cf008f361ff0fbc7f82a'],False,"['build.gradle.kts', 'SubstitutionVisitor.java', 'IterativeRuleDriver.java', 'RexVisitorImpl.java', 'SqlDescriptorOperator.java', 'Glossary.java', 'RexProgramBuilderBase.java', 'JdbcTest.java', 'SqlValidatorTest.java', 'DirectedGraphTest.java', 'Scrolling.java', 'EnumerableDefaults.java', 'QueryableDefaults.java', 'Blocks.java', 'Expression.java', 'Statement.java']"
c0e6ba264b3e522010a982ed35de9f3dd03be6af,"[CALCITE-5765] Add LintTest, to apply custom lint rules to source code

LintTest.testLint applies rules to Calcite's java source files,
most of them concerned with the formatting of javadoc comments,
and fails if any of the rules give warnings.

LintTest.testLog verifies recent git commit messages. The
goal is to prevent malformed messages that begin with a
space, end in a '.', or contain the word 'fix'. (Many commit
messages that contain the word 'fix' are describing the code
change; they should instead describe the problem seen by the
user, which is what will be most useful to those reading the
release notes. If the message describes the problem, the
word 'fix' is implicit.)

Also create method `TestUtil.getBase(File)`, based on some
logic previously in `DocumentationTest`.

Close apache/calcite#3250",['abf05e39ee822bae2e5da6526aeb40bbbbe0ea2e'],False,"['DocumentationTest.java', 'LintTest.java', 'TestUnsafe.java', 'TestUtil.java']"
0f0288f4e93476823329a5ec59b471fd186bd16d,"[CALCITE-5767] JDBC adapter for MSSQL adds GROUPING to ORDER BY clause twice when emulating NULLS LAST

This is a problem because MSSQL disallows duplicate sort keys. The MSSQL
dialect should not give GROUPING special treatment when emulating NULL
direction, and this change solves the problem by removing that special
treatment.

Close apache/calcite#3251",['cf1454dddae7264d381018f10eaef01328e73703'],False,"['MssqlSqlDialect.java', 'RelToSqlConverterTest.java']"
3dfefd1a95b831cc57434264f224e789bba35df9,"[CALCITE-5707] Add ARRAY_CONTAINS function (enabled in Spark library)

Flink has a similar function, but has slightly different
behavior from Spark.
  array_contains(array[1, null], cast(null as integer))
returns TRUE in Flink, UNKNOWN in Spark. This change
implements the Spark behavior.

Replace SqlFunctions.arrayContains with List.contains (Julian Hyde).

Tweak Util.distinctList, and add note that SqlFunctions.distinct could
use a similar algorithm (Julian Hyde).

Close apache/calcite#3207",['0f0288f4e93476823329a5ec59b471fd186bd16d'],False,"['RexImpTable.java', 'SqlFunctions.java', 'SqlKind.java', 'SqlLibraryOperators.java', 'ArrayElementOperandTypeChecker.java', 'OperandTypes.java', 'ReturnTypes.java', 'SqlTypeTransforms.java', 'BuiltInMethod.java', 'Util.java', 'UtilTest.java', 'reference.md', 'SqlOperatorTest.java']"
649f6c41da5047c8964a14ce767542f3c587c258,"Bump nokogiri from 1.13.4 to 1.14.3 in /site

Bumps [nokogiri](https://github.com/sparklemotion/nokogiri) from 1.13.4 to 1.14.3.
- [Release notes](https://github.com/sparklemotion/nokogiri/releases)
- [Changelog](https://github.com/sparklemotion/nokogiri/blob/main/CHANGELOG.md)
- [Commits](https://github.com/sparklemotion/nokogiri/compare/v1.13.4...v1.14.3)

---
updated-dependencies:
- dependency-name: nokogiri
  dependency-type: direct:production
...

Signed-off-by: dependabot[bot] <support@github.com>",['0f682017238b7965555f854605d9f4d5d4c0963f'],False,"['Gemfile', 'Gemfile.lock']"
e4ad5e8b79964ccccc3f407bccf68fad82ac8346,"Refactor: Make SqlValidatorScope mandatory

Remove '@Nullable' of the SqlValidatorScope argument to the
following methods:
 * SqlCall.getMonotonicity
 * SqlCallBinding constructor
 * SqlOperator.validateOperands
 * SqlValidatorScope.isWithin
 * SelectScope constructor
 * SqlValidator.validateQuery
 * Resolved.found
 * SqlValidatorUtil.getEnclosingScope
 * SqlToRelConverter.createBlackboard

Deprecate Blackboard.scope() method because Blackboard.scope
field is now mandatory.

Register scopes of the inputs to a join; previously we would
use a default on read.

Add getEmptyScope() to interface SqlValidator (previously in
SqlValidatorImpl).",['10f1744709cc7d897651314c03b69f8e4b959bce'],False,"['SqlAsOperator.java', 'SqlCall.java', 'SqlCallBinding.java', 'SqlDataTypeSpec.java', 'SqlDynamicParam.java', 'SqlIdentifier.java', 'SqlLiteral.java', 'SqlNode.java', 'SqlOperator.java', 'SqlWithinGroupOperator.java', 'SqlStdOperatorTable.java', 'OperandTypes.java', 'DelegatingScope.java', 'EmptyScope.java', 'JoinScope.java', 'ListScope.java', 'SelectScope.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'TableScope.java', 'WithScope.java', 'TypeCoercionFactory.java', 'SqlToRelConverter.java']"
181dd402aefc801e2b704e5640b28fe7d7cd803f,"[CALCITE-5790] Validator should disallow a query with * but no FROM clause

The query ""SELECT *"" should throw the error
""SELECT * requires a FROM clause"".",['3f2ae2f4dd2d6b1fab7c3a91e67a6a6d28523298'],False,"['CalciteResource.java', 'SqlValidatorImpl.java', 'CalciteResource.properties', 'SqlValidatorTest.java']"
54192eb678d8db95c1f1b41c1e172be064bae0ba,"[CALCITE-5788] Order of metadata handler methods is inconsistent in different java versions

Solve the problem by sorting methods, and handler methods,
by method name. We require that method names are unique, and
that methods and handlers have the same name.

Besides method name, there are other checks to ensure that
handler methods have the right form (e.g. they have two
extra arguments, which are RelMetadataQuery and a subclass
of RelNode), which used to be asserts and are now calls to
Preconditions.checkArgument.",['181dd402aefc801e2b704e5640b28fe7d7cd803f'],False,"['MetadataDef.java', 'MetadataHandler.java', 'RelMetadataHandlerGeneratorUtil.java', 'MetadataHandlerTest.java']"
f48393ce24ba931ac3e3f3c9e942a60189eda81d,"[CALCITE-5785] Gradle remote build caching is broken for :babel:fmppMain and :server:fmppMain tasks

The :babel:fmppMain and :server:fmppMain tasks currently do
not work with remote build caching.

One of the inputs is a directory and currently it's
configured to look at the absolute path instead of the
relative path. This causes different input hashes to be
computed on different machines, hence the tasks do not work
correctly with remote build caching.

This commit addresses the issue by making the hashes for
input directories look at the relative path.",['54192eb678d8db95c1f1b41c1e172be064bae0ba'],False,"['build.gradle.kts', 'build.gradle.kts']"
8b7284ba39c3f2577b3cfa381ebc945157ce18db,"[CALCITE-5477] Build with Guava 19.0

We aim to support Guava down to 16.0.1 (CALCITE-5428), but are foiled
by the fact that ""Preconditions.checkArgument"" gained new overloads in
Guava 20.0. When building against Guava 20.0+, the Java compiler generates
calls to methods that don't exist in those earlier versions.

To solve this, this patch builds Calcite against Guava 19, the latest
version that does not include these overloads.

This patch also removes the ""errorprone"" GitHub Action, leaving only
""errorprone-guava31"". This is for two reasons. First, running errorprone
on Guava 19 is problematic, since it flags APIs that are @Beta in 19 but
have stabilized by 31. Second, it doesn't seem necessary to run with two
different Guava versions. Prior to this patch, both the ""errorprone""
and ""errorprone-guava31"" actions ran on Guava 31 anyway, because the
default Guava build version was 31.1-jre.

It is expected that by the next release after August 2023, this patch
will be reverted (CALCITE-5763). At that point the minimum supported
Guava version would be Guava 20.",['f48393ce24ba931ac3e3f3c9e942a60189eda81d'],False,"['main.yml', 'gradle.properties']"
5e88fe0d1e24500707d928b7143282178ee8b35b,"Refactor: Use PairList

This change changes existing code to use PairList.

(PairList was added in [CALCITE-5706]. Compared to an
ArrayList whose elements are Pair objects, a PairList uses
less memory (a single backing array, and no Pair objects),
has a more concise API to add elements and convert to a Map.)

Make Util.quotientList return a list that implements
interface RandomAccess. (This should make some algorithms
run faster.)

Tune SqlValidatorUtil.uniquify by quickly checking whether
the names are already unique and not null.

Add class MapEntry, a simple implementation of
java.util.Map.Entry. Unlike Pair it is immutable and has few
dependencies. Unlike IdPair its hashCode is consistent with
Map.Entry.

Make Pair.equals to be consistent with Map.Entry, such as
when the argument is a Map.Entry but not a Pair.",['08b94e33ec96e1c100faa466f1a9e701626c7e91'],False,"['EnumUtils.java', 'RelOptUtil.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'AbstractRelNode.java', 'AggregateExpandDistinctAggregatesRule.java', 'RelDataTypeFactoryImpl.java', 'RexInputRef.java', 'MapEntry.java', 'PairList.java', 'SqlRowOperator.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'AbstractTypeCoercion.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'BuiltInMethod.java', 'Pair.java', 'Util.java', 'PairListTest.java', 'UtilTest.java', 'InnodbToEnumerableConverter.java', 'Nullness.java', 'MongoRel.java', 'MongoToEnumerableConverter.java', 'SplunkPushDownRule.java', 'AbstractSqlTester.java', 'DiffRepository.java', 'CompoundNameColumnResolver.java', 'MockCatalogReader.java', 'Smalls.java']"
d4276bcc19523285ed9385a52741d15e16315e78,"[CALCITE-5786] QuidemTest and DiffRepository are not compatible with Gradle incremental builds since they write to build/resources

This commit solves the problem by writing to quidem and diffrepo directories rather than resources.

QuidemTest for
  src/test/resources/foo.iq
now writes to
  build/quidem/test/foo.iq
rather than
  build/resources/test/surefire/foo.iq

DiffRepository for
  src/test/resources/com/example/FooTest.xml
now writes to
  build/diffrepo/test/com/example/FooTest_actual.xml
rather than
  build/resources/com/example/Foo_actual.xml

Close apache/calcite#3280",['50f0e185896a4afb7c77bb6fb4efe41c1531dcfe'],False,"['RelOptRulesTest.java', 'DiffRepository.java', 'QuidemTest.java']"
7bb4f4191ae9f91619d645bc51d6433eebe4d530,"[CALCITE-5793] JDBC adapter should use NULLS FIRST, NULLS LAST syntax for BigQuery

BigQuery has supported NULLS FIRST, NULLS LAST since 2020.
It makes sense to use it, because the previous emulation,
e.g. 'ORDER BY x IS NULL, x', would cause problems such as
[CALCITE-5775] if x was a complex expression.

Close apache/calcite#3276",['d4276bcc19523285ed9385a52741d15e16315e78'],False,"['BigQuerySqlDialect.java', 'RelToSqlConverterTest.java']"
aff0fc981b4bd76680aa5d92c20ef98b84cd5304,[MINOR] Assert can be replaced in `AbstractMaterializedViewRule#perform()`,['4e6a33e375d63ca6e6c3919fcda78c18ab983664'],False,['MaterializedViewRule.java']
1dd1b4ac85bd16ecb5acb77a4649c869e3267e35,"[CALCITE-5810] Prevent overflow in substring length computation

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>",['313b9580591f3816e498feb26a8953602c6029c0'],False,"['SqlFunctions.java', 'SqlOperatorTest.java']"
b94917883cc55ba5ed034e2f9a8b55e961036b63,"[CALCITE-5727] RelOptFixture#checkUnchanged should assert planAfter is not present

Close apache/calcite#3227",['1dd1b4ac85bd16ecb5acb77a4649c869e3267e35'],False,"['RelOptRulesTest.xml', 'RelOptFixture.java']"
1b11d99e65d03a15ae4b25c47250b6918ce9aa10,"[CALCITE-5708] SUBSTRING validation error if any parameter is a NULL literal

Close apache/calcite#3211",['f1d03166a7fce96535b0d20973260a3516c3e3f6'],False,"['SqlSubstringFunction.java', 'SqlValidatorTest.java', 'functions.iq']"
9600147e7dcbb062d69a7277d7ba8304b27f5ca1,"Code style: Lint

Fix various problems (which will be enforced by checks in
the next commit):
 * '//' not followed by space
 * Trailing whitespace
 * Duplicate empty lines in javadoc",['1b11d99e65d03a15ae4b25c47250b6918ce9aa10'],False,"['config.fmpp', 'parserPostgresqlImpls.ftl', 'default_config.fmpp', 'RexImpTable.java', 'CalciteSystemProperty.java', 'CalciteMetaImpl.java', 'Strong.java', 'ReflectiveRelMetadataProvider.java', 'CacheGeneratorUtil.java', 'RelMetadataHandlerGeneratorUtil.java', 'package-info.java', 'JsonFunctions.java', 'SqlDialect.java', 'MssqlSqlDialect.java', 'InferTypes.java', 'StandardConvertletTable.java', 'Bug.java', 'Permutation.java', 'viz-template.html', 'JdbcTest.java', 'RexImplicationCheckerTest.java', 'package-info.java', 'UtilTest.java', 'DruidExpressions.java', 'DruidJsonFilter.java', 'DruidQuery.java', 'DruidSqlCastConverter.java', 'SubstringOperatorConversion.java', 'DruidAdapter2IT.java', 'DruidAdapterIT.java', 'FileReader.java', 'FileRowConverter.java', 'KafkaMessageEnumerator.java', 'KafkaStreamTable.java', 'KafkaTableOptions.java', 'EnumerableDefaults.java', 'DeterministicCodeOptimizer.java', 'Expressions.java', 'RedisDataCaseBase.java', 'RedisMiniServer.java', '2021-06-04-release-1.27.0.md']"
5b9e768d72bd5ed7aa3ca7aa6317060b6fc2b627,"[CALCITE-5877] AssertionError during MOD operation if result scale is greater than maximum numeric scale

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>",['e3310c2e8201ea2910250a12032186bb45c2b8a2'],False,"['RelDataTypeSystem.java', 'RelToSqlConverterTest.java']"
ffd58e3b6d3824e141d76cbbc3664608e8d1bb4d,"[CALCITE-5879] AssertionError during constant reduction of SPLIT expression that returns NULL

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>",['5b66bd3cfaf69cf21b2912f721e4a0b65920cd09'],False,"['SqlLibraryOperators.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
fde98e3504a26e727b21e99eaeb1a45a132e5b0a,[MINOR] Refactor RelDataTypeSystemTest to use test fixture,['95c4acc3cccdc66a3fd39a41250cb0d7f86c56ee'],False,"['SqlOperator.java', 'SqlTypeUtil.java', 'RelDataTypeSystemTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml']"
bde9110ca6d0905eb6973cbacb5c1bb10e04cdce,"[CALCITE-5843] Constant expression with nested casts causes a compiler crash

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>",['697412624ef6baf0bf94554a51a5f7ed54d09ce7'],False,"['Expressions.java', 'Primitive.java', 'SqlOperatorTest.java']"
b3353015ad5528837effda14b8edbd792e688e27,"[CALCITE-5895] TABLESAMPLE (0) should return no rows

TABLESAMPLE(100) should return the underlying relation, with
no sampling.

Change type of 'sample percentage' fields in SqlSampleSpec
and RelOptSamplingParameters from float to BigDecimal. Rename
the fields to 'sampleRate' (to make it clear that the value
they hold is a probability, between 0 and 1, rather than a
percentage, between 0 and 100), and make them public (so
that people can use the fields directly, rather than the
deprecated accessor method).

Deprecate SqlTableSampleSpec#getSamplePercentage() and
RelOptSamplingParameters.getSamplingPercentage().

Add Quidem tests for TABLESAMPLE queries in new
tablesample.iq file.

Close apache/calcite#3360",['ed42c35bd1a357dd0b5d5dc268e93573b724a800'],False,"['Parser.jj', 'RelOptSamplingParameters.java', 'RelInput.java', 'Sample.java', 'RelJson.java', 'RelJsonReader.java', 'MutableSample.java', 'SqlSampleSpec.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'tablesample.iq', 'SqlParserTest.java']"
eff56f938c884aac220d697a7e596b291c2f871e,Update broken link in RelMetadataProvider Javadoc,['b8acbea163fbfd9fa4e6d5ee66a05dbd449b80d3'],False,['RelMetadataProvider.java']
267d63316511289ebe91079714e43b4e2d2ba085,[CALCITE-5965] Avoid unnecessary String concatenations in the RexFieldAccess constructor to improve the performance,['1eb547c93e3473eb9e5c625d798fb80f11fe02b4'],False,['RexFieldAccess.java']
a1d469e6915edac785f689cf26f564dd1e750a72,"[MINOR] Incorrect test fixture used by SqlOperatorTest.testLeastFunc

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>

Close apache/calcite#3428",['9c758942ab51af22a1095087ea2daeabc7d692ea'],False,['SqlOperatorTest.java']
cc73aba9b4af0c3af5ac96422518a821e951cb9b,"[CALCITE-6005] POLYGON string representation is different on Apple silicon

Two tests in RelOptRulesTest produce different plans on Apple
Silicon (arm64) than on AMD/Intel (x86_64) because the double
values inside a POLYGON geospatial value differ in their
least significant digits. Perhaps arm64 implements floating
point differently.

In this change we solve the problem by changing replacing the
floating point values with their x86_64 values. After this
change the tests pass on both CPU architectures. If the
problem spreads beyond a couple of tests we can adopt a more
robust solution.",['e1991e08a225ef08c2402ab35c310d88fff3c222'],False,"['RelOptRulesTest.xml', 'RelOptFixture.java']"
683e4ae24238b2ea852d6e3d796571667c569b86,"[CALCITE-6026] MongoDB: Column is not quoted in ""order by"" clause and throws JsonParseException

The following query fails with a `JsonParseException`:

```sql
select state as ""STATE"", avg(pop) as ""AVG(pop)""
from zips
group by ""STATE""
order by ""AVG(pop)""
```

Stack trace:
```
org.bson.json.JsonParseException: JSON reader was expecting ':' but found '('.
	at org.bson.json.JsonReader.readBsonType(JsonReader.java:150)
	at org.bson.codecs.BsonDocumentCodec.decode(BsonDocumentCodec.java:85)
	at org.bson.codecs.BsonDocumentCodec.decode(BsonDocumentCodec.java:42)
	at org.bson.codecs.BsonDocumentCodec.readValue(BsonDocumentCodec.java:104)
	at org.bson.codecs.BsonDocumentCodec.decode(BsonDocumentCodec.java:87)
	at org.bson.BsonDocument.parse(BsonDocument.java:66)
	at org.apache.calcite.adapter.mongodb.MongoTable.aggregate(MongoTable.java:138)
	at org.apache.calcite.adapter.mongodb.MongoTable.access$200(MongoTable.java:53)
	at org.apache.calcite.adapter.mongodb.MongoTable$MongoQueryable.aggregate(MongoTable.java:189)
```

This is caused by the column name in the `order by` clause not being escaped.",['cc73aba9b4af0c3af5ac96422518a821e951cb9b'],False,"['MongoSort.java', 'MongoAdapterTest.java']"
436ae7d296dfcac321ec461feaf0f645ec980993,"[CALCITE-5982] Allow implementations of CalciteMeta to return extra columns in their responses to DatabaseMetaData.getTables and getColumns requests

A JDBC provider based on Calcite may wish to return extended
metadata. To accomplish this, we add parameters to the
CalciteMetaImpl whose types are the new interfaces
CalciteMetaTableFactory and CalciteMetaColumnFactory.

The default implementation of interface
CalciteMetaTableFactory returns a collection MetaTable
objects; an alternative implementation could return some
subclass that has extra columns, and those extra columns
will be carried through the Avatica RPC protocol and appear
in the ResultSet returned from DatabaseMetaData.getTables.
Similarly CalciteMetaColumnFactory and
DatabaseMetaData.getColumns.

Various fix-ups: (Julian Hyde)
* Make the CalciteMetaDataTableFactory and
  CalciteMetaColumnFactory parameters to the CalciteMetaImpl
  constructor mandatory;
* Add CalciteMetaImpl.create;
* Make CalciteMetaTableFactoryImpl and
  CalciteMetaColumnFactoryImpl singletons (with a protected
  constructor to allow subclassing);
* Rename factory methods ('newMetaColumn' to 'createColumn',
  'newMetaTable' to 'createTable');
* Convert some lambdas into functions.

Add a lint rule to ensure that the 'implements' keyword is
not at end of a line. (Julian Hyde)

Close apache/calcite#3421",['1245db620114ee5174641ad540af6b27dcd772e3'],False,"['build.gradle.kts', 'CalciteConnectionConfig.java', 'CalciteConnectionConfigImpl.java', 'CalciteConnectionProperty.java', 'CalciteMetaColumnFactory.java', 'CalciteMetaColumnFactoryImpl.java', 'CalciteMetaImpl.java', 'CalciteMetaTableFactory.java', 'CalciteMetaTableFactoryImpl.java', 'Driver.java', 'TableFunctionScan.java', 'CalciteRemoteDriverTest.java', 'JdbcFrontJdbcBackTest.java']"
0291e1eeb4c5e01dccbac14e1a6eeeb79d87282b,[CALCITE-6033] Correct broken links on adapter page,['ab3f5b0e800b2166f130fa75fc3a67f6961b5082'],False,"['_config.yml', 'adapter.md']"
ce88348960e95e1c13da850b4422b2f49f022d93,"Code style: lint

The next commit adds various lint rules. This commit fixes
the errors detected by those rules in existing code.",['e8af93f32258a58d7548502dbfaa7e6ffd0db4cd'],False,"['big-query.iq', 'EnumUtils.java', 'EnumerableLimitSort.java', 'RexImpTable.java', 'JoinNode.java', 'UncollectNode.java', 'SimpleCalciteSchema.java', 'SubstitutionVisitor.java', 'VolcanoPlanner.java', 'ConverterRule.java', 'RelDotWriter.java', 'CompositeHintPredicate.java', 'RelMdColumnOrigins.java', 'RelMdColumnUniqueness.java', 'RelMdPredicates.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateJoinRemoveRule.java', 'AggregateProjectConstantToDummyJoinRule.java', 'MinusToDistinctRule.java', 'ProjectJoinJoinRemoveRule.java', 'ProjectJoinRemoveRule.java', 'RelDataTypeFactoryImpl.java', 'RexProgram.java', 'SqlFunctions.java', 'SqlDataTypeSpec.java', 'SqlIdentifier.java', 'SqlLibraryOperators.java', 'ReturnTypes.java', 'IdentifierNamespace.java', 'SqlValidatorImpl.java', 'RelDecorrelator.java', 'SqlToRelConverter.java', 'RelBuilder.java', 'DefaultDirectedGraph.java', 'RelWriterTest.java', 'SqlNodeTest.java', 'MaterializedViewTester.java', 'MutableRelTest.java', 'SourceTest.java', 'cast-with-format.iq', 'DruidTable.java', 'ElasticsearchJson.java', 'ElasticsearchMethod.java', 'ElasticsearchProject.java', 'ElasticsearchTable.java', 'ElasticsearchTableScan.java', 'QueryBuilders.java', 'AggregationTest.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'ScrollingTest.java', 'ElasticsearchChecker.java', 'CsvEnumerator.java', 'FileSchema.java', 'IndexCondition.java', 'README.md', 'TryStatement.java', 'MongoTableScan.java', 'SqlLogicTests.java', 'RedisTable.java', 'ServerDdlExecutor.java', 'innodb_adapter.md', 'MockDdlExecutor.java']"
54e3faf0618c25a63b1c40c0ec3855ce0b842127,"Add various lint checks

(The errors detected by these rules were fixed in the preceding commit.)

Add a lint check '// not followed by space'.

Add a lint rule that ':' in 'for' must be surrounded by spaces.

Add a lint rule disallowing '?' without ':' on an assignment
line. It Converts
  v = b ? branch1
      : branch2;
to
  v =
      b ? branch1
          : branch2;

Apply lint rules to all text files, not just Java files.

Detect tabs and trailing spaces.

Add 'lint:skip' directive.

Exempt LintTest from lint rules, because it contains strings
that are designed to trigger lint rules.

Treat the lint test string as a Java file.

In Puffin, add method Line.matcher(regex).",['ce88348960e95e1c13da850b4422b2f49f022d93'],False,"['build.gradle.kts', 'Puffin.java', 'LintTest.java', 'TestUnsafe.java']"
95408cc71fb7cc2742d09dac1a2fe113daf5328f,"[CALCITE-6050] Add interface ImmutablePairList

In [CALCITE-5706], we added class PairList; this change adds
interface ImmutablePairList, which is optimized for cases
where the list does not change after creation. The
implementation stores entries in an array, rather than a
list, saving memory allocations and indirection.

PairList and ImmutablePairList are now interfaces; this
allows us to have multiple implementations that do not have
a common base class.

Optimize representation of ImmutablePairList. There are
dedicated classes for size = 0 and 1; and we use a backing
array if size is 2 or more.

In Pair, add method forEachIndexed().

In PairList, add methods left(int), right(int), transform2(),
addAll(). Override List.subList(), and add reverse() and
reversed().

Refactor RelBuilder to use PairList, and obsolete class Field.

Use PairList in RelRoot and Schemas.path.",['54e3faf0618c25a63b1c40c0ec3855ce0b842127'],False,"['CalciteSchema.java', 'CalcitePrepareImpl.java', 'AbstractRelNode.java', 'RelRoot.java', 'ImmutablePairList.java', 'PairList.java', 'PairLists.java', 'Schemas.java', 'RelBuilder.java', 'BuiltInMethod.java', 'Pair.java', 'PairListTest.java', 'MockCatalogReader.java']"
5151168e9a9035595939c2ae0f21a06984229209,"[CALCITE-6014] Create a SqlOperatorFixture that parses, unparses, and then parses again before executing

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>",['5d614ed9c872df08e165445cd4a3ab1e24836ab8'],False,"['SqlOperatorUnparseTest.java', 'SqlOperatorFixtureImpl.java']"
c6031ca15579b88bd392a56f4588fdd9a29d1071,"[CALCITE-5763] Increase minimum Guava version to 21.0, maximum version to 32.1.3-jre, and stop building on Guava 19.0

Calcite previously built on Guava 19.0; after this change,
we build on the latest Guava (32.1.3-jre) and on various
versions including the oldest supported Guava (21.0).

We choose 21.0 as the minimum supported Guava version
because it includes various changes to support JDK 8,
including stream, Supplier, and functions.

Revert [CALCITE-5428] Reduce minimum Guava version to 16.0.1

Code changes that are possible now we are on Guava 21.0:
* Replace Guava Supplier with Java Supplier, and remove
  redundant '::get' calls;
* Replace Util.toImmutableList with
  ImmutableList.toImmutableList;
* Replace Util.throwIfUnchecked with
  Throwables.throwIfUnchecked;
* Replace RangeSetTest.unionRangeSet with
  ImmutableRangetSet.unionOf.

Add an autostyle rule to require a static import of
ImuutableList.toImmutableList.

Cassandra requires Guava 23 or higher, for the method
ImmutableSet.builderWithExpectedSize, so disable the
Cassandra test on lower Guava versions.

Close apache/calcite#3470",['5151168e9a9035595939c2ae0f21a06984229209'],False,"['main.yml', 'build.gradle.kts', 'CassandraExtension.java', 'ArrayTable.java', 'JdbcCatalogSchema.java', 'JdbcTable.java', 'CalciteSystemProperty.java', 'ProfilerLatticeStatisticProvider.java', 'RelOptMaterializations.java', 'RuleMatchVisualizer.java', 'CalciteCatalogReader.java', 'MetadataDef.java', 'RelMetadataQuery.java', 'SqlImplementor.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateExtractProjectRule.java', 'MaterializedViewFilterScanRule.java', 'SortRemoveRedundantRule.java', 'RexAnalyzer.java', 'RexBuilder.java', 'RexUtil.java', 'AutomatonBuilder.java', 'Hook.java', 'PairList.java', 'SqlDialect.java', 'SqlHint.java', 'SqlIdentifier.java', 'SqlOperatorTables.java', 'DelegatingScope.java', 'SqlToRelConverter.java', 'Frameworks.java', 'RelBuilder.java', 'Compatible.java', 'Util.java', 'LatticeSuggesterTest.java', 'ProfilerTest.java', 'RelMetadataTest.java', 'RangeSetTest.java', 'UtilTest.java', 'gradle.properties', 'EnumerableDefaults.java', 'history.md', 'SqlTestFactory.java', 'CalciteAssert.java', 'Matchers.java', 'TestUtil.java']"
f996bc9993546019d0fd475b2daa99ac8b1b9259,"[CALCITE-5923] SqlOperatorTest using safeParameters are not using overridable fixture

SqlOperatorTest cases using the safeParameters method to generate
parameterized inputs are not using the overridable fixture from the
subclasses. Due to this the customized behavior introduced by
subclasses of SqlOperatorTest is not taken into account by these tests.

This violates the design principle of the SqlOperatorTest class which
explicitly states that subclasses are meant to override the method
and basically decreases code coverage since subclasses will not have
any effect on the affected tests.

1. Remove static modifier from safeParameters to allow the use of
overridable fixture() method.
2. Add TestInstance.Lifecycle.PER_CLASS annotation to allow
@MethodSource to be non-static (see junit-team/junit5#984).
3. Adapt expected results for test cases casting string to timestamps
based on changes from CALCITE-5678 in Avatica.
4. Pickup avatica.version from project properties to run the appropriate
tests while waiting for the Avatica upgrade.

Close apache/calcite#3364",['c6031ca15579b88bd392a56f4588fdd9a29d1071'],False,"['build.gradle.kts', 'SqlOperatorTest.java', 'TestUtil.java']"
0bec957071468a2e54a22519290ac101a752fcad,"[CALCITE-5921] SqlOperatorFixture.checkFails and checkAggFails don't check runtime failure

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>",['425a94d420daf320a6f597816da0c0d8b6c485b3'],False,"['CalciteResource.java', 'SqlFunctions.java', 'CalciteResource.properties', 'SqlOperatorFixture.java', 'SqlTests.java', 'SqlOperatorFixtureImpl.java', 'SqlOperatorTest.java', 'SqlRuntimeTester.java']"
345961a9d21f1f669a452571fe70520185cbb424,[CALCITE-5921] SqlOperatorFixture.checkFails and checkAggFails don't check runtime failure (follow-up),['0bec957071468a2e54a22519290ac101a752fcad'],False,"['SqlOperatorUnparseTest.java', 'SqlOperatorTest.java']"
79f2f61dcca9ab57600d3723b147b3e05d25ecb2,"[CALCITE-6038] Remove 'ORDER BY ... LIMIT n' when input has at most one row, n >= 1, and there is no 'OFFSET' clause

This change extends SortRemoveRedundantRule, which was added
in [CALCITE-5994].

Following [CALCITE-5940], which added SortMergeRule, rename
field LIMIT_MREGE to LIMIT_MERGE.

Close apache/calcite#3467",['345961a9d21f1f669a452571fe70520185cbb424'],False,"['CoreRules.java', 'SortMergeRule.java', 'SortRemoveRedundantRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
8821eaf94b08dd5c55074b900201da7c386c1635,"[CALCITE-6075] Site: Cloning source code from GitHub using git protocol fails

GitHub removed the unecrypted git protocoli a while ago:
https://github.blog/changelog/2022-03-15-removed-unencrypted-git-protocol-and-certain-ssh-keys/

Close apache/calcite#3485",['79f2f61dcca9ab57600d3723b147b3e05d25ecb2'],False,['index.md']
417a1b53ec9fd6bd449601036535bdb323229059,"[CALCITE-5949] RexExecutable should return unchanged original expressions when it fails

Co-authored-by: arkanovicz <claude@renegat.net>",['0f824ed0045f9594959d459776177bb5f46d7620'],False,"['RexExecutable.java', 'RexExecutorTest.java']"
ef82a6cc6bc565f6dc596c1d2aca7221fd6cdc49,"[CALCITE-6075] Site: Cloning source code from GitHub using git protocol fails

GitHub removed the unecrypted git protocoli a while ago:
https://github.blog/changelog/2022-03-15-removed-unencrypted-git-protocol-and-certain-ssh-keys/

Close apache/calcite#3488",['417a1b53ec9fd6bd449601036535bdb323229059'],False,['howto.md']
c6b3876ff4707527ca3c952036312a11bbc4ca4f,"[CALCITE-5979] Enable REGEXP_REPLACE function in BigQuery library

The REGEXP_REPLACE function was previously available in
MySQL and Oracle libraries; this change adds it to BigQuery
library. In BigQuery, the replacement string has a slightly
different syntax - using '$' rather than '\' to indicate
capturing groups. We add method
SqlConformance.isRegexReplaceCaptureGroupDollarIndexed() to
control this behavior.

Close apache/calcite#3460",['7eace909c51a3f56953597264d9c577c4e088852'],False,"['big-query.iq', 'RexImpTable.java', 'CalciteResource.java', 'SqlFunctions.java', 'SqlLibraryOperators.java', 'SqlAbstractConformance.java', 'SqlConformance.java', 'SqlConformanceEnum.java', 'SqlDelegatingConformance.java', 'CalciteResource.properties', 'SqlFunctionsTest.java', 'reference.md', 'SqlOperatorTest.java']"
620058f94bd2dbaae019b85e9de842721fd70623,"[CALCITE-5990] Explicit cast to numeric type doesn't check overflow

Signed-off-by: Mihai Budiu <mbudiu@gmail.com>",['782d327d24c04e2161102b22f8880204462befd4'],False,"['Bug.java', 'SqlOperatorUnparseTest.java', 'Primitive.java', 'reference.md', 'SqlOperatorFixture.java', 'SqlTests.java', 'SqlOperatorTest.java']"
53c3cc6cd1b35b38a7ccea74f78dbf53a3e437d4,[CALCITE-6092] Skip breaking CAST String to TIME tests until fixed in Avatica 1.24.0,['816edd1fa1a1d6af7e72416d791eb01d8c66b6ea'],False,"['Bug.java', 'SqlOperatorTest.java']"
943921e4941282457c7b48ba0a8cd6075ddb82d7,"[CALCITE-5607] Serialize return type during RelJson.toJson(RexNode node) for SqlKind.MINUS

Uncovered a bug in RelJson#toRex for the TIMESTAMP_DIFF call for Big Query dialect.
MINUS_DATE uses an ARG2_NULLABLE return type inference which requires 3 operands, however there are only 2 operands for BQ.
The solution here is to do something similar to how we handle CAST and to add in ""type"" when serializing to JSON in RelJson.toJson(RexNode node) for SqlKind.MINUS so that jsonType will be defined in toRex.

Co-authored-by: TJ Banghart <tjbanghart@gmail.com>",['55034513b463c938035e5d2436949bbf734b84b6'],False,"['RelJson.java', 'RelWriterTest.java']"
b74c9344d3f6ee77f9a4c33db9a3095d60e73512,"[CALCITE-6109] Linq4j OptimizeShuttle should not create new instances of TernaryExpression if it does not do any optimization

Before this change, OptimizeShuttle might return a different
Expression object that is equivalent to the original; this
would cause the optimizer to loop, mistakenly believing that
optimizations were occurring, which was inefficient.

After this change, the OptimizeShuttle avoids extra loops
when optimizing statements with ternary expressions.

Close apache/calcite#3518",['7049f9a33501c199fe04b589dd067adcae9f1ee7'],False,"['OptimizeShuttle.java', 'InlinerTest.java']"
c65fdc92a2b37e714cca0f9dff437f5ba781efc3,"Broken link in tutorial

Revert URL encoding, fix commit message (Julian Hyde)

Close apache/calcite#3552",['5385de959e2f198792c7d0a9ddba42bacb783c31'],False,['tutorial.md']
1f6022b4d421bf9d237567f918e523680d75e6bb,"[CALCITE-6095] Arithmetic expression with VARBINARY value causes AssertionFailure

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['d3ab0bc8e4d4c9ebc0fc4e33ce478d276f5d11e4'],False,"['AbstractTypeCoercion.java', 'SqlOperatorTest.java']"
acc087a8a7c1d301ec713965dae782d14d969064,"[CALCITE-5811] Error messages produced for constant out-of-bounds arguments are confusing

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['3a2692c25b82489134d4040620a09e7fd8155aca'],False,"['SqlFunctions.java', 'SqlSubstringFunction.java', 'SqlValidatorTest.java', 'SqlOperatorTest.java']"
11c540686a47765f8c6232058ec9eb1f418e4efa,"[CALCITE-5130] AssertionError: ""Conversion to relational algebra failed to preserve datatypes"" when union VARCHAR literal and CAST(null AS INTEGER)

In AbstractTypeCoercion#promoteToVarChar() return resultType with nullability
if any of the types being promoted are nullable.",['a7cc2bb9abd83cea1dea5a7ad29ef673c916bab6'],False,"['AbstractTypeCoercion.java', 'TypeCoercionConverterTest.java', 'TypeCoercionTest.java', 'TypeCoercionConverterTest.xml']"
dad9d75fd01a7beed4618dfa481f8f5be8e80dc6,"[MINOR] Checkstyle to fix broken build

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['11c540686a47765f8c6232058ec9eb1f418e4efa'],False,['AbstractTypeCoercion.java']
ad2a4e6af21ab27952c7152e670783559e49735e,"[CALCITE-6094] Linq4j.ConstantExpression.write crashes on special FP values

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['135e96383294f60bacf2bdc0f83ab5389fa77115'],False,"['ConstantExpression.java', 'SqlOperatorTest.java']"
86d5720c7fcfd73aa7c098adb54f96ad3aa80bfe,"[CALCITE-6202] `sqlsh` does not print error message when query fails

Close apache/calcite#3627",['24ea6bef754add3d9bfcd4b300028b729e37f08e'],False,['SqlShell.java']
e2c84a6485afce05bd0dcf5a9d6e9aafcb8af65a,"[CALCITE-6111] Explicit cast from expression to numeric type doesn't check overflow

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['d5fa3eb07492675e08308635967117932f98478f'],False,"['RexToLixTranslator.java', 'BuiltInMethod.java', 'Primitive.java', 'SqlOperatorFixture.java', 'SqlOperatorTest.java']"
dd53e29326eb4399c5f767b22ae0ebc29a2e1c14,"[CALCITE-6227] ELEMENT(NULL) causes an assertion failure

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['e17098d47f3c31e4d90cc17e6e1da1175bf49ae4'],False,"['ReturnTypes.java', 'SqlValidatorTest.java']"
7ca6fc4bdd3e1274a62f00f4c8d5830162a74879,"Fix CalciteResource.properties

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['39bf99bdd1d126b21d9f184b78ddc3bb887cb2a0'],False,['CalciteResource.properties']
022d878a73dec796bb72743804a6dded7c239bd3,"[CALCITE-6261] AssertionError with field pruning & duplicate agg calls

Signed-off-by: Niels Pardon <par@zurich.ibm.com>",['6ba31302be35f19e0ccf289a1c6705a79bf87587'],False,"['RelBuilder.java', 'RelBuilderTest.java']"
96485c0ec8366d04f08f5c9a72bbee5b47503d6e,"Cosmetic

Require that Preconditions.checkArgument is used via static import;
and other changes that do not affect functionality.",['85d96207efac6f6c90a4bc2e0fd889004d2ef0b6'],False,"['build.gradle.kts', 'EnumerableRelFactories.java', 'JdbcRules.java', 'Bindables.java', 'CalciteConnectionImpl.java', 'CalcitePrepare.java', 'CalciteSchema.java', 'Lattice.java', 'LatticeNode.java', 'MaterializationActor.java', 'ProfilerImpl.java', 'RelCollationImpl.java', 'AggregateCall.java', 'Match.java', 'SetOp.java', 'TableModify.java', 'RelHint.java', 'ReflectiveRelMetadataProvider.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'AggregateExpandDistinctAggregatesRule.java', 'CalcRelSplitter.java', 'ProjectToWindowRule.java', 'MaterializedViewAggregateRule.java', 'RexBuilder.java', 'RexFieldAccess.java', 'RexLiteral.java', 'RexOver.java', 'RexSubQuery.java', 'RexWindow.java', 'AutomatonBuilder.java', 'CalciteException.java', 'Pattern.java', 'Schemas.java', 'SqlDialect.java', 'SqlGroupedWindowFunction.java', 'SqlJoin.java', 'SqlMatchRecognize.java', 'SqlNullTreatmentOperator.java', 'SqlTimeLiteral.java', 'SqlTimestampLiteral.java', 'SqlWindowTableFunction.java', 'SqlAdvisorValidator.java', 'SqlCreateForeignSchema.java', 'SqlCreateFunction.java', 'SqlCreateTableLike.java', 'PrestoSqlDialect.java', 'SqlAnyValueAggFunction.java', 'SqlAvgAggFunction.java', 'SqlBitOpAggFunction.java', 'SqlCovarAggFunction.java', 'SqlFirstLastValueAggFunction.java', 'SqlFloorFunction.java', 'SqlLeadLagAggFunction.java', 'SqlLibrary.java', 'SqlMinMaxAggFunction.java', 'SqlQuantifyOperator.java', 'SqlRegrCountAggFunction.java', 'SqlParserUtil.java', 'SqlPrettyWriter.java', 'BasicSqlType.java', 'MatchReturnTypeInference.java', 'ReturnTypes.java', 'SqlOperandCountRanges.java', 'SqlReturnTypeInferenceChain.java', 'SqlTypeTransformCascade.java', 'SqlTypeUtil.java', 'AbstractNamespace.java', 'DelegatingNamespace.java', 'DelegatingScope.java', 'IdentifierNamespace.java', 'ListScope.java', 'SqlLambdaScope.java', 'SqlQualified.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorUtil.java', 'ReflectiveConvertletTable.java', 'SqlNodeToRexConverterImpl.java', 'StandardConvertletTable.java', 'Hoist.java', 'RelBuilder.java', 'DateString.java', 'JdbcTypeImpl.java', 'TimeWithTimeZoneString.java', 'TimestampString.java', 'TimestampWithTimeZoneString.java', 'SqlValidatorFeatureTest.java', 'DruidTable.java', 'ElasticsearchSchema.java', 'ElasticsearchSchemaFactory.java', 'PredicateAnalyzer.java', 'Scrolling.java', 'EmbeddedElasticsearchNode.java', 'GeodeFilter.java', 'GeodeRules.java', 'GeodeEmbeddedPolicy.java', 'IndexCondition.java', 'ModularInteger.java', 'PigFilter.java', 'PigRelFactories.java', 'RedisSchemaFactory.java', 'ServerDdlExecutor.java', 'Matchers.java', 'RelMetadataFixture.java', 'SqlValidatorFixture.java', 'MockCatalogReader.java', 'PreconditionTest.java']"
2558c13cdb8b6a8e1608112a902b1bf9d97b5386,"[CALCITE-6219] 'Must-filter' columns

A table can declare that some of its columns must be filtered
by implementing `interface SemanticTable`. If such columns
are not filtered in a WHERE or HAVING clause, the validator
throws.

There are several purposes of these columns, one of which is
to prevent expensive full-table scans (for example, reading
all Orders without restricting on orderDate).

Implementation is via the method
SqlValidatorNamespace.getMustFilterFields(). For a table
namespace, that method returns the declared must-filter
fields. For a query namespce, that method returns any
must-filter fields that have not been filtered in that query;
such fields become the responsibility of the enclosing query.

If a field is must-filter and is not in the SELECT clause of a
sub-query, that is also an error, because of course it is now
impossible for the enclosing query to filter it.

Close apache/calcite#3688

Co-authored-by: Julian Hyde <jhyde@apache.org>",['96485c0ec8366d04f08f5c9a72bbee5b47503d6e'],False,"['CalciteResource.java', 'AbstractNamespace.java', 'IdentifierNamespace.java', 'SemanticTable.java', 'SqlQualified.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'WithItemNamespace.java', 'WithNamespace.java', 'CalciteResource.properties', 'SqlValidatorTest.java', 'MockCatalogReader.java', 'MustFilterMockCatalogReader.java']"
90beb01b0713a010167aeb2c810ffebccf3aa3e1,"[CALCITE-6283] Function ARRAY_APPEND with a NULL array argument crashes with NullPointerException

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['2ce306263327a30255bda858ce437c184546ca9b'],False,"['SqlLibraryOperators.java', 'ArrayElementOperandTypeChecker.java', 'OperandTypes.java', 'SqlOperatorTest.java']"
b0034c9ed885644e22edc92e8ab939128ee6b615,"[CALCITE-6262] CURRENT_TIMESTAMP(P) ignores DataTypeSystem#getMaxPrecision

Change datetime functions taking in a precision to validate against
the max precision from the type system, rather than the SqlTypeName.",['90beb01b0713a010167aeb2c810ffebccf3aa3e1'],False,"['SqlAbstractTimeFunction.java', 'RelDataTypeSystemTest.java']"
325b1ba84518d4a9cd449e315ec22d84f6669671,"Fix style check rule that breaks the build

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['6d3a81de13322a79f83d07b86fb427bdf2087fed'],False,"['SqlTimeTzLiteral.java', 'SqlTimestampTzLiteral.java']"
4823cb7760913f236e7f0f2cb149325b55a3f124,"[CALCITE-6015] AssertionError during optimization of EXTRACT expression

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['9c0d690439920fff5120250e5f1899f857a5b1ec'],False,"['RexImpTable.java', 'SqlCall.java', 'SqlExtractFunction.java', 'OperandTypes.java', 'SqlValidatorImpl.java', 'SqlValidatorTest.java', 'history.md', 'SqlOperatorFixture.java', 'SqlOperatorTest.java']"
1cfb72e905d0da9182aaf0e05496dbf5e77cf5bd,"[CALCITE-6347] ARRAY_REPEAT with a string argument causes a compiler crash

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['f948850b7cc4cc4448a488382f6c009eb35c0f84'],False,"['SqlFunctions.java', 'BuiltInMethod.java', 'SqlOperatorTest.java']"
4c695885a50d2986008aa24a1122094b051c0872,"[CALCITE-6348] ARRAY_OVERLAP with a NULL argument crashes the compiler

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['1cfb72e905d0da9182aaf0e05496dbf5e77cf5bd'],False,"['SqlLibraryOperators.java', 'SqlTypeTransforms.java', 'SqlOperatorTest.java']"
4e6a320bf476c4b3c313d86f8ff3c6edf4c2a578,"[CALCITE-6265] Type coercion is failing for numeric values in prepared statements

Given a column of type `INT`. When providing a `short` value as a
placeholder in a prepared statement, a `ClassCastException` is thrown.

Test case:
```
final String sql =
    ""select \""empid\"" from \""hr\"".\""emps\"" where \""empid\"" in (?, ?)"";
CalciteAssert.hr()
    .query(sql)
    .consumesPreparedStatement(p -> {
        p.setShort(1, (short) 100);
        p.setShort(2, (short) 110);
    })
    .returnsUnordered(""empid=100"", ""empid=110"");
```

Stack trace:
```
java.lang.ClassCastException: class java.lang.Short cannot be cast to class java.lang.Integer (java.lang.Short and java.lang.Integer are in module java.base of loader 'bootstrap')
     at Baz$1$1.moveNext(Unknown Source)
     at org.apache.calcite.linq4j.Linq4j$EnumeratorIterator.<init>(Linq4j.java:679)
```",['1f5ba75d686b5d7832a59cd5e82777b3527cf70d'],False,"['RexToLixTranslator.java', 'JdbcTest.java', 'Expressions.java', 'Types.java']"
181784b8d3a4955aaa1f6d973cc0d73bdfece194,"[CALCITE-6353] Optimization CoreRules.PROJECT_REDUCE_EXPRESSIONS crashes while optimizing ARRAY_CONCAT expression

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['4e6a320bf476c4b3c313d86f8ff3c6edf4c2a578'],False,"['RexImpTable.java', 'ReduceExpressionsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
b91c0c00d2cd05db56c775ae335e4933a224b051,"[CALCITE-6309] Add REGEXP_LIKE function (enabled in MySQL, Oracle, PostgreSQL and Spark libraries)

Supports a 3-argument REGEXP_LIKE variant that takes in a string of regex flags in
addition to the existing 2-argument variant.

Add support for REGEXP_LIKE(value, regex) to MySQL, Oracle, and PostgreSQL.
Add support for REGEXP_LIKE(value, regex, flags) to MySQL, Oracle, PostgreSQL, and Spark.

Fix RLIKE-related tests such that they validate results instead of
only checking that expressions parse correctly and return the correct
type.",['8c98d4210a35e8d8261187ac108d7ca6ecc75936'],False,"['RexImpTable.java', 'SqlFunctions.java', 'SqlLibraryOperators.java', 'BuiltInMethod.java', 'reference.md', 'SqlOperatorTest.java']"
283c1c111d2d2682c728f681bebc5307d40d70a5,"[CALCITE-6333] NullPointerException in AggregateExpandDistinctAggregatesRule.doRewrite when rewriting filtered distinct aggregation

Fix test order

Fix one more",['9bd371316da3bfbf1096142d69f0464100773590'],False,"['AggregateExpandDistinctAggregatesRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
91115539f967fe213eb11a3ef84c49d847055569,"[CALCITE-6349] CoreRules.PROJECT_REDUCE_EXPRESSIONS crashes on expressions with ARRAY_REPEAT

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['283c1c111d2d2682c728f681bebc5307d40d70a5'],False,"['SqlLibraryOperators.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'SqlOperatorTest.java']"
aba64f0b217093b500629fe07a0befdc68293fbc,"[CALCITE-6210] Cast to VARBINARY causes an assertion failure

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['889f41615834aeec0d0d4a725c6d7ad3c355273d'],False,"['redshift.iq', 'RexToLixTranslator.java', 'RexUtil.java', 'SqlFunctions.java', 'SqlDialect.java', 'BuiltInMethod.java', 'RelToSqlConverterTest.java', 'ConstantExpression.java', 'reference.md', 'SqlOperatorTest.java']"
152801428fc28948d8f78753c258744f7c8e253a,"[CALCITE-6265] Type coercion is failing for numeric values in prepared statements
Address some issues on the original patch",['cc1d46a4c4f88962c059e4ad0689ddfbb784ea96'],False,"['EnumUtils.java', 'RexToLixTranslator.java', 'JdbcTest.java', 'Types.java']"
0551b8903391c1706422a2c1b8b648a6941f39a2,"[CALCITE-5289] Assertion failure in MultiJoinOptimizeBushyRule

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['b4bcd3b69a39ac40974690d1bd4ea08f364638ce'],False,"['MultiJoinOptimizeBushyRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
4a977fe2a204107efdf850fb276722f9d79496a0,Rectify missing/broken BQ date-time format elements,['6d4f80e90bd99392e5bec152f964e639f0cfe7fc'],False,"['Bug.java', 'FormatElementEnum.java', 'FormatModels.java', 'FormatModelTest.java', 'FormatElementEnumTest.java', 'cast-with-format.iq', 'SqlOperatorTest.java']"
19debd3e90e391bc6ba8250ec81735490b4b0cee,"[CALCITE-6361] Uncollect.deriveUncollectRowType throws AssertionFailures
   * if the input data is not a collection

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['f55c59ab32d1222c3828eebd33190e3bcc1f855d'],False,"['Uncollect.java', 'CalciteResource.java', 'SqlToRelConverter.java', 'CalciteResource.properties', 'ServerTest.java']"
1fa47054ce494fbcad7a5d0793b6cf1c6c8b5404,"[CALCITE-6358] Support all PostgreSQL 14 date/time patterns for to_char

* Splits the PostgreSQL toChar function off to its own function
* Does not implement SP suffix
* Timezone patterns are supported but all datetimes are in local timezone",['a33270390b85170f53616d59608f1c7eb35a1889'],False,"['BabelQuidemTest.java', 'postgresql.iq', 'RexImpTable.java', 'SqlFunctions.java', 'SqlBasicFunction.java', 'SqlLibraryOperators.java', 'BuiltInMethod.java', 'PostgresqlDateTimeFormatter.java', 'PostgresqlDateTimeFormatterTest.java', 'pg_to_char_queries.sql', 'to_char_generate_iq.py', 'QuidemTest.java', 'SqlOperatorTest.java']"
a7c1e8ac774f0ca602ed598f9dd0aef99ca7ad23,"[CALCITE-6370] AS operator problems with USING clause

* Detect when a nested AS call is inserted and prevent it",['d7a0f99eb1afcced693648ad544dfd9738035f58'],False,"['SqlValidatorImpl.java', 'RelToSqlConverterTest.java']"
1566f73ef8ce6258e30e3b08f2164a6d226c24b0,"[CALCITE-6392] Support all PostgreSQL 14 date/time patterns for to_date/to_timestamp

* First phase, mostly reorganizing classes
* Does not yet implement to_date or to_timestamp
* Fixed up fill mode handling
* Isolated the unit test class so that it can make Locale changes safely
* Introduced some new classes split out handling of some formats strings",['f672d39dc8ef1b7b72ae282bc4b319e026e3f5e6'],False,"['SqlFunctions.java', 'PostgresqlDateTimeFormatter.java', 'CapitalizationEnum.java', 'DateStringFormatPattern.java', 'EnumStringFormatPattern.java', 'FormatPattern.java', 'NumberFormatPattern.java', 'PostgresqlDateTimeFormatter.java', 'RomanNumeralMonthFormatPattern.java', 'StringFormatPattern.java', 'TimeZoneFormatPattern.java', 'TimeZoneHoursFormatPattern.java', 'TimeZoneMinutesFormatPattern.java', 'package-info.java', 'PostgresqlDateTimeFormatterTest.java']"
d74b283f56a0043202af8ad95080ca21c70b8baa,"[CALCITE-6369] Expanding ""star"" gives ArrayIndexOutOfBoundsException with redundant columns and USING

Fixes expanding * when columns are also specified in the projection list",['1566f73ef8ce6258e30e3b08f2164a6d226c24b0'],False,"['SqlValidatorImpl.java', 'RelToSqlConverterTest.java']"
a98508fd36e2a213ba4772c709999f494e61bb11,[CALCITE-6460] SortRemoveConstantKeysRule fails with AssertionError due to mismatched collation on resulting Sort,['dad90736b0dbf30eae0d8f215112e22f64c90235'],False,"['SortRemoveConstantKeysRule.java', 'RelOptRulesTest.java']"
73846cceb1841a3c7f7ab5cbe3c40611db07c148,"[CALCITE-6435] SqlToRel conversion of IN expressions may lead to incorrect simplifications

Conversion path for comparisions generated from IN expressions was handling types differently.
This may have lead to some over-simplification in some cases.

Altered the conversion to do the full SqlToRex conversion steps for these generated nodes as well.
Added an extra safeguard check to RexSimplify to prevent the bug from being triggered.",['a98508fd36e2a213ba4772c709999f494e61bb11'],False,"['RexSimplify.java', 'SqlToRelConverter.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'sub-query.iq', 'DruidAdapter2IT.java', 'DruidAdapterIT.java']"
1e424a0d4eeec69e4da0a504cf080cf7a847704d,"[CALCITE-3094] Code of method grows beyond 64 KB when joining two tables with many fields

Change code generation such that when implementing joins across many fields up to a certain
threshold, populate the output array using System.arraycopy() instead of explicitly
instantiating an array with a large number of elements.",['d21c5c9c17d6733468800f652ab15932e84a012e'],False,"['EnumUtils.java', 'JavaRowFormat.java', 'Row.java', 'BuiltInMethod.java', 'LargeGeneratedJoinTest.java']"
29c413a3c6933d1c871047b312b2b81235f3d1c6,[CALCITE-6468] RelDecorrelator throws AssertionError if correlated variable is used as Aggregate group key,['1e424a0d4eeec69e4da0a504cf080cf7a847704d'],False,"['RelDecorrelator.java', 'RelDecorrelatorTest.java', 'sub-query.iq']"
1cdf864e9f853284f05aa3bf8515951a018ae22e,"[CALCITE-6454] Implement array comparison operators

* <, <=, >, >= now work for arrays and rows
* Can also sort arrays and rows
* Comparison is performed along corresponding indexes
* Longer arrays are considered greater
* null is considered greater than anything
* Cannot change whether nulls are first or last",['95fedabe27b655a498fcdfea9967565dd4776336'],False,"['SqlFunctions.java', 'operator.iq', 'sort.iq', 'Functions.java']"
8143eba75e1e13cb946c9845ab2bd7c36908583a,"Test case for [CALCITE-2032] Error when implicitly converting character literal to date literal

The bug seems to have been fixed a long time ago.",['68f473ef95e72a9ed349372cac23c3bd4863e284'],False,['misc.iq']
66919e4d44a2dc5019b595569bbd9fbfd5d163eb,"[CALCITE-4496] Measure columns (""SELECT ... AS MEASURE"")

In [CALCITE-5105] we added MEASURE type and AGGREGATE function;
this commit enables measures to be declared as part of a query,
using the new AS MEASURE syntax. We add MEASURE as a reserved
keyword.

We start work on allowing measures with null keys in GROUP BY;
the work is commented out pending [CALCITE-6452].

Add measure-paper.iq, a Quidem test containing examples from
the 'Measures in SQL' paper.

There are several experimental implementation strategies. One
adds RelMdMeasure, a metadata class that gives a measure
column the opportunity to 'implement itself' by generating an
expression. Another strategy is the functions V2M
(value-to-measure), M2V (measure-to-value) and others, and
rules such as MeasureRules.AGGREGATE that try to eliminate
calls to these functions by making them collide.

The implementation strategies are all experimental, and
subject to change or removal. Probably the RelMdMeasure
strategy is good for complex measures (and later for
context-sensitive expressions with the AT operator) that need
to be implemented as a correlated scalar subquery. The
rewrite strategy can be used to create simple plans for
simple queries.

Factor part of the OrderByScope.fullyQualify method into
new method DelegatingScope.qualifyUsingAlias.

Close apache/calcite#3837",['9f231cc5b91b100b6a6fbc3cd6324873529dbf49'],False,"['Parser.jj', 'EnumerableProjectRule.java', 'CalcitePrepareImpl.java', 'RelNodes.java', 'Calc.java', 'BuiltInMetadata.java', 'DefaultRelMetadataProvider.java', 'RelMdMeasure.java', 'RelMetadataQuery.java', 'MeasureRules.java', 'ProjectToCalcRule.java', 'RelDataType.java', 'RexAnalyzer.java', 'RexBuilder.java', 'RexSimplify.java', 'RexUtil.java', 'CalciteResource.java', 'SqlAsOperator.java', 'SqlKind.java', 'SqlMeasureOperator.java', 'SqlInternalOperators.java', 'OperandTypes.java', 'SqlTypeTransforms.java', 'SqlTypeUtil.java', 'AggVisitor.java', 'DelegatingScope.java', 'MeasureScope.java', 'OrderByScope.java', 'SelectNamespace.java', 'SqlValidator.java', 'SqlValidatorImpl.java', 'SqlValidatorScope.java', 'SqlValidatorUtil.java', 'AggConverter.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'Programs.java', 'RelBuilder.java', 'BuiltInMethod.java', 'MonotonicSupplier.java', 'CalciteResource.properties', 'CalciteRemoteDriverTest.java', 'RexProgramBuilderBase.java', 'RexProgramTest.java', 'CoreQuidemTest.java', 'JdbcTest.java', 'RelBuilderTest.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'measure-paper.iq', 'measure.iq', 'reference.md', 'SqlParserTest.java', 'SqlValidatorFixture.java']"
ea1a255fd071a518fe8d30e361efa0696164a037,[CALCITE-6485] AssertionError When an IN list containing NULL has an implicit coercion type converter,['66919e4d44a2dc5019b595569bbd9fbfd5d163eb'],False,"['AbstractTypeCoercion.java', 'TypeCoercionConverterTest.java', 'TypeCoercionTest.java', 'TypeCoercionConverterTest.xml']"
6e1fe23c2a36176f52dd0fcdf5f0278028ca36d3,Improve OVERLAY operator docs and fix typo in exception,['b33dddeb3a79cf4da1ac3c72ae004a893945fc60'],False,"['SqlOverlayFunction.java', 'reference.md']"
6d06699e81c5992ba52fd1f6be85a99eb55144cb,"Change Mihai Budiu's role

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['6e1fe23c2a36176f52dd0fcdf5f0278028ca36d3'],False,['contributors.yml']
9fa1e16e326e37688b829a2a73064652df40c90d,"[CALCITE-6266] SqlValidatorException with LATERAL TABLE and JOIN

The current precedence of ',' (the comma operator in
'FROM t1, t2') and 'JOIN' is wrong. JOIN is currently higher,
and so in a query like

  SELECT *
  FROM dept,
    LATERAL (SELECT * FROM emp WHERE emp.deptno = dept.deptno) AS emp
    CROSS JOIN (VALUES ('A'), ('B')) AS v (v);

the emp subqery is associated with v more tightly than dept,
and therefore dept.deptno is not visible; the correct
association is not (dept (emp v)) but ((dept emp) v).

The LATERAL keyword, and the TABLE function mentioned in the
bug, are not the root cause, but they do make the problem
obvious because the wrong association causes a validation
error.

This commit fixes the precedence of the operators.

Close apache/calcite#3871",['8659140dcb689f71fecbba6b081cc525c7fc2774'],False,"['Parser.jj', 'SqlJoin.java', 'SqlValidatorTest.java', 'lateral.iq', 'SqlParserTest.java']"
979981481f8effde5e2fe5bb605d5c3424554e4b,[CALCITE-6514] Enable tests about AssertionError while translating IN list that contains null,['94837feb231656970480f9d5b4da26f359c268a9'],False,"['Bug.java', 'SqlOperatorTest.java']"
59a3bb0c2313197e26fd32a358f706efaf41ef82,[CALCITE-6515] Remove constants describing which bugs have been fixed in Bug,['979981481f8effde5e2fe5bb605d5c3424554e4b'],False,['Bug.java']
27fd58308cf9106bf2f6ee21cec8230946ecd64a,"[CALCITE-6519] Non-aggregate query that uses measure in ORDER BY

As of [CALCITE-4496], a non-aggregate query can use measures
in its SELECT clause; this change further allows a
non-aggregate query to use measures in its ORDER BY clause.
Example:

  WITH empm AS
    (SELECT *, avg(sal) AS MEASURE avgSal FROM emp)
  SELECT avgSal, deptno
  FROM empm
  ORDER BY avgSal DESC LIMIT 3;

Close apache/calcite#3907",['2d6e9a7dda70313bbfcf0e39f4cffc1404f1f521'],False,"['MeasureRules.java', 'SqlValidatorImpl.java', 'SqlToRelConverter.java', 'Programs.java', 'RelOptRulesTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'measure.iq']"
186bb62a751e2713b44989003a0789804db3cd21,[CALCITE-6501] Assertion Error in JoinUnifyRule Due to Type Mismatch,['b60598b47e86b2b21639d193b374f1d6d4dcd139'],False,"['SubstitutionVisitor.java', 'MaterializedViewSubstitutionVisitorTest.java']"
7a402e8c9d229b780eaa86a7e80f7fc64da0369a,"[CALCITE-6020] Created a new RelRule for SUM to SUM0 conversion

A new RelRule was created that looks for OVER in a the project list. If the OVER contains SUM in the
aggregate, it is changed to SUM0. The conversion now happens during planning rather than when SQL is
converted to Rel.",['f903b95a332cc5ce5901a031cdbc7a85b50c8ae4'],False,"['RelOptRules.java', 'CoreRules.java', 'ProjectOverSumToSum0Rule.java', 'RexShuttle.java', 'SqlToRelConverter.java', 'Programs.java', 'RelToSqlConverterTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml']"
99a0df108a9f72805afb6d87ec5b2c0ed258f1ec,"[CALCITE-5883] ROWS window aggregates ignore frames when there is no ORDER BY clause

Before this change, `SUM(x) OVER (ROWS 1 PRECEDING)` was
treated the same as `SUM(x) OVER (ROWS BETWEEN UNBOUNDED
PRECEDING AND UNBOUNDED FOLLOWING)`. This was wrong -
removing frames is correct for RANGE but not for ROWS.

This change also fixes a special case,
[CALCITE-6538] OVER (ROWS CURRENT ROW) should return a
window with one row, not all rows

In class RexWindowBound, add `isUnboundedPreceding()` and
`isUnboundedFollowing()` convenience methods.

Fix `RexWindow digest`, so that `OVER ()` is equivalent to
`OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)`
but not equivalent to `OVER (ROWS CURRENT ROW)`.

Add Quidem tests for OVER, checked against Postgres.

A few cosmetic changes, such as removing `assert x != null`
when x is a parameter not declared `@Nullable`, adding static
imports for `Objects.requireNonNull`, and
changing `size() = 0` to `isEmpty()`.

Close apache/calcite#3925",['4252e0ca2a7c57edf5ea8f13d4cf70fe0c2913c7'],False,"['EnumerableWindow.java', 'Window.java', 'RexBuilder.java', 'RexShuttle.java', 'RexWindow.java', 'RexWindowBound.java', 'SqlToRelConverter.java', 'RelWriterTest.java', 'RexProgramTest.java', 'SqlToRelConverterTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'winagg.iq', 'PigRelToSqlConverter.java', 'PigRelOpTest.java']"
787dfdb39c4bca91ec18ee5e223cb31260186c5a,[CALCITE-6543] Change the RelOptCostImpl toString method to be consistent with VolcanoCost,['a19bb8224fc54b35a4a2f0e5f594ce2e3544dfe9'],False,"['RelOptCost.java', 'RelOptCostImpl.java', 'VolcanoCost.java']"
dac001d8ce7199e84f1148ea7bb57bc2dd83ea91,[CALCITE-5613] Assert for number of args for metadata methods at CacheGeneratorUtil,['5c0127cdf3516094961e0cb0069e700dbed3af7d'],False,['CacheGeneratorUtil.java']
8771e3f94b2c4f132bfa51a0b93ddb7a11cd97bc,"[CALCITE-6555] RelBuilder.aggregateRex wrongly thinks aggregate functions of ""GROUP BY ()"" queries are NOT NULL

In RelBuilder, the aggregateRex method (added in CALCITE-5802)
wrongly thinks that aggregate functions in a `GROUP BY ()`
query are NOT NULL. Consider the query

  SELECT SUM(empno) AS s, COUNT(empno) AS c
  FROM emp
  GROUP BY ()

`SUM(empno)` should be nullable, even though `empno` has type
`SMALLINT NOT NULL`, because `GROUP BY ()` will return one row
even if `emp` has no rows, and therefore `SUM` will be
evaluated over the empty set. A RelBuilder test that attempts
to build an equivalent query gets the following error stack:

  java.lang.AssertionError: type mismatch:
  ref:
  SMALLINT NOT NULL
  input:
  SMALLINT

We add a test case for measure queries, because measures are
the only code path that uses `aggregateRex` at present.",['30304bb489bb9eea84e556bc059010354a49c46d'],False,"['RelBuilder.java', 'RelBuilderTest.java', 'measure.iq']"
b1308feff49c8b747b3bbb52e1519d334bc984ec,"[CALCITE-6552] Enable CheckerFramework in 'server' module

In [CALCITE-4199] we enabled CheckerFramework (via
annotations and CI jobs) in the 'core' and 'linq4j' modules;
this change further enables CheckerFramework in the 'server'
module, and fixes all violations.

There are also a large number of 'cosmetic' modifications to
improve code quality without changing behavior, including:
 * Replace `this.x = x; assert x != null;` with
   `this.x = requireNonNull(x);` in constructors
 * Replace `assert` in other code locations where it
   implements an invariant. We don't use `requireNonNull`
   because it throws `NullPointerException`; we would prefer
   to throw `AssertionError` or `IllegalStateException`
 * Replace `x.equals("""")` and `x.size() == 0` with `x.isEmpty()`
 * Make fields `final` where possible
 * Make private methods and inner classes `static` where possible
 * In class `Pair<K, V>` make the type variables `K` and `V`
   no longer nullable by default (you can make each of them
   nullable if you need)
 * Always import `Objects.requireNonNull`, `Integer.parseInt`,
   `Float.parseFloat`, `Double.parseDouble`, `Byte.parseByte`,
   `Short.parseShort`, `Boolean.parseBoolean`, `Long.parseLong`
   via static import, and change autostyle rules to enforce
   this automatically
 * Remove redundant 'throws' clauses
 * Add `@Nullable` annotations for method parameters and
   return values so that types are nullable only if they
   need to be; the goal is that you should not pass null or
   a nullable value as an argument that has non-nullable
   type, and after this change we are nearer to that goal

In Util, optimize methods `transform` and `transformIndexed`
for the case where list is empty and immutable.

Close apache/calcite#3939",['8771e3f94b2c4f132bfa51a0b93ddb7a11cd97bc'],False,"['main.yml', 'ArrowFilterEnumerator.java', 'ArrowTable.java', 'ArrowAdapterTest.java', 'BabelQuidemTest.java', 'build.gradle.kts', 'CassandraEnumerator.java', 'CassandraFilter.java', 'CassandraProject.java', 'CassandraSchema.java', 'CassandraSchemaFactory.java', 'CassandraSort.java', 'CassandraTable.java', 'CassandraToEnumerableConverter.java', 'CassandraExtension.java', 'Parser.jj', 'DataContexts.java', 'EnumUtils.java', 'EnumerableAsofJoin.java', 'EnumerableConvention.java', 'EnumerableInterpretable.java', 'EnumerableMergeJoin.java', 'EnumerableMergeJoinRule.java', 'EnumerableMinus.java', 'EnumerableTableModify.java', 'EnumerableTraitsUtils.java', 'EnumerableWindow.java', 'JavaRowFormat.java', 'RexImpTable.java', 'WinAggAddContextImpl.java', 'WinAggResultContextImpl.java', 'ReflectiveSchema.java', 'JdbcCatalogSchema.java', 'JdbcSchema.java', 'JdbcTableScan.java', 'JdbcToEnumerableConverter.java', 'CalciteSystemProperty.java', 'Lex.java', 'Bindables.java', 'Interpreter.java', 'JaninoRexCompiler.java', 'CalciteConnection.java', 'CalciteMetaImpl.java', 'JavaRecordType.java', 'Lattice.java', 'LatticeSpace.java', 'LatticeTable.java', 'MaterializationActor.java', 'MutableNode.java', 'ProfilerLatticeStatisticProvider.java', 'Step.java', 'JsonView.java', 'ModelHandler.java', 'AbstractRelOptPlanner.java', 'Contexts.java', 'RelCompositeTrait.java', 'RelOptCluster.java', 'RelOptLattice.java', 'RelOptMaterialization.java', 'RelOptPredicateList.java', 'RelOptQuery.java', 'RelOptRule.java', 'RelOptRuleOperand.java', 'RelOptSchema.java', 'RelOptUtil.java', 'RelRule.java', 'RelTraitSet.java', 'RexImplicationChecker.java', 'SubstitutionVisitor.java', 'HepRuleCall.java', 'InputExcludedRelWriter.java', 'NodeUpdateHelper.java', 'RuleMatchVisualizer.java', 'IterativeRuleDriver.java', 'RelSet.java', 'RelSubset.java', 'TopDownRuleDriver.java', 'VolcanoPlanner.java', 'CalciteCatalogReader.java', 'CalcitePrepareImpl.java', 'PlannerImpl.java', 'Prepare.java', 'AbstractRelNode.java', 'RelDistributions.java', 'RelFieldCollation.java', 'ConverterImpl.java', 'ConverterRule.java', 'Aggregate.java', 'AggregateCall.java', 'CorrelationId.java', 'EquiJoin.java', 'Exchange.java', 'Join.java', 'JoinInfo.java', 'Match.java', 'Project.java', 'RepeatUnion.java', 'Snapshot.java', 'Sort.java', 'SortExchange.java', 'Spool.java', 'TableFunctionScan.java', 'TableModify.java', 'TableScan.java', 'TableSpool.java', 'Uncollect.java', 'Values.java', 'RelDotWriter.java', 'RelJson.java', 'RelWriterImpl.java', 'RelXmlWriter.java', 'CompositeHintPredicate.java', 'HintStrategy.java', 'HintStrategyTable.java', 'Hintable.java', 'NodeTypeHintPredicate.java', 'RelHint.java', 'LogicalAsofJoin.java', 'LogicalFilter.java', 'LogicalJoin.java', 'LogicalWindow.java', 'JaninoRelMetadataProvider.java', 'ReflectiveRelMetadataProvider.java', 'RelMdCollation.java', 'RelMdColumnOrigins.java', 'RelMdDistribution.java', 'RelMdPercentageOriginalRows.java', 'RelMdPredicates.java', 'RelMdSelectivity.java', 'RelMdUniqueKeys.java', 'RelMdUtil.java', 'RelMetadataQuery.java', 'MutableRel.java', 'RelToSqlConverter.java', 'SqlImplementor.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateMergeRule.java', 'AggregateReduceFunctionsRule.java', 'CalcRelSplitter.java', 'FilterJoinRule.java', 'JoinAddRedundantSemiJoinRule.java', 'JoinPushTransitivePredicatesRule.java', 'JoinToMultiJoinRule.java', 'LoptJoinTree.java', 'LoptMultiJoin.java', 'LoptOptimizeJoinRule.java', 'LoptSemiJoinOptimizer.java', 'MultiJoinOptimizeBushyRule.java', 'ProjectTableScanRule.java', 'PruneEmptyRules.java', 'PushProjector.java', 'ReduceDecimalsRule.java', 'SortProjectTransposeRule.java', 'SortRemoveRedundantRule.java', 'SubQueryRemoveRule.java', 'ValuesReduceRule.java', 'RelDataTypeFactory.java', 'RelDataTypeFactoryImpl.java', 'RelDataTypeImpl.java', 'RelRecordType.java', 'RexBuilder.java', 'RexCall.java', 'RexCorrelVariable.java', 'RexLambda.java', 'RexLiteral.java', 'RexLocalRef.java', 'RexOver.java', 'RexProgramBuilder.java', 'RexShuttle.java', 'RexSimplify.java', 'RexUtil.java', 'RexVariable.java', 'RexWindow.java', 'RexWindowBounds.java', 'Automaton.java', 'AutomatonBuilder.java', 'BufferStyle.java', 'CalciteContextException.java', 'DeterministicAutomaton.java', 'Enumerables.java', 'HttpUtils.java', 'JsonFunctions.java', 'Matcher.java', 'Pattern.java', 'Resources.java', 'SocketFactoryImpl.java', 'SpatialTypeFunctions.java', 'SpatialTypeUtils.java', 'SqlFunctions.java', 'ModifiableViewTable.java', 'StarTable.java', 'SqlAccessType.java', 'SqlAggFunction.java', 'SqlBasicCall.java', 'SqlBasicTypeNameSpec.java', 'SqlBinaryStringLiteral.java', 'SqlCall.java', 'SqlCharStringLiteral.java', 'SqlCollectionTypeNameSpec.java', 'SqlDateLiteral.java', 'SqlDdl.java', 'SqlDescribeTable.java', 'SqlFilterOperator.java', 'SqlFunction.java', 'SqlHint.java', 'SqlIdentifier.java', 'SqlInsert.java', 'SqlIntervalLiteral.java', 'SqlIntervalQualifier.java', 'SqlJdbcDataTypeName.java', 'SqlLambda.java', 'SqlLiteral.java', 'SqlMatchRecognize.java', 'SqlNode.java', 'SqlNodeList.java', 'SqlNumericLiteral.java', 'SqlOperator.java', 'SqlPivot.java', 'SqlRowTypeNameSpec.java', 'SqlSelect.java', 'SqlSelectOperator.java', 'SqlSetOption.java', 'SqlSetSemanticsTableOperator.java', 'SqlSnapshot.java', 'SqlSpatialTypeOperatorTable.java', 'SqlTableRef.java', 'SqlTimeLiteral.java', 'SqlTimeTzLiteral.java', 'SqlTimestampLiteral.java', 'SqlTimestampTzLiteral.java', 'SqlTypeConstructorFunction.java', 'SqlUnpivot.java', 'SqlUpdate.java', 'SqlUtil.java', 'SqlWindow.java', 'SqlWithinDistinctOperator.java', 'SqlWithinGroupOperator.java', 'SqlAdvisor.java', 'SqlCreateForeignSchema.java', 'SqlCreateFunction.java', 'SqlCreateMaterializedView.java', 'SqlCreateSchema.java', 'SqlCreateTable.java', 'SqlCreateType.java', 'SqlCreateView.java', 'BigQuerySqlDialect.java', 'FireboltSqlDialect.java', 'PrestoSqlDialect.java', 'SqlAbstractGroupFunction.java', 'SqlBasicAggFunction.java', 'SqlDotOperator.java', 'SqlExtractFunction.java', 'SqlJsonArrayAggAggFunction.java', 'SqlJsonObjectAggAggFunction.java', 'SqlJsonQueryFunction.java', 'SqlJsonValueFunction.java', 'SqlLiteralChainOperator.java', 'SqlMapValueConstructor.java', 'SqlMultisetValueConstructor.java', 'SqlQuantifyOperator.java', 'SqlRollupOperator.java', 'SqlSpatialTypeFunctions.java', 'SqlParserPos.java', 'SqlPrettyWriter.java', 'AbstractSqlType.java', 'BasicSqlType.java', 'ComparableOperandTypeChecker.java', 'ExplicitOperandTypeChecker.java', 'ExplicitReturnTypeInference.java', 'FunctionSqlType.java', 'IntervalSqlType.java', 'MapSqlType.java', 'MultisetSqlType.java', 'OperandMetadataImpl.java', 'OperandTypes.java', 'ReturnTypes.java', 'SqlTypeCoercionRule.java', 'SqlTypeMappingRule.java', 'SqlTypeTransformCascade.java', 'SqlTypeUtil.java', 'TableFunctionReturnTypeInference.java', 'IdPair.java', 'SqlBuilder.java', 'SqlShuttle.java', 'SqlString.java', 'AggVisitor.java', 'CollectScope.java', 'DelegatingScope.java', 'FieldNamespace.java', 'IdentifierNamespace.java', 'SelectScope.java', 'SqlIdentifierMoniker.java', 'SqlMonikerImpl.java', 'SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'TableNamespace.java', 'TableScope.java', 'UnnestNamespace.java', 'AbstractTypeCoercion.java', 'AggConverter.java', 'RelDecorrelator.java', 'RelFieldTrimmer.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'SubQueryConverter.java', 'Frameworks.java', 'Hoist.java', 'PigRelBuilder.java', 'Programs.java', 'RelBuilder.java', 'Benchmark.java', 'BitSets.java', 'BitString.java', 'CancelFlag.java', 'DateString.java', 'EquivalenceSet.java', 'Filterator.java', 'ImmutableNullableSet.java', 'IntegerIntervalSet.java', 'NlsString.java', 'Pair.java', 'PartiallyOrderedSet.java', 'ReflectUtil.java', 'SerializableCharset.java', 'SourceStringReader.java', 'Sources.java', 'StackWriter.java', 'TimeString.java', 'UnmodifiableArrayList.java', 'Util.java', 'FormatPattern.java', 'NumberFormatPattern.java', 'TimeZoneHoursFormatPattern.java', 'TimeZoneMinutesFormatPattern.java', 'YearWithCommasFormatPattern.java', 'DefaultEdge.java', 'JaninoCompiler.java', 'JavaCompilerArgs.java', 'CalciteLogger.java', 'viz-template.html', 'CalciteResource.properties', 'CustomMaterializedViewRecognitionRuleTest.java', 'CollationConversionTest.java', 'PlannerTests.java', 'VolcanoPlannerTest.java', 'LookupOperatorOverloadsTest.java', 'ProfilerTest.java', 'EnumerableLimitRuleTest.java', 'SortRemoveRuleTest.java', 'RexExecutorTest.java', 'RexProgramTest.java', 'RexProgramTestBase.java', 'EnumerablesTest.java', 'ExtensionSqlCreateTable.java', 'LexCaseSensitiveTest.java', 'LexEscapeTest.java', 'RelDecorrelatorTest.java', 'CollectionTypeTest.java', 'ExceptionMessageTest.java', 'HepPlannerTest.java', 'InterpreterTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LargeGeneratedJoinTest.java', 'LatticeTest.java', 'LinqFrontJdbcBackTest.java', 'LintTest.java', 'MaterializationTest.java', 'MaterializedViewTester.java', 'ModelTest.java', 'MultiJdbcSchemaJoinTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'RuleMatchVisualizerTest.java', 'SqlAdvisorJdbcTest.java', 'SqlHintsConverterTest.java', 'SqlValidatorTest.java', 'TimeFrameTest.java', 'ConcurrentTestCommandExecutor.java', 'ConcurrentTestCommandGenerator.java', 'ConcurrentTestCommandScript.java', 'ConcurrentTestPluginCommand.java', 'ConcurrentTestTimedCommandGenerator.java', 'SamplePlugin.java', 'PartiallyOrderedSetTest.java', 'BinaryOperatorConversion.java', 'CeilOperatorConversion.java', 'DefaultDimensionSpec.java', 'DirectOperatorConversion.java', 'DruidConnectionImpl.java', 'DruidDateTimeUtils.java', 'DruidExpressions.java', 'DruidJsonFilter.java', 'DruidQuery.java', 'DruidRules.java', 'DruidSchema.java', 'DruidSchemaFactory.java', 'DruidSqlCastConverter.java', 'DruidTable.java', 'DruidTableFactory.java', 'DruidType.java', 'ExtractOperatorConversion.java', 'ExtractionDimensionSpec.java', 'Granularities.java', 'NaryOperatorConverter.java', 'UnaryPrefixOperatorConversion.java', 'UnarySuffixOperatorConversion.java', 'VirtualColumn.java', 'ElasticsearchAggregate.java', 'ElasticsearchEnumerators.java', 'ElasticsearchFilter.java', 'ElasticsearchJson.java', 'ElasticsearchMapping.java', 'ElasticsearchProject.java', 'ElasticsearchRel.java', 'ElasticsearchRules.java', 'ElasticsearchSchema.java', 'ElasticsearchSchemaFactory.java', 'ElasticsearchSearchResult.java', 'ElasticsearchSort.java', 'ElasticsearchTable.java', 'ElasticsearchTableScan.java', 'ElasticsearchToEnumerableConverter.java', 'ElasticsearchTransport.java', 'ElasticsearchVersion.java', 'PredicateAnalyzer.java', 'QueryBuilders.java', 'Scrolling.java', 'ElasticSearchAdapterTest.java', 'EmbeddedElasticsearchNode.java', 'EmbeddedElasticsearchPolicy.java', 'MatchTest.java', 'ElasticsearchChecker.java', 'CsvFilterableTable.java', 'CsvProjectTableScanRule.java', 'CsvScannableTable.java', 'CsvSchema.java', 'CsvStreamScannableTable.java', 'CsvTableScan.java', 'CsvTranslatableTable.java', 'CsvTest.java', 'ExampleFunctionTest.java', 'CsvEnumerator.java', 'CsvStreamReader.java', 'CsvTable.java', 'CsvTableScan.java', 'CsvTranslatableTable.java', 'FileEnumerator.java', 'FileFieldType.java', 'FileReader.java', 'FileReaderException.java', 'FileRowConverter.java', 'FileSchema.java', 'FileTable.java', 'FileTableScan.java', 'FileAdapterTest.java', 'FileAdapterTests.java', 'FileReaderTest.java', 'GeodeAggregate.java', 'GeodeEnumerator.java', 'GeodeFilter.java', 'GeodeProject.java', 'GeodeRules.java', 'GeodeSchema.java', 'GeodeSort.java', 'GeodeTable.java', 'GeodeTableScan.java', 'GeodeToEnumerableConverter.java', 'GeodeSimpleEnumerator.java', 'GeodeSimpleScannableTable.java', 'GeodeSimpleSchema.java', 'GeodeUtils.java', 'GeodeEmbeddedPolicy.java', 'JsonLoader.java', 'IndexCondition.java', 'InnodbEnumerator.java', 'InnodbFilter.java', 'InnodbFilterTranslator.java', 'InnodbProject.java', 'InnodbRules.java', 'InnodbSort.java', 'InnodbTable.java', 'InnodbTableScan.java', 'InnodbToEnumerableConverter.java', 'InnodbAdapterDataTypesTest.java', 'InnodbAdapterTest.java', 'KafkaAdapterTest.java', 'DefaultEnumerable.java', 'EnumerableDefaults.java', 'ExtendedEnumerable.java', 'GroupingImpl.java', 'Linq4j.java', 'LookupImpl.java', 'AbstractNode.java', 'ArrayLengthRecordField.java', 'BinaryExpression.java', 'BlockBuilder.java', 'BlockStatement.java', 'ClassDeclaration.java', 'ConditionalExpression.java', 'ConditionalStatement.java', 'ConstructorDeclaration.java', 'DeclarationStatement.java', 'Expression.java', 'Expressions.java', 'FieldDeclaration.java', 'ForEachStatement.java', 'ForStatement.java', 'FunctionExpression.java', 'GotoStatement.java', 'IndexExpression.java', 'MemberExpression.java', 'MethodCallExpression.java', 'MethodDeclaration.java', 'ParameterExpression.java', 'ReflectedPseudoField.java', 'TernaryExpression.java', 'TryStatement.java', 'TypeBinaryExpression.java', 'Types.java', 'UnaryExpression.java', 'WhileStatement.java', 'BlockBuilderTest.java', 'ExpressionTest.java', 'JoinPreserveOrderTest.java', 'LimitSortTest.java', 'Linq4jTest.java', 'MongoAggregate.java', 'MongoEnumerator.java', 'MongoRel.java', 'MongoSchema.java', 'MongoTableScan.java', 'MongoAdapterTest.java', 'MongoDatabasePolicy.java', 'PigTableScan.java', 'AbstractPigTest.java', 'PigAdapterTest.java', 'PigRelBuilderStyleTest.java', 'Ast.java', 'DynamicTupleRecordType.java', 'PigRelBuilder.java', 'PigRelExVisitor.java', 'PigRelOpInnerVisitor.java', 'PigRelOpVisitor.java', 'FilesTableFunction.java', 'GitCommitsTableFunction.java', 'Processes.java', 'PsTableFunction.java', 'SqlShell.java', 'VmstatTableFunction.java', 'TpcdsSchema.java', 'TpchSchema.java', 'CalciteConnectionProvider.java', 'SqlLogicTests.java', 'RedisDataProcess.java', 'RedisEnumerator.java', 'RedisJedisManager.java', 'RedisSchema.java', 'RedisSchemaFactory.java', 'RedisAdapterCaseBase.java', 'build.gradle.kts', 'AbstractModifiableTable.java', 'MutableArrayTable.java', 'ServerDdlExecutor.java', 'default.html', 'EnumerableToSparkConverter.java', 'HttpServer.java', 'JdbcToSparkConverter.java', 'SplunkDriver.java', 'SplunkQuery.java', 'SplunkTable.java', 'SplunkTableScan.java', 'SplunkConnection.java', 'SplunkConnectionImpl.java', 'Connection.astub', 'SqlParserTest.java', 'AbstractSqlTester.java', 'ResultCheckers.java', 'SqlTester.java', 'SqlTests.java', 'AbstractModifiableTable.java', 'CalciteAssert.java', 'ConnectionSpec.java', 'DiffRepository.java', 'DiffTestCase.java', 'MockDdlExecutor.java', 'MockRelOptPlanner.java', 'SqlOperatorTest.java', 'MockCatalogReader.java', 'BookstoreSchema.java', 'CatchallSchema.java', 'FoodmartSchema.java', 'Department.java', 'DepartmentPlus.java', 'Employee.java', 'Event.java', 'NullableTest.java', 'TpchSchema.java', 'Smalls.java', 'TestUtil.java', 'ParserBenchmark.java', 'RelNodeConversionBenchmark.java', 'StatementTest.java']"
ded0651582b736a148bb76593bc98a3d1dbf57b5,"[CALCITE-6559] Query with measure that applies AVG to SMALLINT throws AssertionError ""Cannot add expression of different type to set""

When a query has a measure that is AVG applied to a SMALLINT or TINYINT
column, we get the following assertion failure:

  java.lang.AssertionError: Cannot add expression of different type to set:
  set type is RecordType(VARCHAR(9) JOB, MEASURE<SMALLINT NOT NULL> NOT NULL $f1, SMALLINT $f0) NOT NULL
  expression type is RecordType(VARCHAR(9) JOB, MEASURE<SMALLINT NOT NULL> NOT NULL $f1, SMALLINT NOT NULL $f0) NOT NULL

The problem is that a cast is added internally to the result of
SUM / COUNT, but this cast prevents a cast to nullable for the
null-generating side of the outer join. (The outer join comes from
the expansion of the measure as a correlated scalar subquery.)

Add method RexBuilder.makeNullable, sharing implementation with
existing method makeNotNull.

Add tests to scalar.iq and lateral.iq for some tricky query patterns
that already work.

Close apache/calcite#3950",['b2224a8b9f246b52b01ab24a591562b69b22fca7'],False,"['RexBuilder.java', 'RelDecorrelator.java', 'lateral.iq', 'measure.iq', 'scalar.iq']"
67c9cb9270a24288f1b8cf82e2c92b2ede986684,"[CALCITE-6557] AggregateMergeRule throws 'type mismatch' AssertionError

The fix was to use the type of the upper aggregate call, rather than
the lower.",['ded0651582b736a148bb76593bc98a3d1dbf57b5'],False,"['SqlSplittableAggFunction.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'agg.iq']"
890f9adb4b9fa99e4cca144997c7392acc52389b,"[CALCITE-3779] Implement BITAND, BITOR, BITXOR scalar functions

* All three functions accept either a pair of Integer or Binary values as arguments
* Binary arguments must be of the same length
* Returns NULL if any argument is NULL
* If all arguments are NULL, throw an error
* Returns a value of the same type as the first argument if both arguments are not null",['67405c3892bcd2ccb03d14fff20471f4d6cd21a1'],False,"['RexImpTable.java', 'CalciteResource.java', 'SqlFunctions.java', 'SqlKind.java', 'SqlStdOperatorTable.java', 'OperandTypes.java', 'ReturnTypes.java', 'CalciteResource.properties', 'reference.md', 'SqlOperatorTest.java']"
36b8a99d89600866c395b05144cc6fce560f8665,"[CALCITE-6343] Ensure that AS operator doesn't change return type of measures

Previously, adding a column alias (AS) would make a measure into
a non-measure, because of the type inference rule used by the AS
operator.

Since the PR was originally created, this issue has already been
fixed in the rework of [CALCITE-5689], but this commit adds some tests.

Close apache/calcite#3741",['682c28568f004660469ebbc975d540764c0bce82'],False,"['RelDataTypeSystemTest.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
fc792668047014beb39a012746bb94acde0d98e5,"[CALCITE-6576] In SET clause of UPDATE statement, allow column identifiers to be prefixed with table alias

For example, in the following query 'e' is a table alias and
'e.deptno' is the column name prefixed with the table alias.
Previously only 'deptno' was allowed.

  UPDATE emp AS e
    SET e.deptno = 20;

A follow-up case, [CALCITE-6584], will implement this in the
validator.

Signed-off-by: Niels Pardon <par@zurich.ibm.com>
Close apache/calcite#3959",['36b8a99d89600866c395b05144cc6fce560f8665'],False,"['Parser.jj', 'SqlParserTest.java']"
a00d565456b43a245602aff5fd399a7f8794a83d,"[CALCITE-6550] Improve SQL function overloading

This change improves how RexImpTable handles collisions in
the map containing scalar functions if two operators are so
similar that `equals` and `hashCode` regard them as equal.

Rules are now as follows:
 * If only one implementor is found for an operator key,
   return that implementor
 * If there are multiple implementors for an operator key,
   look for one with the exact same operator
 * An operator key is the operator name and kind

Following this change, we were able to remove tech debt:
convert some trivial anonymous subclasses in
SqlLibraryOperators back to SqlBasicFunction.create, and
make SqlBasicFunction's constructor private again.

Close apache/calcite#3954",['24885d71e99866c0f6bf9312a1aed081030db718'],False,"['RexImpTable.java', 'SqlBasicFunction.java', 'SqlLibraryOperators.java']"
963f898b2c1355f5ee82f52d546dbd1e5235eae4,"[CALCITE-6580] Remove Locale.setDefault

Remove usage of Locale.setDefault in tests where possible.

Add Locale.setDefault to forbiddenApis, add method
Unsafe.setDefaultLocale(Locale), and change the remaining
uses of Locale.setDefault to go via Unsafe.

The implementation of the Postgres TO_CHAR function (and related functions) now get
Locale and TimeZone from DataContext.

Rework unit tests for PostgresqlDateTimeFormatter to be less
repetitive, more readable.

Minimize usage of ZoneId.systemDefault().

Close apache/calcite#3954",['a00d565456b43a245602aff5fd399a7f8794a83d'],False,"['BabelQuidemTest.java', 'RexImpTable.java', 'SqlFunctions.java', 'BuiltInMethod.java', 'FormatPattern.java', 'NumberFormatPattern.java', 'PostgresqlDateTimeFormatter.java', 'StringFormatPattern.java', 'PostgresqlDateTimeFormatterTest.java', 'signatures.txt', 'SqlOperatorTest.java', 'Unsafe.java', 'WithLocaleExtension.kt']"
204ae1fa2c13bf6c9a4fb472a2c9d2a26da63769,"[CALCITE-6581] Incorrect INTERVAL math for WEEK and QUARTER

WEEK and QUARTER intervals were incorrectly treated like HOUR and MONTH
respectively. This patch fixes the handling, and adds unit tests.

This patch also renames the two ""fillIntervalValueArray"" methods to
""fillDayIntervalValueArray"" (for INTERVAL_DAY_TIME type intervals) and
""fillYearMonthIntervalValueArray"" (for INTERVAL_YEAR_MONTH type intervals)
to make it more clear which one is which.",['7481b85049193a0342a4da1774d0d750752b5ac9'],False,"['SqlIntervalQualifier.java', 'SqlParserUtilTest.java', 'misc.iq']"
98b252b36c84c4715c5bbe8c8a65355c103b3f9e,"[CALCITE-6071] RexCall should carry source position information for runtime error reporting

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['204ae1fa2c13bf6c9a4fb472a2c9d2a26da63769'],False,"['RexImpTable.java', 'SubstitutionVisitor.java', 'AggregateCall.java', 'Window.java', 'SqlImplementor.java', 'AggregateCaseToFilterRule.java', 'AggregateExpandDistinctAggregatesRule.java', 'AggregateExpandWithinDistinctRule.java', 'AggregateFilterTransposeRule.java', 'AggregateReduceFunctionsRule.java', 'AggregateRemoveRule.java', 'AggregateStarTableRule.java', 'AggregateUnionTransposeRule.java', 'ProjectAggregateMergeRule.java', 'ReduceDecimalsRule.java', 'MaterializedViewAggregateRule.java', 'RexBuilder.java', 'RexCall.java', 'RexCopier.java', 'RexSimplify.java', 'RexUtil.java', 'SqlSplittableAggFunction.java', 'AggConverter.java', 'RelDecorrelator.java', 'RelStructuredTypeFlattener.java', 'SqlToRelConverter.java', 'StandardConvertletTable.java', 'RelBuilder.java', 'NormalizationTrimFieldTest.java', 'RexShrinker.java']"
e314fcc8a8d25948b724f26ba57aedb3f288a98d,"[CALCITE-6587] Support Java 23 and Guava 33.3.0; upgrade Hadoop from 2.7.5 to 2.10.2

Revise UtilTest.testPosixTimeZone() becauase format of time
zones have changed in JDK 23.

Disable some tests due to this bug:
 * Disable CalciteRemoteDriverTest,
   RemotePreparedStatementParametersTest on JDK 23 until
   [CALCITE-6588] is fixed in Avatica; we plan to fix in
   Avatica 1.26;
 * Disable Pig and Spark tests on JDK 23 until
   [HADOOP-19212] is fixed.

In GitHub workflow (CI):
 * Test against JDK 23 (replacing previous JDK 22 test);
 * Refactor so that oldest, latest and default Guava versions
   are defined in one place;
 * Clean up descriptions of CI jobs.

Add `class Version`, to make it easier to parse and compare
version strings.

Close apache/calcite#3971",['98b252b36c84c4715c5bbe8c8a65355c103b3f9e'],False,"['main.yml', 'CalciteRemoteDriverTest.java', 'UtilTest.java', 'PredicateAnalyzer.java', 'gradle.properties', 'PigRelTestBase.java', 'RemotePreparedStatementParametersTest.java', 'history.md', 'SparkAdapterTest.java', 'TestUtil.java', 'Version.java', 'TestUtilTest.java']"
8ffcc2acd6bc865fb8a98d5ab1c96e65e5b9f1d3,"[CALCITE-6226] Wrong ISOWEEK and no ISOYEAR on BigQuery FORMAT_DATE

The ISOWEEK format function was not setting the minimalDaysInFirstWeek
to 4.

To avoid having to set the calendar week definition fields in each
format function, a new calendar instance configured with the iso8601
settings was added.

The format elements for the ISOYEAR with the century (%G) and without
it (%g) were added.

Also, the weekday with Monday as first day of week (%u) was fixed.",['3cb9fc612a9d18db162357824fd351a2f8801a31'],False,"['FormatElementEnum.java', 'FormatModels.java', 'FormatElementEnumTest.java', 'SqlOperatorTest.java']"
4ab8d8058197a6515a016fa91009754d5e2205e1,"[CALCITE-6584] Validate prefixed column identifiers in SET clause of UPDATE statement

Signed-off-by: Niels Pardon <par@zurich.ibm.com>

Close apache/calcite#3972",['d0dae9bae0839c366344cdb4cc96b327aa058949'],False,"['SqlValidatorImpl.java', 'SqlValidatorUtil.java', 'SqlValidatorTest.java']"
a8802c721a2805159d166e45044c00364d1cb6c3,"[CALCITE-6593] NPE when outer joining tables with many fields and unmatching rows

EnumUtils:
- Split the code paths of compact code and normal code;
- Keep the normal code path as is and change the compact code path:
  - Generate a null check if the row might be null;
  - Add the early break in case of semi/anti joins;
  - Remove the ""optimization"" of generating an array of a specific
  type if all output fields are of the same type;

JavaRowType:
- Make the copy method abstract and implement a specific copy for
every JavaRowType;

Also, add a new system property to determine the threshold that triggers
compact code generation.",['ed18e58d89160bf90db087362737a82980eea7a0'],False,"['EnumUtils.java', 'JavaRowFormat.java', 'CalciteSystemProperty.java', 'BuiltInMethod.java', 'LargeGeneratedJoinTest.java']"
9985b6af156d41fc4a986a9aadbf7f8227981388,"Refactor: Migrate from assertEquals to assertThat

We prefer the Hamcrest style (assertThat and Matcher) to the
Junit Jupiter (Assertions.assertEquals and assertTrue).

Convert
* assertEquals(y, x) to assertThat(x, is(y))
* assertThat(x.toString(), is(y)) to assertThat(x, hasString(y))
* assertThat(x.length, is(y)) to assertThat(x, arrayWithSize(y))
* assertTrue(x.equals(y)) to assertThat(x, is(y))
* assertTrue(x instanceof Y) to assertThat(x, instanceOf(Y.class))
* assertThat(x, is(Arrays.asList(ys))) to assertThat(x, isListOf(ys))
* assertTrue(x == null) to assertThat(x, nullValue())",['a8802c721a2805159d166e45044c00364d1cb6c3'],False,"['ArrowAdapterTest.java', 'build.gradle.kts', 'ArrayTableTest.java', 'EnumerableWindowTest.java', 'PhysTypeTest.java', 'BindableWindowTest.java', 'CalciteRemoteDriverTest.java', 'JavaTypeFactoryTest.java', 'LatticeSuggesterTest.java', 'RelOptUtilTest.java', 'RelTraitTest.java', 'CollationConversionTest.java', 'ComboRuleTest.java', 'MultipleTraitConversionTest.java', 'TraitConversionTest.java', 'VolcanoPlannerTest.java', 'VolcanoPlannerTraitTest.java', 'LookupOperatorOverloadsTest.java', 'LogicalWindowTest.java', 'RelMdUtilTest.java', 'RelMetadataHandlerGeneratorUtilTest.java', 'RexBuilderTest.java', 'RexExecutorTest.java', 'RexProgramTest.java', 'RexProgramTestBase.java', 'BinarySearchTest.java', 'SpatialTypeUtilsTest.java', 'SqlAdvisorTest.java', 'SqlTypeNameTest.java', 'RelDataTypeSystemTest.java', 'SqlTypeUtilTest.java', 'RelFieldTrimmerTest.java', 'FilteratorTest.java', 'HepPlannerTest.java', 'InduceGroupingTypeTest.java', 'JdbcFrontJdbcBackTest.java', 'JdbcFrontLinqBackTest.java', 'JdbcTest.java', 'LargeGeneratedJoinTest.java', 'LatticeTest.java', 'MaterializedViewSubstitutionVisitorTest.java', 'ModelTest.java', 'MutableRelTest.java', 'ReflectiveSchemaTest.java', 'RelBuilderTest.java', 'RelMetadataTest.java', 'RelOptRulesTest.java', 'ScannableTableTest.java', 'SqlFunctionsTest.java', 'SqlJsonFunctionsTest.java', 'SqlValidatorTest.java', 'RexProgramFuzzyTest.java', 'FrameworksTest.java', 'PlannerTest.java', 'BitSetsTest.java', 'ChunkListTest.java', 'FormatModelTest.java', 'ImmutableBitSetTest.java', 'PairListTest.java', 'PartiallyOrderedSetTest.java', 'PermutationTestCase.java', 'ReflectVisitorTest.java', 'SourceTest.java', 'UtilTest.java', 'PostgresqlDateTimeFormatterTest.java', 'MappingTest.java', 'ElasticsearchJsonTest.java', 'ElasticsearchVersionTest.java', 'Projection2Test.java', 'QueryBuildersTest.java', 'ElasticsearchChecker.java', 'CsvTest.java', 'CsvEnumeratorTest.java', 'FileAdapterTest.java', 'FileAdapterTests.java', 'FileReaderTest.java', 'GeodeAssertions.java', 'FunctionTest.java', 'BlockBuilderTest.java', 'ExpressionTest.java', 'InlinerTest.java', 'LimitSortTest.java', 'Linq4jTest.java', 'LookupImplTest.java', 'OptimizerTest.java', 'PrimitiveTest.java', 'TypeTest.java', 'MongoAdapterTest.java', 'PigAdapterTest.java', 'PigRelBuilderStyleTest.java', 'OsAdapterTest.java', 'ServerTest.java', 'SqlParserTest.java', 'AbstractSqlTester.java', 'ResultCheckers.java', 'CalciteAssert.java', 'DiffRepository.java', 'DiffTestCase.java', 'Matchers.java', 'RelMetadataFixture.java', 'SqlOperatorFixtureImpl.java', 'SqlOperatorTest.java', 'TestUtilTest.java']"
a4a27e3a48db7451cb9d95eda3883c111b638f26,"[CALCITE-6560] Allow types with negative scale

In RelDataTypeSystem, add methods getMinScale(SqlTypeName)
and getDefaultScale(SqlTypeName), deprecating the SqlTypeName
methods getMinScale(), getDefaultScale(), getMinPrecision().

Change parser to allow negative scale;

Move class CustomRelDataTypeSystem to testkit, and rename it
to CustomTypeSystems.

Close apache/calcite#3945",['9985b6af156d41fc4a986a9aadbf7f8227981388'],False,"['Parser.jj', 'CalciteMetaImpl.java', 'DelegatingTypeSystem.java', 'RelDataTypeSystem.java', 'RelDataTypeSystemImpl.java', 'RexBuilder.java', 'CalciteResource.java', 'SqlBasicTypeNameSpec.java', 'SqlIntervalQualifier.java', 'SqlTypeFactoryImpl.java', 'SqlTypeName.java', 'SqlTypeUtil.java', 'SqlValidatorImpl.java', 'CalciteResource.properties', 'RexBuilderTest.java', 'RelDataTypeSystemTest.java', 'CoreQuidemTest.java', 'CustomRelDataTypeSystem.java', 'SqlValidatorTest.java', 'cast.iq', 'Primitive.java', 'SqlParserTest.java', 'CustomTypeSystems.java', 'SqlOperatorTest.java']"
60e0a3f441a009e55a36cac192253a436bec3f6d,"[CALCITE-6585] In the Postgres TO_CHAR function, improve caching

* Refactored code to separate parsing a date/time format and applying it
* A parsed date/time format can now be reused
* Fixed up some minor issues with when to space pad day or month names
* Removed usage of ZoneOffset.get()
* Reworked to no longer use static methods for TO_CHAR and TO_TIMESTAMP
* ToCharPgImplementor and ToTimestampPgImplementor now use a a new instance of DateFormatFunctionPg
* Moved the PostgreSQL date/time formatting and parsing methods to their own class
* Changed how the ZoneId of UTC is obtained
* Added some tests with format reuse

Close apache/calcite#3978",['a4a27e3a48db7451cb9d95eda3883c111b638f26'],False,"['postgresql.iq', 'RexImpTable.java', 'SqlFunctions.java', 'BuiltInMethod.java', 'CompiledDateTimeFormat.java', 'DateStringFormatPattern.java', 'EnumStringFormatPattern.java', 'FormatPattern.java', 'NumberFormatPattern.java', 'PatternModifier.java', 'PostgresqlDateTimeFormatter.java', 'StringFormatPattern.java', 'AmPmFormatPattern.java', 'BcAdFormatPattern.java', 'DayOfWeekFormatPattern.java', 'FormatPattern.java', 'MonthFormatPattern.java', 'NumberFormatPattern.java', 'RomanNumeralsFormatPattern.java', 'TimeZoneFormatPattern.java', 'TimeZoneHoursFormatPattern.java', 'TimeZoneMinutesFormatPattern.java', 'TimeZoneOffsetFormatPattern.java', 'YearWithCommasFormatPattern.java', 'AmPmCompiledPattern.java', 'BcAdCompiledPattern.java', 'CompiledItem.java', 'CompiledPattern.java', 'DayOfWeekCompiledPattern.java', 'LiteralCompiledItem.java', 'MonthCompiledPattern.java', 'NumberCompiledPattern.java', 'RomanNumeralsCompiledPattern.java', 'TimeZoneCompiledPattern.java', 'TimeZoneHoursCompiledPattern.java', 'TimeZoneMinutesCompiledPattern.java', 'TimeZoneOffsetCompiledPattern.java', 'YearWithCommasCompiledPattern.java', 'package-info.java', 'package-info.java', 'PostgresqlDateTimeFormatterTest.java', 'SqlOperatorTest.java']"
5091b08936fef06fcf796cf97ffb9f9e7a87756a,"[CALCITE-6609] Remove redundant warning suppression for Guava's Beta and Unstable APIs

The suppressions were originally added to by-pass errorprone errors from the use of Guava's Beta APIs. They are no longer necessary since in the latest Guava versions the APIs that we use are stable.

Close apache/calcite#3992",['1af49e4404bb75c9105f1157a1c3fbb7e68770fe'],False,"['RelTraitDef.java', 'RelJson.java', 'SqlImplementor.java', 'DateRangeRules.java', 'RelDataTypeFactoryImpl.java', 'RexAnalyzer.java', 'RexBuilder.java', 'RexInterpreter.java', 'RexSimplify.java', 'RexUtil.java', 'SqlUtil.java', 'SqlToRelConverter.java', 'RangeSets.java', 'Sarg.java', 'RexProgramTest.java', 'RexFuzzer.java', 'RangeSetTest.java', 'DruidDateTimeUtils.java', 'DruidRules.java', 'PredicateAnalyzer.java', 'Matchers.java', 'QuidemTest.java']"
78e873d39c0364f9f36055b9cbe0600dfad49c71,"Revise fix for [CALCITE-6587] Support Java 23 and Guava 33.3.0

Add '-Djava.security.manager=allow' in Gradle and re-enable
tests under JDK 23. (Tests will fail if people run them via
Junit.)",['d59871d49cba28096b698efda80957ecc9e8c4ab'],False,"['build.gradle.kts', 'CalciteRemoteDriverTest.java', 'PigRelTestBase.java', 'RemotePreparedStatementParametersTest.java', 'SparkAdapterTest.java']"
e5e7faeff5985bc1b2342144b2bd31ca8ea84d3a,"[CALCITE-6582] Release Calcite 1.38.0

Add release notes. In the release notes for previous releases,
change whitespace and formatting for consistency among
releases, standardize on 'Postgres' rather than 'PostgreSQL',
and move the 'Compatability' paragraph before the 'Breaking
changes' section.

Add users' aliases to .mailmap, so that the contributors list
in the release notes contains people's real name.

Fix a typo in FileReaderTest.

Release candidate #1 introduced

  [CALCITE-6616] ClassNotFoundException:
  java.util.SequencedCollection at RelBuilder$Frame init

The cause was compiling the release candidate using JDK 21,
which caused the `interface SequencedCollection`, introduced
in JDK 21, to be used in resolving methods. The fix (in
release candidate #2) is to revert to JDK 8 for the release
build (and revert the instructions in howto.md). We suspect
that building with building with JDK 11 or 17 would also work.

Revise template vote email. Fix the tag URL, add an end time
for the vote, describe how to use 'code name (role)' vote
format, sign using release manager's name.

Close apache/calcite#3979",['a7c3d166b3d6ef614f23320ecd00d855ced1f302'],False,"['.mailmap', 'README', 'FileReaderTest.java', 'build.gradle.kts', 'history.md', 'howto.md']"
780876e6d1a981a2d03ee031822751cbafac8783,Chore: Fix STDDEV inline comments,['659ea980b077ed6721debc27f19eedaa9616e0ab'],False,['AggregateReduceFunctionsRule.java']
bbdf14d72392e2cbc61268b9ba8faa7b8778eb57,"[CALCITE-6633] Add CEILING to MSSQL dialect

Indentation and minor changes.

[CALCITE-6633] Add CEILING to MSSQL dialect

Add Jira link to test.

[CALCITE-6633] Add CEILING to MSSQL dialect

Add CEILING to MSSQL dialect",['e6de9b9c66c33e61f8301d6f7233042ce0dc038e'],False,"['MssqlSqlDialect.java', 'RelToSqlConverterTest.java']"
0c679825462685bd7a35a6678c917fb3d7cdbb27,"[CALCITE-6639] Optimization that pulls up predicates causes ASOF JOIN validation failure

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['72963da2e76e7961bec5aa19aa9bdfdd99c33a05'],False,"['RelMdPredicates.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
5b4f32aee52c33d40669314b137ace36f13f9e85,"[CALCITE-6641] Compiling programs with ASOF joins can report obscure errors

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['25247c1360c73e9b4e70b96417a07e4b62ac954e'],False,"['SqlValidatorImpl.java', 'SqlValidatorTest.java', 'asof.iq']"
add1f8b8dac86bfbd8a9de5169baa97347119256,[CALCITE-6642] AggregateUnionTransposeRule should account for changes in nullability of pushed down aggregates,['5b4f32aee52c33d40669314b137ace36f13f9e85'],False,"['AggregateUnionTransposeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
4906ef2c6176c68eb7a090ecf8ebc43466457837,"[CALCITE-4590] Incorrect query result with fixed-length string

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['2e99d5118efbba21c87e7da08b8359ce296e138d'],False,"['RexBuilder.java', 'NlsString.java', 'JdbcTest.java']"
caacc9f95bc583db05f44b53d27d5083ef3a371a,"[CALCITE-6676] DiffRepository does not update log (_actual) file when assertion fails

Use JUnit instead of Hamcrest assert methods since the latter are not using/throwing the `AssertionFailedError` so we never enter the catch block that updates the log file.",['50d1a26b56c95ca5c5ed90e90deb93db0d6db94b'],False,"['DiffRepository.java', 'DiffRepositoryTest.java', 'DiffRepositoryTest.xml']"
1294b4e8cc3dcee8db8dd73ad93315299d561067,[CALCITE-4512] GROUP BY expression with argument name same with SELECT field and alias causes validation error,['caacc9f95bc583db05f44b53d27d5083ef3a371a'],False,"['SqlValidatorImpl.java', 'SqlToRelConverterTest.java', 'SqlValidatorTest.java', 'SqlToRelConverterTest.xml', 'misc.iq']"
2176dfc27b03858e4874b01d2203655e68536d3b,[CALCITE-6682] Framing unsupported error message lacks LAG/LEAD functions,['1294b4e8cc3dcee8db8dd73ad93315299d561067'],False,"['CalciteResource.java', 'CalciteResource.properties', 'SqlValidatorTest.java']"
214345eacf325f18844c456090fcaf75f92c9ee5,Introduced bug guard for [CALCITE-6328],['56f47eef5c12098d92f644ee917da2423ee3627e'],False,"['SortRemoveConstantKeysRule.java', 'Bug.java']"
b6351741809a5c06cbf7cb5f0e98602b0bd9316f,"[CALCITE-6698] Add Javadoc to PartiallyOrderedSet#getNonChildren and getNonParents to clarify their behavior

1. Add Javadoc to clarify the results of each method and avoid potential misinterpretation of their name.
2. Add test cases with explicit tests for the aforementioned methods.

Close apache/calcite#4054",['f2ec11fe7e23ecf2db903bc02c40609242993aad'],False,"['PartiallyOrderedSet.java', 'PartiallyOrderedSetTest.java']"
1e6d205e8e36b818445aeec692c105221fc160e0,"[CALCITE-6640] RelMdUniqueKeys generates non-minimal keys when columns are repeated in projections

The UniqueKeys API defines that returned keys must be minimal and this contract is violated by the default metadata provider when key columns are repeated in projections.
Not-minimal keys are redundant and very expensive to compute so the changes here ensure that only minimal keys are generated when deriving keys from projections.

Close apache/calcite#4013",['72e689e22c288789c322e498f0eacd45bebb375a'],False,"['RelMdUniqueKeys.java', 'RelMetadataTest.java']"
648a832e0b3abc0f1cd4887847bdef7c133cb383,"[CALCITE-6704] Limit result size of RelMdUniqueKeys handler

For certain query patterns RelMdUniqueKeys handler generates an
exponentially large number of unique keys that results into crashes
and OOM errors. The limit guards against the combinatorial explosion
that may appear for such use-cases and provides the users of a way to
tune further the upper bound if needed.

Close apache/calcite#4089",['01cfeeea8e41f97e40ef0ffa8a082b58414702ff'],False,"['RelMdUniqueKeys.java', 'RelMetadataTest.java', 'history.md', 'RelMetadataFixture.java']"
fae49bc06a9dac705fb266b7883d5f951cb4da57,"[CALCITE-6691] QUALIFY on project references wrong columns

The bug was that we were translating the QUALIFY expression after
the SELECT clause, and the mapping was wrong if columns had moved
around of it the expressions were non-trivial. The fix is to convert
the QUALIFY expression at the same time as the HAVING expression.

Also add support for a QUALIFY clause in a query with a GROUP BY. In
this case, the QUALIFY expression may reference aggregate functions.
Previously such queries would give a ClassCastException (trying to
convert a LogicalAggregate to a LogicalProject).

If a QUALIFY expression references or duplicates an expression in the
SELECT clause, we no longer detect and deduplicate that. This has
made one or two plans more verbose. Potentially we would add back
deduplication. Or just let Calc do common subexpression elimination
later in the planning process, as it always has done.

Also refactor SqlToRelConverter. Previously we were creating some
`SqlNodeList` wrappers only to use their `accept(SqlVisitor)` method;
now we leave them as `List<SqlNode>` and call new method
`SqlVisitor.visitAll(List<SqlNode>)`.

Close apache/calcite#4061",['0badcce0d8b6b0b2d0e2e03305eb5e27b873c750'],False,"['SqlVisitor.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'qualify.iq']"
657f871bc28780eb91162e6231a35e00298f6a9a,"[CALCITE-6759] SqlToRelConverter should not remove ORDER BY in subquery if it has an OFFSET

While an ORDER BY on its own can be ignored, an ORDER BY with
an OFFSET or FETCH cannot be removed from the subquery without
changing the semantics.

Close apache/calcite#4119",['19d3730c92f7bd518ef3763247410033c2f3840f'],False,"['RelOptUtil.java', 'SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'sub-query.iq']"
7ad5a39a8f6701200d9ed0d6dc1febd0a507328b,"[CALCITE-6301] Following ""must-filter"" columns, add ""bypass"" columns

In [CALCITE-6219], we introduced `interface SemanticTable`. A
table that implements this interface can define ""must-filter""
fields; a query that does not filter those fields in its
WHERE or HAVING clause will throw a validation error.

In this commit, we allow ""bypass"" fields. If a query filters
on any bypass field in its WHERE or HAVING clause, then the
must-filter fields are ignored (""defused"").

Add `class FilterRequirement`, which holds must-filter
fields, bypass fields, and an internal concept called
""remnant-filter"" fields.

Various tidy-ups (Julian Hyde): improve javadoc formatting,
remove accessor methods to public final fields, and use the
new `ImmutableBitSet.stream()` method.

Close apache/calcite#3984",['a6010402746a2b9ab3f21a96fe2c2d7e64b1856b'],False,"['AbstractNamespace.java', 'FilterRequirement.java', 'IdentifierNamespace.java', 'SemanticTable.java', 'SqlValidatorImpl.java', 'SqlValidatorNamespace.java', 'TableNamespace.java', 'WithItemNamespace.java', 'WithNamespace.java', 'SqlValidatorTest.java', 'MockCatalogReader.java', 'MustFilterMockCatalogReader.java']"
2a89ec92becee9c9df61005f40407ba65cabd682,[CALCITE-2295] Correlated SubQuery with Project will generate error plan,['f9cc84f35aeba0effd6654da8471d4bef9eaa925'],False,"['RelOptRulesTest.java', 'RelOptRulesTest.xml']"
f24a3eba895b0ba36cd971f59ebfc7f2d0bb36d6,Update document for resolve in SqlValidatorScope,['6f86860a85815ae6031fa9de79014c7b2a45017e'],False,['SqlValidatorScope.java']
5c7ead4ba7f29dbf5412fb2fb551fef01f83ce62,[CALCITE-6803] Publish website: error while trying to write to /home/,['c79d6d4975f543207594bb8c70acd913afdc3f9c'],False,"['publish-non-release-website-updates.yml', 'publish-website-on-release.yml', 'README.md', 'docker-compose.yml']"
b901b415e17bc876213e99efe361bf55278d622f,"[CALCITE-6806] Add CI action to ensure site remains buildable after changes

Close apache/calcite#4173",['55f6edb2de9930124c06c63ccc5ab0441b73c3b8'],False,['site.yml']
929d9b426bcdc0f6968ac169b8a3e41746416be5,"[CALCITE-6827] Build failure due to json-smart version mismatch

Add version contraint ensuring that we are always using the 2.3 version for json-smart.

There is a transitive dependecy to json-smart from the piglet module with a version range [1.3.1,2.3]:

project :piglet > org.apache.hadoop:hadoop-common:2.10.2 > org.apache.hadoop:hadoop-auth:2.10.2 > com.nimbusds:nimbus-jose-jwt:7.9

The maven-metadata.xml of json-smart in Maven central [1] is used to resolve version ranges.
After the 2.5.2 relase of json-smart [2] the previous versions were removed from the metadata file leading to failures in the resolution of ranged versions.

Using a version constraint by-passes the ranged version problem and improves build stability.

[1] https://repo.maven.apache.org/maven2/net/minidev/json-smart/maven-metadata.xml
[2] https://github.com/netplex/json-smart-v2/issues/240",['4fedf95c24d05e1ca71fb7a576c4a704846a7c75'],False,"['build.gradle.kts', 'gradle.properties']"
5f1f2fff968ffc890ab7b3f6ced0a38e2c7aecec,[CALCITE-6839] The SUM function sometimes throws overflow exceptions due to incorrect return types,['91ec8d052924ba74ffdad4f0785477f7e1b6793a'],False,"['CoreQuidemTest.java', 'agg.iq', 'CustomTypeSystems.java']"
efafa4fd40d92aff9909b51c18719ebc82592e88,"[CALCITE-6728] Introduce new methods to lookup tables and schemas inside schemas

[CALCITE-6728] Changes due to the PR review

[CALCITE-6728] Changes due to the second PR review

[CALCITE-6728] Fix typo",['0ff9fcf1e7763434b49aa215c071adcfe28ea097'],False,"['BabelQuidemTest.java', 'CassandraSchema.java', 'CloneSchema.java', 'JdbcBaseSchema.java', 'JdbcCatalogSchema.java', 'JdbcSchema.java', 'TableScanNode.java', 'CachingCalciteSchema.java', 'CalciteMetaImpl.java', 'CalciteSchema.java', 'SimpleCalciteSchema.java', 'ModelHandler.java', 'CalciteCatalogReader.java', 'RelOptTableImpl.java', 'Schema.java', 'SchemaPlus.java', 'Schemas.java', 'AbstractSchema.java', 'DelegatingSchema.java', 'CompatibilityLookup.java', 'ConcatLookup.java', 'EmptyLookup.java', 'IgnoreCaseLookup.java', 'LikePattern.java', 'LoadingCacheLookup.java', 'Lookup.java', 'NameMapLookup.java', 'Named.java', 'SnapshotLookup.java', 'TransformingLookup.java', 'package-info.java', 'LazyReference.java', 'ConcatLookupTest.java', 'FakeLookup.java', 'IgnoreCaseLookupTest.java', 'LoadingCacheLookupTest.java', 'SnapshotLookupTest.java', 'TransformingLookupTest.java', 'JdbcTest.java', 'LatticeTest.java', 'LinqFrontJdbcBackTest.java', 'MultiJdbcSchemaJoinTest.java', 'ReflectiveSchemaTest.java', 'TableFunctionTest.java', 'FrameworksTest.java', 'DruidAdapter2IT.java', 'DruidAdapterIT.java', 'MatchTest.java', 'TpcdsTest.java', 'ServerDdlExecutor.java', 'history.md', 'CalciteAssert.java', 'QuidemTest.java']"
9b51667eebc825d5d3ece72cfcdb5d2efaa2d56f,[CALCITE-6895] Change JdbcTest.testVersion to strictly match minor version in gradle.properties,['f0195df7fe18b8d99d5e1d259a3e35834e4c77e2'],False,"['JdbcTest.java', 'howto.md']"
254f2bac7b25643667f01aab9e14b0f32dc4a8bd,"[CALCITE-6834] In query that applies COALESCE to nullable SUM,EnumerableProjectToCalcRule throws AssertionError",['29e20ee16bdcaaa29cad9d8d553c095bdb77fdf3'],False,"['ProjectAggregateMergeRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'agg.iq']"
7ac3ac8725e2577e217fdd21bac828d554ee6d7b,"[CALCITE-6911] SqlItemOperator.inferReturnType throws AssertionError for out of bounds accesses

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['f0ce9ea8987fe7df1a41a5223d6180c6dfeea620'],False,"['CalciteResource.java', 'SqlItemOperator.java', 'CalciteResource.properties', 'SqlValidatorTest.java', 'operator.iq', 'reference.md', 'MockSqlOperatorTable.java', 'SqlOperatorTest.java']"
4c839f6cc1c7d1b89094b3f7de2f752c7eb4546f,"[CALCITE-6934] The examples for DDL extension on the official website cannot run

[CALCITE-6934] Fix wrong jdbc property value in DDL extensions examples

[CALCITE-6934] The examples for DDL extension on the official website cannot run

[CALCITE-6934] The examples for DDL extension on the official website cannot run",['69bfec3dd298a81afb4c1f43f7520ab6f74c6a59'],False,"['build.gradle.kts', 'adapter.md', 'reference.md']"
9b91d319e720ce03cf4d8befae0d5a192a93be99,[CALCITE-6945] Use LITERAL_AGG to simplify SubQueryRemoveRule by avoiding the extra Project,['d3d5f10dbaf8078970c5a0ee51271108e449649a'],False,"['SubQueryRemoveRule.java', 'RelBuilder.java', 'RelOptRulesTest.xml', 'sub-query.iq']"
8634981f3d29d6827cede5b0438c85f07f80db91,"[CALCITE-2636] SQL parser has quadratic running time when SQL string is very large

The problem is that JavaCC continually resizes its buffer by
2K increments, which results in O(n ^ 2) bytes being copied
because many resize operations are required. The solution is
to intervene and set JavaCC's buffer to the correct size
before parsing begins.

Close apache/calcite#4316",['7563e44b2320ef2d90ca4284ea668ea13836abc7'],False,"['Parser.jj', 'SqlParserTest.java', 'TestUtil.java', 'TestUtilTest.java']"
8f1dce91b61309db67355fa62372cff45d9803e9,[CALCITE-6966] Change JoinConditionOrExpansionRule name and accept more predicates that will allow the expansion to be performed,['8634981f3d29d6827cede5b0438c85f07f80db91'],False,"['CoreRules.java', 'JoinExpandOrToUnionRule.java', 'JdbcTest.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
c645c560f637bd93a6d6c9dfc8250d6d32f5b98e,"Bump nokogiri from 1.18.2 to 1.18.8 in /site

Bumps [nokogiri](https://github.com/sparklemotion/nokogiri) from 1.18.2 to 1.18.8.
- [Release notes](https://github.com/sparklemotion/nokogiri/releases)
- [Changelog](https://github.com/sparklemotion/nokogiri/blob/main/CHANGELOG.md)
- [Commits](https://github.com/sparklemotion/nokogiri/compare/v1.18.2...v1.18.8)

---
updated-dependencies:
- dependency-name: nokogiri
  dependency-version: 1.18.8
  dependency-type: direct:production
...

Signed-off-by: dependabot[bot] <support@github.com>",['cfa464d75be3f3cd80832efef06100eff765f545'],False,"['Gemfile', 'Gemfile.lock']"
cb27eed9d79a186a5c3c24effaead520f899dcdc,"[CALCITE-6946] Expand predicates from disjunction for inputs of Join

[CALCITE-6946] Expand predicates from disjunction for inputs of Join

[CALCITE-6946] Abstract common part for ExpandDisjunctionHelper

[CALCITE-6946] Update javadoc

[CALCITE-6946] Abstract exponential explosion error for RexUtil and add quidem test

[CALCITE-6946] Update for checkstyle

[CALCITE-6946] Set iq planner-rules original

[CALCITE-6946] Update Exception name",['a541ce7a9cb528b1a7870f3b723acda62c4f1828'],False,"['CoreRules.java', 'ExpandDisjunctionForJoinInputsRule.java', 'ExpandDisjunctionForTableRule.java', 'RexUtil.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml', 'planner.iq']"
19ce56761e0b377f2b3e1d7286bcde969ed8e8db,"Update documentation for example0 in RelBuilderExample

This corrects the comment for `example0` to accurately describe the code's behavior.

**Problem**:
The original comment incorrectly stated that the code performs a table scan (`SELECT * FROM emp`). However, the code uses the `VALUES` clause to create an inline table of literal values.

**Fix**:
The comment has been updated to reflect the actual behavior, which is equivalent to:
`VALUES (1, TRUE), (NULL, FALSE)`.

**Impact**:
Developers referencing this example will now see documentation that aligns with the code’s functionality.

Thank you for considering this improvement! 🙏

Update RelBuilderExample.java

i changed the format, thanks",['eeb9c3d076889a5bf25d28a24318e5c1c6c89549'],False,['RelBuilderExample.java']
1fb956b5055810bef0c27c436100b875d375c393,"Bump json from 2.10.1 to 2.10.2 in /site

Bumps [json](https://github.com/ruby/json) from 2.10.1 to 2.10.2.
- [Release notes](https://github.com/ruby/json/releases)
- [Changelog](https://github.com/ruby/json/blob/master/CHANGES.md)
- [Commits](https://github.com/ruby/json/compare/v2.10.1...v2.10.2)

---
updated-dependencies:
- dependency-name: json
  dependency-version: 2.10.2
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",['412ac801ebc9484521ec469661c71011ad0ef9b9'],False,['Gemfile.lock']
4ee33c9488740e41311c51735538dbac9e5abc4d,[CALCITE-7001] Cast of malformed literal to TIMESTAMP WITH LOCAL TIME ZONE need to throw informative error,['1bf07c5b7c90eba901cb8123661d8b78dcc16fce'],False,"['RexBuilder.java', 'TimestampWithTimeZoneString.java', 'RexBuilderTest.java', 'SqlFunctionsTest.java', 'misc.iq']"
79301845a895b58c08981c644464162251626dcb,"[CALCITE-7022] Decouple ModelHandler from CalciteConnection

ModelHandler is mainly a parser that can transform YAML/JSON files into SchemaPlus objects.

Currently, the class requires a CalciteConnection in order to be instantiated and the latter is a pretty heavyweight object. The usage of the CalciteConnection makes it rather cumbersome to instantiate and use the parsing capabilities of the ModelHander independently.

In reality though, the handler does not need much from the CalciteConnection and we could easily refactor the handler to not depend on the connection at all.

The motivation for this change is to facilitate the creation of schema objects from YAML/JSON files.",['988caace5c423c2c98f60e3beeee6d0e660d3111'],False,"['Driver.java', 'ModelHandler.java', 'ModelHandlerTest.java', 'hsqldb-scott.json']"
60e1b72fa164f0e06740bd3bf3f46a9725a87ab8,"[CALCITE-6978] Translation to relational algebra of correlated query with COALESCE causes an assertion failure

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['0748e44459809b5ddb86b32600523e2a57f35e43'],False,"['SqlValidatorImpl.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'sub-query.iq']"
40e90998ac111a15838fe6cdb90c54aafa28cee0,"[CALCITE-7027] Improve error message in case of several `UNION`, `INTERSECT`, `EXCEPT` in a query",['00e09ac15e09f2e1bd49a8b461818bb0ae47dfbc'],False,"['SqlUtil.java', 'SqlValidatorTest.java']"
20d503d3b697779bec7e102977bd89107086661d,"Revert ""[CALCITE-6978] Translation to relational algebra of correlated query with COALESCE causes an assertion failure""

This reverts commit 60e1b72fa164f0e06740bd3bf3f46a9725a87ab8.

Reverting as CALCITE-7035 highlighted issues for missing rewrites of calls without implementors/converlet

This issue will be addressed by CALCITE-7012",['eee8c893dbd50e6a4e4d0c5684dcb49631a2ff9b'],False,"['SqlValidatorImpl.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'sub-query.iq']"
940cac570c704c344aefa6eb09fbacb267d9cc3d,[CALCITE-7009] AssertionError when converting query containing multiple correlated subqueries referencing different tables in FROM,['da6a2042f01c4bfa64253a040149a263d4923b43'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml', 'scalar.iq']"
5b5f39aa87eb39366022c44a2382afd8ea3d65be,"Disable test introduced in #43789 [CALCITE-7009] which breaks main

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['85d5b3ef9a9e68798e4930a2786c8233b71f050b'],False,['scalar.iq']
50a4ee02c67d348e35a1a1c4c9ba765a12d44ac1,"[CALCITE-7065] CoreRules.PROJECT_REDUCE_EXPRESSIONS crashes when applied to a lambda

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['5b5f39aa87eb39366022c44a2382afd8ea3d65be'],False,"['ReduceExpressionsRule.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
fd57e660f2dd76af0f68b36a09be6c0a9cd9ca0e,[CALCITE-7010] The well-known count bug,['50a4ee02c67d348e35a1a1c4c9ba765a12d44ac1'],False,"['RelDecorrelator.java', 'RelToSqlConverterTest.java', 'RelDecorrelatorTest.java', 'RelOptRulesTest.xml', 'SqlToRelConverterTest.xml', 'blank.iq', 'sub-query.iq']"
cf91ec8f36e1f7cf9656e2f794d8f78a2b43d88c,"[CALCITE-7070] FILTER_REDUCE_EXPRESSIONS crashes on expression BETWEEN ( NULL) AND X

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['84af5621db8150a503bc9e3c9d1c8b4158ddbc10'],False,"['RexSimplify.java', 'RelOptRulesTest.java', 'RelOptRulesTest.xml']"
2fb437b93774d3d69df66547715b374d9281fdbb,[CALCITE-7064] Test introduced in [CALCITE-7009] breaks the build for main,['2143c6b106581176cdb369f4b60223374d29353b'],False,"['RelOptUtil.java', 'RelFieldTrimmer.java', 'RexRewritingRelShuttle.java', 'RelOptUtilTest.java', 'RelFieldTrimmerTest.java', 'RelOptRulesTest.xml', 'scalar.iq']"
a6973bde8107a7c2a605a82c779a64fe28bdb5d1,"[CALCITE-6386] Elasticsearch adapter throws NullPointerException when used with with model.json and no username, password or pathPrefix",['c2282e5b296af953b01bedd90681aafdbc534385'],False,"['ElasticsearchSchemaFactory.java', 'ElasticSearchAdapterTest.java']"
0071f17c870858ff66129368cf7b70fb1d072c88,[CALCITE-7083] RelMdDistinctRowCount aggregates implementation problems,['df3b438ef124838f338fbbd1866c6da61b036890'],False,"['RelMdDistinctRowCount.java', 'RelMetadataTest.java']"
c437a9bbe6fe858efab146581c24cc89671408ef,"[CALCITE-7094] Using a type alias as a constructor function causes a validator assertion failure

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['cc3a4b7db3eb92f6ca3f952bd914a8ec0ed51818'],False,"['BabelQuidemTest.java', 'big-query.iq', 'ExplicitOperandTypeChecker.java']"
ca974f08cef081f56ad2b7056e23a13ef846c03a,"[CALCITE-7108] Upgrade aggdesigner-algorithm from 6.0 to 6.1

Per release notes of 6.1, upgrades commons-lang3 to fix CVE-2025-48924:
https://github.com/julianhyde/aggdesigner/blob/main/HISTORY.md#61--2025-07-24

Close apache/calcite#4477",['d63996d487d4395cefc65157ef4a5596741bfbcd'],False,"['TileSuggester.java', 'gradle.properties']"
7ecd358b2e4678e8c74e6689a235912361aa6a8a,"[CALCITE-6731] Support bitwise XOR (^) operator in SQL
- Implements the ""^"" bitwise operator for numeric and binary types.
- Adds @Nullable annotations to fix Checker Framework nullness issues.
- Fixes test framework to handle carets (^) correctly in SQL validation tests.

Signed-off-by: Mihai Budiu <mbudiu@feldera.com>",['347664b4943ba0680cd5aa7af23405ca5bdde08a'],False,"['Parser.jj', 'RexImpTable.java', 'SqlFunctions.java', 'SqlStdOperatorTable.java', 'SqlParserUtil.java', 'StringAndPos.java', 'OperandTypes.java', 'SqlAdvisorTest.java', 'SqlOperatorUnparseTest.java', 'SqlValidatorTest.java', 'operator.iq', 'unsigned.iq', 'UnsignedType.java', 'AbstractSqlTester.java', 'SqlTester.java', 'SqlOperatorFixtureImpl.java', 'SqlOperatorTest.java', 'SqlRuntimeTester.java', 'SqlValidatorFixture.java']"
d22a464b7ae4e75cddfb044f6885fd766cf231c9,"[CALCITE-7111] Add an API for finding common relational sub-expressions

1. Add basic/sample implementation for the new interface.
2. Add RelOptUtil#stripAll for stripping all planner nodes (HepVertex, RelSubset) from a RelNode tree.
3. Remove staleness TODO from CommonRelSubExprRule since the rule now has a concrete use-case and is covered by test cases.
4. Add a fixture for making suggester tests modular and extensible.",['66afac689ea5b3f59c8050f9a59619c5c5bee771'],False,"['CommonRelExpressionRegistry.java', 'CommonRelSubExprRule.java', 'RelOptUtil.java', 'RelCommonExpressionBasicSuggester.java', 'RelCommonExpressionSuggester.java', 'CommonRelSubExprRegisterRule.java', 'RelCommonExpressionBasicSuggesterTest.java', 'RelCommonExpressionBasicSuggesterTest.xml', 'RelSuggesterFixture.java']"
9710ccf28cab2f210a5a3e836b55b47da519f085,[CALCITE-7135] SqlToRelConverter throws AssertionError on ARRAY subquery order by a field that is not present on the final projection,['0d9219846c67f91db02eccc941d18d98151cca5c'],False,"['SqlToRelConverter.java', 'SqlToRelConverterTest.java', 'SqlToRelConverterTest.xml']"
ff103d885cc4344a45ea01a522a825e528000355,[CALCITE-7154] When the offset or limit of a SORT operation is of type BIGINT row count calculation overflows,['9710ccf28cab2f210a5a3e836b55b47da519f085'],False,"['RelMdMaxRowCount.java', 'RelMdMinRowCount.java', 'RelMdRowCount.java', 'RexLiteral.java', 'RelMetadataTest.java']"
